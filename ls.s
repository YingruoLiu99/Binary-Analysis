.text
.globl _start
.type _start,@function

# File:    /bin/ls
# Format:  elf64-x86-64
# Arch:    i386:x86-64
# Flags:   0x00000150 HAS_SYMS, DYNAMIC, D_PAGED
# Start:   0x00000000000067d0

# Sections:
# Idx  Name                 Size      VMA               LMA               File off  Align   
# 0    .interp              0000001c  0000000000000318  0000000000000318  00000318  2**0    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 1    .note.gnu.property   00000020  0000000000000338  0000000000000338  00000338  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 2    .note.gnu.build-id   00000024  0000000000000358  0000000000000358  00000358  2**2    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 3    .note.ABI-tag        00000020  000000000000037c  000000000000037c  0000037c  2**2    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 4    .gnu.hash            000000e4  00000000000003a0  00000000000003a0  000003a0  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 5    .dynsym              00000d08  0000000000000488  0000000000000488  00000488  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 6    .dynstr              0000064c  0000000000001190  0000000000001190  00001190  2**0    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 7    .gnu.version         00000116  00000000000017dc  00000000000017dc  000017dc  2**1    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 8    .gnu.version_r       00000070  00000000000018f8  00000000000018f8  000018f8  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 9    .rela.dyn            00001350  0000000000001968  0000000000001968  00001968  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 10   .rela.plt            000009f0  0000000000002cb8  0000000000002cb8  00002cb8  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 11   .init                0000001b  0000000000004000  0000000000004000  00004000  2**2    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'CODE']
# 12   .plt                 000006b0  0000000000004020  0000000000004020  00004020  2**4    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'CODE']
# 13   .plt.got             00000030  00000000000046d0  00000000000046d0  000046d0  2**4    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'CODE']
# 14   .plt.sec             000006a0  0000000000004700  0000000000004700  00004700  2**4    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'CODE']
# 15   .text                000127d2  0000000000004da0  0000000000004da0  00004da0  2**4    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'CODE']
# 16   .fini                0000000d  0000000000017574  0000000000017574  00017574  2**2    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'CODE']
# 17   .rodata              00005249  0000000000018000  0000000000018000  00018000  2**5    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 18   .eh_frame_hdr        0000092c  000000000001d24c  000000000001d24c  0001d24c  2**2    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 19   .eh_frame            00002fd8  000000000001db78  000000000001db78  0001db78  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'READONLY', 'DATA']
# 20   .init_array          00000008  0000000000022010  0000000000022010  00021010  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'DATA']
# 21   .fini_array          00000008  0000000000022018  0000000000022018  00021018  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'DATA']
# 22   .data.rel.ro         00000a38  0000000000022020  0000000000022020  00021020  2**5    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'DATA']
# 23   .dynamic             00000200  0000000000022a58  0000000000022a58  00021a58  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'DATA']
# 24   .got                 000003a0  0000000000022c58  0000000000022c58  00021c58  2**3    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'DATA']
# 25   .data                00000268  0000000000023000  0000000000023000  00022000  2**5    
#                          ['CONTENTS', 'ALLOC', 'LOAD', 'DATA']
# 26   .bss                 000012d8  0000000000023280  0000000000023280  00022268  2**5    
#                          ['ALLOC']
# 27   .gnu_debuglink       00000034  0000000000000000  0000000000000000  00022268  2**2    
#                          ['CONTENTS', 'READONLY']

# Disassembly of section .init

.section .init,"ax",@progbits

# ----------- Function 0 ------------ 
#
# startAddr  = 0x4000
# startindex = 0
# endAddr    = 0x401a
# endindex   = 7
# len        = 27 (0x1b)
# secid      = 11
# sec name   = .init
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0x4000:
     endbr64 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     Var0x22fd8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x22fd8
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x4016              # value ::  target: 0x4016 CodeAddr: 0x4016
     callq    *%rax                   # reg :: "*%rax" != "%rax" no target? 
#{'addr': 16404, 'op': 'callq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 5, 'size': 2}
Addr0x4016:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    

# Disassembly of section .plt

.section .plt,"ax",@progbits

# ----------- Function 1 ------------ 
#
# startAddr  = 0x4020
# startindex = 8
# endAddr    = 0x402c
# endindex   = 9
# len        = 13 (0xd)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4020:
     pushq    Var0x22c60(%rip)        # memOffsetBase ::  DataAddr: 0x22c60
     bnd jmp  *Var0x22c68(%rip)       # memOffsetBase ::  DataAddr: 0x22c68
#    JUMP TABLE 
#  
# ----------- Function 394 ------------ 
#
#   __ctype_toupper_loc@plt
# startAddr  = 0x4030
# startindex = 11
# endAddr    = 0x403e
# endindex   = 13
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x403f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4030:
     endbr64 
     pushq    $0x0                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 403 ------------ 
#
#   getenv@plt
# startAddr  = 0x4040
# startindex = 15
# endAddr    = 0x404e
# endindex   = 17
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x404f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4040:
     endbr64 
     pushq    $0x1                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 406 ------------ 
#
#   sigprocmask@plt
# startAddr  = 0x4050
# startindex = 19
# endAddr    = 0x405e
# endindex   = 21
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x405f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4050:
     endbr64 
     pushq    $0x2                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 408 ------------ 
#
#   __snprintf_chk@plt
# startAddr  = 0x4060
# startindex = 23
# endAddr    = 0x406e
# endindex   = 25
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x406f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4060:
     endbr64 
     pushq    $0x3                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 409 ------------ 
#
#   raise@plt
# startAddr  = 0x4070
# startindex = 27
# endAddr    = 0x407e
# endindex   = 29
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x407f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4070:
     endbr64 
     pushq    $0x4                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 410 ------------ 
#
#   abort@plt
# startAddr  = 0x4080
# startindex = 31
# endAddr    = 0x408e
# endindex   = 33
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x408f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4080:
     endbr64 
     pushq    $0x5                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 411 ------------ 
#
#   __errno_location@plt
# startAddr  = 0x4090
# startindex = 35
# endAddr    = 0x409e
# endindex   = 37
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x409f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4090:
     endbr64 
     pushq    $0x6                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 412 ------------ 
#
#   strncmp@plt
# startAddr  = 0x40a0
# startindex = 39
# endAddr    = 0x40ae
# endindex   = 41
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x40af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x40a0:
     endbr64 
     pushq    $0x7                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 413 ------------ 
#
#   localtime_r@plt
# startAddr  = 0x40b0
# startindex = 43
# endAddr    = 0x40be
# endindex   = 45
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x40bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x40b0:
     endbr64 
     pushq    $0x8                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 414 ------------ 
#
#   _exit@plt
# startAddr  = 0x40c0
# startindex = 47
# endAddr    = 0x40ce
# endindex   = 49
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x40cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x40c0:
     endbr64 
     pushq    $0x9                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 415 ------------ 
#
#   strcpy@plt
# startAddr  = 0x40d0
# startindex = 51
# endAddr    = 0x40de
# endindex   = 53
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x40df)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x40d0:
     endbr64 
     pushq    $0xa                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 416 ------------ 
#
#   __fpending@plt
# startAddr  = 0x40e0
# startindex = 55
# endAddr    = 0x40ee
# endindex   = 57
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x40ef)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x40e0:
     endbr64 
     pushq    $0xb                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 417 ------------ 
#
#   isatty@plt
# startAddr  = 0x40f0
# startindex = 59
# endAddr    = 0x40fe
# endindex   = 61
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x40ff)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x40f0:
     endbr64 
     pushq    $0xc                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 418 ------------ 
#
#   sigaction@plt
# startAddr  = 0x4100
# startindex = 63
# endAddr    = 0x410e
# endindex   = 65
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x410f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4100:
     endbr64 
     pushq    $0xd                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 419 ------------ 
#
#   iswcntrl@plt
# startAddr  = 0x4110
# startindex = 67
# endAddr    = 0x411e
# endindex   = 69
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x411f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4110:
     endbr64 
     pushq    $0xe                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 420 ------------ 
#
#   wcswidth@plt
# startAddr  = 0x4120
# startindex = 71
# endAddr    = 0x412e
# endindex   = 73
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x412f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4120:
     endbr64 
     pushq    $0xf                    # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 421 ------------ 
#
#   localeconv@plt
# startAddr  = 0x4130
# startindex = 75
# endAddr    = 0x413e
# endindex   = 77
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x413f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4130:
     endbr64 
     pushq    $0x10                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 422 ------------ 
#
#   mbstowcs@plt
# startAddr  = 0x4140
# startindex = 79
# endAddr    = 0x414e
# endindex   = 81
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x414f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4140:
     endbr64 
     pushq    $0x11                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 423 ------------ 
#
#   readlink@plt
# startAddr  = 0x4150
# startindex = 83
# endAddr    = 0x415e
# endindex   = 85
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x415f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4150:
     endbr64 
     pushq    $0x12                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 424 ------------ 
#
#   clock_gettime@plt
# startAddr  = 0x4160
# startindex = 87
# endAddr    = 0x416e
# endindex   = 89
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x416f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4160:
     endbr64 
     pushq    $0x13                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 425 ------------ 
#
#   setenv@plt
# startAddr  = 0x4170
# startindex = 91
# endAddr    = 0x417e
# endindex   = 93
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x417f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4170:
     endbr64 
     pushq    $0x14                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 426 ------------ 
#
#   textdomain@plt
# startAddr  = 0x4180
# startindex = 95
# endAddr    = 0x418e
# endindex   = 97
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x418f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4180:
     endbr64 
     pushq    $0x15                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 427 ------------ 
#
#   fclose@plt
# startAddr  = 0x4190
# startindex = 99
# endAddr    = 0x419e
# endindex   = 101
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x419f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4190:
     endbr64 
     pushq    $0x16                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 428 ------------ 
#
#   opendir@plt
# startAddr  = 0x41a0
# startindex = 103
# endAddr    = 0x41ae
# endindex   = 105
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x41af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x41a0:
     endbr64 
     pushq    $0x17                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 429 ------------ 
#
#   getpwuid@plt
# startAddr  = 0x41b0
# startindex = 107
# endAddr    = 0x41be
# endindex   = 109
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x41bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x41b0:
     endbr64 
     pushq    $0x18                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 430 ------------ 
#
#   bindtextdomain@plt
# startAddr  = 0x41c0
# startindex = 111
# endAddr    = 0x41ce
# endindex   = 113
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x41cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x41c0:
     endbr64 
     pushq    $0x19                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 431 ------------ 
#
#   dcgettext@plt
# startAddr  = 0x41d0
# startindex = 115
# endAddr    = 0x41de
# endindex   = 117
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x41df)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x41d0:
     endbr64 
     pushq    $0x1a                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 432 ------------ 
#
#   __ctype_get_mb_cur_max@plt
# startAddr  = 0x41e0
# startindex = 119
# endAddr    = 0x41ee
# endindex   = 121
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x41ef)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x41e0:
     endbr64 
     pushq    $0x1b                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 433 ------------ 
#
#   strlen@plt
# startAddr  = 0x41f0
# startindex = 123
# endAddr    = 0x41fe
# endindex   = 125
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x41ff)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x41f0:
     endbr64 
     pushq    $0x1c                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 434 ------------ 
#
#   __lxstat@plt
# startAddr  = 0x4200
# startindex = 127
# endAddr    = 0x420e
# endindex   = 129
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x420f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4200:
     endbr64 
     pushq    $0x1d                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 435 ------------ 
#
#   __stack_chk_fail@plt
# startAddr  = 0x4210
# startindex = 131
# endAddr    = 0x421e
# endindex   = 133
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x421f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4210:
     endbr64 
     pushq    $0x1e                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 436 ------------ 
#
#   getopt_long@plt
# startAddr  = 0x4220
# startindex = 135
# endAddr    = 0x422e
# endindex   = 137
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x422f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4220:
     endbr64 
     pushq    $0x1f                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 437 ------------ 
#
#   mbrtowc@plt
# startAddr  = 0x4230
# startindex = 139
# endAddr    = 0x423e
# endindex   = 141
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x423f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4230:
     endbr64 
     pushq    $0x20                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 438 ------------ 
#
#   strchr@plt
# startAddr  = 0x4240
# startindex = 143
# endAddr    = 0x424e
# endindex   = 145
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x424f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4240:
     endbr64 
     pushq    $0x21                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 439 ------------ 
#
#   getgrgid@plt
# startAddr  = 0x4250
# startindex = 147
# endAddr    = 0x425e
# endindex   = 149
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x425f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4250:
     endbr64 
     pushq    $0x22                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 440 ------------ 
#
#   __fxstatat@plt
# startAddr  = 0x4260
# startindex = 151
# endAddr    = 0x426e
# endindex   = 153
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x426f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4260:
     endbr64 
     pushq    $0x23                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 441 ------------ 
#
#   snprintf@plt
# startAddr  = 0x4270
# startindex = 155
# endAddr    = 0x427e
# endindex   = 157
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x427f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4270:
     endbr64 
     pushq    $0x24                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 442 ------------ 
#
#   __overflow@plt
# startAddr  = 0x4280
# startindex = 159
# endAddr    = 0x428e
# endindex   = 161
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x428f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4280:
     endbr64 
     pushq    $0x25                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 443 ------------ 
#
#   strrchr@plt
# startAddr  = 0x4290
# startindex = 163
# endAddr    = 0x429e
# endindex   = 165
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x429f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4290:
     endbr64 
     pushq    $0x26                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 444 ------------ 
#
#   fgetfilecon@plt
# startAddr  = 0x42a0
# startindex = 167
# endAddr    = 0x42ae
# endindex   = 169
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x42af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x42a0:
     endbr64 
     pushq    $0x27                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 445 ------------ 
#
#   gmtime_r@plt
# startAddr  = 0x42b0
# startindex = 171
# endAddr    = 0x42be
# endindex   = 173
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x42bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x42b0:
     endbr64 
     pushq    $0x28                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 446 ------------ 
#
#   lseek@plt
# startAddr  = 0x42c0
# startindex = 175
# endAddr    = 0x42ce
# endindex   = 177
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x42cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x42c0:
     endbr64 
     pushq    $0x29                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 447 ------------ 
#
#   gettimeofday@plt
# startAddr  = 0x42d0
# startindex = 179
# endAddr    = 0x42de
# endindex   = 181
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x42df)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x42d0:
     endbr64 
     pushq    $0x2a                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 448 ------------ 
#
#   __assert_fail@plt
# startAddr  = 0x42e0
# startindex = 183
# endAddr    = 0x42ee
# endindex   = 185
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x42ef)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x42e0:
     endbr64 
     pushq    $0x2b                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 449 ------------ 
#
#   __strtoul_internal@plt
# startAddr  = 0x42f0
# startindex = 187
# endAddr    = 0x42fe
# endindex   = 189
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x42ff)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x42f0:
     endbr64 
     pushq    $0x2c                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 450 ------------ 
#
#   fnmatch@plt
# startAddr  = 0x4300
# startindex = 191
# endAddr    = 0x430e
# endindex   = 193
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x430f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4300:
     endbr64 
     pushq    $0x2d                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 451 ------------ 
#
#   memset@plt
# startAddr  = 0x4310
# startindex = 195
# endAddr    = 0x431e
# endindex   = 197
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x431f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4310:
     endbr64 
     pushq    $0x2e                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 452 ------------ 
#
#   ioctl@plt
# startAddr  = 0x4320
# startindex = 199
# endAddr    = 0x432e
# endindex   = 201
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x432f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4320:
     endbr64 
     pushq    $0x2f                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 453 ------------ 
#
#   getcwd@plt
# startAddr  = 0x4330
# startindex = 203
# endAddr    = 0x433e
# endindex   = 205
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x433f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4330:
     endbr64 
     pushq    $0x30                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 454 ------------ 
#
#   strspn@plt
# startAddr  = 0x4340
# startindex = 207
# endAddr    = 0x434e
# endindex   = 209
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x434f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4340:
     endbr64 
     pushq    $0x31                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 455 ------------ 
#
#   closedir@plt
# startAddr  = 0x4350
# startindex = 211
# endAddr    = 0x435e
# endindex   = 213
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x435f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4350:
     endbr64 
     pushq    $0x32                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 456 ------------ 
#
#   memcmp@plt
# startAddr  = 0x4360
# startindex = 215
# endAddr    = 0x436e
# endindex   = 217
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x436f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4360:
     endbr64 
     pushq    $0x33                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 457 ------------ 
#
#   _setjmp@plt
# startAddr  = 0x4370
# startindex = 219
# endAddr    = 0x437e
# endindex   = 221
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x437f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4370:
     endbr64 
     pushq    $0x34                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 458 ------------ 
#
#   fputs_unlocked@plt
# startAddr  = 0x4380
# startindex = 223
# endAddr    = 0x438e
# endindex   = 225
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x438f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4380:
     endbr64 
     pushq    $0x35                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 459 ------------ 
#
#   calloc@plt
# startAddr  = 0x4390
# startindex = 227
# endAddr    = 0x439e
# endindex   = 229
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x439f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4390:
     endbr64 
     pushq    $0x36                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 460 ------------ 
#
#   lgetfilecon@plt
# startAddr  = 0x43a0
# startindex = 231
# endAddr    = 0x43ae
# endindex   = 233
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x43af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x43a0:
     endbr64 
     pushq    $0x37                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 461 ------------ 
#
#   strcmp@plt
# startAddr  = 0x43b0
# startindex = 235
# endAddr    = 0x43be
# endindex   = 237
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x43bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x43b0:
     endbr64 
     pushq    $0x38                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 462 ------------ 
#
#   signal@plt
# startAddr  = 0x43c0
# startindex = 239
# endAddr    = 0x43ce
# endindex   = 241
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x43cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x43c0:
     endbr64 
     pushq    $0x39                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 463 ------------ 
#
#   dirfd@plt
# startAddr  = 0x43d0
# startindex = 243
# endAddr    = 0x43de
# endindex   = 245
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x43df)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x43d0:
     endbr64 
     pushq    $0x3a                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 464 ------------ 
#
#   getpwnam@plt
# startAddr  = 0x43e0
# startindex = 247
# endAddr    = 0x43ee
# endindex   = 249
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x43ef)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x43e0:
     endbr64 
     pushq    $0x3b                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 465 ------------ 
#
#   __memcpy_chk@plt
# startAddr  = 0x43f0
# startindex = 251
# endAddr    = 0x43fe
# endindex   = 253
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x43ff)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x43f0:
     endbr64 
     pushq    $0x3c                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 466 ------------ 
#
#   sigemptyset@plt
# startAddr  = 0x4400
# startindex = 255
# endAddr    = 0x440e
# endindex   = 257
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x440f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4400:
     endbr64 
     pushq    $0x3d                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 467 ------------ 
#
#   memcpy@plt
# startAddr  = 0x4410
# startindex = 259
# endAddr    = 0x441e
# endindex   = 261
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x441f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4410:
     endbr64 
     pushq    $0x3e                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 468 ------------ 
#
#   getgrnam@plt
# startAddr  = 0x4420
# startindex = 263
# endAddr    = 0x442e
# endindex   = 265
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x442f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4420:
     endbr64 
     pushq    $0x3f                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 469 ------------ 
#
#   getfilecon@plt
# startAddr  = 0x4430
# startindex = 267
# endAddr    = 0x443e
# endindex   = 269
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x443f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4430:
     endbr64 
     pushq    $0x40                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 470 ------------ 
#
#   tzset@plt
# startAddr  = 0x4440
# startindex = 271
# endAddr    = 0x444e
# endindex   = 273
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x444f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4440:
     endbr64 
     pushq    $0x41                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 471 ------------ 
#
#   fileno@plt
# startAddr  = 0x4450
# startindex = 275
# endAddr    = 0x445e
# endindex   = 277
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x445f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4450:
     endbr64 
     pushq    $0x42                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 472 ------------ 
#
#   tcgetpgrp@plt
# startAddr  = 0x4460
# startindex = 279
# endAddr    = 0x446e
# endindex   = 281
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x446f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4460:
     endbr64 
     pushq    $0x43                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 473 ------------ 
#
#   __xstat@plt
# startAddr  = 0x4470
# startindex = 283
# endAddr    = 0x447e
# endindex   = 285
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x447f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4470:
     endbr64 
     pushq    $0x44                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 474 ------------ 
#
#   readdir@plt
# startAddr  = 0x4480
# startindex = 287
# endAddr    = 0x448e
# endindex   = 289
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x448f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4480:
     endbr64 
     pushq    $0x45                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 475 ------------ 
#
#   wcwidth@plt
# startAddr  = 0x4490
# startindex = 291
# endAddr    = 0x449e
# endindex   = 293
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x449f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4490:
     endbr64 
     pushq    $0x46                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 476 ------------ 
#
#   fflush@plt
# startAddr  = 0x44a0
# startindex = 295
# endAddr    = 0x44ae
# endindex   = 297
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x44af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x44a0:
     endbr64 
     pushq    $0x47                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 477 ------------ 
#
#   nl_langinfo@plt
# startAddr  = 0x44b0
# startindex = 299
# endAddr    = 0x44be
# endindex   = 301
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x44bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x44b0:
     endbr64 
     pushq    $0x48                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 478 ------------ 
#
#   __fxstat@plt
# startAddr  = 0x44c0
# startindex = 303
# endAddr    = 0x44ce
# endindex   = 305
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x44cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x44c0:
     endbr64 
     pushq    $0x49                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 479 ------------ 
#
#   strcoll@plt
# startAddr  = 0x44d0
# startindex = 307
# endAddr    = 0x44de
# endindex   = 309
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x44df)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x44d0:
     endbr64 
     pushq    $0x4a                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 480 ------------ 
#
#   mktime@plt
# startAddr  = 0x44e0
# startindex = 311
# endAddr    = 0x44ee
# endindex   = 313
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x44ef)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x44e0:
     endbr64 
     pushq    $0x4b                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 481 ------------ 
#
#   __freading@plt
# startAddr  = 0x44f0
# startindex = 315
# endAddr    = 0x44fe
# endindex   = 317
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x44ff)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x44f0:
     endbr64 
     pushq    $0x4c                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 482 ------------ 
#
#   fwrite_unlocked@plt
# startAddr  = 0x4500
# startindex = 319
# endAddr    = 0x450e
# endindex   = 321
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x450f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4500:
     endbr64 
     pushq    $0x4d                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 483 ------------ 
#
#   realloc@plt
# startAddr  = 0x4510
# startindex = 323
# endAddr    = 0x451e
# endindex   = 325
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x451f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4510:
     endbr64 
     pushq    $0x4e                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 484 ------------ 
#
#   stpncpy@plt
# startAddr  = 0x4520
# startindex = 327
# endAddr    = 0x452e
# endindex   = 329
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x452f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4520:
     endbr64 
     pushq    $0x4f                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 485 ------------ 
#
#   setlocale@plt
# startAddr  = 0x4530
# startindex = 331
# endAddr    = 0x453e
# endindex   = 333
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x453f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4530:
     endbr64 
     pushq    $0x50                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 486 ------------ 
#
#   __printf_chk@plt
# startAddr  = 0x4540
# startindex = 335
# endAddr    = 0x454e
# endindex   = 337
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x454f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4540:
     endbr64 
     pushq    $0x51                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 487 ------------ 
#
#   timegm@plt
# startAddr  = 0x4550
# startindex = 339
# endAddr    = 0x455e
# endindex   = 341
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x455f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4550:
     endbr64 
     pushq    $0x52                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 488 ------------ 
#
#   strftime@plt
# startAddr  = 0x4560
# startindex = 343
# endAddr    = 0x456e
# endindex   = 345
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x456f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4560:
     endbr64 
     pushq    $0x53                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 489 ------------ 
#
#   mempcpy@plt
# startAddr  = 0x4570
# startindex = 347
# endAddr    = 0x457e
# endindex   = 349
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x457f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4570:
     endbr64 
     pushq    $0x54                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 490 ------------ 
#
#   memmove@plt
# startAddr  = 0x4580
# startindex = 351
# endAddr    = 0x458e
# endindex   = 353
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x458f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4580:
     endbr64 
     pushq    $0x55                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 491 ------------ 
#
#   error@plt
# startAddr  = 0x4590
# startindex = 355
# endAddr    = 0x459e
# endindex   = 357
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x459f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4590:
     endbr64 
     pushq    $0x56                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 492 ------------ 
#
#   fseeko@plt
# startAddr  = 0x45a0
# startindex = 359
# endAddr    = 0x45ae
# endindex   = 361
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x45af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x45a0:
     endbr64 
     pushq    $0x57                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 493 ------------ 
#
#   unsetenv@plt
# startAddr  = 0x45b0
# startindex = 363
# endAddr    = 0x45be
# endindex   = 365
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x45bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x45b0:
     endbr64 
     pushq    $0x58                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 494 ------------ 
#
#   strtoul@plt
# startAddr  = 0x45c0
# startindex = 367
# endAddr    = 0x45ce
# endindex   = 369
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x45cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x45c0:
     endbr64 
     pushq    $0x59                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 495 ------------ 
#
#   __cxa_atexit@plt
# startAddr  = 0x45d0
# startindex = 371
# endAddr    = 0x45de
# endindex   = 373
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x45df)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x45d0:
     endbr64 
     pushq    $0x5a                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 496 ------------ 
#
#   wcstombs@plt
# startAddr  = 0x45e0
# startindex = 375
# endAddr    = 0x45ee
# endindex   = 377
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x45ef)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x45e0:
     endbr64 
     pushq    $0x5b                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 497 ------------ 
#
#   getxattr@plt
# startAddr  = 0x45f0
# startindex = 379
# endAddr    = 0x45fe
# endindex   = 381
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x45ff)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x45f0:
     endbr64 
     pushq    $0x5c                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 498 ------------ 
#
#   freecon@plt
# startAddr  = 0x4600
# startindex = 383
# endAddr    = 0x460e
# endindex   = 385
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x460f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4600:
     endbr64 
     pushq    $0x5d                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 499 ------------ 
#
#   gethostname@plt
# startAddr  = 0x4610
# startindex = 387
# endAddr    = 0x461e
# endindex   = 389
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x461f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4610:
     endbr64 
     pushq    $0x5e                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 500 ------------ 
#
#   sigismember@plt
# startAddr  = 0x4620
# startindex = 391
# endAddr    = 0x462e
# endindex   = 393
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x462f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4620:
     endbr64 
     pushq    $0x5f                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 501 ------------ 
#
#   exit@plt
# startAddr  = 0x4630
# startindex = 395
# endAddr    = 0x463e
# endindex   = 397
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x463f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4630:
     endbr64 
     pushq    $0x60                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 502 ------------ 
#
#   fwrite@plt
# startAddr  = 0x4640
# startindex = 399
# endAddr    = 0x464e
# endindex   = 401
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x464f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4640:
     endbr64 
     pushq    $0x61                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 503 ------------ 
#
#   __fprintf_chk@plt
# startAddr  = 0x4650
# startindex = 403
# endAddr    = 0x465e
# endindex   = 405
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x465f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4650:
     endbr64 
     pushq    $0x62                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 504 ------------ 
#
#   fflush_unlocked@plt
# startAddr  = 0x4660
# startindex = 407
# endAddr    = 0x466e
# endindex   = 409
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x466f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4660:
     endbr64 
     pushq    $0x63                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 505 ------------ 
#
#   mbsinit@plt
# startAddr  = 0x4670
# startindex = 411
# endAddr    = 0x467e
# endindex   = 413
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x467f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4670:
     endbr64 
     pushq    $0x64                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 506 ------------ 
#
#   iswprint@plt
# startAddr  = 0x4680
# startindex = 415
# endAddr    = 0x468e
# endindex   = 417
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x468f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4680:
     endbr64 
     pushq    $0x65                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 507 ------------ 
#
#   sigaddset@plt
# startAddr  = 0x4690
# startindex = 419
# endAddr    = 0x469e
# endindex   = 421
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x469f)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x4690:
     endbr64 
     pushq    $0x66                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 508 ------------ 
#
#   __ctype_tolower_loc@plt
# startAddr  = 0x46a0
# startindex = 423
# endAddr    = 0x46ae
# endindex   = 425
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x46af)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x46a0:
     endbr64 
     pushq    $0x67                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 509 ------------ 
#
#   __ctype_b_loc@plt
# startAddr  = 0x46b0
# startindex = 427
# endAddr    = 0x46be
# endindex   = 429
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x46bf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x46b0:
     endbr64 
     pushq    $0x68                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# ----------- Function 510 ------------ 
#
#   __sprintf_chk@plt
# startAddr  = 0x46c0
# startindex = 431
# endAddr    = 0x46ce
# endindex   = 433
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x46cf)
# secid      = 12
# sec name   = .plt
#  jumps out!
#
# -------------------------------------------

Addr0x46c0:
     endbr64 
     pushq    $0x69                   # imm :: 
     bnd jmp  Addr0x4020              # value ::  target: 0x4020 CodeAddr: 0x4020

# Disassembly of section .plt.got

.section .plt.got,"ax",@progbits

# ----------- Function 2 ------------ 
#
# startAddr  = 0x46d0
# startindex = 435
# endAddr    = 0x46da
# endindex   = 436
# len        = 11 (0xb)
# secid      = 13
# sec name   = .plt.got
# Falls through to next
#  jumps out!
#  has jump ptr!
#
# -------------------------------------------

Addr0x46d0:
     endbr64 
     bnd jmp  *Var0x22fc0(%rip)       # memOffsetBase ::  DataAddr: 0x22fc0
#    JUMP TABLE 
#  
# ----------- Function 3 ------------ 
#
# startAddr  = 0x46e0
# startindex = 438
# endAddr    = 0x46ea
# endindex   = 439
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x46eb)
# secid      = 13
# sec name   = .plt.got
#  has jump ptr!
#
# -------------------------------------------

Addr0x46e0:
     endbr64 
     bnd jmp  *Var0x22fe0(%rip)       # memOffsetBase ::  DataAddr: 0x22fe0
#    JUMP TABLE 
#  
# ----------- Function 4 ------------ 
#
# startAddr  = 0x46f0
# startindex = 441
# endAddr    = 0x46fa
# endindex   = 442
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x46fb)
# secid      = 13
# sec name   = .plt.got
#  has jump ptr!
#
# -------------------------------------------

Addr0x46f0:
     endbr64 
     bnd jmp  *Var0x22ff0(%rip)       # memOffsetBase ::  DataAddr: 0x22ff0
#    JUMP TABLE 
#  
# Disassembly of section .plt.sec

.section .plt.sec,"ax",@progbits

# ----------- Function 5 ------------ 
#
# startAddr  = 0x4700
# startindex = 444
# endAddr    = 0x470a
# endindex   = 445
# len        = 11 (0xb)
# secid      = 14
# sec name   = .plt.sec
# Falls through to next
#  jumps out!
#  has jump ptr!
#
# -------------------------------------------

Addr0x4700:
     endbr64 
     bnd jmp  *Var0x22c70(%rip)       # memOffsetBase ::  DataAddr: 0x22c70
#    JUMP TABLE 
#  
# ----------- Function 6 ------------ 
#
# startAddr  = 0x4710
# startindex = 447
# endAddr    = 0x471a
# endindex   = 448
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x471b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4710:
     endbr64 
     bnd jmp  *Var0x22c78(%rip)       # memOffsetBase ::  DataAddr: 0x22c78
#    JUMP TABLE 
#  
# ----------- Function 7 ------------ 
#
# startAddr  = 0x4720
# startindex = 450
# endAddr    = 0x472a
# endindex   = 451
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x472b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4720:
     endbr64 
     bnd jmp  *Var0x22c80(%rip)       # memOffsetBase ::  DataAddr: 0x22c80
#    JUMP TABLE 
#  
# ----------- Function 8 ------------ 
#
# startAddr  = 0x4730
# startindex = 453
# endAddr    = 0x473a
# endindex   = 454
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x473b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4730:
     endbr64 
     bnd jmp  *Var0x22c88(%rip)       # memOffsetBase ::  DataAddr: 0x22c88
#    JUMP TABLE 
#  
# ----------- Function 9 ------------ 
#
# startAddr  = 0x4740
# startindex = 456
# endAddr    = 0x474a
# endindex   = 457
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x474b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4740:
     endbr64 
     bnd jmp  *Var0x22c90(%rip)       # memOffsetBase ::  DataAddr: 0x22c90
#    JUMP TABLE 
#  
# ----------- Function 10 ------------ 
#
# startAddr  = 0x4750
# startindex = 459
# endAddr    = 0x475a
# endindex   = 460
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x475b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4750:
     endbr64 
     bnd jmp  *Var0x22c98(%rip)       # memOffsetBase ::  DataAddr: 0x22c98
#    JUMP TABLE 
#  
# ----------- Function 11 ------------ 
#
# startAddr  = 0x4760
# startindex = 462
# endAddr    = 0x476a
# endindex   = 463
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x476b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4760:
     endbr64 
     bnd jmp  *Var0x22ca0(%rip)       # memOffsetBase ::  DataAddr: 0x22ca0
#    JUMP TABLE 
#  
# ----------- Function 12 ------------ 
#
# startAddr  = 0x4770
# startindex = 465
# endAddr    = 0x477a
# endindex   = 466
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x477b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4770:
     endbr64 
     bnd jmp  *Var0x22ca8(%rip)       # memOffsetBase ::  DataAddr: 0x22ca8
#    JUMP TABLE 
#  
# ----------- Function 13 ------------ 
#
# startAddr  = 0x4780
# startindex = 468
# endAddr    = 0x478a
# endindex   = 469
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x478b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4780:
     endbr64 
     bnd jmp  *Var0x22cb0(%rip)       # memOffsetBase ::  DataAddr: 0x22cb0
#    JUMP TABLE 
#  
# ----------- Function 14 ------------ 
#
# startAddr  = 0x4790
# startindex = 471
# endAddr    = 0x479a
# endindex   = 472
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x479b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4790:
     endbr64 
     bnd jmp  *Var0x22cb8(%rip)       # memOffsetBase ::  DataAddr: 0x22cb8
#    JUMP TABLE 
#  
# ----------- Function 15 ------------ 
#
# startAddr  = 0x47a0
# startindex = 474
# endAddr    = 0x47aa
# endindex   = 475
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x47ab)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x47a0:
     endbr64 
     bnd jmp  *Var0x22cc0(%rip)       # memOffsetBase ::  DataAddr: 0x22cc0
#    JUMP TABLE 
#  
# ----------- Function 16 ------------ 
#
# startAddr  = 0x47b0
# startindex = 477
# endAddr    = 0x47ba
# endindex   = 478
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x47bb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x47b0:
     endbr64 
     bnd jmp  *Var0x22cc8(%rip)       # memOffsetBase ::  DataAddr: 0x22cc8
#    JUMP TABLE 
#  
# ----------- Function 17 ------------ 
#
# startAddr  = 0x47c0
# startindex = 480
# endAddr    = 0x47ca
# endindex   = 481
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x47cb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x47c0:
     endbr64 
     bnd jmp  *Var0x22cd0(%rip)       # memOffsetBase ::  DataAddr: 0x22cd0
#    JUMP TABLE 
#  
# ----------- Function 18 ------------ 
#
# startAddr  = 0x47d0
# startindex = 483
# endAddr    = 0x47da
# endindex   = 484
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x47db)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x47d0:
     endbr64 
     bnd jmp  *Var0x22cd8(%rip)       # memOffsetBase ::  DataAddr: 0x22cd8
#    JUMP TABLE 
#  
# ----------- Function 19 ------------ 
#
# startAddr  = 0x47e0
# startindex = 486
# endAddr    = 0x47ea
# endindex   = 487
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x47eb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x47e0:
     endbr64 
     bnd jmp  *Var0x22ce0(%rip)       # memOffsetBase ::  DataAddr: 0x22ce0
#    JUMP TABLE 
#  
# ----------- Function 20 ------------ 
#
# startAddr  = 0x47f0
# startindex = 489
# endAddr    = 0x47fa
# endindex   = 490
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x47fb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x47f0:
     endbr64 
     bnd jmp  *Var0x22ce8(%rip)       # memOffsetBase ::  DataAddr: 0x22ce8
#    JUMP TABLE 
#  
# ----------- Function 21 ------------ 
#
# startAddr  = 0x4800
# startindex = 492
# endAddr    = 0x480a
# endindex   = 493
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x480b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4800:
     endbr64 
     bnd jmp  *Var0x22cf0(%rip)       # memOffsetBase ::  DataAddr: 0x22cf0
#    JUMP TABLE 
#  
# ----------- Function 22 ------------ 
#
# startAddr  = 0x4810
# startindex = 495
# endAddr    = 0x481a
# endindex   = 496
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x481b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4810:
     endbr64 
     bnd jmp  *Var0x22cf8(%rip)       # memOffsetBase ::  DataAddr: 0x22cf8
#    JUMP TABLE 
#  
# ----------- Function 23 ------------ 
#
# startAddr  = 0x4820
# startindex = 498
# endAddr    = 0x482a
# endindex   = 499
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x482b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4820:
     endbr64 
     bnd jmp  *Var0x22d00(%rip)       # memOffsetBase ::  DataAddr: 0x22d00
#    JUMP TABLE 
#  
# ----------- Function 24 ------------ 
#
# startAddr  = 0x4830
# startindex = 501
# endAddr    = 0x483a
# endindex   = 502
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x483b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4830:
     endbr64 
     bnd jmp  *Var0x22d08(%rip)       # memOffsetBase ::  DataAddr: 0x22d08
#    JUMP TABLE 
#  
# ----------- Function 395 ------------ 
#
# startAddr  = 0x4840
# startindex = 504
# endAddr    = 0x484a
# endindex   = 505
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x484b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4840:
     endbr64 
     bnd jmp  *Var0x22d10(%rip)       # memOffsetBase ::  DataAddr: 0x22d10
#    JUMP TABLE 
#  
# ----------- Function 25 ------------ 
#
# startAddr  = 0x4850
# startindex = 507
# endAddr    = 0x485a
# endindex   = 508
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x485b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4850:
     endbr64 
     bnd jmp  *Var0x22d18(%rip)       # memOffsetBase ::  DataAddr: 0x22d18
#    JUMP TABLE 
#  
# ----------- Function 26 ------------ 
#
# startAddr  = 0x4860
# startindex = 510
# endAddr    = 0x486a
# endindex   = 511
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x486b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4860:
     endbr64 
     bnd jmp  *Var0x22d20(%rip)       # memOffsetBase ::  DataAddr: 0x22d20
#    JUMP TABLE 
#  
# ----------- Function 27 ------------ 
#
# startAddr  = 0x4870
# startindex = 513
# endAddr    = 0x487a
# endindex   = 514
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x487b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4870:
     endbr64 
     bnd jmp  *Var0x22d28(%rip)       # memOffsetBase ::  DataAddr: 0x22d28
#    JUMP TABLE 
#  
# ----------- Function 28 ------------ 
#
# startAddr  = 0x4880
# startindex = 516
# endAddr    = 0x488a
# endindex   = 517
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x488b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4880:
     endbr64 
     bnd jmp  *Var0x22d30(%rip)       # memOffsetBase ::  DataAddr: 0x22d30
#    JUMP TABLE 
#  
# ----------- Function 29 ------------ 
#
# startAddr  = 0x4890
# startindex = 519
# endAddr    = 0x489a
# endindex   = 520
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x489b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4890:
     endbr64 
     bnd jmp  *Var0x22d38(%rip)       # memOffsetBase ::  DataAddr: 0x22d38
#    JUMP TABLE 
#  
# ----------- Function 30 ------------ 
#
# startAddr  = 0x48a0
# startindex = 522
# endAddr    = 0x48aa
# endindex   = 523
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x48ab)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x48a0:
     endbr64 
     bnd jmp  *Var0x22d40(%rip)       # memOffsetBase ::  DataAddr: 0x22d40
#    JUMP TABLE 
#  
# ----------- Function 31 ------------ 
#
# startAddr  = 0x48b0
# startindex = 525
# endAddr    = 0x48ba
# endindex   = 526
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x48bb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x48b0:
     endbr64 
     bnd jmp  *Var0x22d48(%rip)       # memOffsetBase ::  DataAddr: 0x22d48
#    JUMP TABLE 
#  
# ----------- Function 32 ------------ 
#
# startAddr  = 0x48c0
# startindex = 528
# endAddr    = 0x48ca
# endindex   = 529
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x48cb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x48c0:
     endbr64 
     bnd jmp  *Var0x22d50(%rip)       # memOffsetBase ::  DataAddr: 0x22d50
#    JUMP TABLE 
#  
# ----------- Function 33 ------------ 
#
# startAddr  = 0x48d0
# startindex = 531
# endAddr    = 0x48da
# endindex   = 532
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x48db)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x48d0:
     endbr64 
     bnd jmp  *Var0x22d58(%rip)       # memOffsetBase ::  DataAddr: 0x22d58
#    JUMP TABLE 
#  
# ----------- Function 34 ------------ 
#
# startAddr  = 0x48e0
# startindex = 534
# endAddr    = 0x48ea
# endindex   = 535
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x48eb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x48e0:
     endbr64 
     bnd jmp  *Var0x22d60(%rip)       # memOffsetBase ::  DataAddr: 0x22d60
#    JUMP TABLE 
#  
# ----------- Function 35 ------------ 
#
# startAddr  = 0x48f0
# startindex = 537
# endAddr    = 0x48fa
# endindex   = 538
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x48fb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x48f0:
     endbr64 
     bnd jmp  *Var0x22d68(%rip)       # memOffsetBase ::  DataAddr: 0x22d68
#    JUMP TABLE 
#  
# ----------- Function 36 ------------ 
#
# startAddr  = 0x4900
# startindex = 540
# endAddr    = 0x490a
# endindex   = 541
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x490b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4900:
     endbr64 
     bnd jmp  *Var0x22d70(%rip)       # memOffsetBase ::  DataAddr: 0x22d70
#    JUMP TABLE 
#  
# ----------- Function 37 ------------ 
#
# startAddr  = 0x4910
# startindex = 543
# endAddr    = 0x491a
# endindex   = 544
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x491b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4910:
     endbr64 
     bnd jmp  *Var0x22d78(%rip)       # memOffsetBase ::  DataAddr: 0x22d78
#    JUMP TABLE 
#  
# ----------- Function 38 ------------ 
#
# startAddr  = 0x4920
# startindex = 546
# endAddr    = 0x492a
# endindex   = 547
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x492b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4920:
     endbr64 
     bnd jmp  *Var0x22d80(%rip)       # memOffsetBase ::  DataAddr: 0x22d80
#    JUMP TABLE 
#  
# ----------- Function 39 ------------ 
#
# startAddr  = 0x4930
# startindex = 549
# endAddr    = 0x493a
# endindex   = 550
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x493b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4930:
     endbr64 
     bnd jmp  *Var0x22d88(%rip)       # memOffsetBase ::  DataAddr: 0x22d88
#    JUMP TABLE 
#  
# ----------- Function 40 ------------ 
#
# startAddr  = 0x4940
# startindex = 552
# endAddr    = 0x494a
# endindex   = 553
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x494b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4940:
     endbr64 
     bnd jmp  *Var0x22d90(%rip)       # memOffsetBase ::  DataAddr: 0x22d90
#    JUMP TABLE 
#  
# ----------- Function 41 ------------ 
#
# startAddr  = 0x4950
# startindex = 555
# endAddr    = 0x495a
# endindex   = 556
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x495b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4950:
     endbr64 
     bnd jmp  *Var0x22d98(%rip)       # memOffsetBase ::  DataAddr: 0x22d98
#    JUMP TABLE 
#  
# ----------- Function 42 ------------ 
#
# startAddr  = 0x4960
# startindex = 558
# endAddr    = 0x496a
# endindex   = 559
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x496b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4960:
     endbr64 
     bnd jmp  *Var0x22da0(%rip)       # memOffsetBase ::  DataAddr: 0x22da0
#    JUMP TABLE 
#  
# ----------- Function 43 ------------ 
#
# startAddr  = 0x4970
# startindex = 561
# endAddr    = 0x497a
# endindex   = 562
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x497b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4970:
     endbr64 
     bnd jmp  *Var0x22da8(%rip)       # memOffsetBase ::  DataAddr: 0x22da8
#    JUMP TABLE 
#  
# ----------- Function 396 ------------ 
#
# startAddr  = 0x4980
# startindex = 564
# endAddr    = 0x498a
# endindex   = 565
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x498b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4980:
     endbr64 
     bnd jmp  *Var0x22db0(%rip)       # memOffsetBase ::  DataAddr: 0x22db0
#    JUMP TABLE 
#  
# ----------- Function 44 ------------ 
#
# startAddr  = 0x4990
# startindex = 567
# endAddr    = 0x499a
# endindex   = 568
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x499b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4990:
     endbr64 
     bnd jmp  *Var0x22db8(%rip)       # memOffsetBase ::  DataAddr: 0x22db8
#    JUMP TABLE 
#  
# ----------- Function 45 ------------ 
#
# startAddr  = 0x49a0
# startindex = 570
# endAddr    = 0x49aa
# endindex   = 571
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x49ab)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x49a0:
     endbr64 
     bnd jmp  *Var0x22dc0(%rip)       # memOffsetBase ::  DataAddr: 0x22dc0
#    JUMP TABLE 
#  
# ----------- Function 46 ------------ 
#
# startAddr  = 0x49b0
# startindex = 573
# endAddr    = 0x49ba
# endindex   = 574
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x49bb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x49b0:
     endbr64 
     bnd jmp  *Var0x22dc8(%rip)       # memOffsetBase ::  DataAddr: 0x22dc8
#    JUMP TABLE 
#  
# ----------- Function 47 ------------ 
#
# startAddr  = 0x49c0
# startindex = 576
# endAddr    = 0x49ca
# endindex   = 577
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x49cb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x49c0:
     endbr64 
     bnd jmp  *Var0x22dd0(%rip)       # memOffsetBase ::  DataAddr: 0x22dd0
#    JUMP TABLE 
#  
# ----------- Function 48 ------------ 
#
# startAddr  = 0x49d0
# startindex = 579
# endAddr    = 0x49da
# endindex   = 580
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x49db)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x49d0:
     endbr64 
     bnd jmp  *Var0x22dd8(%rip)       # memOffsetBase ::  DataAddr: 0x22dd8
#    JUMP TABLE 
#  
# ----------- Function 49 ------------ 
#
# startAddr  = 0x49e0
# startindex = 582
# endAddr    = 0x49ea
# endindex   = 583
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x49eb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x49e0:
     endbr64 
     bnd jmp  *Var0x22de0(%rip)       # memOffsetBase ::  DataAddr: 0x22de0
#    JUMP TABLE 
#  
# ----------- Function 50 ------------ 
#
# startAddr  = 0x49f0
# startindex = 585
# endAddr    = 0x49fa
# endindex   = 586
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x49fb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x49f0:
     endbr64 
     bnd jmp  *Var0x22de8(%rip)       # memOffsetBase ::  DataAddr: 0x22de8
#    JUMP TABLE 
#  
# ----------- Function 51 ------------ 
#
# startAddr  = 0x4a00
# startindex = 588
# endAddr    = 0x4a0a
# endindex   = 589
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a0b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a00:
     endbr64 
     bnd jmp  *Var0x22df0(%rip)       # memOffsetBase ::  DataAddr: 0x22df0
#    JUMP TABLE 
#  
# ----------- Function 52 ------------ 
#
# startAddr  = 0x4a10
# startindex = 591
# endAddr    = 0x4a1a
# endindex   = 592
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a1b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a10:
     endbr64 
     bnd jmp  *Var0x22df8(%rip)       # memOffsetBase ::  DataAddr: 0x22df8
#    JUMP TABLE 
#  
# ----------- Function 53 ------------ 
#
# startAddr  = 0x4a20
# startindex = 594
# endAddr    = 0x4a2a
# endindex   = 595
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a2b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a20:
     endbr64 
     bnd jmp  *Var0x22e00(%rip)       # memOffsetBase ::  DataAddr: 0x22e00
#    JUMP TABLE 
#  
# ----------- Function 54 ------------ 
#
# startAddr  = 0x4a30
# startindex = 597
# endAddr    = 0x4a3a
# endindex   = 598
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a3b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a30:
     endbr64 
     bnd jmp  *Var0x22e08(%rip)       # memOffsetBase ::  DataAddr: 0x22e08
#    JUMP TABLE 
#  
# ----------- Function 55 ------------ 
#
# startAddr  = 0x4a40
# startindex = 600
# endAddr    = 0x4a4a
# endindex   = 601
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a4b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a40:
     endbr64 
     bnd jmp  *Var0x22e10(%rip)       # memOffsetBase ::  DataAddr: 0x22e10
#    JUMP TABLE 
#  
# ----------- Function 56 ------------ 
#
# startAddr  = 0x4a50
# startindex = 603
# endAddr    = 0x4a5a
# endindex   = 604
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a5b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a50:
     endbr64 
     bnd jmp  *Var0x22e18(%rip)       # memOffsetBase ::  DataAddr: 0x22e18
#    JUMP TABLE 
#  
# ----------- Function 57 ------------ 
#
# startAddr  = 0x4a60
# startindex = 606
# endAddr    = 0x4a6a
# endindex   = 607
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a6b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a60:
     endbr64 
     bnd jmp  *Var0x22e20(%rip)       # memOffsetBase ::  DataAddr: 0x22e20
#    JUMP TABLE 
#  
# ----------- Function 58 ------------ 
#
# startAddr  = 0x4a70
# startindex = 609
# endAddr    = 0x4a7a
# endindex   = 610
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a7b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a70:
     endbr64 
     bnd jmp  *Var0x22e28(%rip)       # memOffsetBase ::  DataAddr: 0x22e28
#    JUMP TABLE 
#  
# ----------- Function 59 ------------ 
#
# startAddr  = 0x4a80
# startindex = 612
# endAddr    = 0x4a8a
# endindex   = 613
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a8b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a80:
     endbr64 
     bnd jmp  *Var0x22e30(%rip)       # memOffsetBase ::  DataAddr: 0x22e30
#    JUMP TABLE 
#  
# ----------- Function 60 ------------ 
#
# startAddr  = 0x4a90
# startindex = 615
# endAddr    = 0x4a9a
# endindex   = 616
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4a9b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4a90:
     endbr64 
     bnd jmp  *Var0x22e38(%rip)       # memOffsetBase ::  DataAddr: 0x22e38
#    JUMP TABLE 
#  
# ----------- Function 61 ------------ 
#
# startAddr  = 0x4aa0
# startindex = 618
# endAddr    = 0x4aaa
# endindex   = 619
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4aab)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4aa0:
     endbr64 
     bnd jmp  *Var0x22e40(%rip)       # memOffsetBase ::  DataAddr: 0x22e40
#    JUMP TABLE 
#  
# ----------- Function 62 ------------ 
#
# startAddr  = 0x4ab0
# startindex = 621
# endAddr    = 0x4aba
# endindex   = 622
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4abb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ab0:
     endbr64 
     bnd jmp  *Var0x22e48(%rip)       # memOffsetBase ::  DataAddr: 0x22e48
#    JUMP TABLE 
#  
# ----------- Function 63 ------------ 
#
# startAddr  = 0x4ac0
# startindex = 624
# endAddr    = 0x4aca
# endindex   = 625
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4acb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ac0:
     endbr64 
     bnd jmp  *Var0x22e50(%rip)       # memOffsetBase ::  DataAddr: 0x22e50
#    JUMP TABLE 
#  
# ----------- Function 64 ------------ 
#
# startAddr  = 0x4ad0
# startindex = 627
# endAddr    = 0x4ada
# endindex   = 628
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4adb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ad0:
     endbr64 
     bnd jmp  *Var0x22e58(%rip)       # memOffsetBase ::  DataAddr: 0x22e58
#    JUMP TABLE 
#  
# ----------- Function 65 ------------ 
#
# startAddr  = 0x4ae0
# startindex = 630
# endAddr    = 0x4aea
# endindex   = 631
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4aeb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ae0:
     endbr64 
     bnd jmp  *Var0x22e60(%rip)       # memOffsetBase ::  DataAddr: 0x22e60
#    JUMP TABLE 
#  
# ----------- Function 66 ------------ 
#
# startAddr  = 0x4af0
# startindex = 633
# endAddr    = 0x4afa
# endindex   = 634
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4afb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4af0:
     endbr64 
     bnd jmp  *Var0x22e68(%rip)       # memOffsetBase ::  DataAddr: 0x22e68
#    JUMP TABLE 
#  
# ----------- Function 67 ------------ 
#
# startAddr  = 0x4b00
# startindex = 636
# endAddr    = 0x4b0a
# endindex   = 637
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b0b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b00:
     endbr64 
     bnd jmp  *Var0x22e70(%rip)       # memOffsetBase ::  DataAddr: 0x22e70
#    JUMP TABLE 
#  
# ----------- Function 68 ------------ 
#
# startAddr  = 0x4b10
# startindex = 639
# endAddr    = 0x4b1a
# endindex   = 640
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b1b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b10:
     endbr64 
     bnd jmp  *Var0x22e78(%rip)       # memOffsetBase ::  DataAddr: 0x22e78
#    JUMP TABLE 
#  
# ----------- Function 69 ------------ 
#
# startAddr  = 0x4b20
# startindex = 642
# endAddr    = 0x4b2a
# endindex   = 643
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b2b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b20:
     endbr64 
     bnd jmp  *Var0x22e80(%rip)       # memOffsetBase ::  DataAddr: 0x22e80
#    JUMP TABLE 
#  
# ----------- Function 70 ------------ 
#
# startAddr  = 0x4b30
# startindex = 645
# endAddr    = 0x4b3a
# endindex   = 646
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b3b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b30:
     endbr64 
     bnd jmp  *Var0x22e88(%rip)       # memOffsetBase ::  DataAddr: 0x22e88
#    JUMP TABLE 
#  
# ----------- Function 71 ------------ 
#
# startAddr  = 0x4b40
# startindex = 648
# endAddr    = 0x4b4a
# endindex   = 649
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b4b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b40:
     endbr64 
     bnd jmp  *Var0x22e90(%rip)       # memOffsetBase ::  DataAddr: 0x22e90
#    JUMP TABLE 
#  
# ----------- Function 72 ------------ 
#
# startAddr  = 0x4b50
# startindex = 651
# endAddr    = 0x4b5a
# endindex   = 652
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b5b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b50:
     endbr64 
     bnd jmp  *Var0x22e98(%rip)       # memOffsetBase ::  DataAddr: 0x22e98
#    JUMP TABLE 
#  
# ----------- Function 73 ------------ 
#
# startAddr  = 0x4b60
# startindex = 654
# endAddr    = 0x4b6a
# endindex   = 655
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b6b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b60:
     endbr64 
     bnd jmp  *Var0x22ea0(%rip)       # memOffsetBase ::  DataAddr: 0x22ea0
#    JUMP TABLE 
#  
# ----------- Function 397 ------------ 
#
# startAddr  = 0x4b70
# startindex = 657
# endAddr    = 0x4b7a
# endindex   = 658
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b7b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b70:
     endbr64 
     bnd jmp  *Var0x22ea8(%rip)       # memOffsetBase ::  DataAddr: 0x22ea8
#    JUMP TABLE 
#  
# ----------- Function 74 ------------ 
#
# startAddr  = 0x4b80
# startindex = 660
# endAddr    = 0x4b8a
# endindex   = 661
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b8b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b80:
     endbr64 
     bnd jmp  *Var0x22eb0(%rip)       # memOffsetBase ::  DataAddr: 0x22eb0
#    JUMP TABLE 
#  
# ----------- Function 75 ------------ 
#
# startAddr  = 0x4b90
# startindex = 663
# endAddr    = 0x4b9a
# endindex   = 664
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4b9b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4b90:
     endbr64 
     bnd jmp  *Var0x22eb8(%rip)       # memOffsetBase ::  DataAddr: 0x22eb8
#    JUMP TABLE 
#  
# ----------- Function 398 ------------ 
#
# startAddr  = 0x4ba0
# startindex = 666
# endAddr    = 0x4baa
# endindex   = 667
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4bab)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ba0:
     endbr64 
     bnd jmp  *Var0x22ec0(%rip)       # memOffsetBase ::  DataAddr: 0x22ec0
#    JUMP TABLE 
#  
# ----------- Function 76 ------------ 
#
# startAddr  = 0x4bb0
# startindex = 669
# endAddr    = 0x4bba
# endindex   = 670
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4bbb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4bb0:
     endbr64 
     bnd jmp  *Var0x22ec8(%rip)       # memOffsetBase ::  DataAddr: 0x22ec8
#    JUMP TABLE 
#  
# ----------- Function 77 ------------ 
#
# startAddr  = 0x4bc0
# startindex = 672
# endAddr    = 0x4bca
# endindex   = 673
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4bcb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4bc0:
     endbr64 
     bnd jmp  *Var0x22ed0(%rip)       # memOffsetBase ::  DataAddr: 0x22ed0
#    JUMP TABLE 
#  
# ----------- Function 78 ------------ 
#
# startAddr  = 0x4bd0
# startindex = 675
# endAddr    = 0x4bda
# endindex   = 676
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4bdb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4bd0:
     endbr64 
     bnd jmp  *Var0x22ed8(%rip)       # memOffsetBase ::  DataAddr: 0x22ed8
#    JUMP TABLE 
#  
# ----------- Function 79 ------------ 
#
# startAddr  = 0x4be0
# startindex = 678
# endAddr    = 0x4bea
# endindex   = 679
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4beb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4be0:
     endbr64 
     bnd jmp  *Var0x22ee0(%rip)       # memOffsetBase ::  DataAddr: 0x22ee0
#    JUMP TABLE 
#  
# ----------- Function 80 ------------ 
#
# startAddr  = 0x4bf0
# startindex = 681
# endAddr    = 0x4bfa
# endindex   = 682
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4bfb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4bf0:
     endbr64 
     bnd jmp  *Var0x22ee8(%rip)       # memOffsetBase ::  DataAddr: 0x22ee8
#    JUMP TABLE 
#  
# ----------- Function 81 ------------ 
#
# startAddr  = 0x4c00
# startindex = 684
# endAddr    = 0x4c0a
# endindex   = 685
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c0b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c00:
     endbr64 
     bnd jmp  *Var0x22ef0(%rip)       # memOffsetBase ::  DataAddr: 0x22ef0
#    JUMP TABLE 
#  
# ----------- Function 82 ------------ 
#
# startAddr  = 0x4c10
# startindex = 687
# endAddr    = 0x4c1a
# endindex   = 688
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c1b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c10:
     endbr64 
     bnd jmp  *Var0x22ef8(%rip)       # memOffsetBase ::  DataAddr: 0x22ef8
#    JUMP TABLE 
#  
# ----------- Function 83 ------------ 
#
# startAddr  = 0x4c20
# startindex = 690
# endAddr    = 0x4c2a
# endindex   = 691
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c2b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c20:
     endbr64 
     bnd jmp  *Var0x22f00(%rip)       # memOffsetBase ::  DataAddr: 0x22f00
#    JUMP TABLE 
#  
# ----------- Function 84 ------------ 
#
# startAddr  = 0x4c30
# startindex = 693
# endAddr    = 0x4c3a
# endindex   = 694
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c3b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c30:
     endbr64 
     bnd jmp  *Var0x22f08(%rip)       # memOffsetBase ::  DataAddr: 0x22f08
#    JUMP TABLE 
#  
# ----------- Function 85 ------------ 
#
# startAddr  = 0x4c40
# startindex = 696
# endAddr    = 0x4c4a
# endindex   = 697
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c4b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c40:
     endbr64 
     bnd jmp  *Var0x22f10(%rip)       # memOffsetBase ::  DataAddr: 0x22f10
#    JUMP TABLE 
#  
# ----------- Function 86 ------------ 
#
# startAddr  = 0x4c50
# startindex = 699
# endAddr    = 0x4c5a
# endindex   = 700
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c5b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c50:
     endbr64 
     bnd jmp  *Var0x22f18(%rip)       # memOffsetBase ::  DataAddr: 0x22f18
#    JUMP TABLE 
#  
# ----------- Function 87 ------------ 
#
# startAddr  = 0x4c60
# startindex = 702
# endAddr    = 0x4c6a
# endindex   = 703
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c6b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c60:
     endbr64 
     bnd jmp  *Var0x22f20(%rip)       # memOffsetBase ::  DataAddr: 0x22f20
#    JUMP TABLE 
#  
# ----------- Function 399 ------------ 
#
# startAddr  = 0x4c70
# startindex = 705
# endAddr    = 0x4c7a
# endindex   = 706
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c7b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c70:
     endbr64 
     bnd jmp  *Var0x22f28(%rip)       # memOffsetBase ::  DataAddr: 0x22f28
#    JUMP TABLE 
#  
# ----------- Function 404 ------------ 
#
# startAddr  = 0x4c80
# startindex = 708
# endAddr    = 0x4c8a
# endindex   = 709
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c8b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c80:
     endbr64 
     bnd jmp  *Var0x22f30(%rip)       # memOffsetBase ::  DataAddr: 0x22f30
#    JUMP TABLE 
#  
# ----------- Function 88 ------------ 
#
# startAddr  = 0x4c90
# startindex = 711
# endAddr    = 0x4c9a
# endindex   = 712
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4c9b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4c90:
     endbr64 
     bnd jmp  *Var0x22f38(%rip)       # memOffsetBase ::  DataAddr: 0x22f38
#    JUMP TABLE 
#  
# ----------- Function 400 ------------ 
#
# startAddr  = 0x4ca0
# startindex = 714
# endAddr    = 0x4caa
# endindex   = 715
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4cab)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ca0:
     endbr64 
     bnd jmp  *Var0x22f40(%rip)       # memOffsetBase ::  DataAddr: 0x22f40
#    JUMP TABLE 
#  
# ----------- Function 89 ------------ 
#
# startAddr  = 0x4cb0
# startindex = 717
# endAddr    = 0x4cba
# endindex   = 718
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4cbb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4cb0:
     endbr64 
     bnd jmp  *Var0x22f48(%rip)       # memOffsetBase ::  DataAddr: 0x22f48
#    JUMP TABLE 
#  
# ----------- Function 90 ------------ 
#
# startAddr  = 0x4cc0
# startindex = 720
# endAddr    = 0x4cca
# endindex   = 721
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4ccb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4cc0:
     endbr64 
     bnd jmp  *Var0x22f50(%rip)       # memOffsetBase ::  DataAddr: 0x22f50
#    JUMP TABLE 
#  
# ----------- Function 91 ------------ 
#
# startAddr  = 0x4cd0
# startindex = 723
# endAddr    = 0x4cda
# endindex   = 724
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4cdb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4cd0:
     endbr64 
     bnd jmp  *Var0x22f58(%rip)       # memOffsetBase ::  DataAddr: 0x22f58
#    JUMP TABLE 
#  
# ----------- Function 92 ------------ 
#
# startAddr  = 0x4ce0
# startindex = 726
# endAddr    = 0x4cea
# endindex   = 727
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4ceb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4ce0:
     endbr64 
     bnd jmp  *Var0x22f60(%rip)       # memOffsetBase ::  DataAddr: 0x22f60
#    JUMP TABLE 
#  
# ----------- Function 93 ------------ 
#
# startAddr  = 0x4cf0
# startindex = 729
# endAddr    = 0x4cfa
# endindex   = 730
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4cfb)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4cf0:
     endbr64 
     bnd jmp  *Var0x22f68(%rip)       # memOffsetBase ::  DataAddr: 0x22f68
#    JUMP TABLE 
#  
# ----------- Function 94 ------------ 
#
# startAddr  = 0x4d00
# startindex = 732
# endAddr    = 0x4d0a
# endindex   = 733
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d0b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d00:
     endbr64 
     bnd jmp  *Var0x22f70(%rip)       # memOffsetBase ::  DataAddr: 0x22f70
#    JUMP TABLE 
#  
# ----------- Function 95 ------------ 
#
# startAddr  = 0x4d10
# startindex = 735
# endAddr    = 0x4d1a
# endindex   = 736
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d1b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d10:
     endbr64 
     bnd jmp  *Var0x22f78(%rip)       # memOffsetBase ::  DataAddr: 0x22f78
#    JUMP TABLE 
#  
# ----------- Function 96 ------------ 
#
# startAddr  = 0x4d20
# startindex = 738
# endAddr    = 0x4d2a
# endindex   = 739
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d2b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d20:
     endbr64 
     bnd jmp  *Var0x22f80(%rip)       # memOffsetBase ::  DataAddr: 0x22f80
#    JUMP TABLE 
#  
# ----------- Function 97 ------------ 
#
# startAddr  = 0x4d30
# startindex = 741
# endAddr    = 0x4d3a
# endindex   = 742
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d3b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d30:
     endbr64 
     bnd jmp  *Var0x22f88(%rip)       # memOffsetBase ::  DataAddr: 0x22f88
#    JUMP TABLE 
#  
# ----------- Function 98 ------------ 
#
# startAddr  = 0x4d40
# startindex = 744
# endAddr    = 0x4d4a
# endindex   = 745
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d4b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d40:
     endbr64 
     bnd jmp  *Var0x22f90(%rip)       # memOffsetBase ::  DataAddr: 0x22f90
#    JUMP TABLE 
#  
# ----------- Function 99 ------------ 
#
# startAddr  = 0x4d50
# startindex = 747
# endAddr    = 0x4d5a
# endindex   = 748
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d5b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d50:
     endbr64 
     bnd jmp  *Var0x22f98(%rip)       # memOffsetBase ::  DataAddr: 0x22f98
#    JUMP TABLE 
#  
# ----------- Function 100 ------------ 
#
# startAddr  = 0x4d60
# startindex = 750
# endAddr    = 0x4d6a
# endindex   = 751
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d6b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d60:
     endbr64 
     bnd jmp  *Var0x22fa0(%rip)       # memOffsetBase ::  DataAddr: 0x22fa0
#    JUMP TABLE 
#  
# ----------- Function 101 ------------ 
#
# startAddr  = 0x4d70
# startindex = 753
# endAddr    = 0x4d7a
# endindex   = 754
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d7b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d70:
     endbr64 
     bnd jmp  *Var0x22fa8(%rip)       # memOffsetBase ::  DataAddr: 0x22fa8
#    JUMP TABLE 
#  
# ----------- Function 102 ------------ 
#
# startAddr  = 0x4d80
# startindex = 756
# endAddr    = 0x4d8a
# endindex   = 757
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d8b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d80:
     endbr64 
     bnd jmp  *Var0x22fb0(%rip)       # memOffsetBase ::  DataAddr: 0x22fb0
#    JUMP TABLE 
#  
# ----------- Function 103 ------------ 
#
# startAddr  = 0x4d90
# startindex = 759
# endAddr    = 0x4d9a
# endindex   = 760
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0x4d9b)
# secid      = 14
# sec name   = .plt.sec
#  has jump ptr!
#
# -------------------------------------------

Addr0x4d90:
     endbr64 
     bnd jmp  *Var0x22fb8(%rip)       # memOffsetBase ::  DataAddr: 0x22fb8
#    JUMP TABLE 
#  
# Disassembly of section .text

.section .text,"ax",@progbits

# ----------- Function 104 ------------ 
#
# startAddr  = 0x4da0
# startindex = 762
# endAddr    = 0x4da4
# endindex   = 762
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4da0:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 105 ------------ 
#
# startAddr  = 0x4da5
# startindex = 763
# endAddr    = 0x4da9
# endindex   = 763
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4da5:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 106 ------------ 
#
# startAddr  = 0x4daa
# startindex = 764
# endAddr    = 0x4dae
# endindex   = 764
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4daa:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 107 ------------ 
#
# startAddr  = 0x4daf
# startindex = 765
# endAddr    = 0x4db3
# endindex   = 765
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4daf:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 108 ------------ 
#
# startAddr  = 0x4db4
# startindex = 766
# endAddr    = 0x4db8
# endindex   = 766
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4db4:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 109 ------------ 
#
# startAddr  = 0x4db9
# startindex = 767
# endAddr    = 0x4dbd
# endindex   = 767
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4db9:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 110 ------------ 
#
# startAddr  = 0x4dbe
# startindex = 768
# endAddr    = 0x4dc2
# endindex   = 768
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4dbe:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 111 ------------ 
#
# startAddr  = 0x4dc3
# startindex = 769
# endAddr    = 0x4dc7
# endindex   = 769
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4dc3:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 112 ------------ 
#
# startAddr  = 0x4dc8
# startindex = 770
# endAddr    = 0x4dcc
# endindex   = 770
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4dc8:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 113 ------------ 
#
# startAddr  = 0x4dcd
# startindex = 771
# endAddr    = 0x4dd1
# endindex   = 771
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4dcd:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 114 ------------ 
#
# startAddr  = 0x4dd2
# startindex = 772
# endAddr    = 0x4dd6
# endindex   = 772
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4dd2:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 115 ------------ 
#
# startAddr  = 0x4dd7
# startindex = 773
# endAddr    = 0x4ddb
# endindex   = 773
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4dd7:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 116 ------------ 
#
# startAddr  = 0x4ddc
# startindex = 774
# endAddr    = 0x4de0
# endindex   = 774
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4ddc:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 117 ------------ 
#
# startAddr  = 0x4de1
# startindex = 775
# endAddr    = 0x4de5
# endindex   = 775
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4de1:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 118 ------------ 
#
# startAddr  = 0x4de6
# startindex = 776
# endAddr    = 0x4dea
# endindex   = 776
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4de6:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 119 ------------ 
#
# startAddr  = 0x4deb
# startindex = 777
# endAddr    = 0x4def
# endindex   = 777
# len        = 5 (0x5)
# secid      = 15
# sec name   = .text
# Falls through to next
#
# -------------------------------------------

Addr0x4deb:
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 120 ------------ 
#
# startAddr  = 0x4df0
# startindex = 778
# endAddr    = 0x67cc
# endindex   = 2107
# len        = 6621 (0x19dd)
# len1       = 6624 (0x19e0) to (0x67cd)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#  has jump ptr!
#
# -------------------------------------------

Addr0x4df0:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     movl     %edi,%r12d              # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movq     (%rsi),%rdi             # memBase,reg :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x132d0             # value ::  target: 0x132d0 CodeAddr: 0x132d0 CALLS 0x132d0
     leaq     Var0x197fe(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197fe
     movl     $0x6,%edi               # imm,reg :: 
     callq    Addr0x4c00              # value ::  target: 0x4c00 CodeAddr: 0x4c00 CALLS 0x4c00
     leaq     Var0x19949(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19949
     leaq     Var0x1992f(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1992f
     callq    Addr0x4890              # value ::  target: 0x4890 CodeAddr: 0x4890 CALLS 0x4890
     leaq     Var0x1992f(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1992f
     callq    Addr0x4850              # value ::  target: 0x4850 CodeAddr: 0x4850 CALLS 0x4850
     leaq     Addr0xdfe0(%rip),%rdi   # memOffsetBase,reg ::  CodeAddr: 0xdfe0
     movl     $0x2,Var0x231f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x231f8
     callq    Addr0x17560             # value ::  target: 0x17560 CodeAddr: 0x17560 CALLS 0x17560
     movb     $0x1,Var0x242b8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b8
     movabsq  $0x8000000000000000,%rax# imm,reg :: 
     movq     %rax,Var0x24370(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24370
     movl     Var0x231e0(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x231e0
     movl     $0x0,Var0x24210(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24210
     movq     $0x0,Var0x24380(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24380
     movq     $0xffffffffffffffff,Var0x24378(%rip)# imm,memOffsetBase ::  DataAddr: 0x24378
     movb     $0x0,Var0x242d8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242d8
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x5ce2              # value ::  target: 0x5ce2 CodeAddr: 0x5ce2
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x5088              # value ::  target: 0x5088 CodeAddr: 0x5088
     movl     $0x7,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
Addr0x4ed3:
     leaq     Var0x1995b(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1995b
     movb     $0x0,Var0x2432f(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432f
     movl     $0x0,Var0x24334(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24334
     movl     $0x0,Var0x24330(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24330
     movb     $0x0,Var0x2432d(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432d
     movb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c
     movl     $0x0,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314
     movb     $0x0,Var0x242fc(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fc
     movl     $0x1,Var0x242f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f8
     movb     $0x0,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6
     movb     $0x0,Var0x242f5(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f5
     movl     $0x0,Var0x242f0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f0
     movq     $0x0,Var0x242e8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242e8
     movq     $0x0,Var0x242e0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242e0
     movb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x4f96              # value ::  target: 0x4f96 CodeAddr: 0x4f96
     movl     $0x4,%ecx               # imm,reg :: 
     leaq     Var0x1c940(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c940
     leaq     Var0x22a00(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x22a00
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0xd4e0              # value ::  target: 0xd4e0 CodeAddr: 0xd4e0 CALLS 0xd4e0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0x5869              # value ::  target: 0x5869 CodeAddr: 0x5869
     cltq    
     leaq     Var0x1c940(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c940
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     (%rdx,%rax,4),%esi      # memBaseIndexScale,reg :: 
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
Addr0x4f96:
     leaq     Var0x19969(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19969
     movq     $0x50,Var0x242b0(%rip)  # imm,memOffsetBase ::  DataAddr: 0x242b0
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x4fbe              # value ::  target: 0x4fbe CodeAddr: 0x4fbe
     cmpb     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     jne      Addr0x589d              # value ::  target: 0x589d CodeAddr: 0x589d
Addr0x4fbe:
     leaq     0x20(%rsp),%r13         # memOffsetBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x5413,%esi            # imm,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     callq    Addr0x49f0              # value ::  target: 0x49f0 CodeAddr: 0x49f0 CALLS 0x49f0
     cmpl     $0xffffffff,%eax        # imm,reg ::  modifies flags!!
     je       Addr0x4fea              # value ::  target: 0x4fea CodeAddr: 0x4fea
     movzwl   0x22(%rsp),%eax         # memOffsetBase,reg :: 
     testw    %ax,%ax                 # reg,reg ::  modifies flags!!
     jne      Addr0x585d              # value ::  target: 0x585d CodeAddr: 0x585d
Addr0x4fea:
     leaq     Var0x19971(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19971
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     $0x8,Var0x242c0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242c0
     movq     %rax,%r14               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x502f              # value ::  target: 0x502f CodeAddr: 0x502f
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r13,%rcx               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x15db0             # value ::  target: 0x15db0 CodeAddr: 0x15db0 CALLS 0x15db0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x5d52              # value ::  target: 0x5d52 CodeAddr: 0x5d52
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,Var0x242c0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242c0
Addr0x502f:
     movb     $0x0,0x4(%rsp)          # imm,memOffsetBase :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     leaq     Var0x18158(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x18158
Addr0x5041:
     movq     %r13,%r8                # reg,reg :: 
     leaq     Var0x22300(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x22300
     movq     %rbp,%rsi               # reg,reg :: 
     movl     %r12d,%edi              # reg,reg :: 
     leaq     Var0x1bce8(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bce8
     movl     $0xffffffff,0x20(%rsp)  # imm,memOffsetBase :: 
     callq    Addr0x48f0              # value ::  target: 0x48f0 CodeAddr: 0x48f0 CALLS 0x48f0
     cmpl     $0xffffffff,%eax        # imm,reg ::  modifies flags!!
     je       Addr0x50d0              # value ::  target: 0x50d0 CodeAddr: 0x50d0
     addl     $0x83,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x113,%eax             # imm,reg ::  modifies flags!!
     ja       Addr0x6497              # value ::  target: 0x6497 CodeAddr: 0x6497
     movslq   (%rbx,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rbx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 20609, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 904, 'size': 3, 'jumpTable': 'unknown'}
Addr0x5088:
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x5cdd              # value ::  target: 0x5cdd CodeAddr: 0x5cdd
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x47c0              # value ::  target: 0x47c0 CodeAddr: 0x47c0 CALLS 0x47c0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x5ec8              # value ::  target: 0x5ec8 CodeAddr: 0x5ec8
     movl     $0x1,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x4ed3              # value ::  target: 0x4ed3 CodeAddr: 0x4ed3
     movl     $0x1,%r14d              # imm,reg :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x2432d(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432d
     movl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
Addr0x50d0:
     cmpq     $0x0,Var0x24320(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24320 modifies flags!!
     je       Addr0x5d86              # value ::  target: 0x5d86 CodeAddr: 0x5d86
Addr0x50de:
     movq     Var0x242b0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x242b0
     movl     $0x3,%ecx               # imm,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     setne    %dl                     # reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movzbl   %dl,%edx                # reg,reg :: 
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     movq     %rax,Var0x24200(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24200
     callq    Addr0x148a0             # value ::  target: 0x148a0 CodeAddr: 0x148a0 CALLS 0x148a0
     movl     Var0x24338(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24338
     movl     %eax,%ebx               # reg,reg :: 
     cmpl     $0x4,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x58e1              # value ::  target: 0x58e1 CodeAddr: 0x58e1
     cmpl     $0x1,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x58e1              # value ::  target: 0x58e1 CodeAddr: 0x58e1
     cmpq     $0x0,Var0x242b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b0 modifies flags!!
     jne      Addr0x5137              # value ::  target: 0x5137 CodeAddr: 0x5137
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     jne      Addr0x58e3              # value ::  target: 0x58e3 CodeAddr: 0x58e3
Addr0x5137:
     movl     %ebx,%eax               # reg,reg :: 
     andl     $0xfffffffd,%eax        # imm,reg ::  modifies flags!!
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x6,%ebx               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     orl      %edx,%eax               # reg,reg ::  modifies flags!!
     movzbl   %al,%eax                # reg,reg :: 
     jmp      Addr0x58e3              # value ::  target: 0x58e3 CodeAddr: 0x58e3
     movq     Var0x23298(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x23298
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x186d0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x186d0
     leaq     Var0x22240(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x22240
     leaq     Var0x199af(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199af
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x186d0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x186d0
     movl     (%rax,%r8,4),%eax       # memBaseIndexScale,reg :: 
     movl     %eax,Var0x24334(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24334
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x186f0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x186f0
     leaq     Var0x22280(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x22280
     leaq     Var0x199a8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199a8
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x186f0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x186f0
     movl     (%rax,%r8,4),%eax       # memBaseIndexScale,reg :: 
     movl     %eax,Var0x24330(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24330
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x90,Var0x24328(%rip)  # imm,memOffsetBase ::  DataAddr: 0x24328
     movl     $0x90,Var0x2431c(%rip)  # imm,memOffsetBase ::  DataAddr: 0x2431c
     movq     $0x1,Var0x24320(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24320
     movq     $0x1,Var0x23018(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23018
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x0,Var0x242d8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242d8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x1c940(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1c940
     leaq     Var0x22a00(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x22a00
     leaq     Var0x199e5(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199e5
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x1c940(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c940
     movl     (%rax,%r8,4),%esi       # memBaseIndexScale,reg :: 
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x18730(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x18730
     leaq     Var0x22960(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x22960
     leaq     Var0x199d3(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199d3
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x18730(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x18730
     movl     (%rax,%r8,4),%eax       # memBaseIndexScale,reg :: 
     movl     %eax,Var0x24314(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24314
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x5cc6              # value ::  target: 0x5cc6 CodeAddr: 0x5cc6
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x221e0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x221e0
     leaq     Var0x186a0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x186a0
     leaq     Var0x199c7(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199c7
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x186a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x186a0
     movl     (%rax,%r8,4),%edx       # memBaseIndexScale,reg :: 
     cmpl     $0x1,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x5cc6              # value ::  target: 0x5cc6 CodeAddr: 0x5cc6
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x2,%edx               # imm,reg ::  modifies flags!!
     jne      Addr0x5ccb              # value ::  target: 0x5ccb CodeAddr: 0x5ccb
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x47c0              # value ::  target: 0x47c0 CodeAddr: 0x47c0 CALLS 0x47c0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     jmp      Addr0x5ccb              # value ::  target: 0x5ccb CodeAddr: 0x5ccb
     movl     $0x10,%edi              # imm,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     Var0x23298(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x23298
     movq     %rdx,(%rax)             # reg,memBase :: 
     movq     Var0x242e0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x242e0
     movq     %rax,Var0x242e0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242e0
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x242f4(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f4
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     leaq     Var0x1993d(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x1993d
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x18710(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x18710
     leaq     Var0x222c0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x222c0
     leaq     Var0x199b6(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199b6
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x18710(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x18710
     movl     (%rax,%r8,4),%eax       # memBaseIndexScale,reg :: 
     movl     %eax,Var0x24338(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x2,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x4,Var0x242f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x23298(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23298
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x5caf              # value ::  target: 0x5caf CodeAddr: 0x5caf
     movq     Var0x231f0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x231f0
     movl     $0x4,%r8d               # imm,reg :: 
     leaq     Var0x186a0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x186a0
     leaq     Var0x221e0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x221e0
     leaq     Var0x199bf(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x199bf
     callq    Addr0xd7b0              # value ::  target: 0xd7b0 CodeAddr: 0xd7b0 CALLS 0xd7b0
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x186a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x186a0
     movl     (%rax,%r8,4),%eax       # memBaseIndexScale,reg :: 
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x5caf              # value ::  target: 0x5caf CodeAddr: 0x5caf
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x5c9d              # value ::  target: 0x5c9d CodeAddr: 0x5c9d
Addr0x5434:
     movb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x23298(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23298
     leaq     Var0x24320(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x24320
     leaq     Var0x24328(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24328
     callq    Addr0x109e0             # value ::  target: 0x109e0 CodeAddr: 0x109e0 CALLS 0x109e0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x6774              # value ::  target: 0x6774 CodeAddr: 0x6774
     movl     Var0x24328(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24328
     movl     %eax,Var0x2431c(%rip)   # reg,memOffsetBase ::  DataAddr: 0x2431c
     movq     Var0x24320(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24320
     movq     %rax,Var0x23018(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23018
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x3,Var0x24330(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24330
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x2,Var0x24334(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24334
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x4,Var0x24330(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24330
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x3,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x23298(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23298
     callq    Addr0x6bb0              # value ::  target: 0x6bb0 CodeAddr: 0x6bb0 CALLS 0x6bb0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x23298(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23298
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19979(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19979
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rbx,%r8                # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     $0x2,%edi               # imm,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     leaq     Var0x1998c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1998c
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     movb     $0x1,Var0x2432e(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432e
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x2432f(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432f
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x242d8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242d8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x1,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     movb     $0x0,Var0x23020(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23020
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x242fc(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fc
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0xb0,Var0x24328(%rip)  # imm,memOffsetBase ::  DataAddr: 0x24328
     movl     $0xb0,Var0x2431c(%rip)  # imm,memOffsetBase ::  DataAddr: 0x2431c
     movq     $0x1,Var0x24320(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24320
     movq     $0x1,Var0x23018(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23018
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     movb     $0x0,Var0x23021(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23021
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     cmpl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     movl     $0x2,Var0x242f0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f0
     movl     $0xffffffff,Var0x24330(%rip)# imm,memOffsetBase ::  DataAddr: 0x24330
     je       Addr0x6278              # value ::  target: 0x6278 CodeAddr: 0x6278
Addr0x55ee:
     movb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c
     movb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312
     movb     $0x0,Var0x24311(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24311
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x242f5(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f5
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x1,Var0x24334(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24334
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x7,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x2,Var0x242f0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x1,Var0x24330(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24330
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0xffffffff,Var0x24330(%rip)# imm,memOffsetBase ::  DataAddr: 0x24330
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19997(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19997
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     Var0x23298(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23298
     orq      $0xffffffffffffffff,%rcx# imm,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     pushq    %rdx                    # reg :: 
     movq     %rax,%r9                # reg,reg :: 
     leaq     Var0x197fe(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x197fe
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     pushq    $0x2                    # imm :: 
     callq    Addr0x15b70             # value ::  target: 0x15b70 CodeAddr: 0x15b70 CALLS 0x15b70
     popq     %rcx                    # reg :: 
     popq     %rsi                    # reg :: 
     movq     %rax,Var0x242c0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242c0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x2,Var0x24330(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24330
     movb     $0x1,0x4(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x5,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x5,Var0x242f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movq     Var0x23298(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     $0x10,%edi              # imm,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,(%rax)             # reg,memBase :: 
     movq     Var0x242e8(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x242e8
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rax,Var0x242e8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242e8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x3,Var0x242f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x0,Var0x23020(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23020
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x3,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movb     $0x1,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x2,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x10,%edi              # imm,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     Var0x242e8(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x242e8
     movl     $0x10,%edi              # imm,reg :: 
     leaq     Var0x19994(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x19994
     movq     %rcx,(%rax)             # reg,memBase :: 
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rax,Var0x242e8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242e8
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     Var0x242e8(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x242e8
     leaq     Var0x19993(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x19993
     movq     %rcx,(%rax)             # reg,memBase :: 
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rax,Var0x242e8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242e8
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x1,Var0x242f0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     cmpl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     je       Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     $0x1,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
     movl     Var0x231e0(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x231e0
     movq     Var0x231e8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x231e8
     leaq     Var0x19936(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19936
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x5830              # value ::  target: 0x5830 CodeAddr: 0x5830
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     leaq     Var0x198b3(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x198b3
     leaq     Var0x198b2(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x198b2
     cmovneq  %rax,%rsi               # reg,reg :: 
Addr0x5830:
     pushq    %rax                    # reg :: 
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x199f5(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x199f5
     pushq    $0x0                    # imm :: 
     leaq     Var0x19a05(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x19a05
     leaq     Var0x1992b(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1992b
     callq    Addr0x15750             # value ::  target: 0x15750 CodeAddr: 0x15750 CALLS 0x15750
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x4d00              # value ::  target: 0x4d00 CodeAddr: 0x4d00 CALLS 0x4d00
Addr0x585d:
     movq     %rax,Var0x242b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242b0
     jmp      Addr0x4fea              # value ::  target: 0x4fea CodeAddr: 0x4fea
Addr0x5869:
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bc20(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bc20
     movq     %rax,%r13               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r13,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0x4f96              # value ::  target: 0x4f96 CodeAddr: 0x4f96
Addr0x589d:
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x6bb0              # value ::  target: 0x6bb0 CodeAddr: 0x6bb0 CALLS 0x6bb0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x4fbe              # value ::  target: 0x4fbe CodeAddr: 0x4fbe
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bc68(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bc68
     movq     %rax,%r13               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r13,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0x4fbe              # value ::  target: 0x4fbe CodeAddr: 0x4fbe
Addr0x58e1:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x58e3:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movb     %al,Var0x243a8(%rip)    # reg,memOffsetBase ::  DataAddr: 0x243a8
     andb     $0x1,Var0x243a8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a8 modifies flags!!
     callq    Addr0x14860             # value ::  target: 0x14860 CodeAddr: 0x14860 CALLS 0x14860
     movq     %rax,Var0x242d0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242d0
     cmpl     $0x7,%ebx               # imm,reg ::  modifies flags!!
     je       Addr0x6301              # value ::  target: 0x6301 CodeAddr: 0x6301
Addr0x5907:
     movl     Var0x24314(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24314
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     jbe      Addr0x594f              # value ::  target: 0x594f CodeAddr: 0x594f
     subl     $0x2,%eax               # imm,reg ::  modifies flags!!
     leaq     Var0x19a27(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x19a27
     leaq     (%rax,%rdx,1),%rbx      # memBaseIndexScale,reg :: 
     movzbl   (%rdx,%rax,1),%eax      # memBaseIndexScale,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x594f              # value ::  target: 0x594f CodeAddr: 0x594f
Addr0x5930:
     movq     Var0x242d0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x242d0
     movsbl   %al,%esi                # reg,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     callq    Addr0x148e0             # value ::  target: 0x148e0 CodeAddr: 0x148e0 CALLS 0x148e0
     movzbl   (%rbx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x5930              # value ::  target: 0x5930 CodeAddr: 0x5930
Addr0x594f:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x14860             # value ::  target: 0x14860 CodeAddr: 0x14860 CALLS 0x14860
     movl     $0x1,%edx               # imm,reg :: 
     movl     $0x3a,%esi              # imm,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,Var0x242c8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242c8
     callq    Addr0x148e0             # value ::  target: 0x148e0 CodeAddr: 0x148e0 CALLS 0x148e0
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     je       Addr0x598c              # value ::  target: 0x598c CodeAddr: 0x598c
     cmpl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     je       Addr0x5df1              # value ::  target: 0x5df1 CodeAddr: 0x5df1
Addr0x5985:
     movb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318
Addr0x598c:
     movl     Var0x24334(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24334
     movl     Var0x24338(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24338
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     ja       Addr0x59ab              # value ::  target: 0x59ab CodeAddr: 0x59ab
     cmpb     $0x0,0x4(%rsp)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x5f0c              # value ::  target: 0x5f0c CodeAddr: 0x5f0c
Addr0x59ab:
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     jne      Addr0x59f2              # value ::  target: 0x59f2 CodeAddr: 0x59f2
Addr0x59af:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x65ec              # value ::  target: 0x65ec CodeAddr: 0x65ec
Addr0x59b8:
     leaq     Var0x18693(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x18693
     jmp      Addr0x59cc              # value ::  target: 0x59cc CodeAddr: 0x59cc
Addr0x59c8:
     addq     $0x6,%r15               # imm,reg ::  modifies flags!!
Addr0x59cc:
     movl     $0x6,%edx               # imm,reg :: 
     movq     %rbx,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x6295              # value ::  target: 0x6295 CodeAddr: 0x6295
     movl     $0x2,%edi               # imm,reg :: 
     callq    Addr0xeb50              # value ::  target: 0xeb50 CodeAddr: 0xeb50 CALLS 0xeb50
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x59c8              # value ::  target: 0x59c8 CodeAddr: 0x59c8
Addr0x59f2:
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     movslq   Var0x23290(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x23290
     jne      Addr0x5f54              # value ::  target: 0x5f54 CodeAddr: 0x5f54
Addr0x5a06:
     cmpl     $0x1,Var0x242f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f8 modifies flags!!
     je       Addr0x5f23              # value ::  target: 0x5f23 CodeAddr: 0x5f23
Addr0x5a13:
     cmpb     $0x0,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6 modifies flags!!
     je       Addr0x5a6b              # value ::  target: 0x5a6b CodeAddr: 0x5a6b
     leaq     Addr0x6b30(%rip),%r8    # memOffsetBase,reg ::  CodeAddr: 0x6b30
     leaq     Addr0x68d0(%rip),%rcx   # memOffsetBase,reg ::  CodeAddr: 0x68d0
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     $0x1e,%edi              # imm,reg :: 
     leaq     Addr0x68c0(%rip),%rdx   # memOffsetBase,reg ::  CodeAddr: 0x68c0
     callq    Addr0xf4c0              # value ::  target: 0xf4c0 CodeAddr: 0xf4c0 CALLS 0xf4c0
     movq     %rax,Var0x243c8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243c8
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x676f              # value ::  target: 0x676f CodeAddr: 0x676f
     movq     Var0x22fc0(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x22fc0
     movq     Var0x22fe0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x22fe0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     leaq     Var0x240e0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x240e0
     callq    Addr0x16a80             # value ::  target: 0x16a80 CodeAddr: 0x16a80 CALLS 0x16a80
Addr0x5a6b:
     leaq     Var0x19af0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af0
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x16d50             # value ::  target: 0x16d50 CodeAddr: 0x16d50 CALLS 0x16d50
     movq     %rax,Var0x242a8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242a8
     movl     Var0x24330(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24330
     subl     $0x2,%eax               # imm,reg ::  modifies flags!!
     andl     $0xfffffffd,%eax        # imm,reg ::  modifies flags!!
     je       Addr0x5aa1              # value ::  target: 0x5aa1 CodeAddr: 0x5aa1
     cmpl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     jne      Addr0x5e6f              # value ::  target: 0x5e6f CodeAddr: 0x5e6f
Addr0x5aa1:
     movb     $0x1,Var0x242a1(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a1
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x5aaa:
     movb     %al,Var0x242a0(%rip)    # reg,memOffsetBase ::  DataAddr: 0x242a0
     andb     $0x1,Var0x242a0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a0 modifies flags!!
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     jne      Addr0x61e2              # value ::  target: 0x61e2 CodeAddr: 0x61e2
Addr0x5ac4:
     cmpb     $0x0,Var0x24311(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24311 modifies flags!!
     jne      Addr0x6148              # value ::  target: 0x6148 CodeAddr: 0x6148
Addr0x5ad1:
     movl     $0x4e20,%edi            # imm,reg :: 
     movl     %r12d,%r14d             # reg,reg :: 
     movq     $0x64,Var0x243b8(%rip)  # imm,memOffsetBase ::  DataAddr: 0x243b8
     leaq     Var0x197fe(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x197fe
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     subl     %ebx,%r14d              # reg,reg ::  modifies flags!!
     movq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0
     movq     %rax,Var0x243c0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243c0
     callq    Addr0x6f70              # value ::  target: 0x6f70 CodeAddr: 0x6f70 CALLS 0x6f70
     testl    %r14d,%r14d             # reg,reg ::  modifies flags!!
     jle      Addr0x5cfd              # value ::  target: 0x5cfd CodeAddr: 0x5cfd
Addr0x5b18:
     movq     0x0(%rbp,%rbx,8),%rdi   # memOffsetBaseIndexScale,reg :: 
     movq     %r15,%rcx               # reg,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     callq    Addr0xa9d0              # value ::  target: 0xa9d0 CodeAddr: 0xa9d0 CALLS 0xa9d0
     cmpl     %ebx,%r12d              # reg,reg ::  modifies flags!!
     jg       Addr0x5b18              # value ::  target: 0x5b18 CodeAddr: 0x5b18
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     jne      Addr0x60e8              # value ::  target: 0x60e8 CodeAddr: 0x60e8
Addr0x5b43:
     subl     $0x1,%r14d              # imm,reg ::  modifies flags!!
     jg       Addr0x5b7e              # value ::  target: 0x5b7e CodeAddr: 0x5b7e
     jmp      Addr0x5d2b              # value ::  target: 0x5d2b CodeAddr: 0x5d2b
Addr0x5b50:
     movzbl   0x10(%rbp),%edx         # memOffsetBase,reg :: 
     movq     0x8(%rbp),%rsi          # memOffsetBase,reg :: 
     callq    Addr0xb8c0              # value ::  target: 0xb8c0 CodeAddr: 0xb8c0 CALLS 0xb8c0
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x8(%rbp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movb     $0x1,Var0x242b8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b8
Addr0x5b7e:
     movq     Var0x24380(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x24380
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     je       Addr0x5c2c              # value ::  target: 0x5c2c CodeAddr: 0x5c2c
Addr0x5b8e:
     movq     0x18(%rbp),%rax         # memOffsetBase,reg :: 
     movq     Var0x243c8(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x243c8
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     movq     %rax,Var0x24380(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24380
     testq    %r8,%r8                 # reg,reg ::  modifies flags!!
     je       Addr0x5b50              # value ::  target: 0x5b50 CodeAddr: 0x5b50
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0x5b50              # value ::  target: 0x5b50 CodeAddr: 0x5b50
     movq     Var0x240f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x240f8
     movq     %rax,%rdx               # reg,reg :: 
     subq     Var0x240f0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x240f0 modifies flags!!
     cmpq     $0xf,%rdx               # imm,reg ::  modifies flags!!
     jbe      Addr0x678f              # value ::  target: 0x678f CodeAddr: 0x678f
     leaq     -0x10(%rax),%rdx        # memOffsetBase,reg :: 
     movq     %r8,%rdi                # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rdx,Var0x240f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x240f8
     movq     -0x10(%rax),%rdx        # memOffsetBase,reg :: 
     movq     -0x8(%rax),%rax         # memOffsetBase,reg :: 
     movq     %rdx,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0xfc00              # value ::  target: 0xfc00 CodeAddr: 0xfc00 CALLS 0xfc00
     movq     %rax,%rdi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x67ae              # value ::  target: 0x67ae CodeAddr: 0x67ae
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x8(%rbp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     Var0x24380(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x24380
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x5b8e              # value ::  target: 0x5b8e CodeAddr: 0x5b8e
Addr0x5c2c:
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     je       Addr0x5c42              # value ::  target: 0x5c42 CodeAddr: 0x5c42
     cmpb     $0x0,Var0x24310(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24310 modifies flags!!
     jne      Addr0x5e03              # value ::  target: 0x5e03 CodeAddr: 0x5e03
Addr0x5c42:
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     jne      Addr0x6221              # value ::  target: 0x6221 CodeAddr: 0x6221
Addr0x5c4f:
     movq     Var0x243c8(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x243c8
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     je       Addr0x5c74              # value ::  target: 0x5c74 CodeAddr: 0x5c74
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0xf020              # value ::  target: 0xf020 CodeAddr: 0xf020 CALLS 0xf020
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x667c              # value ::  target: 0x667c CodeAddr: 0x667c
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0xf680              # value ::  target: 0xf680 CodeAddr: 0xf680 CALLS 0xf680
Addr0x5c74:
     movq     0x38(%rsp),%rbx         # memOffsetBase,reg :: 
     xorq     0x28,%rbx               # value,reg ::  modifies flags!!
     movl     Var0x24210(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24210
     jne      Addr0x669b              # value ::  target: 0x669b CodeAddr: 0x669b
     addq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x5c9d:
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x47c0              # value ::  target: 0x47c0 CodeAddr: 0x47c0 CALLS 0x47c0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x5434              # value ::  target: 0x5434 CodeAddr: 0x5434
Addr0x5caf:
     movb     $0x1,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312
     movq     $0x0,Var0x242c0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242c0
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
Addr0x5cc6:
     movl     $0x1,%eax               # imm,reg :: 
Addr0x5ccb:
     movb     %al,Var0x24311(%rip)    # reg,memOffsetBase ::  DataAddr: 0x24311
     andb     $0x1,Var0x24311(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24311 modifies flags!!
     jmp      Addr0x5041              # value ::  target: 0x5041 CodeAddr: 0x5041
Addr0x5cdd:
     jmp      Addr0x4da5              # value ::  target: 0x4da5 CodeAddr: 0x4da5
Addr0x5ce2:
     movl     $0x7,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x2,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
     jmp      Addr0x4ed3              # value ::  target: 0x4ed3 CodeAddr: 0x4ed3
Addr0x5cfd:
     cmpb     $0x0,Var0x242f5(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f5 modifies flags!!
     jne      Addr0x5eea              # value ::  target: 0x5eea CodeAddr: 0x5eea
     movl     $0x1,%edx               # imm,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     leaq     Var0x19af3(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af3
     callq    Addr0x6e80              # value ::  target: 0x6e80 CodeAddr: 0x6e80 CALLS 0x6e80
Addr0x5d1d:
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     jne      Addr0x60e8              # value ::  target: 0x60e8 CodeAddr: 0x60e8
Addr0x5d2b:
     movq     Var0x24380(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x24380
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     je       Addr0x5c2c              # value ::  target: 0x5c2c CodeAddr: 0x5c2c
     cmpq     $0x0,0x18(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x5b8e              # value ::  target: 0x5b8e CodeAddr: 0x5b8e
     movb     $0x0,Var0x242b8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b8
     jmp      Addr0x5b8e              # value ::  target: 0x5b8e CodeAddr: 0x5b8e
Addr0x5d52:
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bca8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bca8
     movq     %rax,%r14               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r14,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0x502f              # value ::  target: 0x502f CodeAddr: 0x502f
Addr0x5d86:
     leaq     Var0x19a19(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19a19
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     leaq     Var0x24320(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x24320
     leaq     Var0x24328(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24328
     movq     %rax,%rbx               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x109e0             # value ::  target: 0x109e0 CodeAddr: 0x109e0 CALLS 0x109e0
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x6610              # value ::  target: 0x6610 CodeAddr: 0x6610
Addr0x5db4:
     movl     Var0x24328(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24328
     movl     %eax,Var0x2431c(%rip)   # reg,memOffsetBase ::  DataAddr: 0x2431c
     movq     Var0x24320(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24320
     movq     %rax,Var0x23018(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23018
Addr0x5dce:
     testb    %r14b,%r14b             # reg,reg ::  modifies flags!!
     je       Addr0x50de              # value ::  target: 0x50de CodeAddr: 0x50de
     movl     $0x0,Var0x24328(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24328
     movq     $0x400,Var0x24320(%rip) # imm,memOffsetBase ::  DataAddr: 0x24320
     jmp      Addr0x50de              # value ::  target: 0x50de CodeAddr: 0x50de
Addr0x5df1:
     cmpb     $0x0,Var0x24311(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24311 modifies flags!!
     je       Addr0x59af              # value ::  target: 0x59af CodeAddr: 0x59af
     jmp      Addr0x5985              # value ::  target: 0x5985 CodeAddr: 0x5985
Addr0x5e03:
     cmpq     $0x2,Var0x23060(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23060 modifies flags!!
     jne      Addr0x5e1f              # value ::  target: 0x5e1f CodeAddr: 0x5e1f
     movq     Var0x23068(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23068
     cmpw     $0x5b1b,(%rax)          # imm,memBase ::  modifies flags!!
     je       Addr0x64a1              # value ::  target: 0x64a1 CodeAddr: 0x64a1
Addr0x5e1f:
     callq    Addr0x8060              # value ::  target: 0x8060 CodeAddr: 0x8060 CALLS 0x8060
Addr0x5e24:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     callq    Addr0x4d30              # value ::  target: 0x4d30 CodeAddr: 0x4d30 CALLS 0x4d30
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x7dc0              # value ::  target: 0x7dc0 CodeAddr: 0x7dc0 CALLS 0x7dc0
     movl     Var0x24214(%rip),%ebx   # memOffsetBase,reg ::  DataAddr: 0x24214
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     je       Addr0x5e57              # value ::  target: 0x5e57 CodeAddr: 0x5e57
Addr0x5e48:
     movl     $0x13,%edi              # imm,reg :: 
     callq    Addr0x4740              # value ::  target: 0x4740 CodeAddr: 0x4740 CALLS 0x4740
     subl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     jne      Addr0x5e48              # value ::  target: 0x5e48 CodeAddr: 0x5e48
Addr0x5e57:
     movl     Var0x24218(%rip),%edi   # memOffsetBase,reg ::  DataAddr: 0x24218
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     je       Addr0x5c42              # value ::  target: 0x5c42 CodeAddr: 0x5c42
     callq    Addr0x4740              # value ::  target: 0x4740 CodeAddr: 0x4740 CALLS 0x4740
     jmp      Addr0x5c42              # value ::  target: 0x5c42 CodeAddr: 0x5c42
Addr0x5e6f:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     jne      Addr0x5aa1              # value ::  target: 0x5aa1 CodeAddr: 0x5aa1
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     jne      Addr0x5aa1              # value ::  target: 0x5aa1 CodeAddr: 0x5aa1
     cmpb     $0x0,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6 modifies flags!!
     movb     $0x0,Var0x242a1(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a1
     movl     $0x1,%eax               # imm,reg :: 
     jne      Addr0x5aaa              # value ::  target: 0x5aaa CodeAddr: 0x5aaa
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     jne      Addr0x5aaa              # value ::  target: 0x5aaa CodeAddr: 0x5aaa
     cmpl     $0x0,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314 modifies flags!!
     jne      Addr0x5aaa              # value ::  target: 0x5aaa CodeAddr: 0x5aaa
     movzbl   Var0x242f4(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x242f4
     jmp      Addr0x5aaa              # value ::  target: 0x5aaa CodeAddr: 0x5aaa
Addr0x5ec8:
     movl     $0x3,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x2,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338
     callq    Addr0x148c0             # value ::  target: 0x148c0 CodeAddr: 0x148c0 CALLS 0x148c0
     movb     $0x1,Var0x242d8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242d8
     jmp      Addr0x4ed3              # value ::  target: 0x4ed3 CodeAddr: 0x4ed3
Addr0x5eea:
     leaq     Var0x197fe(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197fe
     movl     $0x1,%edx               # imm,reg :: 
     movl     $0x3,%esi               # imm,reg :: 
     leaq     Var0x19af3(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af3
     callq    Addr0xa9d0              # value ::  target: 0xa9d0 CodeAddr: 0xa9d0 CALLS 0xa9d0
     jmp      Addr0x5d1d              # value ::  target: 0x5d1d CodeAddr: 0x5d1d
Addr0x5f0c:
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     je       Addr0x59af              # value ::  target: 0x59af CodeAddr: 0x59af
     movl     $0x4,Var0x24330(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24330
     jmp      Addr0x59f2              # value ::  target: 0x59f2 CodeAddr: 0x59f2
Addr0x5f23:
     cmpb     $0x0,Var0x242f5(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f5 modifies flags!!
     movl     $0x2,%eax               # imm,reg :: 
     jne      Addr0x5f49              # value ::  target: 0x5f49 CodeAddr: 0x5f49
     cmpl     $0x3,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314 modifies flags!!
     je       Addr0x5f49              # value ::  target: 0x5f49 CodeAddr: 0x5f49
     cmpl     $0x1,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xfffffffe,%eax        # imm,reg ::  modifies flags!!
     addl     $0x4,%eax               # imm,reg ::  modifies flags!!
Addr0x5f49:
     movl     %eax,Var0x242f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242f8
     jmp      Addr0x5a13              # value ::  target: 0x5a13 CodeAddr: 0x5a13
Addr0x5f54:
     leaq     Var0x19ab7(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19ab7
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,%rdi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6318              # value ::  target: 0x6318 CodeAddr: 0x6318
     cmpb     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     je       Addr0x6318              # value ::  target: 0x6318 CodeAddr: 0x6318
     movw     $0x3f3f,0x35(%rsp)      # imm,memOffsetBase :: 
     movb     $0x0,0x37(%rsp)         # imm,memOffsetBase :: 
     callq    Addr0x15b10             # value ::  target: 0x15b10 CodeAddr: 0x15b10 CALLS 0x15b10
     movl     %ebx,0x4(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,Var0x24300(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24300
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
Addr0x5f9b:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     movzbl   (%rax),%edx             # memBase,reg :: 
     cmpb     $0x2a,%dl               # imm,reg ::  modifies flags!!
     je       Addr0x6511              # value ::  target: 0x6511 CodeAddr: 0x6511
     cmpb     $0x3a,%dl               # imm,reg ::  modifies flags!!
     je       Addr0x6503              # value ::  target: 0x6503 CodeAddr: 0x6503
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x64c4              # value ::  target: 0x64c4 CodeAddr: 0x64c4
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     movzbl   (%rax),%edx             # memBase,reg :: 
     movb     %dl,0x35(%rsp)          # reg,memOffsetBase :: 
     cmpb     $0x0,0x1(%rax)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x6555              # value ::  target: 0x6555 CodeAddr: 0x6555
     leaq     0x2(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     movzbl   0x1(%rax),%edx          # memOffsetBase,reg :: 
     movb     %dl,0x36(%rsp)          # reg,memOffsetBase :: 
     leaq     0x3(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     cmpb     $0x3d,0x2(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x6555              # value ::  target: 0x6555 CodeAddr: 0x6555
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     leaq     Var0x19946(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19946
     leaq     0x35(%rsp),%r15         # memOffsetBase,reg :: 
     jmp      Addr0x6024              # value ::  target: 0x6024 CodeAddr: 0x6024
Addr0x6010:
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     leaq     Var0x22880(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x22880
     movq     (%rax,%rbx,8),%rsi      # memBaseIndexScale,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x6061              # value ::  target: 0x6061 CodeAddr: 0x6061
Addr0x6024:
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x6010              # value ::  target: 0x6010 CodeAddr: 0x6010
     movslq   %ebx,%rcx               # reg,reg :: 
     leaq     Var0x23060(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23060
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r13,%rdi               # reg,reg :: 
     shlq     $0x4,%rcx               # imm,reg ::  modifies flags!!
     leaq     0x18(%rsp),%rsi         # memOffsetBase,reg :: 
     addq     %rax,%rcx               # reg,reg ::  modifies flags!!
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x8(%rcx)          # reg,memOffsetBase :: 
     callq    Addr0x6910              # value ::  target: 0x6910 CodeAddr: 0x6910 CALLS 0x6910
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x5f9b              # value ::  target: 0x5f9b CodeAddr: 0x5f9b
Addr0x6061:
     movq     %r15,%rdi               # reg,reg :: 
     movslq   0x4(%rsp),%rbx          # memOffsetBase,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19ad1(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19ad1
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%r14               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r14,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
Addr0x6095:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bde0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bde0
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     movq     Var0x24300(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24300
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     Var0x24308(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24308
     jmp      Addr0x60d7              # value ::  target: 0x60d7 CodeAddr: 0x60d7
Addr0x60cb:
     movq     0x20(%rdi),%r14         # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %r14,%rdi               # reg,reg :: 
Addr0x60d7:
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0x60cb              # value ::  target: 0x60cb CodeAddr: 0x60cb
     movb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312
     jmp      Addr0x64c9              # value ::  target: 0x64c9 CodeAddr: 0x64c9
Addr0x60e8:
     callq    Addr0x7180              # value ::  target: 0x7180 CodeAddr: 0x7180 CALLS 0x7180
     cmpb     $0x0,Var0x242f5(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f5 modifies flags!!
     je       Addr0x6473              # value ::  target: 0x6473 CodeAddr: 0x6473
Addr0x60fa:
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     je       Addr0x5b43              # value ::  target: 0x5b43 CodeAddr: 0x5b43
     callq    Addr0xa1a0              # value ::  target: 0xa1a0 CodeAddr: 0xa1a0 CALLS 0xa1a0
     cmpq     $0x0,Var0x24380(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24380 modifies flags!!
     je       Addr0x5c2c              # value ::  target: 0x5c2c CodeAddr: 0x5c2c
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x30(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jbe      Addr0x666d              # value ::  target: 0x666d CodeAddr: 0x666d
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0x613b:
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     jmp      Addr0x5b7e              # value ::  target: 0x5b7e CodeAddr: 0x5b7e
Addr0x6148:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x23fe0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23fe0
     jmp      Addr0x6197              # value ::  target: 0x6197 CodeAddr: 0x6197
Addr0x6158:
     movl     $0x1,%edx               # imm,reg :: 
     cmpl     $0x40,%eax              # imm,reg ::  modifies flags!!
     jg       Addr0x6188              # value ::  target: 0x6188 CodeAddr: 0x6188
     leal     -0x30(%rax),%edi        # memOffsetBase,reg :: 
     cmpl     $0x9,%edi               # imm,reg ::  modifies flags!!
     jbe      Addr0x6188              # value ::  target: 0x6188 CodeAddr: 0x6188
     subl     $0x2d,%ecx              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%ecx               # imm,reg ::  modifies flags!!
     jbe      Addr0x61b4              # value ::  target: 0x61b4 CodeAddr: 0x61b4
Addr0x6178:
     cmpl     $0x7e,%eax              # imm,reg ::  modifies flags!!
     je       Addr0x61b4              # value ::  target: 0x61b4 CodeAddr: 0x61b4
     cmpl     $0x5f,%eax              # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
Addr0x6188:
     orb      %dl,(%rsi,%rax,1)       # reg,memBaseIndexScale ::  modifies flags!!
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     cmpq     $0x100,%rax             # imm,reg ::  modifies flags!!
     je       Addr0x61c8              # value ::  target: 0x61c8 CodeAddr: 0x61c8
Addr0x6197:
     movl     %eax,%ecx               # reg,reg :: 
     cmpq     $0x5a,%rax              # imm,reg ::  modifies flags!!
     jbe      Addr0x6158              # value ::  target: 0x6158 CodeAddr: 0x6158
     leal     -0x61(%rax),%edi        # memOffsetBase,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     cmpl     $0x19,%edi              # imm,reg ::  modifies flags!!
     jbe      Addr0x6188              # value ::  target: 0x6188 CodeAddr: 0x6188
     subl     $0x2d,%ecx              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%ecx               # imm,reg ::  modifies flags!!
     ja       Addr0x6178              # value ::  target: 0x6178 CodeAddr: 0x6178
Addr0x61b4:
     movl     $0x1,%edx               # imm,reg :: 
     orb      %dl,(%rsi,%rax,1)       # reg,memBaseIndexScale ::  modifies flags!!
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     cmpq     $0x100,%rax             # imm,reg ::  modifies flags!!
     jne      Addr0x6197              # value ::  target: 0x6197 CodeAddr: 0x6197
Addr0x61c8:
     callq    Addr0x15cd0             # value ::  target: 0x15cd0 CodeAddr: 0x15cd0 CALLS 0x15cd0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6484              # value ::  target: 0x6484 CodeAddr: 0x6484
Addr0x61d6:
     movq     %rax,Var0x24388(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24388
     jmp      Addr0x5ad1              # value ::  target: 0x5ad1 CodeAddr: 0x5ad1
Addr0x61e2:
     movq     Var0x22fc0(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x22fc0
     movq     Var0x22fe0(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x22fe0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     leaq     Var0x241a0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x241a0
     movq     %r15,%r8                # reg,reg :: 
     movq     %r14,%rcx               # reg,reg :: 
     callq    Addr0x16a80             # value ::  target: 0x16a80 CodeAddr: 0x16a80 CALLS 0x16a80
     movq     %r15,%r8                # reg,reg :: 
     movq     %r14,%rcx               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     leaq     Var0x24140(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24140
     callq    Addr0x16a80             # value ::  target: 0x16a80 CodeAddr: 0x16a80 CALLS 0x16a80
     jmp      Addr0x5ac4              # value ::  target: 0x5ac4 CodeAddr: 0x5ac4
Addr0x6221:
     leaq     Var0x241a0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x241a0
     leaq     Var0x19afb(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19afb
     callq    Addr0x75f0              # value ::  target: 0x75f0 CodeAddr: 0x75f0 CALLS 0x75f0
     leaq     Var0x24140(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24140
     leaq     Var0x19b05(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19b05
     callq    Addr0x75f0              # value ::  target: 0x75f0 CodeAddr: 0x75f0 CALLS 0x75f0
     movq     Var0x242d0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x242d0
     callq    Addr0x148a0             # value ::  target: 0x148a0 CodeAddr: 0x148a0 CALLS 0x148a0
     leaq     Var0x22a00(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x22a00
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1bd88(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bd88
     movl     %eax,%eax               # reg,reg :: 
     movq     (%rdx,%rax,8),%rdx      # memBaseIndexScale,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     jmp      Addr0x5c4f              # value ::  target: 0x5c4f CodeAddr: 0x5c4f
Addr0x6278:
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x47c0              # value ::  target: 0x47c0 CodeAddr: 0x47c0 CALLS 0x47c0
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     addl     $0x2,%eax               # imm,reg ::  modifies flags!!
     movl     %eax,Var0x24338(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24338
     jmp      Addr0x55ee              # value ::  target: 0x55ee CodeAddr: 0x55ee
Addr0x6295:
     cmpb     $0x2b,(%r15)            # imm,memBase ::  modifies flags!!
     je       Addr0x659f              # value ::  target: 0x659f CodeAddr: 0x659f
Addr0x629f:
     movl     $0x4,%ecx               # imm,reg :: 
     leaq     Var0x18740(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x18740
     leaq     Var0x229a0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x229a0
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0xd4e0              # value ::  target: 0xd4e0 CodeAddr: 0xd4e0 CALLS 0xd4e0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x66d2              # value ::  target: 0x66d2 CodeAddr: 0x66d2
     cmpq     $0x2,%rax               # imm,reg ::  modifies flags!!
     je       Addr0x6644              # value ::  target: 0x6644 CodeAddr: 0x6644
     jg       Addr0x641e              # value ::  target: 0x641e CodeAddr: 0x641e
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x662a              # value ::  target: 0x662a CodeAddr: 0x662a
     subq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jne      Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
     leaq     Var0x19a9e(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19a9e
     movq     %rax,Var0x23048(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23048
     movq     %rax,Var0x23040(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23040
Addr0x62f7:
     callq    Addr0x6c30              # value ::  target: 0x6c30 CodeAddr: 0x6c30 CALLS 0x6c30
     jmp      Addr0x59f2              # value ::  target: 0x59f2 CodeAddr: 0x59f2
Addr0x6301:
     movl     $0x1,%edx               # imm,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x148e0             # value ::  target: 0x148e0 CodeAddr: 0x148e0 CALLS 0x148e0
     jmp      Addr0x5907              # value ::  target: 0x5907 CodeAddr: 0x5907
Addr0x6318:
     leaq     Var0x19ac1(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19ac1
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6374              # value ::  target: 0x6374 CodeAddr: 0x6374
     cmpb     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     je       Addr0x6374              # value ::  target: 0x6374 CodeAddr: 0x6374
Addr0x632e:
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     je       Addr0x5a06              # value ::  target: 0x5a06 CodeAddr: 0x5a06
     movl     $0xd,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x6368              # value ::  target: 0x6368 CodeAddr: 0x6368
     movl     $0xe,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x63fa              # value ::  target: 0x63fa CodeAddr: 0x63fa
     cmpb     $0x0,Var0x24390(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24390 modifies flags!!
     je       Addr0x63fa              # value ::  target: 0x63fa CodeAddr: 0x63fa
Addr0x6368:
     movb     $0x1,Var0x242fd(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fd
     jmp      Addr0x5a06              # value ::  target: 0x5a06 CodeAddr: 0x5a06
Addr0x6374:
     leaq     Var0x19ac6(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19ac6
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%r15               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x655f              # value ::  target: 0x655f CodeAddr: 0x655f
     cmpb     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     je       Addr0x655f              # value ::  target: 0x655f CodeAddr: 0x655f
     leaq     Var0x18760(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x18760
     jmp      Addr0x63cb              # value ::  target: 0x63cb CodeAddr: 0x63cb
Addr0x639e:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %r14,%rdi               # reg,reg :: 
     orq      $0xffffffffffffffff,%rcx# imm,reg ::  modifies flags!!
     repnz scasb %es:(%rdi),%al          # memBase,reg :: "%es:(%rdi),%al" != "(%rdi),%al" modifies flags!!
#{'addr': 25511, 'op': 'scasb', 'prefix': 'repnz', 'args': [Arg(argText='(%rdi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rdi', calcAddr=None, segReg='%es:', round=None), Arg(argText='%al', star=None, offset=None, imm=None, reg='%al', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 1886, 'size': 2}
     movq     %rcx,%rax               # reg,reg :: 
     leaq     Var0x18760(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x18760
     notq     %rax                    # reg :: 
     addq     %rax,%r14               # reg,reg ::  modifies flags!!
     movq     %r14,%rax               # reg,reg :: 
     subq     %rcx,%rax               # reg,reg ::  modifies flags!!
     cmpq     $0x1043,%rax            # imm,reg ::  modifies flags!!
     ja       Addr0x655f              # value ::  target: 0x655f CodeAddr: 0x655f
Addr0x63cb:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19acb(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19acb
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x639e              # value ::  target: 0x639e CodeAddr: 0x639e
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     leaq     0x5(%r14),%rdi          # memOffsetBase,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     callq    Addr0x49d0              # value ::  target: 0x49d0 CodeAddr: 0x49d0 CALLS 0x49d0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x639e              # value ::  target: 0x639e CodeAddr: 0x639e
     jmp      Addr0x632e              # value ::  target: 0x632e CodeAddr: 0x632e
Addr0x63fa:
     movl     $0xc,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x5a06              # value ::  target: 0x5a06 CodeAddr: 0x5a06
     cmpl     $0x0,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     jne      Addr0x5a06              # value ::  target: 0x5a06 CodeAddr: 0x5a06
     jmp      Addr0x6368              # value ::  target: 0x6368 CodeAddr: 0x6368
Addr0x641e:
     cmpq     $0x3,%rax               # imm,reg ::  modifies flags!!
     jne      Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
     movl     $0x2,%edi               # imm,reg :: 
     callq    Addr0xeb50              # value ::  target: 0xeb50 CodeAddr: 0xeb50 CALLS 0xeb50
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
     movq     Var0x23040(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23040
     movl     $0x2,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     Var0x23048(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23048
     movl     $0x2,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,Var0x23040(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23040
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rax,Var0x23048(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23048
     jmp      Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
Addr0x6473:
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x7390              # value ::  target: 0x7390 CodeAddr: 0x7390 CALLS 0x7390
     jmp      Addr0x60fa              # value ::  target: 0x60fa CodeAddr: 0x60fa
Addr0x6484:
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     jmp      Addr0x61d6              # value ::  target: 0x61d6 CodeAddr: 0x61d6
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0xcca0              # value ::  target: 0xcca0 CodeAddr: 0xcca0 CALLS 0xcca0
Addr0x6497:
     movl     $0x2,%edi               # imm,reg :: 
     callq    Addr0xcca0              # value ::  target: 0xcca0 CodeAddr: 0xcca0 CALLS 0xcca0
Addr0x64a1:
     cmpq     $0x1,Var0x23070(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23070 modifies flags!!
     jne      Addr0x5e1f              # value ::  target: 0x5e1f CodeAddr: 0x5e1f
     movq     Var0x23078(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23078
     cmpb     $0x6d,(%rax)            # imm,memBase ::  modifies flags!!
     jne      Addr0x5e1f              # value ::  target: 0x5e1f CodeAddr: 0x5e1f
     jmp      Addr0x5e24              # value ::  target: 0x5e24 CodeAddr: 0x5e24
Addr0x64c4:
     movslq   0x4(%rsp),%rbx          # memOffsetBase,reg :: 
Addr0x64c9:
     cmpq     $0x6,Var0x230d0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x230d0 modifies flags!!
     jne      Addr0x632e              # value ::  target: 0x632e CodeAddr: 0x632e
     movq     Var0x230d8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x230d8
     movl     $0x6,%edx               # imm,reg :: 
     leaq     Var0x19ae9(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19ae9
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x632e              # value ::  target: 0x632e CodeAddr: 0x632e
     movb     $0x1,Var0x24390(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24390
     jmp      Addr0x632e              # value ::  target: 0x632e CodeAddr: 0x632e
Addr0x6503:
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x5f9b              # value ::  target: 0x5f9b CodeAddr: 0x5f9b
Addr0x6511:
     movl     $0x28,%edi              # imm,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     leaq     0x18(%rsp),%rsi         # memOffsetBase,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     movq     Var0x24308(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24308
     addq     $0x1,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rcx,Var0x24308(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24308
     movq     %rax,0x20(%rcx)         # reg,memOffsetBase :: 
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x8(%rcx)          # reg,memOffsetBase :: 
     callq    Addr0x6910              # value ::  target: 0x6910 CodeAddr: 0x6910 CALLS 0x6910
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x656b              # value ::  target: 0x656b CodeAddr: 0x656b
Addr0x6555:
     movslq   0x4(%rsp),%rbx          # memOffsetBase,reg :: 
     jmp      Addr0x6095              # value ::  target: 0x6095 CodeAddr: 0x6095
Addr0x655f:
     movb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312
     jmp      Addr0x632e              # value ::  target: 0x632e CodeAddr: 0x632e
Addr0x656b:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     cmpb     $0x3d,(%rax)            # imm,memBase ::  modifies flags!!
     jne      Addr0x6555              # value ::  target: 0x6555 CodeAddr: 0x6555
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r13,%rdi               # reg,reg :: 
     movq     %rax,0x8(%rcx)          # reg,memOffsetBase :: 
     callq    Addr0x6910              # value ::  target: 0x6910 CodeAddr: 0x6910 CALLS 0x6910
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x5f9b              # value ::  target: 0x5f9b CodeAddr: 0x5f9b
     jmp      Addr0x6555              # value ::  target: 0x6555 CodeAddr: 0x6555
Addr0x659f:
     addq     $0x1,%r15               # imm,reg ::  modifies flags!!
     movl     $0xa,%esi               # imm,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movq     %rax,%rbx               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6665              # value ::  target: 0x6665 CodeAddr: 0x6665
     leaq     0x1(%rax),%r14          # memOffsetBase,reg :: 
     movl     $0xa,%esi               # imm,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x66a0              # value ::  target: 0x66a0 CodeAddr: 0x66a0
     movb     $0x0,(%rbx)             # imm,memBase :: 
Addr0x65d9:
     movq     %r15,Var0x23040(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23040
     movq     %r14,Var0x23048(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23048
     jmp      Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
Addr0x65ec:
     leaq     Var0x19a2d(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19a2d
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%r15               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x59b8              # value ::  target: 0x59b8 CodeAddr: 0x59b8
     leaq     Var0x19954(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x19954
     jmp      Addr0x629f              # value ::  target: 0x629f CodeAddr: 0x629f
Addr0x6610:
     leaq     Var0x19a1c(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19a1c
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x5db4              # value ::  target: 0x5db4 CodeAddr: 0x5db4
     jmp      Addr0x5dce              # value ::  target: 0x5dce CodeAddr: 0x5dce
Addr0x662a:
     leaq     Var0x19a86(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19a86
     movq     %rax,Var0x23048(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23048
     movq     %rax,Var0x23040(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23040
     jmp      Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
Addr0x6644:
     leaq     Var0x19aad(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19aad
     movq     %rax,Var0x23040(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23040
     leaq     Var0x19aa1(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19aa1
     movq     %rax,Var0x23048(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23048
     jmp      Addr0x62f7              # value ::  target: 0x62f7 CodeAddr: 0x62f7
Addr0x6665:
     movq     %r15,%r14               # reg,reg :: 
     jmp      Addr0x65d9              # value ::  target: 0x65d9 CodeAddr: 0x65d9
Addr0x666d:
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0x613b              # value ::  target: 0x613b CodeAddr: 0x613b
Addr0x667c:
     leaq     Var0x1869a(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1869a
     movl     $0x670,%edx             # imm,reg :: 
     leaq     Var0x197b4(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197b4
     leaq     Var0x1bdb0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1bdb0
     callq    Addr0x49b0              # value ::  target: 0x49b0 CodeAddr: 0x49b0 CALLS 0x49b0
Addr0x669b:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x66a0:
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19a38(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19a38
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     $0x2,%edi               # imm,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
Addr0x66d2:
     movq     %rax,%rdx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     leaq     Var0x19a55(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19a55
     callq    Addr0xd5f0              # value ::  target: 0xd5f0 CodeAddr: 0xd5f0 CALLS 0xd5f0
     movq     Var0x232c0(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x19a60(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19a60
     leaq     Var0x229a0(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x229a0
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rbp,%rsi               # reg,reg :: 
     leaq     Var0x19a76(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x19a76
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     leaq     Var0x1993d(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1993d
Addr0x671e:
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     addq     $0x8,%rbx               # imm,reg ::  modifies flags!!
     movq     %rbp,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x1,%esi               # imm,reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     movq     (%rbx),%rcx             # memBase,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x671e              # value ::  target: 0x671e CodeAddr: 0x671e
     movq     Var0x232c0(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bd18(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bd18
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movl     $0x2,%edi               # imm,reg :: 
     callq    Addr0xcca0              # value ::  target: 0xcca0 CodeAddr: 0xcca0 CALLS 0xcca0
Addr0x676f:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30
Addr0x6774:
     movq     Var0x23298(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x23298
     movl     0x20(%rsp),%esi         # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movl     %eax,%edi               # reg,reg :: 
     leaq     Var0x22300(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x22300
     callq    Addr0x16270             # value ::  target: 0x16270 CodeAddr: 0x16270 CALLS 0x16270
Addr0x678f:
     leaq     Var0x185f8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x185f8
     movl     $0x403,%edx             # imm,reg :: 
     leaq     Var0x197b4(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197b4
     leaq     Var0x1bd50(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1bd50
     callq    Addr0x49b0              # value ::  target: 0x49b0 CodeAddr: 0x49b0 CALLS 0x49b0
Addr0x67ae:
     leaq     Var0x1869a(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1869a
     movl     $0x63c,%edx             # imm,reg :: 
     leaq     Var0x197b4(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197b4
     leaq     Var0x19af5(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af5
     callq    Addr0x49b0              # value ::  target: 0x49b0 CodeAddr: 0x49b0 CALLS 0x49b0

# ----------- Function 121 ------------ 
#
# startAddr  = 0x67d0
# startindex = 2109
# endAddr    = 0x67fe
# endindex   = 2121
# len        = 47 (0x2f)
# len1       = 48 (0x30) to (0x67ff)
# secid      = 15
# sec name   = .text
#  Is a terminal 
#  Has Halt
#
# -------------------------------------------


_start:
Addr0x67d0:
     endbr64 
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     movq     %rdx,%r9                # reg,reg :: 
     popq     %rsi                    # reg :: 
     movq     %rsp,%rdx               # reg,reg :: 
     andq     $0xfffffffffffffff0,%rsp# imm,reg ::  modifies flags!!
     pushq    %rax                    # reg :: 
     pushq    %rsp                    # reg :: 
     leaq     Addr0x17550(%rip),%r8   # memOffsetBase,reg ::  CodeAddr: 0x17550
     leaq     Addr0x174e0(%rip),%rcx  # memOffsetBase,reg ::  CodeAddr: 0x174e0
     leaq     Addr0x4df0(%rip),%rdi   # memOffsetBase,reg ::  CodeAddr: 0x4df0
     callq    *Var0x22fd0(%rip)       # memOffsetBase ::  DataAddr: 0x22fd0 no target? 
     hlt     

# ----------- Function 122 ------------ 
#
# startAddr  = 0x6800
# startindex = 2123
# endAddr    = 0x6828
# endindex   = 2132
# len        = 41 (0x29)
# len1       = 48 (0x30) to (0x6829)
# secid      = 15
# sec name   = .text
#  Has True Return
#  has jump ptr!
#
# -------------------------------------------

Addr0x6800:
     leaq     0x1ca61(%rip),%rdi      # memOffsetBase,reg :: 
     leaq     0x1ca5a(%rip),%rax      # memOffsetBase,reg :: 
     cmpq     %rdi,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6828              # value ::  target: 0x6828 CodeAddr: 0x6828
     movq     Var0x22fc8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x22fc8
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6828              # value ::  target: 0x6828 CodeAddr: 0x6828
     jmp      *%rax                   # reg :: "*%rax" != "%rax" calcAddr: 0x0
#    JUMP TABLE 
#  #{'addr': 26655, 'op': 'jmpq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 2130, 'size': 2, 'jumpTable': 'unknown', 'calcAddr': 0}
Addr0x6828:
     retq    

# ----------- Function 401 ------------ 
#
# startAddr  = 0x6830
# startindex = 2134
# endAddr    = 0x6868
# endindex   = 2148
# len        = 57 (0x39)
# len1       = 64 (0x40) to (0x6869)
# secid      = 15
# sec name   = .text
#  Has True Return
#  has jump ptr!
#
# -------------------------------------------

Addr0x6830:
     leaq     0x1ca31(%rip),%rdi      # memOffsetBase,reg :: 
     leaq     0x1ca2a(%rip),%rsi      # memOffsetBase,reg :: 
     subq     %rdi,%rsi               # reg,reg ::  modifies flags!!
     movq     %rsi,%rax               # reg,reg :: 
     shrq     $0x3f,%rsi              # imm,reg ::  modifies flags!!
     sarq     $0x3,%rax               # imm,reg ::  modifies flags!!
     addq     %rax,%rsi               # reg,reg ::  modifies flags!!
     sarq     %rsi                    # reg ::  modifies flags!!
     je       Addr0x6868              # value ::  target: 0x6868 CodeAddr: 0x6868
     movq     Var0x22fe8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x22fe8
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6868              # value ::  target: 0x6868 CodeAddr: 0x6868
     jmp      *%rax                   # reg :: "*%rax" != "%rax" calcAddr: 0x0
#    JUMP TABLE 
#  #{'addr': 26720, 'op': 'jmpq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 2146, 'size': 2, 'jumpTable': 'unknown', 'calcAddr': 0}
Addr0x6868:
     retq    

# ----------- Function 405 ------------ 
#
# startAddr  = 0x6870
# startindex = 2150
# endAddr    = 0x68a8
# endindex   = 2164
# len        = 57 (0x39)
# len1       = 64 (0x40) to (0x68a9)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x6870:
     endbr64 
     cmpb     $0x0,Var0x232c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x232c8 modifies flags!!
     jne      Addr0x68a8              # value ::  target: 0x68a8 CodeAddr: 0x68a8
     pushq    %rbp                    # reg :: 
     cmpq     $0x0,Var0x22ff0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x22ff0 modifies flags!!
     movq     %rsp,%rbp               # reg,reg :: 
     je       Addr0x6897              # value ::  target: 0x6897 CodeAddr: 0x6897
     movq     Var0x23008(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23008
     callq    Addr0x46f0              # value ::  target: 0x46f0 CodeAddr: 0x46f0 CALLS 0x46f0
Addr0x6897:
     callq    Addr0x6800              # value ::  target: 0x6800 CodeAddr: 0x6800 CALLS 0x6800
     movb     $0x1,Var0x232c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x232c8
     popq     %rbp                    # reg :: 
     retq    
Addr0x68a8:
     retq    

# ----------- Function 407 ------------ 
#
# startAddr  = 0x68b0
# startindex = 2166
# endAddr    = 0x68b8
# endindex   = 2167
# len        = 9 (0x9)
# len1       = 16 (0x10) to (0x68b9)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x68b0:
     endbr64 
     jmp      Addr0x6830              # value ::  target: 0x6830 CodeAddr: 0x6830

# ----------- Function 123 ------------ 
#
# startAddr  = 0x68c0
# startindex = 2169
# endAddr    = 0x68cf
# endindex   = 2174
# len        = 16 (0x10)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0x68c0:
     endbr64 
     movq     (%rdi),%rax             # memBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rsi                    # reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     retq    

# ----------- Function 124 ------------ 
#
# startAddr  = 0x68d0
# startindex = 2175
# endAddr    = 0x68eb
# endindex   = 2185
# len        = 28 (0x1c)
# len1       = 32 (0x20) to (0x68ec)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x68d0:
     endbr64 
     movq     (%rsi),%rdx             # memBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     %rdx,(%rdi)             # reg,memBase ::  modifies flags!!
     je       Addr0x68e0              # value ::  target: 0x68e0 CodeAddr: 0x68e0
     retq    
Addr0x68e0:
     movq     0x8(%rsi),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,0x8(%rdi)          # reg,memOffsetBase ::  modifies flags!!
     sete     %al                     # reg :: 
     retq    

# ----------- Function 125 ------------ 
#
# startAddr  = 0x68f0
# startindex = 2187
# endAddr    = 0x6904
# endindex   = 2192
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x6905)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x68f0:
     endbr64 
     movl     Var0x24218(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24218
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x6904              # value ::  target: 0x6904 CodeAddr: 0x6904
     movl     %edi,Var0x24218(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24218
Addr0x6904:
     retq    

# ----------- Function 126 ------------ 
#
# startAddr  = 0x6910
# startindex = 2194
# endAddr    = 0x6b23
# endindex   = 2331
# len        = 532 (0x214)
# len1       = 543 (0x21f) to (0x6b24)
# secid      = 15
# sec name   = .text
#  Has True Return
#  has jump ptr!
#
# -------------------------------------------

Addr0x6910:
     movq     (%rsi),%r9              # memBase,reg :: 
     movq     (%rdi),%r11             # memBase,reg :: 
     pushq    %r12                    # reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     pushq    %rbp                    # reg :: 
     leaq     Var0x18020(%rip),%r10   # memOffsetBase,reg ::  DataAddr: 0x18020
     pushq    %rbx                    # reg :: 
     movl     %edx,%ebx               # reg,reg :: 
Addr0x6925:
     movzbl   (%r9),%r8d              # memBase,reg :: 
     cmpb     $0x5c,%r8b              # imm,reg ::  modifies flags!!
     je       Addr0x695a              # value ::  target: 0x695a CodeAddr: 0x695a
Addr0x692f:
     jg       Addr0x6988              # value ::  target: 0x6988 CodeAddr: 0x6988
     cmpb     $0x3d,%r8b              # imm,reg ::  modifies flags!!
     je       Addr0x6ab0              # value ::  target: 0x6ab0 CodeAddr: 0x6ab0
     jle      Addr0x69c0              # value ::  target: 0x69c0 CodeAddr: 0x69c0
Addr0x6941:
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     movb     %r8b,(%r11)             # reg,memBase :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     addq     $0x1,%r11               # imm,reg ::  modifies flags!!
     movzbl   (%r9),%r8d              # memBase,reg :: 
     cmpb     $0x5c,%r8b              # imm,reg ::  modifies flags!!
     jne      Addr0x692f              # value ::  target: 0x692f CodeAddr: 0x692f
Addr0x695a:
     movzbl   0x1(%r9),%ebp           # memOffsetBase,reg :: 
     addq     $0x2,%r9                # imm,reg ::  modifies flags!!
     testb    %bpl,%bpl               # reg,reg ::  modifies flags!!
     je       Addr0x6aa1              # value ::  target: 0x6aa1 CodeAddr: 0x6aa1
     leal     -0x30(%rbp),%r12d       # memOffsetBase,reg :: 
     cmpb     $0x48,%r12b             # imm,reg ::  modifies flags!!
     ja       Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movzbl   %r12b,%r8d              # reg,reg :: 
     movslq   (%r10,%r8,4),%r8        # memBaseIndexScale,reg :: 
     addq     %r10,%r8                # reg,reg ::  modifies flags!!
     notrack jmp *%r8                    # reg :: "*%r8" != "%r8"
#    JUMP TABLE 
#  #{'addr': 27009, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%r8', star='*', offset=None, imm=None, reg='%r8', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 2226, 'size': 4, 'jumpTable': 'unknown'}
Addr0x6988:
     cmpb     $0x5e,%r8b              # imm,reg ::  modifies flags!!
     jne      Addr0x6941              # value ::  target: 0x6941 CodeAddr: 0x6941
     movzbl   0x1(%r9),%r8d           # memOffsetBase,reg :: 
     leaq     0x1(%r9),%r12           # memOffsetBase,reg :: 
     leal     -0x40(%r8),%ebp         # memOffsetBase,reg :: 
     cmpb     $0x3e,%bpl              # imm,reg ::  modifies flags!!
     ja       Addr0x6a98              # value ::  target: 0x6a98 CodeAddr: 0x6a98
     addq     $0x2,%r9                # imm,reg ::  modifies flags!!
     andl     $0x1f,%r8d              # imm,reg ::  modifies flags!!
Addr0x69ad:
     movb     %r8b,(%r11)             # reg,memBase :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     addq     $0x1,%r11               # imm,reg ::  modifies flags!!
     jmp      Addr0x6925              # value ::  target: 0x6925 CodeAddr: 0x6925
Addr0x69c0:
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     je       Addr0x69cf              # value ::  target: 0x69cf CodeAddr: 0x69cf
     cmpb     $0x3a,%r8b              # imm,reg ::  modifies flags!!
     jne      Addr0x6941              # value ::  target: 0x6941 CodeAddr: 0x6941
Addr0x69cf:
     movl     $0x1,%r8d               # imm,reg :: 
Addr0x69d5:
     movq     %r11,(%rdi)             # reg,memBase :: 
     popq     %rbx                    # reg :: 
     movq     %r9,(%rsi)              # reg,memBase :: 
     popq     %rbp                    # reg :: 
     movq     %rax,(%rcx)             # reg,memBase :: 
     popq     %r12                    # reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
     movl     $0x1b,%ebp              # imm,reg :: 
Addr0x69eb:
     movb     %bpl,(%r11)             # reg,memBase :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     addq     $0x1,%r11               # imm,reg ::  modifies flags!!
     jmp      Addr0x6925              # value ::  target: 0x6925 CodeAddr: 0x6925
     movl     $0x7,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x6a05:
     movzbl   (%r9),%ebp              # memBase,reg :: 
     cmpb     $0x46,%bpl              # imm,reg ::  modifies flags!!
     jg       Addr0x6a36              # value ::  target: 0x6a36 CodeAddr: 0x6a36
Addr0x6a0f:
     cmpb     $0x40,%bpl              # imm,reg ::  modifies flags!!
     jg       Addr0x6a80              # value ::  target: 0x6a80 CodeAddr: 0x6a80
     leal     -0x30(%rbp),%r12d       # memOffsetBase,reg :: 
     cmpb     $0x9,%r12b              # imm,reg ::  modifies flags!!
     ja       Addr0x69ad              # value ::  target: 0x69ad CodeAddr: 0x69ad
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     shll     $0x4,%r8d               # imm,reg ::  modifies flags!!
     leal     -0x30(%rbp,%r8,1),%r8d  # memOffsetBaseIndexScale,reg :: 
     movzbl   (%r9),%ebp              # memBase,reg :: 
     cmpb     $0x46,%bpl              # imm,reg ::  modifies flags!!
     jle      Addr0x6a0f              # value ::  target: 0x6a0f CodeAddr: 0x6a0f
Addr0x6a36:
     leal     -0x61(%rbp),%r12d       # memOffsetBase,reg :: 
     cmpb     $0x5,%r12b              # imm,reg ::  modifies flags!!
     ja       Addr0x69ad              # value ::  target: 0x69ad CodeAddr: 0x69ad
     shll     $0x4,%r8d               # imm,reg ::  modifies flags!!
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     leal     -0x57(%rbp,%r8,1),%r8d  # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x6a05              # value ::  target: 0x6a05 CodeAddr: 0x6a05
Addr0x6a58:
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     leal     -0x30(%r8,%r12,8),%r12d # memOffsetBaseIndexScale,reg :: 
     movzbl   (%r9),%r8d              # memBase,reg :: 
     leal     -0x30(%r8),%ebp         # memOffsetBase,reg :: 
     cmpb     $0x7,%bpl               # imm,reg ::  modifies flags!!
     jbe      Addr0x6a58              # value ::  target: 0x6a58 CodeAddr: 0x6a58
     movb     %r12b,(%r11)            # reg,memBase :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     addq     $0x1,%r11               # imm,reg ::  modifies flags!!
     jmp      Addr0x6925              # value ::  target: 0x6925 CodeAddr: 0x6925
Addr0x6a80:
     shll     $0x4,%r8d               # imm,reg ::  modifies flags!!
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     leal     -0x37(%rbp,%r8,1),%r8d  # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x6a05              # value ::  target: 0x6a05 CodeAddr: 0x6a05
Addr0x6a98:
     cmpb     $0x3f,%r8b              # imm,reg ::  modifies flags!!
     je       Addr0x6ac0              # value ::  target: 0x6ac0 CodeAddr: 0x6ac0
     movq     %r12,%r9                # reg,reg :: 
Addr0x6aa1:
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x69d5              # value ::  target: 0x69d5 CodeAddr: 0x69d5
Addr0x6ab0:
     testb    %bl,%bl                 # reg,reg ::  modifies flags!!
     je       Addr0x6941              # value ::  target: 0x6941 CodeAddr: 0x6941
     movl     %edx,%r8d               # reg,reg :: 
     jmp      Addr0x69d5              # value ::  target: 0x69d5 CodeAddr: 0x69d5
Addr0x6ac0:
     movb     $0x7f,(%r11)            # imm,memBase :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     addq     $0x1,%r11               # imm,reg ::  modifies flags!!
     movq     %r12,%r9                # reg,reg :: 
     jmp      Addr0x6925              # value ::  target: 0x6925 CodeAddr: 0x6925
     movl     $0xb,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0xa,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0xd,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0x7f,%ebp              # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0x20,%ebp              # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0x8,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0xc,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb
     movl     $0x9,%ebp               # imm,reg :: 
     jmp      Addr0x69eb              # value ::  target: 0x69eb CodeAddr: 0x69eb

# ----------- Function 127 ------------ 
#
# startAddr  = 0x6b30
# startindex = 2334
# endAddr    = 0x6b38
# endindex   = 2335
# len        = 9 (0x9)
# len1       = 16 (0x10) to (0x6b39)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x6b30:
     endbr64 
     jmp      Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0

# ----------- Function 128 ------------ 
#
# startAddr  = 0x6b40
# startindex = 2337
# endAddr    = 0x6ba0
# endindex   = 2367
# len        = 97 (0x61)
# len1       = 108 (0x6c) to (0x6ba1)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x6b40:
     movl     %edi,%edi               # reg,reg :: 
     leaq     Var0x23060(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23060
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     shlq     $0x4,%rdi               # imm,reg ::  modifies flags!!
     addq     %rax,%rdi               # reg,reg ::  modifies flags!!
     movq     (%rdi),%rax             # memBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x6b71              # value ::  target: 0x6b71 CodeAddr: 0x6b71
     movq     0x8(%rdi),%rdx          # memOffsetBase,reg :: 
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     je       Addr0x6b78              # value ::  target: 0x6b78 CodeAddr: 0x6b78
     movl     $0x1,%r8d               # imm,reg :: 
     cmpq     $0x2,%rax               # imm,reg ::  modifies flags!!
     je       Addr0x6b88              # value ::  target: 0x6b88 CodeAddr: 0x6b88
Addr0x6b71:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x6b78:
     cmpb     $0x30,(%rdx)            # imm,memBase ::  modifies flags!!
     setne    %r8b                    # reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x6b88:
     movzbl   (%rdx),%eax             # memBase,reg :: 
     subl     $0x30,%eax              # imm,reg ::  modifies flags!!
     jne      Addr0x6b97              # value ::  target: 0x6b97 CodeAddr: 0x6b97
     movzbl   0x1(%rdx),%eax          # memOffsetBase,reg :: 
     subl     $0x30,%eax              # imm,reg ::  modifies flags!!
Addr0x6b97:
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     setne    %r8b                    # reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    

# ----------- Function 129 ------------ 
#
# startAddr  = 0x6bb0
# startindex = 2370
# endAddr    = 0x6c26
# endindex   = 2398
# len        = 119 (0x77)
# len1       = 128 (0x80) to (0x6c27)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x6bb0:
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x197fe
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsp,%rcx               # reg,reg :: 
     callq    Addr0x16340             # value ::  target: 0x16340 CodeAddr: 0x16340 CALLS 0x16340
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x6c10              # value ::  target: 0x6c10 CodeAddr: 0x6c10
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x6c08              # value ::  target: 0x6c08 CodeAddr: 0x6c08
     movq     $0xffffffffffffffff,Var0x242b0(%rip)# imm,memOffsetBase ::  DataAddr: 0x242b0
     movl     $0x1,%eax               # imm,reg :: 
Addr0x6bf0:
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     xorq     0x28,%rdx               # value,reg ::  modifies flags!!
     jne      Addr0x6c22              # value ::  target: 0x6c22 CodeAddr: 0x6c22
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x6c08:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x6bf0              # value ::  target: 0x6bf0 CodeAddr: 0x6bf0
Addr0x6c10:
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     %rax,Var0x242b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x242b0
     movl     $0x1,%eax               # imm,reg :: 
     jmp      Addr0x6bf0              # value ::  target: 0x6bf0 CodeAddr: 0x6bf0
Addr0x6c22:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 130 ------------ 
#
# startAddr  = 0x6c30
# startindex = 2400
# endAddr    = 0x6e7e
# endindex   = 2547
# len        = 591 (0x24f)
# len1       = 592 (0x250) to (0x6e7f)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x6c30:
     pushq    %r15                    # reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x658,%rsp             # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x648(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     0x30(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %rdi,0x18(%rsp)         # reg,memOffsetBase :: 
Addr0x6c60:
     leaq     Var0x23040(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23040
     movq     (%rax,%rsi,1),%rax      # memBaseIndexScale,reg :: 
     movzbl   (%rax),%edx             # memBase,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x6c8b              # value ::  target: 0x6c8b CodeAddr: 0x6c8b
Addr0x6c78:
     movzbl   0x1(%rax),%ecx          # memOffsetBase,reg :: 
     cmpb     $0x25,%dl               # imm,reg ::  modifies flags!!
     je       Addr0x6c90              # value ::  target: 0x6c90 CodeAddr: 0x6c90
Addr0x6c81:
     movl     %ecx,%edx               # reg,reg :: 
Addr0x6c83:
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x6c78              # value ::  target: 0x6c78 CodeAddr: 0x6c78
Addr0x6c8b:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x6c9e              # value ::  target: 0x6c9e CodeAddr: 0x6c9e
Addr0x6c90:
     cmpb     $0x25,%cl               # imm,reg ::  modifies flags!!
     je       Addr0x6d50              # value ::  target: 0x6d50 CodeAddr: 0x6d50
     cmpb     $0x62,%cl               # imm,reg ::  modifies flags!!
     jne      Addr0x6c81              # value ::  target: 0x6c81 CodeAddr: 0x6c81
Addr0x6c9e:
     movq     %rax,(%rdi,%rsi,1)      # reg,memBaseIndexScale :: 
     addq     $0x8,%rsi               # imm,reg ::  modifies flags!!
     cmpq     $0x10,%rsi              # imm,reg ::  modifies flags!!
     jne      Addr0x6c60              # value ::  target: 0x6c60 CodeAddr: 0x6c60
     cmpq     $0x0,0x30(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0xc,%r13d              # imm,reg :: 
     je       Addr0x6d8d              # value ::  target: 0x6d8d CodeAddr: 0x6d8d
Addr0x6cbe:
     leaq     0x40(%rsp),%rax         # memOffsetBase,reg :: 
     leaq     0x28(%rsp),%r14         # memOffsetBase,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     leaq     0x640(%rsp),%rax        # memOffsetBase,reg :: 
     movq     %rax,(%rsp)             # reg,memBase :: 
Addr0x6cd9:
     movq     0x8(%rsp),%r15          # memOffsetBase,reg :: 
     movl     $0x2000e,%ebp           # imm,reg ::  DataAddr: 0x2000e
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
Addr0x6ce8:
     movl     %ebp,%edi               # reg,reg :: 
     movq     %r13,0x28(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x4b80              # value ::  target: 0x4b80 CodeAddr: 0x4b80 CALLS 0x4b80
     movl     $0x25,%esi              # imm,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x6d64              # value ::  target: 0x6d64 CodeAddr: 0x6d64
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     movq     %r14,%rcx               # reg,reg :: 
     movl     $0x80,%edx              # imm,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x11020             # value ::  target: 0x11020 CodeAddr: 0x11020 CALLS 0x11020
     cmpq     $0x7f,%rax              # imm,reg ::  modifies flags!!
     ja       Addr0x6d64              # value ::  target: 0x6d64 CodeAddr: 0x6d64
     movq     0x28(%rsp),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,%rbx               # reg,reg ::  modifies flags!!
     cmovbq   %rax,%rbx               # reg,reg :: 
     addl     $0x1,%ebp               # imm,reg ::  modifies flags!!
     subq     $0xffffffffffffff80,%r15# imm,reg ::  modifies flags!!
     cmpq     (%rsp),%r15             # memBase,reg ::  modifies flags!!
     jne      Addr0x6ce8              # value ::  target: 0x6ce8 CodeAddr: 0x6ce8
     cmpq     %rbx,%r13               # reg,reg ::  modifies flags!!
     jbe      Addr0x6d9b              # value ::  target: 0x6d9b CodeAddr: 0x6d9b
     movq     %rbx,%r13               # reg,reg :: 
     jmp      Addr0x6cd9              # value ::  target: 0x6cd9 CodeAddr: 0x6cd9
Addr0x6d50:
     movzbl   0x2(%rax),%edx          # memOffsetBase,reg :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jmp      Addr0x6c83              # value ::  target: 0x6c83 CodeAddr: 0x6c83
Addr0x6d5d:
     movb     $0x1,Var0x233c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x233c8
Addr0x6d64:
     movq     0x648(%rsp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x6e7a              # value ::  target: 0x6e7a CodeAddr: 0x6e7a
     addq     $0x658,%rsp             # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x6d8d:
     cmpq     $0x0,0x38(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x6cbe              # value ::  target: 0x6cbe CodeAddr: 0x6cbe
     jmp      Addr0x6d64              # value ::  target: 0x6d64 CodeAddr: 0x6d64
Addr0x6d9b:
     movq     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     leaq     Var0x233e0(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x233e0
Addr0x6dab:
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     leaq     Var0x23040(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x23040
     movq     0x8(%rsp),%r14          # memOffsetBase,reg :: 
     movq     (%rbx,%rax,8),%rbp      # memBaseIndexScale,reg :: 
     movq     0x18(%rsp),%rbx         # memOffsetBase,reg :: 
     imulq    $0x600,%rax,%rdi        # imm,reg,reg ::  modifies flags!!
     movq     (%rbx,%rax,8),%r15      # memBaseIndexScale,reg :: 
     leaq     (%r12,%rdi,1),%r13      # memBaseIndexScale,reg :: 
     movq     %r15,%rbx               # reg,reg :: 
     subq     %rbp,%rbx               # reg,reg ::  modifies flags!!
     jmp      Addr0x6e39              # value ::  target: 0x6e39 CodeAddr: 0x6e39
Addr0x6de0:
     cmpq     $0x80,%rbx              # imm,reg ::  modifies flags!!
     jg       Addr0x6d64              # value ::  target: 0x6d64 CodeAddr: 0x6d64
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     0x2(%r15),%rax          # memOffsetBase,reg :: 
     movl     %ebx,%r9d               # reg,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     pushq    %rax                    # reg :: 
     leaq     Var0x197a4(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x197a4
     movl     $0x80,%esi              # imm,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     $0xffffffffffffffff,%rcx# imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     pushq    %rbp                    # reg :: 
     callq    Addr0x4730              # value ::  target: 0x4730 CodeAddr: 0x4730 CALLS 0x4730
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
Addr0x6e22:
     cmpl     $0x7f,%eax              # imm,reg ::  modifies flags!!
     ja       Addr0x6d64              # value ::  target: 0x6d64 CodeAddr: 0x6d64
     subq     $0xffffffffffffff80,%r13# imm,reg ::  modifies flags!!
     subq     $0xffffffffffffff80,%r14# imm,reg ::  modifies flags!!
     cmpq     (%rsp),%r14             # memBase,reg ::  modifies flags!!
     je       Addr0x6e60              # value ::  target: 0x6e60 CodeAddr: 0x6e60
Addr0x6e39:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     jne      Addr0x6de0              # value ::  target: 0x6de0 CodeAddr: 0x6de0
     movq     %rbp,%rcx               # reg,reg :: 
     leaq     Var0x1be9c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9c
     movq     %r13,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x80,%esi              # imm,reg :: 
     callq    Addr0x4940              # value ::  target: 0x4940 CodeAddr: 0x4940 CALLS 0x4940
     jmp      Addr0x6e22              # value ::  target: 0x6e22 CodeAddr: 0x6e22
Addr0x6e60:
     cmpq     $0x1,0x10(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x6d5d              # value ::  target: 0x6d5d CodeAddr: 0x6d5d
     movq     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x6dab              # value ::  target: 0x6dab CodeAddr: 0x6dab
Addr0x6e7a:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 131 ------------ 
#
# startAddr  = 0x6e80
# startindex = 2549
# endAddr    = 0x6ee7
# endindex   = 2581
# len        = 104 (0x68)
# len1       = 112 (0x70) to (0x6ee8)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x6e80:
     pushq    %r13                    # reg :: 
     movl     %edx,%r13d              # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     movl     $0x20,%edi              # imm,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %rax,%rbx               # reg,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x6eb0              # value ::  target: 0x6eb0 CodeAddr: 0x6eb0
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x15b10             # value ::  target: 0x15b10 CodeAddr: 0x15b10 CALLS 0x15b10
     movq     %rax,%r12               # reg,reg :: 
Addr0x6eb0:
     movq     %r12,0x8(%rbx)          # reg,memOffsetBase :: 
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     je       Addr0x6ec4              # value ::  target: 0x6ec4 CodeAddr: 0x6ec4
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x15b10             # value ::  target: 0x15b10 CodeAddr: 0x15b10 CALLS 0x15b10
     movq     %rax,%rbp               # reg,reg :: 
Addr0x6ec4:
     movq     Var0x24380(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24380
     movq     %rbp,(%rbx)             # reg,memBase :: 
     movb     %r13b,0x10(%rbx)        # reg,memOffsetBase :: 
     movq     %rax,0x18(%rbx)         # reg,memOffsetBase :: 
     movq     %rbx,Var0x24380(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24380
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    

# ----------- Function 132 ------------ 
#
# startAddr  = 0x6ef0
# startindex = 2583
# endAddr    = 0x6efe
# endindex   = 2586
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x6eff)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x6ef0:
     endbr64 
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80

# ----------- Function 133 ------------ 
#
# startAddr  = 0x6f00
# startindex = 2588
# endAddr    = 0x6f11
# endindex   = 2592
# len        = 18 (0x12)
# len1       = 29 (0x1d) to (0x6f12)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x6f00:
     endbr64 
     movq     %rsi,%r8                # reg,reg :: 
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%r8),%rdi              # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80

# ----------- Function 134 ------------ 
#
# startAddr  = 0x6f20
# startindex = 2595
# endAddr    = 0x6f61
# endindex   = 2611
# len        = 66 (0x42)
# len1       = 77 (0x4d) to (0x6f62)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x6f20:
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x8(%rbx),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x10(%rbx),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0xb0(%rbx),%rdi         # memOffsetBase,reg :: 
     leaq     Var0x23022(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23022
     cmpq     %rax,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x6f60              # value ::  target: 0x6f60 CodeAddr: 0x6f60
     popq     %rbx                    # reg :: 
     jmp      Addr0x4cd0              # value ::  target: 0x4cd0 CodeAddr: 0x4cd0
Addr0x6f60:
     popq     %rbx                    # reg :: 
     retq    

# ----------- Function 135 ------------ 
#
# startAddr  = 0x6f70
# startindex = 2614
# endAddr    = 0x701b
# endindex   = 2639
# len        = 172 (0xac)
# len1       = 176 (0xb0) to (0x701c)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x6f70:
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     pushq    %rbx                    # reg :: 
     je       Addr0x6f9d              # value ::  target: 0x6f9d CodeAddr: 0x6f9d
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
Addr0x6f80:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     (%rax,%rbx,8),%rdi      # memBaseIndexScale,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     callq    Addr0x6f20              # value ::  target: 0x6f20 CodeAddr: 0x6f20 CALLS 0x6f20
     cmpq     %rbx,Var0x243b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     ja       Addr0x6f80              # value ::  target: 0x6f80 CodeAddr: 0x6f80
Addr0x6f9d:
     movq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0
     popq     %rbx                    # reg :: 
     movb     $0x0,Var0x243a9(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a9
     movb     $0x0,Var0x24364(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24364
     movl     $0x0,Var0x24360(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24360
     movl     $0x0,Var0x2435c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2435c
     movl     $0x0,Var0x24358(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24358
     movl     $0x0,Var0x24350(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24350
     movl     $0x0,Var0x2434c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2434c
     movl     $0x0,Var0x24348(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24348
     movl     $0x0,Var0x24354(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24354
     movl     $0x0,Var0x24344(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24344
     movl     $0x0,Var0x24340(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24340
     movl     $0x0,Var0x2433c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2433c
     retq    

# ----------- Function 136 ------------ 
#
# startAddr  = 0x7020
# startindex = 2641
# endAddr    = 0x7097
# endindex   = 2672
# len        = 120 (0x78)
# len1       = 128 (0x80) to (0x7098)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7020:
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     movq     $0xffffffffffffffff,%rcx# imm,reg :: 
     movl     $0x2,%esi               # imm,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rbp,%rdx               # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     Var0x242d0(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x242d0
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     0x6(%rsp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x14980             # value ::  target: 0x14980 CodeAddr: 0x14980 CALLS 0x14980
     movzbl   0x6(%rsp),%edx          # memOffsetBase,reg :: 
     cmpb     %dl,0x0(%rbp)           # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x7080              # value ::  target: 0x7080 CodeAddr: 0x7080
     movl     $0x1,%eax               # imm,reg :: 
Addr0x7068:
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0x7093              # value ::  target: 0x7093 CodeAddr: 0x7093
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x7080:
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpq     %rbx,%rax               # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     jmp      Addr0x7068              # value ::  target: 0x7068 CodeAddr: 0x7068
Addr0x7093:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 137 ------------ 
#
# startAddr  = 0x70a0
# startindex = 2674
# endAddr    = 0x7176
# endindex   = 2737
# len        = 215 (0xd7)
# len1       = 224 (0xe0) to (0x7177)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x70a0:
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     movl     %esi,%r12d              # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x1(%rax),%rcx          # memOffsetBase,reg :: 
     movl     $0x3,%eax               # imm,reg :: 
     mulq     %rcx                    # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x7172              # value ::  target: 0x7172 CodeAddr: 0x7172
     movzbl   %dl,%edx                # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x7172              # value ::  target: 0x7172 CodeAddr: 0x7172
     leaq     (%rcx,%rcx,2),%rdi      # memBaseIndexScale,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %rax,%r13               # reg,reg :: 
     movzbl   (%rbx),%eax             # memBase,reg :: 
     movq     %r13,%rbp               # reg,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7151              # value ::  target: 0x7151 CodeAddr: 0x7151
     leaq     Var0x23fe0(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x23fe0
     jmp      Addr0x710e              # value ::  target: 0x710e CodeAddr: 0x710e
Addr0x7100:
     movb     %al,0x0(%rbp)           # reg,memOffsetBase :: 
     addq     $0x1,%rbp               # imm,reg ::  modifies flags!!
Addr0x7107:
     movzbl   (%rbx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7151              # value ::  target: 0x7151 CodeAddr: 0x7151
Addr0x710e:
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     jne      Addr0x711b              # value ::  target: 0x711b CodeAddr: 0x711b
     testb    %r12b,%r12b             # reg,reg ::  modifies flags!!
     jne      Addr0x7168              # value ::  target: 0x7168 CodeAddr: 0x7168
Addr0x711b:
     movzbl   %al,%edx                # reg,reg :: 
     movzbl   %al,%r8d                # reg,reg :: 
     cmpb     $0x0,(%r14,%rdx,1)      # imm,memBaseIndexScale ::  modifies flags!!
     jne      Addr0x7100              # value ::  target: 0x7100 CodeAddr: 0x7100
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     addq     $0x3,%rbp               # imm,reg ::  modifies flags!!
     leaq     Var0x197ad(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197ad
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movzbl   (%rbx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x710e              # value ::  target: 0x710e CodeAddr: 0x710e
Addr0x7151:
     movb     $0x0,0x0(%rbp)          # imm,memOffsetBase :: 
     movq     %r13,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x7168:
     movb     $0x2f,0x0(%rbp)         # imm,memOffsetBase :: 
     addq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     jmp      Addr0x7107              # value ::  target: 0x7107 CodeAddr: 0x7107
Addr0x7172:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 138 ------------ 
#
# startAddr  = 0x7180
# startindex = 2739
# endAddr    = 0x730c
# endindex   = 2825
# len        = 397 (0x18d)
# len1       = 400 (0x190) to (0x730d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7180:
     pushq    %rbx                    # reg :: 
     movq     Var0x243b0(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243b0
     movq     %rbx,%rax               # reg,reg :: 
     shrq     %rax                    # reg ::  modifies flags!!
     addq     %rbx,%rax               # reg,reg ::  modifies flags!!
     cmpq     Var0x24398(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24398 modifies flags!!
     ja       Addr0x7290              # value ::  target: 0x7290 CodeAddr: 0x7290
Addr0x719e:
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x71cb              # value ::  target: 0x71cb CodeAddr: 0x71cb
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     Var0x243c0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x243c0
     leaq     (%rax,%rbx,8),%rcx      # memBaseIndexScale,reg :: 
Addr0x71b8:
     movq     %rdx,(%rax)             # reg,memBase :: 
     addq     $0x8,%rax               # imm,reg ::  modifies flags!!
     addq     $0xc8,%rdx              # imm,reg ::  modifies flags!!
     cmpq     %rax,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x71b8              # value ::  target: 0x71b8 CodeAddr: 0x71b8
Addr0x71cb:
     cmpl     $0xffffffff,Var0x24330(%rip)# imm,memOffsetBase ::  DataAddr: 0x24330 modifies flags!!
     je       Addr0x7278              # value ::  target: 0x7278 CodeAddr: 0x7278
     leaq     Var0x23300(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23300
     callq    Addr0x4a40              # value ::  target: 0x4a40 CodeAddr: 0x4a40 CALLS 0x4a40
     endbr64 
     movl     Var0x24330(%rip),%esi   # memOffsetBase,reg ::  DataAddr: 0x24330
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x7280              # value ::  target: 0x7280 CodeAddr: 0x7280
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     je       Addr0x72ee              # value ::  target: 0x72ee CodeAddr: 0x72ee
     movq     Var0x243b0(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x243b0
     movq     Var0x243a0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x243a0
     testq    %r8,%r8                 # reg,reg ::  modifies flags!!
     je       Addr0x7233              # value ::  target: 0x7233 CodeAddr: 0x7233
     movq     Var0x243c0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x243c0
     movq     %rdi,%rax               # reg,reg :: 
     leaq     (%rdi,%r8,8),%rcx       # memBaseIndexScale,reg :: 
Addr0x7220:
     movq     %rdx,(%rax)             # reg,memBase :: 
     addq     $0x8,%rax               # imm,reg ::  modifies flags!!
     addq     $0xc8,%rdx              # imm,reg ::  modifies flags!!
     cmpq     %rcx,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x7220              # value ::  target: 0x7220 CodeAddr: 0x7220
Addr0x7233:
     movl     $0x1,%eax               # imm,reg :: 
Addr0x7238:
     cmpl     $0x4,%esi               # imm,reg ::  modifies flags!!
     movl     $0x0,%edx               # imm,reg :: 
     cltq    
     cmovel   Var0x24334(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24334
     movzbl   Var0x242f4(%rip),%ecx   # memOffsetBase,reg ::  DataAddr: 0x242f4
     addl     %esi,%edx               # reg,reg ::  modifies flags!!
     movq     %r8,%rsi                # reg,reg :: 
     leaq     (%rax,%rdx,2),%rdx      # memBaseIndexScale,reg :: 
     movzbl   Var0x2432f(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x2432f
     leaq     (%rax,%rdx,2),%rax      # memBaseIndexScale,reg :: 
     leaq     (%rcx,%rax,2),%rdx      # memBaseIndexScale,reg :: 
     leaq     Var0x22020(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x22020
     movq     (%rax,%rdx,8),%rdx      # memBaseIndexScale,reg :: 
     callq    Addr0x11940             # value ::  target: 0x11940 CodeAddr: 0x11940 CALLS 0x11940
Addr0x7278:
     popq     %rbx                    # reg :: 
     retq    
Addr0x7280:
     movq     Var0x243a0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     Var0x243b0(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x243b0
     jmp      Addr0x7238              # value ::  target: 0x7238 CodeAddr: 0x7238
Addr0x7290:
     movq     Var0x243a0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x243a0
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movl     $0x18,%edx              # imm,reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rbx                    # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movl     $0x1,%eax               # imm,reg :: 
     movzbl   %dl,%edx                # reg,reg :: 
     cmovsq   %rax,%rdx               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x72e9              # value ::  target: 0x72e9 CodeAddr: 0x72e9
     leaq     (%rbx,%rbx,2),%rdi      # memBaseIndexScale,reg :: 
     shlq     $0x3,%rdi               # imm,reg ::  modifies flags!!
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     Var0x243b0(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243b0
     movq     %rax,Var0x243a0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243a0
     leaq     (%rbx,%rbx,2),%rax      # memBaseIndexScale,reg :: 
     movq     %rax,Var0x24398(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24398
     jmp      Addr0x719e              # value ::  target: 0x719e CodeAddr: 0x719e
Addr0x72e9:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30
Addr0x72ee:
     leaq     Var0x18688(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x18688
     movl     $0xee8,%edx             # imm,reg :: 
     leaq     Var0x197b4(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197b4
     leaq     Var0x197bd(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x197bd
     callq    Addr0x49b0              # value ::  target: 0x49b0 CodeAddr: 0x49b0 CALLS 0x49b0

# ----------- Function 139 ------------ 
#
# startAddr  = 0x7310
# startindex = 2827
# endAddr    = 0x7339
# endindex   = 2839
# len        = 42 (0x2a)
# len1       = 48 (0x30) to (0x733a)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7310:
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x0,(%rax)             # imm,memBase :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x4ba0              # value ::  target: 0x4ba0 CodeAddr: 0x4ba0

# ----------- Function 140 ------------ 
#
# startAddr  = 0x7340
# startindex = 2841
# endAddr    = 0x734b
# endindex   = 2844
# len        = 12 (0xc)
# len1       = 16 (0x10) to (0x734c)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7340:
     endbr64 
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310

# ----------- Function 141 ------------ 
#
# startAddr  = 0x7350
# startindex = 2846
# endAddr    = 0x735e
# endindex   = 2850
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x735f)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7350:
     endbr64 
     movq     %rsi,%r8                # reg,reg :: 
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%r8),%rdi              # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310

# ----------- Function 142 ------------ 
#
# startAddr  = 0x7360
# startindex = 2852
# endAddr    = 0x7371
# endindex   = 2856
# len        = 18 (0x12)
# len1       = 29 (0x1d) to (0x7372)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7360:
     endbr64 
     movq     %rsi,%r8                # reg,reg :: 
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%r8),%rdi              # memBase,reg :: 
     jmp      Addr0xe6e0              # value ::  target: 0xe6e0 CodeAddr: 0xe6e0

# ----------- Function 143 ------------ 
#
# startAddr  = 0x7380
# startindex = 2859
# endAddr    = 0x738e
# endindex   = 2862
# len        = 15 (0xf)
# len1       = 16 (0x10) to (0x738f)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7380:
     endbr64 
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0xe6e0              # value ::  target: 0xe6e0 CodeAddr: 0xe6e0

# ----------- Function 144 ------------ 
#
# startAddr  = 0x7390
# startindex = 2864
# endAddr    = 0x7511
# endindex   = 2969
# len        = 386 (0x182)
# len1       = 397 (0x18d) to (0x7512)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7390:
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movzbl   %sil,%r13d              # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x73ba              # value ::  target: 0x73ba CodeAddr: 0x73ba
     cmpq     $0x0,Var0x243c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243c8 modifies flags!!
     je       Addr0x73ba              # value ::  target: 0x73ba CodeAddr: 0x73ba
     movq     %rdi,%rsi               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x6e80              # value ::  target: 0x6e80 CodeAddr: 0x6e80 CALLS 0x6e80
Addr0x73ba:
     movq     Var0x243b0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243b0
     leaq     -0x1(%rax),%rbx         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x73de              # value ::  target: 0x73de CodeAddr: 0x73de
     jmp      Addr0x7500              # value ::  target: 0x7500 CodeAddr: 0x7500
Addr0x73d0:
     subq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     $0xffffffffffffffff,%rbx# imm,reg ::  modifies flags!!
     je       Addr0x7470              # value ::  target: 0x7470 CodeAddr: 0x7470
Addr0x73de:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     (%rax,%rbx,8),%rbp      # memBaseIndexScale,reg :: 
     movl     0xa8(%rbp),%eax         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x73f9              # value ::  target: 0x73f9 CodeAddr: 0x73f9
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x73d0              # value ::  target: 0x73d0 CodeAddr: 0x73d0
Addr0x73f9:
     movq     0x0(%rbp),%r14          # memOffsetBase,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x74c0              # value ::  target: 0x74c0 CodeAddr: 0x74c0
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0xe140              # value ::  target: 0xe140 CodeAddr: 0xe140 CALLS 0xe140
     cmpb     $0x2e,(%rax)            # imm,memBase ::  modifies flags!!
     je       Addr0x74d8              # value ::  target: 0x74d8 CodeAddr: 0x74d8
Addr0x7417:
     cmpb     $0x2f,(%r14)            # imm,memBase ::  modifies flags!!
     je       Addr0x74c0              # value ::  target: 0x74c0 CodeAddr: 0x74c0
     movq     %r14,%rsi               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0xe510              # value ::  target: 0xe510 CodeAddr: 0xe510 CALLS 0xe510
     movq     0x8(%rbp),%rsi          # memOffsetBase,reg :: 
     movl     %r13d,%edx              # reg,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x6e80              # value ::  target: 0x6e80 CodeAddr: 0x6e80 CALLS 0x6e80
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
Addr0x7448:
     cmpl     $0x9,0xa8(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x73d0              # value ::  target: 0x73d0 CodeAddr: 0x73d0
     movq     %rbp,%rdi               # reg,reg :: 
     subq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     callq    Addr0x6f20              # value ::  target: 0x6f20 CodeAddr: 0x6f20 CALLS 0x6f20
     cmpq     $0xffffffffffffffff,%rbx# imm,reg ::  modifies flags!!
     jne      Addr0x73de              # value ::  target: 0x73de CodeAddr: 0x73de
Addr0x7470:
     movq     Var0x243b0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x243b0
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x7500              # value ::  target: 0x7500 CodeAddr: 0x7500
     movq     Var0x243a0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x243a0
     leaq     (%rsi,%rdx,8),%rdi      # memBaseIndexScale,reg :: 
     movq     %rsi,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
Addr0x7490:
     movq     (%rax),%rcx             # memBase,reg :: 
     cmpl     $0x9,0xa8(%rcx)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rcx,(%rsi,%rdx,8)      # reg,memBaseIndexScale :: 
     setne    %cl                     # reg :: 
     addq     $0x8,%rax               # imm,reg ::  modifies flags!!
     movzbl   %cl,%ecx                # reg,reg :: 
     addq     %rcx,%rdx               # reg,reg ::  modifies flags!!
     cmpq     %rax,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0x7490              # value ::  target: 0x7490 CodeAddr: 0x7490
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %rdx,Var0x243b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243b0
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x74c0:
     movq     0x8(%rbp),%rsi          # memOffsetBase,reg :: 
     movl     %r13d,%edx              # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x6e80              # value ::  target: 0x6e80 CodeAddr: 0x6e80 CALLS 0x6e80
     jmp      Addr0x7448              # value ::  target: 0x7448 CodeAddr: 0x7448
Addr0x74d8:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpb     $0x2e,0x1(%rax)         # imm,memOffsetBase ::  modifies flags!!
     sete     %dl                     # reg :: 
     movzbl   0x1(%rax,%rdx,1),%eax   # memOffsetBaseIndexScale,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x73d0              # value ::  target: 0x73d0 CodeAddr: 0x73d0
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     je       Addr0x73d0              # value ::  target: 0x73d0 CodeAddr: 0x73d0
     jmp      Addr0x7417              # value ::  target: 0x7417 CodeAddr: 0x7417
Addr0x7500:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %rdx,Var0x243b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243b0
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    

# ----------- Function 145 ------------ 
#
# startAddr  = 0x7520
# startindex = 2972
# endAddr    = 0x75e0
# endindex   = 3032
# len        = 193 (0xc1)
# len1       = 204 (0xcc) to (0x75e1)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7520:
     cmpq     %rsi,%rdi               # reg,reg ::  modifies flags!!
     jae      Addr0x75e0              # value ::  target: 0x75e0 CodeAddr: 0x75e0
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     jmp      Addr0x7576              # value ::  target: 0x7576 CodeAddr: 0x7576
Addr0x7538:
     movq     %r12,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rax,%r9                # reg,reg :: 
     movq     %rbp,%rax               # reg,reg :: 
     divq     %rcx                    # reg :: 
     cmpq     %rax,%r9                # reg,reg ::  modifies flags!!
     jbe      Addr0x7595              # value ::  target: 0x7595 CodeAddr: 0x7595
     cmpq     %r8,%rsi                # reg,reg ::  modifies flags!!
     jae      Addr0x75c8              # value ::  target: 0x75c8 CodeAddr: 0x75c8
     leaq     0x1(%rsi),%rax          # memOffsetBase,reg :: 
     movq     %rax,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0x9,(%rsi)             # imm,memBase :: 
Addr0x7560:
     movq     %rbx,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     addq     %rbx,%rcx               # reg,reg ::  modifies flags!!
     movq     %rcx,%rbx               # reg,reg :: 
     subq     %rdx,%rbx               # reg,reg ::  modifies flags!!
     cmpq     %r12,%rbx               # reg,reg ::  modifies flags!!
     jae      Addr0x75ad              # value ::  target: 0x75ad CodeAddr: 0x75ad
Addr0x7576:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     Var0x242c0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x242c0
     leaq     0x1(%rbx),%rbp          # memOffsetBase,reg :: 
     movq     0x28(%rdi),%rsi         # memOffsetBase,reg :: 
     movq     0x30(%rdi),%r8          # memOffsetBase,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x7538              # value ::  target: 0x7538 CodeAddr: 0x7538
Addr0x7595:
     cmpq     %r8,%rsi                # reg,reg ::  modifies flags!!
     jae      Addr0x75b8              # value ::  target: 0x75b8 CodeAddr: 0x75b8
     leaq     0x1(%rsi),%rax          # memOffsetBase,reg :: 
     movq     %rax,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0x20,(%rsi)            # imm,memBase :: 
Addr0x75a5:
     movq     %rbp,%rbx               # reg,reg :: 
     cmpq     %r12,%rbx               # reg,reg ::  modifies flags!!
     jb       Addr0x7576              # value ::  target: 0x7576 CodeAddr: 0x7576
Addr0x75ad:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x75b8:
     movl     $0x20,%esi              # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0x75a5              # value ::  target: 0x75a5 CodeAddr: 0x75a5
Addr0x75c8:
     movl     $0x9,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     movq     Var0x242c0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x242c0
     jmp      Addr0x7560              # value ::  target: 0x7560 CodeAddr: 0x7560
Addr0x75e0:
     retq    

# ----------- Function 146 ------------ 
#
# startAddr  = 0x75f0
# startindex = 3035
# endAddr    = 0x76b2
# endindex   = 3091
# len        = 195 (0xc3)
# len1       = 206 (0xce) to (0x76b3)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x75f0:
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     0x18(%rsi),%rax         # memOffsetBase,reg :: 
     movq     0x10(%rsi),%rbx         # memOffsetBase,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     subq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     cmpq     $0x7,%rbp               # imm,reg ::  modifies flags!!
     jbe      Addr0x7697              # value ::  target: 0x7697 CodeAddr: 0x7697
     cmpq     %rbx,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x769c              # value ::  target: 0x769c CodeAddr: 0x769c
Addr0x7615:
     movq     0x30(%rsi),%rdx         # memOffsetBase,reg :: 
     movq     0x8(%rsi),%rcx          # memOffsetBase,reg :: 
     leaq     Var0x197d7(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x197d7
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     notq     %rdx                    # reg :: 
     andq     %rdx,%rax               # reg,reg ::  modifies flags!!
     movq     0x20(%rsi),%rdx         # memOffsetBase,reg :: 
     movq     %rax,%r8                # reg,reg :: 
     movq     %rdx,%r9                # reg,reg :: 
     subq     %rcx,%r8                # reg,reg ::  modifies flags!!
     subq     %rcx,%r9                # reg,reg ::  modifies flags!!
     cmpq     %r9,%r8                 # reg,reg ::  modifies flags!!
     cmovaq   %rdx,%rax               # reg,reg :: 
     andq     $0xfffffffffffffff8,%rbp# imm,reg ::  modifies flags!!
     addq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     movq     %rax,0x18(%rsi)         # reg,memOffsetBase :: 
     movq     %rax,0x10(%rsi)         # reg,memOffsetBase :: 
     movq     Var0x23288(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23288
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
Addr0x7660:
     movq     (%rbx),%rdx             # memBase,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     addq     $0x8,%rbx               # imm,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     cmpq     %rbp,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x7660              # value ::  target: 0x7660 CodeAddr: 0x7660
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0x76a5              # value ::  target: 0x76a5 CodeAddr: 0x76a5
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0x7697:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x769c:
     orb      $0x2,0x50(%rsi)         # imm,memOffsetBase ::  modifies flags!!
     jmp      Addr0x7615              # value ::  target: 0x7615 CodeAddr: 0x7615
Addr0x76a5:
     popq     %rbx                    # reg :: 
     movl     $0xa,%esi               # imm,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950

# ----------- Function 147 ------------ 
#
# startAddr  = 0x76c0
# startindex = 3094
# endAddr    = 0x777a
# endindex   = 3142
# len        = 187 (0xbb)
# len1       = 192 (0xc0) to (0x777b)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x76c0:
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movl     %edx,%ebx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x7760              # value ::  target: 0x7760 CodeAddr: 0x7760
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %rdi,%rbp               # reg,reg :: 
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     movq     Var0x23288(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %rbp,%rdi               # reg,reg :: 
     subl     %eax,%ebx               # reg,reg ::  modifies flags!!
     movl     $0x0,%eax               # imm,reg :: 
     cmovsl   %eax,%ebx               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movslq   %ebx,%rbp               # reg,reg :: 
     addq     %rax,%rbp               # reg,reg ::  modifies flags!!
Addr0x7708:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0x7750              # value ::  target: 0x7750 CodeAddr: 0x7750
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0x20,(%rax)            # imm,memBase :: 
Addr0x7724:
     subl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     cmpl     $0xffffffff,%ebx        # imm,reg ::  modifies flags!!
     jne      Addr0x7708              # value ::  target: 0x7708 CodeAddr: 0x7708
Addr0x772c:
     movq     Var0x241f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x241f8
     leaq     0x1(%rbp,%rax,1),%rax   # memOffsetBaseIndexScale,reg :: 
     movq     %rax,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x7750:
     movl     $0x20,%esi              # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0x7724              # value ::  target: 0x7724 CodeAddr: 0x7724
Addr0x7760:
     movq     %rsi,%rcx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movslq   %ebx,%rbp               # reg,reg :: 
     leaq     Var0x197dc(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197dc
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     jmp      Addr0x772c              # value ::  target: 0x772c CodeAddr: 0x772c

# ----------- Function 148 ------------ 
#
# startAddr  = 0x7780
# startindex = 3144
# endAddr    = 0x77cb
# endindex   = 3164
# len        = 76 (0x4c)
# len1       = 80 (0x50) to (0x77cc)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7780:
     pushq    %r12                    # reg :: 
     leaq     Var0x197e2(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x197e2
     movl     %esi,%r12d              # reg,reg :: 
     movl     %edi,%esi               # reg,reg :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x77a2              # value ::  target: 0x77a2 CodeAddr: 0x77a2
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x2432d(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432d modifies flags!!
     je       Addr0x77b8              # value ::  target: 0x77b8 CodeAddr: 0x77b8
Addr0x77a2:
     addq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movl     %r12d,%edx              # reg,reg :: 
     movq     %r8,%rdi                # reg,reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x76c0              # value ::  target: 0x76c0 CodeAddr: 0x76c0
Addr0x77b8:
     movq     %rsi,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x10bc0             # value ::  target: 0x10bc0 CodeAddr: 0x10bc0 CALLS 0x10bc0
     movq     0x8(%rsp),%rsi          # memOffsetBase,reg :: 
     movq     %rax,%r8                # reg,reg :: 
     jmp      Addr0x77a2              # value ::  target: 0x77a2 CodeAddr: 0x77a2

# ----------- Function 149 ------------ 
#
# startAddr  = 0x77d0
# startindex = 3166
# endAddr    = 0x77ed
# endindex   = 3173
# len        = 30 (0x1e)
# len1       = 32 (0x20) to (0x77ee)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x77d0:
     endbr64 
     movl     Var0x24218(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24218
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x77ed              # value ::  target: 0x77ed CodeAddr: 0x77ed
     movl     Var0x24214(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24214
     addl     $0x1,%eax               # imm,reg ::  modifies flags!!
     movl     %eax,Var0x24214(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24214
Addr0x77ed:
     retq    

# ----------- Function 150 ------------ 
#
# startAddr  = 0x77f0
# startindex = 3175
# endAddr    = 0x7851
# endindex   = 3206
# len        = 98 (0x62)
# len1       = 109 (0x6d) to (0x7852)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x77f0:
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     movq     %rdx,%rsi               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movl     %edi,%ebx               # reg,reg :: 
     movl     $0x4,%edi               # imm,reg :: 
     callq    Addr0x14d40             # value ::  target: 0x14d40 CodeAddr: 0x14d40 CALLS 0x14d40
     movq     %rax,%r13               # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %r13,%rcx               # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     movl     (%rax),%esi             # memBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     testb    %bl,%bl                 # reg,reg ::  modifies flags!!
     je       Addr0x7838              # value ::  target: 0x7838 CodeAddr: 0x7838
     movl     $0x2,Var0x24210(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24210
Addr0x782e:
     popq     %rbx                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x7838:
     movl     Var0x24210(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24210
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x782e              # value ::  target: 0x782e CodeAddr: 0x782e
     movl     $0x1,Var0x24210(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24210
     popq     %rbx                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    

# ----------- Function 151 ------------ 
#
# startAddr  = 0x7860
# startindex = 3209
# endAddr    = 0x7895
# endindex   = 3223
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0x7896)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7860:
     endbr64 
     movq     0x48(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x48(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0x7890              # value ::  target: 0x7890 CodeAddr: 0x7890
     jne      Addr0x7880              # value ::  target: 0x7880 CodeAddr: 0x7880
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0x7880:
     setl     %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     retq    
Addr0x7890:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 152 ------------ 
#
# startAddr  = 0x78a0
# startindex = 3225
# endAddr    = 0x78f7
# endindex   = 3253
# len        = 88 (0x58)
# len1       = 96 (0x60) to (0x78f8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x78a0:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x78e0              # value ::  target: 0x78e0 CodeAddr: 0x78e0
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x78f0              # value ::  target: 0x78f0 CodeAddr: 0x78f0
Addr0x78d2:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x78e4              # value ::  target: 0x78e4 CodeAddr: 0x78e4
Addr0x78dc:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x78e0:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x78d2              # value ::  target: 0x78d2 CodeAddr: 0x78d2
Addr0x78e4:
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0x78f0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x78dc              # value ::  target: 0x78dc CodeAddr: 0x78dc

# ----------- Function 153 ------------ 
#
# startAddr  = 0x7900
# startindex = 3255
# endAddr    = 0x7957
# endindex   = 3283
# len        = 88 (0x58)
# len1       = 96 (0x60) to (0x7958)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7900:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x7940              # value ::  target: 0x7940 CodeAddr: 0x7940
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7950              # value ::  target: 0x7950 CodeAddr: 0x7950
Addr0x7932:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7944              # value ::  target: 0x7944 CodeAddr: 0x7944
Addr0x793c:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x7940:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x7932              # value ::  target: 0x7932 CodeAddr: 0x7932
Addr0x7944:
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0x7950:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x793c              # value ::  target: 0x793c CodeAddr: 0x793c

# ----------- Function 154 ------------ 
#
# startAddr  = 0x7960
# startindex = 3285
# endAddr    = 0x79c7
# endindex   = 3315
# len        = 104 (0x68)
# len1       = 112 (0x70) to (0x79c8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7960:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rcx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0x79a8              # value ::  target: 0x79a8 CodeAddr: 0x79a8
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x79c0              # value ::  target: 0x79c0 CodeAddr: 0x79c0
Addr0x7997:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x79ac              # value ::  target: 0x79ac CodeAddr: 0x79ac
Addr0x79a1:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x79a8:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x7997              # value ::  target: 0x7997 CodeAddr: 0x7997
Addr0x79ac:
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rcx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0x79c0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x79a1              # value ::  target: 0x79a1 CodeAddr: 0x79a1

# ----------- Function 155 ------------ 
#
# startAddr  = 0x79d0
# startindex = 3317
# endAddr    = 0x7a37
# endindex   = 3347
# len        = 104 (0x68)
# len1       = 112 (0x70) to (0x7a38)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x79d0:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0x7a18              # value ::  target: 0x7a18 CodeAddr: 0x7a18
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7a30              # value ::  target: 0x7a30 CodeAddr: 0x7a30
Addr0x7a07:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7a1c              # value ::  target: 0x7a1c CodeAddr: 0x7a1c
Addr0x7a11:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x7a18:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0x7a07              # value ::  target: 0x7a07 CodeAddr: 0x7a07
Addr0x7a1c:
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0x7a30:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x7a11              # value ::  target: 0x7a11 CodeAddr: 0x7a11

# ----------- Function 156 ------------ 
#
# startAddr  = 0x7a40
# startindex = 3349
# endAddr    = 0x7b28
# endindex   = 3416
# len        = 233 (0xe9)
# len1       = 240 (0xf0) to (0x7b29)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7a40:
     testb    %dil,%dil               # reg,reg ::  modifies flags!!
     je       Addr0x7a68              # value ::  target: 0x7a68 CodeAddr: 0x7a68
     movl     %esi,%eax               # reg,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x8000,%eax            # imm,reg ::  CodeAddr: 0x8000 modifies flags!!
     jne      Addr0x7ac8              # value ::  target: 0x7ac8 CodeAddr: 0x7ac8
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x3,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314 modifies flags!!
     je       Addr0x7af8              # value ::  target: 0x7af8 CodeAddr: 0x7af8
Addr0x7a62:
     retq    
Addr0x7a68:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x5,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x7a62              # value ::  target: 0x7a62 CodeAddr: 0x7a62
     cmpl     $0x3,%edx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%edx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
Addr0x7a7d:
     movl     $0x2f,%eax              # imm,reg :: 
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7a62              # value ::  target: 0x7a62 CodeAddr: 0x7a62
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x1,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314 modifies flags!!
     je       Addr0x7a62              # value ::  target: 0x7a62 CodeAddr: 0x7a62
     testb    %dil,%dil               # reg,reg ::  modifies flags!!
     je       Addr0x7ad8              # value ::  target: 0x7ad8 CodeAddr: 0x7ad8
     andl     $0xf000,%esi            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     movl     $0x40,%eax              # imm,reg :: 
     cmpl     $0xa000,%esi            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     je       Addr0x7b20              # value ::  target: 0x7b20 CodeAddr: 0x7b20
     movl     $0x7c,%eax              # imm,reg :: 
     cmpl     $0x1000,%esi            # imm,reg ::  modifies flags!!
     je       Addr0x7b10              # value ::  target: 0x7b10 CodeAddr: 0x7b10
     cmpl     $0xc000,%esi            # imm,reg ::  CodeAddr: 0xc000 modifies flags!!
     sete     %al                     # reg :: 
Addr0x7abf:
     negl     %eax                    # reg ::  modifies flags!!
     andl     $0x3d,%eax              # imm,reg ::  modifies flags!!
     retq    
Addr0x7ac8:
     cmpl     $0x4000,%eax            # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     jmp      Addr0x7a7d              # value ::  target: 0x7a7d CodeAddr: 0x7a7d
Addr0x7ad8:
     movl     $0x40,%eax              # imm,reg :: 
     cmpl     $0x6,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x7b28              # value ::  target: 0x7b28 CodeAddr: 0x7b28
     movl     $0x7c,%eax              # imm,reg :: 
     cmpl     $0x1,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x7b18              # value ::  target: 0x7b18 CodeAddr: 0x7b18
     cmpl     $0x7,%edx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     jmp      Addr0x7abf              # value ::  target: 0x7abf CodeAddr: 0x7abf
Addr0x7af8:
     andl     $0x49,%esi              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%esi               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     notl     %eax                    # reg :: 
     andl     $0x2a,%eax              # imm,reg ::  modifies flags!!
     retq    
Addr0x7b10:
     retq    
Addr0x7b18:
     retq    
Addr0x7b20:
     retq    
Addr0x7b28:
     retq    

# ----------- Function 157 ------------ 
#
# startAddr  = 0x7b30
# startindex = 3418
# endAddr    = 0x7b79
# endindex   = 3439
# len        = 74 (0x4a)
# len1       = 80 (0x50) to (0x7b7a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7b30:
     pushq    %rbx                    # reg :: 
     movzbl   %dil,%edi               # reg,reg :: 
     callq    Addr0x7a40              # value ::  target: 0x7a40 CodeAddr: 0x7a40 CALLS 0x7a40
     movl     %eax,%ebx               # reg,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7b63              # value ::  target: 0x7b63 CodeAddr: 0x7b63
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0x7b70              # value ::  target: 0x7b70 CodeAddr: 0x7b70
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     %bl,(%rax)              # reg,memBase :: 
Addr0x7b5b:
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
Addr0x7b63:
     testb    %bl,%bl                 # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     setne    %al                     # reg :: 
     retq    
Addr0x7b70:
     movzbl   %bl,%esi                # reg,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0x7b5b              # value ::  target: 0x7b5b CodeAddr: 0x7b5b

# ----------- Function 158 ------------ 
#
# startAddr  = 0x7b80
# startindex = 3441
# endAddr    = 0x7bff
# endindex   = 3480
# len        = 128 (0x80)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7b80:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x7bc0              # value ::  target: 0x7bc0 CodeAddr: 0x7bc0
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7bf8              # value ::  target: 0x7bf8 CodeAddr: 0x7bf8
Addr0x7bb2:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7bc4              # value ::  target: 0x7bc4 CodeAddr: 0x7bc4
Addr0x7bbc:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x7bc0:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x7bb2              # value ::  target: 0x7bb2 CodeAddr: 0x7bb2
Addr0x7bc4:
     movq     0x60(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x60(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0x7bf8              # value ::  target: 0x7bf8 CodeAddr: 0x7bf8
     jl       Addr0x7be8              # value ::  target: 0x7be8 CodeAddr: 0x7be8
     movq     0x68(%rsi),%r8          # memOffsetBase,reg :: 
     subl     0x68(%rdi),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0x7bbc              # value ::  target: 0x7bbc CodeAddr: 0x7bbc
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0x7be8:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x7bf8:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x7bbc              # value ::  target: 0x7bbc CodeAddr: 0x7bbc

# ----------- Function 159 ------------ 
#
# startAddr  = 0x7c00
# startindex = 3481
# endAddr    = 0x7c67
# endindex   = 3511
# len        = 104 (0x68)
# len1       = 112 (0x70) to (0x7c68)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7c00:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0x7c48              # value ::  target: 0x7c48 CodeAddr: 0x7c48
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7c60              # value ::  target: 0x7c60 CodeAddr: 0x7c60
Addr0x7c37:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7c4c              # value ::  target: 0x7c4c CodeAddr: 0x7c4c
Addr0x7c41:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x7c48:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0x7c37              # value ::  target: 0x7c37 CodeAddr: 0x7c37
Addr0x7c4c:
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0xe6e0              # value ::  target: 0xe6e0 CodeAddr: 0xe6e0
Addr0x7c60:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x7c41              # value ::  target: 0x7c41 CodeAddr: 0x7c41

# ----------- Function 160 ------------ 
#
# startAddr  = 0x7c70
# startindex = 3513
# endAddr    = 0x7cc7
# endindex   = 3541
# len        = 88 (0x58)
# len1       = 96 (0x60) to (0x7cc8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7c70:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x7cb0              # value ::  target: 0x7cb0 CodeAddr: 0x7cb0
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7cc0              # value ::  target: 0x7cc0 CodeAddr: 0x7cc0
Addr0x7ca2:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7cb4              # value ::  target: 0x7cb4 CodeAddr: 0x7cb4
Addr0x7cac:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0x7cb0:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x7ca2              # value ::  target: 0x7ca2 CodeAddr: 0x7ca2
Addr0x7cb4:
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0xe6e0              # value ::  target: 0xe6e0 CodeAddr: 0xe6e0
Addr0x7cc0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x7cac              # value ::  target: 0x7cac CodeAddr: 0x7cac

# ----------- Function 161 ------------ 
#
# startAddr  = 0x7cd0
# startindex = 3543
# endAddr    = 0x7dba
# endindex   = 3613
# len        = 235 (0xeb)
# len1       = 240 (0xf0) to (0x7dbb)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x7cd0:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x7d30              # value ::  target: 0x7d30 CodeAddr: 0x7d30
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x7db0              # value ::  target: 0x7db0 CodeAddr: 0x7db0
Addr0x7d13:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x7d34              # value ::  target: 0x7d34 CodeAddr: 0x7d34
Addr0x7d1d:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     %r8d,%eax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x7d30:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x7d13              # value ::  target: 0x7d13 CodeAddr: 0x7d13
Addr0x7d34:
     movq     (%rsi),%r12             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     (%rbx),%r13             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     %rax,%rsi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x7d98              # value ::  target: 0x7d98 CodeAddr: 0x7d98
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     cmoveq   %rax,%rbp               # reg,reg :: 
Addr0x7d6d:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     movl     %eax,%r8d               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x7d1d              # value ::  target: 0x7d1d CodeAddr: 0x7d1d
Addr0x7d7c:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r13,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0x7d98:
     leaq     Var0x197fe(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x7d6d              # value ::  target: 0x7d6d CodeAddr: 0x7d6d
     jmp      Addr0x7d7c              # value ::  target: 0x7d7c CodeAddr: 0x7d7c
Addr0x7db0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0x7d1d              # value ::  target: 0x7d1d CodeAddr: 0x7d1d

# ----------- Function 162 ------------ 
#
# startAddr  = 0x7dc0
# startindex = 3615
# endAddr    = 0x7f8d
# endindex   = 3722
# len        = 462 (0x1ce)
# len1       = 464 (0x1d0) to (0x7f8e)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x7dc0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0xa8,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x98(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testb    %dil,%dil               # reg,reg ::  modifies flags!!
     jne      Addr0x7e60              # value ::  target: 0x7e60 CodeAddr: 0x7e60
     leaq     Var0x18624(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x18624
     movl     $0x14,%ebp              # imm,reg :: 
     leaq     Var0x24220(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x24220
     leaq     0x2c(%rbx),%r13         # memOffsetBase,reg :: 
     jmp      Addr0x7e13              # value ::  target: 0x7e13 CodeAddr: 0x7e13
Addr0x7e08:
     cmpq     %r13,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x7e2f              # value ::  target: 0x7e2f CodeAddr: 0x7e2f
Addr0x7e0d:
     movl     (%rbx),%ebp             # memBase,reg :: 
     addq     $0x4,%rbx               # imm,reg ::  modifies flags!!
Addr0x7e13:
     movl     %ebp,%esi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4cf0              # value ::  target: 0x4cf0 CodeAddr: 0x4cf0 CALLS 0x4cf0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x7e08              # value ::  target: 0x7e08 CodeAddr: 0x7e08
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     %ebp,%edi               # reg,reg :: 
     callq    Addr0x4a90              # value ::  target: 0x4a90 CodeAddr: 0x4a90 CALLS 0x4a90
     cmpq     %r13,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x7e0d              # value ::  target: 0x7e0d CodeAddr: 0x7e0d
Addr0x7e2f:
     movq     0x98(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x7f89              # value ::  target: 0x7f89 CodeAddr: 0x7f89
     addq     $0xa8,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x7e60:
     leaq     Var0x18624(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x18624
     leaq     Var0x24220(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24220
     movl     $0x14,%r12d             # imm,reg :: 
     movq     %rsp,%r13               # reg,reg :: 
     callq    Addr0x4ad0              # value ::  target: 0x4ad0 CodeAddr: 0x4ad0 CALLS 0x4ad0
     leaq     0x2c(%rbp),%r14         # memOffsetBase,reg :: 
     movq     %rbp,%rbx               # reg,reg :: 
     leaq     Var0x24220(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x24220
     jmp      Addr0x7e97              # value ::  target: 0x7e97 CodeAddr: 0x7e97
Addr0x7e90:
     movl     (%rbx),%r12d            # memBase,reg :: 
     addq     $0x4,%rbx               # imm,reg ::  modifies flags!!
Addr0x7e97:
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r13,%rdx               # reg,reg :: 
     movl     %r12d,%edi              # reg,reg :: 
     callq    Addr0x47d0              # value ::  target: 0x47d0 CodeAddr: 0x47d0 CALLS 0x47d0
     cmpq     $0x1,(%rsp)             # imm,memBase ::  modifies flags!!
     je       Addr0x7eb6              # value ::  target: 0x7eb6 CodeAddr: 0x7eb6
     movl     %r12d,%esi              # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4d60              # value ::  target: 0x4d60 CodeAddr: 0x4d60 CALLS 0x4d60
Addr0x7eb6:
     cmpq     %r14,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x7e90              # value ::  target: 0x7e90 CodeAddr: 0x7e90
     movdqa   Var0x24220(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x24220
     movdqa   Var0x24230(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x24230
     movl     $0x10000000,0x88(%rsp)  # imm,memOffsetBase :: 
     movl     $0x14,%r12d             # imm,reg :: 
     movdqa   Var0x24240(%rip),%xmm2  # memOffsetBase,reg ::  DataAddr: 0x24240
     movdqa   Var0x24250(%rip),%xmm3  # memOffsetBase,reg ::  DataAddr: 0x24250
     leaq     Addr0x77d0(%rip),%r15   # memOffsetBase,reg ::  CodeAddr: 0x77d0
     leaq     Addr0x68f0(%rip),%r14   # memOffsetBase,reg ::  CodeAddr: 0x68f0
     movdqa   Var0x24260(%rip),%xmm4  # memOffsetBase,reg ::  DataAddr: 0x24260
     movdqa   Var0x24270(%rip),%xmm5  # memOffsetBase,reg ::  DataAddr: 0x24270
     movups   %xmm0,0x8(%rsp)         # reg,memOffsetBase :: 
     movdqa   Var0x24280(%rip),%xmm6  # memOffsetBase,reg ::  DataAddr: 0x24280
     movdqa   Var0x24290(%rip),%xmm7  # memOffsetBase,reg ::  DataAddr: 0x24290
     movups   %xmm1,0x18(%rsp)        # reg,memOffsetBase :: 
     movups   %xmm2,0x28(%rsp)        # reg,memOffsetBase :: 
     movups   %xmm3,0x38(%rsp)        # reg,memOffsetBase :: 
     movups   %xmm4,0x48(%rsp)        # reg,memOffsetBase :: 
     movups   %xmm5,0x58(%rsp)        # reg,memOffsetBase :: 
     movups   %xmm6,0x68(%rsp)        # reg,memOffsetBase :: 
     movups   %xmm7,0x78(%rsp)        # reg,memOffsetBase :: 
     jmp      Addr0x7f50              # value ::  target: 0x7f50 CodeAddr: 0x7f50
Addr0x7f48:
     movl     0x0(%rbp),%r12d         # memOffsetBase,reg :: 
     addq     $0x4,%rbp               # imm,reg ::  modifies flags!!
Addr0x7f50:
     movl     %r12d,%esi              # reg,reg :: 
     leaq     Var0x24220(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24220
     callq    Addr0x4cf0              # value ::  target: 0x4cf0 CodeAddr: 0x4cf0 CALLS 0x4cf0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x7f7f              # value ::  target: 0x7f7f CodeAddr: 0x7f7f
     cmpl     $0x14,%r12d             # imm,reg ::  modifies flags!!
     movq     %r14,%rax               # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movl     %r12d,%edi              # reg,reg :: 
     cmoveq   %r15,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rax,(%rsp)             # reg,memBase :: 
     callq    Addr0x47d0              # value ::  target: 0x47d0 CodeAddr: 0x47d0 CALLS 0x47d0
Addr0x7f7f:
     cmpq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x7f48              # value ::  target: 0x7f48 CodeAddr: 0x7f48
     jmp      Addr0x7e2f              # value ::  target: 0x7e2f CodeAddr: 0x7e2f
Addr0x7f89:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 163 ------------ 
#
# startAddr  = 0x7f90
# startindex = 3724
# endAddr    = 0x7fe2
# endindex   = 3739
# len        = 83 (0x53)
# len1       = 85 (0x55) to (0x7fe3)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7f90:
     cmpq     $0x0,Var0x23088(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23088 modifies flags!!
     je       Addr0x7fb0              # value ::  target: 0x7fb0 CodeAddr: 0x7fb0
     leaq     Var0x23088(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23088
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     jmp      Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0
Addr0x7fb0:
     leaq     Var0x23068(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23068
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     Var0x23098(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23098
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     Var0x23078(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23078
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     jmp      Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0

# ----------- Function 164 ------------ 
#
# startAddr  = 0x7ff0
# startindex = 3742
# endAddr    = 0x8058
# endindex   = 3769
# len        = 105 (0x69)
# len1       = 112 (0x70) to (0x8059)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x7ff0:
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     cmpb     $0x0,Var0x24310(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24310 modifies flags!!
     je       Addr0x8028              # value ::  target: 0x8028 CodeAddr: 0x8028
Addr0x8005:
     movq     0x0(%rbp),%rsi          # memOffsetBase,reg :: 
     movq     (%rbx),%rdi             # memBase,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     jmp      Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0
Addr0x8028:
     movl     $0x1,%edi               # imm,reg :: 
     movb     $0x1,Var0x24310(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24310
     callq    Addr0x4b30              # value ::  target: 0x4b30 CodeAddr: 0x4b30 CALLS 0x4b30
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jns      Addr0x8048              # value ::  target: 0x8048 CodeAddr: 0x8048
     callq    Addr0x7f90              # value ::  target: 0x7f90 CodeAddr: 0x7f90 CALLS 0x7f90
     jmp      Addr0x8005              # value ::  target: 0x8005 CodeAddr: 0x8005
Addr0x8048:
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x7dc0              # value ::  target: 0x7dc0 CodeAddr: 0x7dc0 CALLS 0x7dc0
     callq    Addr0x7f90              # value ::  target: 0x7f90 CodeAddr: 0x7f90 CALLS 0x7f90
     jmp      Addr0x8005              # value ::  target: 0x8005 CodeAddr: 0x8005

# ----------- Function 165 ------------ 
#
# startAddr  = 0x8060
# startindex = 3771
# endAddr    = 0x8087
# endindex   = 3778
# len        = 40 (0x28)
# len1       = 48 (0x30) to (0x8088)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x8060:
     leaq     Var0x23068(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23068
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     Var0x23078(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23078
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     jmp      Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0

# ----------- Function 166 ------------ 
#
# startAddr  = 0x8090
# startindex = 3780
# endAddr    = 0x8161
# endindex   = 3831
# len        = 210 (0xd2)
# len1       = 221 (0xdd) to (0x8162)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x8090:
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x98,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x88(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsp,%rbx               # reg,reg :: 
     jmp      Addr0x8109              # value ::  target: 0x8109 CodeAddr: 0x8109
Addr0x80b8:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     callq    Addr0x4d30              # value ::  target: 0x4d30 CodeAddr: 0x4d30 CALLS 0x4d30
     movq     %rbx,%rdx               # reg,reg :: 
     leaq     Var0x24220(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24220
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x4720              # value ::  target: 0x4720 CodeAddr: 0x4720 CALLS 0x4720
     movl     Var0x24218(%rip),%ebp   # memOffsetBase,reg ::  DataAddr: 0x24218
     movl     Var0x24214(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24214
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x8130              # value ::  target: 0x8130 CodeAddr: 0x8130
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     movl     $0x13,%ebp              # imm,reg :: 
     movl     %eax,Var0x24214(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24214
Addr0x80f3:
     movl     %ebp,%edi               # reg,reg :: 
     callq    Addr0x4740              # value ::  target: 0x4740 CodeAddr: 0x4740 CALLS 0x4740
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rbx,%rsi               # reg,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     callq    Addr0x4720              # value ::  target: 0x4720 CodeAddr: 0x4720 CALLS 0x4720
Addr0x8109:
     movl     Var0x24218(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24218
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x811d              # value ::  target: 0x811d CodeAddr: 0x811d
     movl     Var0x24214(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24214
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x8140              # value ::  target: 0x8140 CodeAddr: 0x8140
Addr0x811d:
     cmpb     $0x0,Var0x24310(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24310 modifies flags!!
     je       Addr0x80b8              # value ::  target: 0x80b8 CodeAddr: 0x80b8
     callq    Addr0x8060              # value ::  target: 0x8060 CodeAddr: 0x8060 CALLS 0x8060
     jmp      Addr0x80b8              # value ::  target: 0x80b8 CodeAddr: 0x80b8
Addr0x8130:
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     %ebp,%edi               # reg,reg :: 
     callq    Addr0x4a90              # value ::  target: 0x4a90 CodeAddr: 0x4a90 CALLS 0x4a90
     jmp      Addr0x80f3              # value ::  target: 0x80f3 CodeAddr: 0x80f3
Addr0x8140:
     movq     0x88(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x815d              # value ::  target: 0x815d CodeAddr: 0x815d
     addq     $0x98,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x815d:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 167 ------------ 
#
# startAddr  = 0x8170
# startindex = 3834
# endAddr    = 0x81d3
# endindex   = 3855
# len        = 100 (0x64)
# len1       = 111 (0x6f) to (0x81d4)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x8170:
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     jne      Addr0x8180              # value ::  target: 0x8180 CodeAddr: 0x8180
     retq    
Addr0x8180:
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0x4,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x81a0              # value ::  target: 0x81a0 CodeAddr: 0x81a0
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0x81a0:
     leaq     Var0x23068(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23068
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     Var0x230a8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x230a8
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     Var0x23078(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23078
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     jmp      Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0

# ----------- Function 168 ------------ 
#
# startAddr  = 0x81e0
# startindex = 3858
# endAddr    = 0x8640
# endindex   = 4135
# len        = 1121 (0x461)
# len1       = 1132 (0x46c) to (0x8641)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x81e0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movl     %ecx,%r12d              # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x68,%rsp              # imm,reg ::  modifies flags!!
     movq     %rdi,0x30(%rsp)         # reg,memOffsetBase :: 
     movq     %r8,0x20(%rsp)          # reg,memOffsetBase :: 
     movq     %r9,0x38(%rsp)          # reg,memOffsetBase :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x58(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     (%rdi),%rax             # memBase,reg :: 
     movq     %rdx,%rdi               # reg,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x148a0             # value ::  target: 0x148a0 CodeAddr: 0x148a0 CALLS 0x148a0
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     setbe    %al                     # reg :: 
     andb     Var0x242d8(%rip),%al    # memOffsetBase,reg ::  DataAddr: 0x242d8 modifies flags!!
     movb     %al,0x2f(%rsp)          # reg,memOffsetBase :: 
     jne      Addr0x8350              # value ::  target: 0x8350 CodeAddr: 0x8350
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     testl    %r12d,%r12d             # reg,reg ::  modifies flags!!
     je       Addr0x82a0              # value ::  target: 0x82a0 CodeAddr: 0x82a0
Addr0x8244:
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r13,%r8                # reg,reg :: 
     movq     %rbp,%rdx               # reg,reg :: 
     movl     $0x2000,%esi            # imm,reg :: 
     movq     $0xffffffffffffffff,%rcx# imm,reg :: 
     callq    Addr0x14980             # value ::  target: 0x14980 CodeAddr: 0x14980 CALLS 0x14980
     movq     %rax,%r12               # reg,reg :: 
     cmpq     $0x1fff,%rax            # imm,reg ::  modifies flags!!
     ja       Addr0x85f2              # value ::  target: 0x85f2 CodeAddr: 0x85f2
Addr0x826f:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     movb     $0x1,0x2f(%rsp)         # imm,memOffsetBase :: 
     movzbl   (%rax),%eax             # memBase,reg :: 
     cmpb     %al,0x0(%rbp)           # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x8291              # value ::  target: 0x8291 CodeAddr: 0x8291
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpq     %rax,%r12               # reg,reg ::  modifies flags!!
     setne    0x2f(%rsp)              # memOffsetBase :: 
Addr0x8291:
     testl    %r15d,%r15d             # reg,reg ::  modifies flags!!
     je       Addr0x82b0              # value ::  target: 0x82b0 CodeAddr: 0x82b0
     movq     %r12,%rbx               # reg,reg :: 
     jmp      Addr0x8389              # value ::  target: 0x8389 CodeAddr: 0x8389
Addr0x82a0:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rbp,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,%r12               # reg,reg :: 
Addr0x82b0:
     cmpq     $0x0,0x20(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x8330              # value ::  target: 0x8330 CodeAddr: 0x8330
     callq    Addr0x48b0              # value ::  target: 0x48b0 CodeAddr: 0x48b0 CALLS 0x48b0
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     ja       Addr0x8590              # value ::  target: 0x8590 CodeAddr: 0x8590
     movq     0x18(%rsp),%rbx         # memOffsetBase,reg :: 
     leaq     (%rbx,%r12,1),%rbp      # memBaseIndexScale,reg :: 
     cmpq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     jbe      Addr0x8620              # value ::  target: 0x8620 CodeAddr: 0x8620
     callq    Addr0x4d80              # value ::  target: 0x4d80 CodeAddr: 0x4d80 CALLS 0x4d80
     movq     (%rax),%rcx             # memBase,reg :: 
     movq     %rbx,%rax               # reg,reg :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
Addr0x82f0:
     movzbl   (%rax),%edx             # memBase,reg :: 
     movzwl   (%rcx,%rdx,2),%edx      # memBaseIndexScale,reg :: 
     andw     $0x4000,%dx             # imm,reg ::  modifies flags!!
     cmpw     $0x1,%dx                # imm,reg ::  modifies flags!!
     sbbq     $0xffffffffffffffff,%rbx# imm,reg ::  modifies flags!!
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x82f0              # value ::  target: 0x82f0 CodeAddr: 0x82f0
Addr0x830d:
     cmpb     $0x0,Var0x243a8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a8 modifies flags!!
     jne      Addr0x83e7              # value ::  target: 0x83e7 CodeAddr: 0x83e7
     movq     0x38(%rsp),%rax         # memOffsetBase,reg :: 
     movb     $0x0,(%rax)             # imm,memBase :: 
     jmp      Addr0x8404              # value ::  target: 0x8404 CodeAddr: 0x8404
Addr0x8330:
     cmpb     $0x0,Var0x243a8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a8 modifies flags!!
     jne      Addr0x83e7              # value ::  target: 0x83e7 CodeAddr: 0x83e7
     movq     0x38(%rsp),%rax         # memOffsetBase,reg :: 
     movb     $0x0,(%rax)             # imm,memBase :: 
     jmp      Addr0x840c              # value ::  target: 0x840c CodeAddr: 0x840c
Addr0x8350:
     testl    %r12d,%r12d             # reg,reg ::  modifies flags!!
     jne      Addr0x8631              # value ::  target: 0x8631 CodeAddr: 0x8631
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rax,%rbx               # reg,reg :: 
     leaq     0x1(%rax),%r12          # memOffsetBase,reg :: 
     cmpq     $0x1fff,%rax            # imm,reg ::  modifies flags!!
     ja       Addr0x85e0              # value ::  target: 0x85e0 CodeAddr: 0x85e0
Addr0x8374:
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movb     $0x0,0x2f(%rsp)         # imm,memOffsetBase :: 
Addr0x8389:
     callq    Addr0x48b0              # value ::  target: 0x48b0 CodeAddr: 0x48b0 CALLS 0x48b0
     movq     0x18(%rsp),%rsi         # memOffsetBase,reg :: 
     leaq     (%rsi,%rbx,1),%rdi      # memBaseIndexScale,reg :: 
     movq     %rdi,0x10(%rsp)         # reg,memOffsetBase :: 
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     ja       Addr0x8440              # value ::  target: 0x8440 CodeAddr: 0x8440
     movq     0x10(%rsp),%r15         # memOffsetBase,reg :: 
     movq     0x18(%rsp),%r14         # memOffsetBase,reg :: 
     cmpq     %r14,%r15               # reg,reg ::  modifies flags!!
     jbe      Addr0x83d9              # value ::  target: 0x83d9 CodeAddr: 0x83d9
     callq    Addr0x4d80              # value ::  target: 0x4d80 CodeAddr: 0x4d80 CALLS 0x4d80
     movq     %r14,%rdx               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
Addr0x83c0:
     movzbl   (%rdx),%esi             # memBase,reg :: 
     movq     (%rax),%rcx             # memBase,reg :: 
     testb    $0x40,0x1(%rcx,%rsi,2)  # imm,memOffsetBaseIndexScale ::  modifies flags!!
     jne      Addr0x83d0              # value ::  target: 0x83d0 CodeAddr: 0x83d0
     movb     $0x3f,(%rdx)            # imm,memBase :: 
Addr0x83d0:
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     cmpq     %rdi,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x83c0              # value ::  target: 0x83c0 CodeAddr: 0x83c0
Addr0x83d9:
     movq     %rbx,%r12               # reg,reg :: 
Addr0x83dc:
     movzbl   Var0x243a8(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x243a8
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x83f5              # value ::  target: 0x83f5 CodeAddr: 0x83f5
Addr0x83e7:
     movzbl   0x2f(%rsp),%eax         # memOffsetBase,reg :: 
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     andb     Var0x243a9(%rip),%al    # memOffsetBase,reg ::  DataAddr: 0x243a9 modifies flags!!
Addr0x83f5:
     movq     0x38(%rsp),%rsi         # memOffsetBase,reg :: 
     cmpq     $0x0,0x20(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movb     %al,(%rsi)              # reg,memBase :: 
     je       Addr0x840c              # value ::  target: 0x840c CodeAddr: 0x840c
Addr0x8404:
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rbx,(%rax)             # reg,memBase :: 
Addr0x840c:
     movq     0x30(%rsp),%rax         # memOffsetBase,reg :: 
     movq     0x18(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %rsi,(%rax)             # reg,memBase :: 
     movq     0x58(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x863c              # value ::  target: 0x863c CodeAddr: 0x863c
     addq     $0x68,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x8440:
     cmpq     %rsi,%rdi               # reg,reg ::  modifies flags!!
     jbe      Addr0x8627              # value ::  target: 0x8627 CodeAddr: 0x8627
     movq     %rsi,%r12               # reg,reg :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     leaq     0x50(%rsp),%rbp         # memOffsetBase,reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     leaq     0x4c(%rsp),%r15         # memOffsetBase,reg :: 
Addr0x8460:
     movzbl   0x0(%r13),%eax          # memOffsetBase,reg :: 
     cmpb     $0x5f,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x8580              # value ::  target: 0x8580 CodeAddr: 0x8580
     cmpb     $0x40,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x854c              # value ::  target: 0x854c CodeAddr: 0x854c
     cmpb     $0x23,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x8540              # value ::  target: 0x8540 CodeAddr: 0x8540
     cmpb     $0x1f,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x854c              # value ::  target: 0x854c CodeAddr: 0x854c
Addr0x8485:
     movq     $0x0,0x50(%rsp)         # imm,memOffsetBase :: 
     movq     %r13,%r14               # reg,reg :: 
     jmp      Addr0x84b5              # value ::  target: 0x84b5 CodeAddr: 0x84b5
Addr0x8498:
     movb     $0x3f,(%r12)            # imm,memBase :: 
     movq     %rbp,%rdi               # reg,reg :: 
     addq     %r13,%r14               # reg,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movq     0x8(%rsp),%r12          # memOffsetBase,reg :: 
     callq    Addr0x4d40              # value ::  target: 0x4d40 CodeAddr: 0x4d40 CALLS 0x4d40
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x8531              # value ::  target: 0x8531 CodeAddr: 0x8531
Addr0x84b5:
     movq     0x10(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movq     %rbp,%rcx               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     subq     %r14,%rdx               # reg,reg ::  modifies flags!!
     callq    Addr0x168d0             # value ::  target: 0x168d0 CodeAddr: 0x168d0 CALLS 0x168d0
     leaq     0x1(%r12),%rsi          # memOffsetBase,reg :: 
     movq     %rsi,0x8(%rsp)          # reg,memOffsetBase :: 
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     je       Addr0x85b0              # value ::  target: 0x85b0 CodeAddr: 0x85b0
     cmpq     $0xfffffffffffffffe,%rax# imm,reg ::  modifies flags!!
     je       Addr0x85d0              # value ::  target: 0x85d0 CodeAddr: 0x85d0
     movl     0x4c(%rsp),%edi         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movl     $0x1,%r13d              # imm,reg :: 
     cmovneq  %rax,%r13               # reg,reg :: 
     callq    Addr0x4b60              # value ::  target: 0x4b60 CodeAddr: 0x4b60 CALLS 0x4b60
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0x8498              # value ::  target: 0x8498 CodeAddr: 0x8498
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
Addr0x8508:
     movzbl   (%r14,%rdx,1),%ecx      # memBaseIndexScale,reg :: 
     movb     %cl,(%r12,%rdx,1)       # reg,memBaseIndexScale :: 
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     cmpq     %rdx,%r13               # reg,reg ::  modifies flags!!
     jne      Addr0x8508              # value ::  target: 0x8508 CodeAddr: 0x8508
     cltq    
     movq     %rbp,%rdi               # reg,reg :: 
     addq     %r13,%r14               # reg,reg ::  modifies flags!!
     addq     %r13,%r12               # reg,reg ::  modifies flags!!
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
     callq    Addr0x4d40              # value ::  target: 0x4d40 CodeAddr: 0x4d40 CALLS 0x4d40
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x84b5              # value ::  target: 0x84b5 CodeAddr: 0x84b5
Addr0x8531:
     movq     %r14,%r13               # reg,reg :: 
     jmp      Addr0x855c              # value ::  target: 0x855c CodeAddr: 0x855c
Addr0x8540:
     leal     -0x25(%rax),%edx        # memOffsetBase,reg :: 
     cmpb     $0x1a,%dl               # imm,reg ::  modifies flags!!
     ja       Addr0x8485              # value ::  target: 0x8485 CodeAddr: 0x8485
Addr0x854c:
     movb     %al,(%r12)              # reg,memBase :: 
     addq     $0x1,%r13               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
Addr0x855c:
     cmpq     %r13,0x10(%rsp)         # reg,memOffsetBase ::  modifies flags!!
     ja       Addr0x8460              # value ::  target: 0x8460 CodeAddr: 0x8460
     movq     %r12,%r14               # reg,reg :: 
     subq     0x18(%rsp),%r14         # memOffsetBase,reg ::  modifies flags!!
     movq     %r14,%r12               # reg,reg :: 
     jmp      Addr0x83dc              # value ::  target: 0x83dc CodeAddr: 0x83dc
Addr0x8580:
     leal     -0x61(%rax),%edx        # memOffsetBase,reg :: 
     cmpb     $0x1d,%dl               # imm,reg ::  modifies flags!!
     jbe      Addr0x854c              # value ::  target: 0x854c CodeAddr: 0x854c
     jmp      Addr0x8485              # value ::  target: 0x8485 CodeAddr: 0x8485
Addr0x8590:
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r12,%rsi               # reg,reg :: 
     callq    Addr0x114b0             # value ::  target: 0x114b0 CodeAddr: 0x114b0 CALLS 0x114b0
     movslq   %eax,%rbx               # reg,reg :: 
     jmp      Addr0x830d              # value ::  target: 0x830d CodeAddr: 0x830d
Addr0x85b0:
     movb     $0x3f,(%r12)            # imm,memBase :: 
     movq     %r14,%r13               # reg,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     addq     $0x1,%r13               # imm,reg ::  modifies flags!!
Addr0x85c0:
     movq     0x8(%rsp),%r12          # memOffsetBase,reg :: 
     jmp      Addr0x855c              # value ::  target: 0x855c CodeAddr: 0x855c
Addr0x85d0:
     movb     $0x3f,(%r12)            # imm,memBase :: 
     movq     0x10(%rsp),%r13         # memOffsetBase,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     jmp      Addr0x85c0              # value ::  target: 0x85c0 CodeAddr: 0x85c0
Addr0x85e0:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x8374              # value ::  target: 0x8374 CodeAddr: 0x8374
Addr0x85f2:
     leaq     0x1(%rax),%r14          # memOffsetBase,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %r13,%r8                # reg,reg :: 
     movq     %rbp,%rdx               # reg,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movq     $0xffffffffffffffff,%rcx# imm,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x14980             # value ::  target: 0x14980 CodeAddr: 0x14980 CALLS 0x14980
     jmp      Addr0x826f              # value ::  target: 0x826f CodeAddr: 0x826f
Addr0x8620:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     jmp      Addr0x830d              # value ::  target: 0x830d CodeAddr: 0x830d
Addr0x8627:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     jmp      Addr0x83dc              # value ::  target: 0x83dc CodeAddr: 0x83dc
Addr0x8631:
     movl     $0x1,%r15d              # imm,reg :: 
     jmp      Addr0x8244              # value ::  target: 0x8244 CodeAddr: 0x8244
Addr0x863c:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 169 ------------ 
#
# startAddr  = 0x8650
# startindex = 4138
# endAddr    = 0x8a50
# endindex   = 4369
# len        = 1025 (0x401)
# len1       = 1036 (0x40c) to (0x8a51)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x8650:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x1000,%rsp            # imm,reg ::  modifies flags!!
     orq      $0x0,(%rsp)             # imm,memBase ::  modifies flags!!
     subq     $0x1000,%rsp            # imm,reg ::  modifies flags!!
     orq      $0x0,(%rsp)             # imm,memBase ::  modifies flags!!
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movq     0x2080(%rsp),%r14       # memOffsetBase,reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     movq     %rcx,%r12               # reg,reg :: 
     movl     %r8d,%r15d              # reg,reg :: 
     movl     %edx,%ecx               # reg,reg :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x2038(%rsp)       # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     leaq     0x30(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movq     %r9,%rbx                # reg,reg :: 
     leaq     0x28(%rsp),%rdi         # memOffsetBase,reg :: 
     leaq     0x27(%rsp),%r9          # memOffsetBase,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rax,(%rsp)             # reg,memBase :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x81e0              # value ::  target: 0x81e0 CodeAddr: 0x81e0 CALLS 0x81e0
     cmpb     $0x0,0x27(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rax,%rbp               # reg,reg :: 
     je       Addr0x86d8              # value ::  target: 0x86d8 CodeAddr: 0x86d8
     testb    %r15b,%r15b             # reg,reg ::  modifies flags!!
     jne      Addr0x8930              # value ::  target: 0x8930 CodeAddr: 0x8930
Addr0x86d8:
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x871c              # value ::  target: 0x871c CodeAddr: 0x871c
     movl     $0x4,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x89a0              # value ::  target: 0x89a0 CodeAddr: 0x89a0
Addr0x86ef:
     leaq     Var0x23068(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23068
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     0x8(%r12),%rsi          # memOffsetBase,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     leaq     Var0x23078(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23078
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
Addr0x871c:
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0x8960              # value ::  target: 0x8960 CodeAddr: 0x8960
     movzbl   Var0x243a8(%rip),%r12d  # memOffsetBase,reg ::  DataAddr: 0x243a8
     testb    %r12b,%r12b             # reg,reg ::  modifies flags!!
     jne      Addr0x88d8              # value ::  target: 0x88d8 CodeAddr: 0x88d8
Addr0x8736:
     movq     %rbp,%r10               # reg,reg :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
Addr0x873c:
     movq     Var0x24388(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24388
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r10,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %r9,0x10(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x70a0              # value ::  target: 0x70a0 CodeAddr: 0x70a0 CALLS 0x70a0
     movl     $0x1,%esi               # imm,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     callq    Addr0x70a0              # value ::  target: 0x70a0 CodeAddr: 0x70a0 CALLS 0x70a0
     leaq     Var0x197fe(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197fe
     movq     %r15,%rdx               # reg,reg :: 
     leaq     Var0x197e4(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197e4
     cmpb     $0x2f,(%rax)            # imm,memBase ::  modifies flags!!
     movq     %rax,%r8                # reg,reg :: 
     leaq     Var0x19b03(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19b03
     movl     $0x1,%edi               # imm,reg :: 
     cmovneq  %rax,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     movq     %r8,%rdi                # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x10(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x18(%rsp),%r10         # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x8972              # value ::  target: 0x8972 CodeAddr: 0x8972
Addr0x87bf:
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     je       Addr0x87ec              # value ::  target: 0x87ec CodeAddr: 0x87ec
     movq     0x18(%rbx),%rdx         # memOffsetBase,reg :: 
     movq     0x20(%rbx),%rax         # memOffsetBase,reg :: 
     subq     %rdx,%rax               # reg,reg ::  modifies flags!!
     cmpq     $0x7,%rax               # imm,reg ::  modifies flags!!
     jbe      Addr0x89b0              # value ::  target: 0x89b0 CodeAddr: 0x89b0
Addr0x87dd:
     movq     Var0x241f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x241f8
     movq     %rax,(%rdx)             # reg,memBase :: 
     addq     $0x8,0x18(%rbx)         # imm,memOffsetBase ::  modifies flags!!
Addr0x87ec:
     movq     0x28(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %r10,%rdx               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     addq     %r9,%rdi                # reg,reg ::  modifies flags!!
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     movq     Var0x241f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x241f8
     addq     %rbp,%rax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     movq     %rax,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8
     je       Addr0x883f              # value ::  target: 0x883f CodeAddr: 0x883f
     movq     0x18(%rbx),%rcx         # memOffsetBase,reg :: 
     movq     0x20(%rbx),%rdx         # memOffsetBase,reg :: 
     subq     %rcx,%rdx               # reg,reg ::  modifies flags!!
     cmpq     $0x7,%rdx               # imm,reg ::  modifies flags!!
     jbe      Addr0x89e0              # value ::  target: 0x89e0 CodeAddr: 0x89e0
Addr0x8837:
     movq     %rax,(%rcx)             # reg,memBase :: 
     addq     $0x8,0x18(%rbx)         # imm,memOffsetBase ::  modifies flags!!
Addr0x883f:
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0x888f              # value ::  target: 0x888f CodeAddr: 0x888f
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x6,%edx               # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x197f8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x197f8
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     testb    %r12b,%r12b             # reg,reg ::  modifies flags!!
     je       Addr0x888f              # value ::  target: 0x888f CodeAddr: 0x888f
     movq     0x28(%rsp),%rax         # memOffsetBase,reg :: 
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movzbl   -0x1(%rax,%rbp,1),%edx  # memOffsetBaseIndexScale,reg :: 
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0x8a10              # value ::  target: 0x8a10 CodeAddr: 0x8a10
     leaq     0x1(%rax),%rcx          # memOffsetBase,reg :: 
     movq     %rcx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     %dl,(%rax)              # reg,memBase :: 
Addr0x888f:
     movq     0x28(%rsp),%rdi         # memOffsetBase,reg :: 
     cmpq     %r13,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x88a4              # value ::  target: 0x88a4 CodeAddr: 0x88a4
     cmpq     (%rsp),%rdi             # memBase,reg ::  modifies flags!!
     je       Addr0x88a4              # value ::  target: 0x88a4 CodeAddr: 0x88a4
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
Addr0x88a4:
     movzbl   0x27(%rsp),%eax         # memOffsetBase,reg :: 
     addq     %rbp,%rax               # reg,reg ::  modifies flags!!
     movq     0x2038(%rsp),%rbx       # memOffsetBase,reg :: 
     xorq     0x28,%rbx               # value,reg ::  modifies flags!!
     jne      Addr0x8a4c              # value ::  target: 0x8a4c CodeAddr: 0x8a4c
     addq     $0x2048,%rsp            # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x88d8:
     movzbl   Var0x243a9(%rip),%r12d  # memOffsetBase,reg ::  DataAddr: 0x243a9
     testb    %r12b,%r12b             # reg,reg ::  modifies flags!!
     je       Addr0x8736              # value ::  target: 0x8736 CodeAddr: 0x8736
     cmpb     $0x0,0x27(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x8a00              # value ::  target: 0x8a00 CodeAddr: 0x8a00
     movq     0x28(%rsp),%rax         # memOffsetBase,reg :: 
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     leaq     -0x2(%rbp),%r10         # memOffsetBase,reg :: 
     movzbl   (%rax),%edx             # memBase,reg :: 
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0x8a2f              # value ::  target: 0x8a2f CodeAddr: 0x8a2f
     leaq     0x1(%rax),%rcx          # memOffsetBase,reg :: 
     movl     $0x1,%r9d               # imm,reg :: 
     movq     %rcx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     %dl,(%rax)              # reg,memBase :: 
     jmp      Addr0x873c              # value ::  target: 0x873c CodeAddr: 0x873c
Addr0x8930:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0x8a20              # value ::  target: 0x8a20 CodeAddr: 0x8a20
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0x20,(%rax)            # imm,memBase :: 
Addr0x8950:
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     jmp      Addr0x86d8              # value ::  target: 0x86d8 CodeAddr: 0x86d8
Addr0x8960:
     movq     %rbp,%r10               # reg,reg :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x87bf              # value ::  target: 0x87bf CodeAddr: 0x87bf
Addr0x8972:
     movq     0x28(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %r10,%rdx               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     addq     %r9,%rdi                # reg,reg ::  modifies flags!!
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     addq     %rbp,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     jmp      Addr0x883f              # value ::  target: 0x883f CodeAddr: 0x883f
Addr0x89a0:
     callq    Addr0x8060              # value ::  target: 0x8060 CodeAddr: 0x8060 CALLS 0x8060
     jmp      Addr0x86ef              # value ::  target: 0x86ef CodeAddr: 0x86ef
Addr0x89b0:
     movl     $0x8,%esi               # imm,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     movq     %r10,0x10(%rsp)         # reg,memOffsetBase :: 
     movq     %r9,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x16ac0             # value ::  target: 0x16ac0 CodeAddr: 0x16ac0 CALLS 0x16ac0
     movq     0x18(%rbx),%rdx         # memOffsetBase,reg :: 
     movq     0x10(%rsp),%r10         # memOffsetBase,reg :: 
     movq     0x8(%rsp),%r9           # memOffsetBase,reg :: 
     jmp      Addr0x87dd              # value ::  target: 0x87dd CodeAddr: 0x87dd
Addr0x89e0:
     movl     $0x8,%esi               # imm,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x16ac0             # value ::  target: 0x16ac0 CodeAddr: 0x16ac0 CALLS 0x16ac0
     movq     0x18(%rbx),%rcx         # memOffsetBase,reg :: 
     movq     Var0x241f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x241f8
     jmp      Addr0x8837              # value ::  target: 0x8837 CodeAddr: 0x8837
Addr0x8a00:
     movq     %rbp,%r10               # reg,reg :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     jmp      Addr0x873c              # value ::  target: 0x873c CodeAddr: 0x873c
Addr0x8a10:
     movzbl   %dl,%esi                # reg,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0x888f              # value ::  target: 0x888f CodeAddr: 0x888f
Addr0x8a20:
     movl     $0x20,%esi              # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0x8950              # value ::  target: 0x8950 CodeAddr: 0x8950
Addr0x8a2f:
     movzbl   %dl,%esi                # reg,reg :: 
     movq     %r10,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     movq     0x8(%rsp),%r10          # memOffsetBase,reg :: 
     movl     $0x1,%r9d               # imm,reg :: 
     jmp      Addr0x873c              # value ::  target: 0x873c CodeAddr: 0x873c
Addr0x8a4c:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 170 ------------ 
#
# startAddr  = 0x8a60
# startindex = 4372
# endAddr    = 0x8ea7
# endindex   = 4628
# len        = 1096 (0x448)
# len1       = 1104 (0x450) to (0x8ea8)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x8a60:
     pushq    %r15                    # reg :: 
     movq     %rdx,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movl     %esi,%r14d              # reg,reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rcx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movzbl   Var0x24312(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24312
     testb    %sil,%sil               # reg,reg ::  modifies flags!!
     je       Addr0x8b10              # value ::  target: 0x8b10 CodeAddr: 0x8b10
     movq     0x8(%rdi),%r13          # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x8ae0              # value ::  target: 0x8ae0 CodeAddr: 0x8ae0
Addr0x8a92:
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     Var0x242d0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x242d0
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     movq     %r15,%r9                # reg,reg :: 
     movl     0xc4(%r12),%edx         # memOffsetBase,reg :: 
     pushq    0x10(%r12)              # memOffsetBase :: 
     xorl     $0x1,%r14d              # imm,reg ::  modifies flags!!
     movq     %r13,%rdi               # reg,reg :: 
     movzbl   %r14b,%r8d              # reg,reg :: 
     callq    Addr0x8650              # value ::  target: 0x8650 CodeAddr: 0x8650 CALLS 0x8650
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x8090              # value ::  target: 0x8090 CodeAddr: 0x8090 CALLS 0x8090
     popq     %rcx                    # reg :: 
     popq     %rsi                    # reg :: 
Addr0x8ac9:
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x8ae0:
     cmpb     $0x0,0xb9(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     movl     0xac(%rdi),%esi         # memOffsetBase,reg :: 
     jne      Addr0x8c40              # value ::  target: 0x8c40 CodeAddr: 0x8c40
     movl     $0xc,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movl     $0xffffffff,%edx        # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8b34              # value ::  target: 0x8b34 CodeAddr: 0x8b34
     movl     $0xc0,%ecx              # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8b10:
     movq     (%rdi),%r13             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8a92              # value ::  target: 0x8a92 CodeAddr: 0x8a92
     cmpb     $0x0,Var0x24390(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24390 modifies flags!!
     movzbl   0xb9(%rdi),%edx         # memOffsetBase,reg :: 
     jne      Addr0x8cc8              # value ::  target: 0x8cc8 CodeAddr: 0x8cc8
Addr0x8b2f:
     movl     0x30(%r12),%esi         # memOffsetBase,reg :: 
Addr0x8b34:
     movzbl   0xb8(%r12),%ecx         # memOffsetBase,reg :: 
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0x8c53              # value ::  target: 0x8c53 CodeAddr: 0x8c53
Addr0x8b45:
     movl     0xa8(%r12),%ecx         # memOffsetBase,reg :: 
     leaq     Var0x18660(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x18660
     movl     (%rax,%rcx,4),%eax      # memBaseIndexScale,reg :: 
     cmpl     $0x7,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x5,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x8ce0              # value ::  target: 0x8ce0 CodeAddr: 0x8ce0
Addr0x8b66:
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     jne      Addr0x8e9c              # value ::  target: 0x8e9c CodeAddr: 0x8e9c
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0x8e9c              # value ::  target: 0x8e9c CodeAddr: 0x8e9c
     cmpb     $0x0,Var0x24390(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24390 modifies flags!!
     movl     $0xd0,%ecx              # imm,reg :: 
     jne      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
     movl     $0xd,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     cmpb     $0x1,%al                # imm,reg ::  modifies flags!!
     sbbq     %rcx,%rcx               # reg,reg ::  modifies flags!!
     andq     $0xffffffffffffffa0,%rcx# imm,reg ::  modifies flags!!
     addq     $0xd0,%rcx              # imm,reg ::  modifies flags!!
Addr0x8b9e:
     leaq     Var0x23060(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x23060
     addq     %rbx,%rcx               # reg,reg ::  modifies flags!!
Addr0x8ba8:
     cmpq     $0x0,0x8(%rcx)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x8bc3              # value ::  target: 0x8bc3 CodeAddr: 0x8bc3
     movl     $0x4,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8a92              # value ::  target: 0x8a92 CodeAddr: 0x8a92
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
Addr0x8bc3:
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     xorl     $0x1,%r14d              # imm,reg ::  modifies flags!!
     movq     %r15,%r9                # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     movl     0xc4(%r12),%edx         # memOffsetBase,reg :: 
     pushq    0x10(%r12)              # memOffsetBase :: 
     movzbl   %r14b,%r8d              # reg,reg :: 
     movq     Var0x242d0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x242d0
     callq    Addr0x8650              # value ::  target: 0x8650 CodeAddr: 0x8650 CALLS 0x8650
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x8090              # value ::  target: 0x8090 CodeAddr: 0x8090 CALLS 0x8090
     callq    Addr0x7f90              # value ::  target: 0x7f90 CodeAddr: 0x7f90 CALLS 0x7f90
     movq     Var0x242b0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x242b0
     popq     %rax                    # reg :: 
     popq     %rdx                    # reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     je       Addr0x8ac9              # value ::  target: 0x8ac9 CodeAddr: 0x8ac9
     movq     %rbp,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rax,%rsi               # reg,reg :: 
     leaq     -0x1(%r12,%rbp,1),%rax  # memOffsetBaseIndexScale,reg :: 
     divq     %rcx                    # reg :: 
     cmpq     %rax,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x8ac9              # value ::  target: 0x8ac9 CodeAddr: 0x8ac9
     leaq     Var0x231d8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x231d8
     leaq     -0x8(%rsi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x7ff0              # value ::  target: 0x7ff0 CodeAddr: 0x7ff0 CALLS 0x7ff0
     jmp      Addr0x8ac9              # value ::  target: 0x8ac9 CodeAddr: 0x8ac9
Addr0x8c40:
     movzbl   0xb8(%r12),%ecx         # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0x8b45              # value ::  target: 0x8b45 CodeAddr: 0x8b45
Addr0x8c53:
     movl     %esi,%eax               # reg,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x8000,%eax            # imm,reg ::  CodeAddr: 0x8000 modifies flags!!
     je       Addr0x8d50              # value ::  target: 0x8d50 CodeAddr: 0x8d50
     cmpl     $0x4000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0x8dc0              # value ::  target: 0x8dc0 CodeAddr: 0x8dc0
     cmpl     $0xa000,%eax            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     je       Addr0x8e20              # value ::  target: 0x8e20 CodeAddr: 0x8e20
     movl     $0x80,%ecx              # imm,reg :: 
     cmpl     $0x1000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
     movl     $0x90,%ecx              # imm,reg :: 
     cmpl     $0xc000,%eax            # imm,reg ::  CodeAddr: 0xc000 modifies flags!!
     je       Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
     movl     $0xa0,%ecx              # imm,reg :: 
     cmpl     $0x6000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
     cmpl     $0x2000,%eax            # imm,reg ::  modifies flags!!
     movl     $0xb0,%ecx              # imm,reg :: 
     movl     $0xd0,%ebx              # imm,reg :: 
     cmovneq  %rbx,%rcx               # reg,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8cc8:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x8b2f              # value ::  target: 0x8b2f CodeAddr: 0x8b2f
     movl     0xac(%r12),%esi         # memOffsetBase,reg :: 
     jmp      Addr0x8b34              # value ::  target: 0x8b34 CodeAddr: 0x8b34
Addr0x8ce0:
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     Var0x24308(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x24308
     movq     %rax,%rcx               # reg,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x8d31              # value ::  target: 0x8d31 CodeAddr: 0x8d31
Addr0x8d00:
     movq     (%rbx),%rdx             # memBase,reg :: 
     cmpq     %rdx,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0x8d28              # value ::  target: 0x8d28 CodeAddr: 0x8d28
     movq     %rcx,%rdi               # reg,reg :: 
     movq     0x8(%rbx),%rsi          # memOffsetBase,reg :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     subq     %rdx,%rdi               # reg,reg ::  modifies flags!!
     addq     %r13,%rdi               # reg,reg ::  modifies flags!!
     callq    Addr0xd890              # value ::  target: 0xd890 CodeAddr: 0xd890 CALLS 0xd890
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x8d40              # value ::  target: 0x8d40 CodeAddr: 0x8d40
Addr0x8d28:
     movq     0x20(%rbx),%rbx         # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x8d00              # value ::  target: 0x8d00 CodeAddr: 0x8d00
Addr0x8d31:
     movl     $0x50,%ecx              # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8d40:
     leaq     0x10(%rbx),%rcx         # memOffsetBase,reg :: 
     jmp      Addr0x8ba8              # value ::  target: 0x8ba8 CodeAddr: 0x8ba8
Addr0x8d50:
     testl    $0x800,%esi             # imm,reg ::  modifies flags!!
     je       Addr0x8d70              # value ::  target: 0x8d70 CodeAddr: 0x8d70
     movl     $0x10,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8d70              # value ::  target: 0x8d70 CodeAddr: 0x8d70
     movl     $0x100,%ecx             # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8d70:
     testl    $0x400,%esi             # imm,reg ::  modifies flags!!
     jne      Addr0x8da8              # value ::  target: 0x8da8 CodeAddr: 0x8da8
Addr0x8d78:
     movl     $0x15,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8e30              # value ::  target: 0x8e30 CodeAddr: 0x8e30
     cmpb     $0x0,0xc0(%r12)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x8e30              # value ::  target: 0x8e30 CodeAddr: 0x8e30
     movl     $0x150,%ecx             # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8da8:
     movl     $0x11,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8d78              # value ::  target: 0x8d78 CodeAddr: 0x8d78
     movl     $0x110,%ecx             # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8dc0:
     movl     %esi,%eax               # reg,reg :: 
     andl     $0x202,%eax             # imm,reg ::  modifies flags!!
     cmpl     $0x202,%eax             # imm,reg ::  modifies flags!!
     je       Addr0x8e80              # value ::  target: 0x8e80 CodeAddr: 0x8e80
Addr0x8dd2:
     testb    $0x2,%sil               # imm,reg ::  modifies flags!!
     je       Addr0x8def              # value ::  target: 0x8def CodeAddr: 0x8def
     movl     $0x13,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movl     $0x130,%ecx             # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8def:
     andl     $0x200,%esi             # imm,reg ::  modifies flags!!
     movl     $0x60,%ecx              # imm,reg :: 
     je       Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
     movl     $0x12,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     cmpb     $0x1,%al                # imm,reg ::  modifies flags!!
     sbbq     %rcx,%rcx               # reg,reg ::  modifies flags!!
     andb     $0x40,%cl               # imm,reg ::  modifies flags!!
     addq     $0x120,%rcx             # imm,reg ::  modifies flags!!
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8e20:
     movl     $0x7,%eax               # imm,reg :: 
     jmp      Addr0x8b66              # value ::  target: 0x8b66 CodeAddr: 0x8b66
Addr0x8e30:
     andl     $0x49,%esi              # imm,reg ::  modifies flags!!
     je       Addr0x8e50              # value ::  target: 0x8e50 CodeAddr: 0x8e50
     movl     $0xe,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8e50              # value ::  target: 0x8e50 CodeAddr: 0x8e50
     movl     $0xe0,%ecx              # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8e50:
     cmpq     $0x1,0x28(%r12)         # imm,memOffsetBase ::  modifies flags!!
     jbe      Addr0x8ce0              # value ::  target: 0x8ce0 CodeAddr: 0x8ce0
     movl     $0x16,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x8ce0              # value ::  target: 0x8ce0 CodeAddr: 0x8ce0
     movl     $0x160,%ecx             # imm,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
Addr0x8e80:
     movl     $0x14,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movl     $0x140,%ecx             # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e
     jmp      Addr0x8dd2              # value ::  target: 0x8dd2 CodeAddr: 0x8dd2
Addr0x8e9c:
     shlq     $0x4,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,%rcx               # reg,reg :: 
     jmp      Addr0x8b9e              # value ::  target: 0x8b9e CodeAddr: 0x8b9e

# ----------- Function 171 ------------ 
#
# startAddr  = 0x8eb0
# startindex = 4630
# endAddr    = 0x9044
# endindex   = 4721
# len        = 405 (0x195)
# len1       = 416 (0x1a0) to (0x9045)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x8eb0:
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x2a8,%rsp             # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x298(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x8170              # value ::  target: 0x8170 CodeAddr: 0x8170 CALLS 0x8170
     cmpb     $0x0,Var0x242fc(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fc modifies flags!!
     je       Addr0x8f22              # value ::  target: 0x8f22 CodeAddr: 0x8f22
     cmpb     $0x0,0xb8(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     leaq     Var0x197e2(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197e2
     je       Addr0x8efe              # value ::  target: 0x8efe CodeAddr: 0x8efe
     movq     0x20(%rbx),%rdi         # memOffsetBase,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0x9030              # value ::  target: 0x9030 CodeAddr: 0x9030
Addr0x8efe:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     je       Addr0x8f0f              # value ::  target: 0x8f0f CodeAddr: 0x8f0f
     movl     Var0x24360(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24360
Addr0x8f0f:
     leaq     Var0x1980f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1980f
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
Addr0x8f22:
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     je       Addr0x8f63              # value ::  target: 0x8f63 CodeAddr: 0x8f63
     cmpb     $0x0,0xb8(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     leaq     Var0x197e2(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197e2
     jne      Addr0x8ff8              # value ::  target: 0x8ff8 CodeAddr: 0x8ff8
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     je       Addr0x8f50              # value ::  target: 0x8f50 CodeAddr: 0x8f50
Addr0x8f4a:
     movl     Var0x2435c(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x2435c
Addr0x8f50:
     leaq     Var0x1980f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1980f
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
Addr0x8f63:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     je       Addr0x8f97              # value ::  target: 0x8f97 CodeAddr: 0x8f97
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     movq     0xb0(%rbx),%rcx         # memOffsetBase,reg :: 
     je       Addr0x8f84              # value ::  target: 0x8f84 CodeAddr: 0x8f84
     movl     Var0x24354(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24354
Addr0x8f84:
     leaq     Var0x1980f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1980f
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
Addr0x8f97:
     movq     %r12,%rcx               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x8a60              # value ::  target: 0x8a60 CodeAddr: 0x8a60 CALLS 0x8a60
     movq     %rax,%r12               # reg,reg :: 
     movl     Var0x24314(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24314
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x8fd8              # value ::  target: 0x8fd8 CodeAddr: 0x8fd8
Addr0x8fb3:
     movq     0x298(%rsp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x9040              # value ::  target: 0x9040 CodeAddr: 0x9040
     addq     $0x2a8,%rsp             # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x8fd8:
     movl     0xa8(%rbx),%edx         # memOffsetBase,reg :: 
     movl     0x30(%rbx),%esi         # memOffsetBase,reg :: 
     movzbl   0xb8(%rbx),%edi         # memOffsetBase,reg :: 
     callq    Addr0x7b30              # value ::  target: 0x7b30 CodeAddr: 0x7b30 CALLS 0x7b30
     movzbl   %al,%eax                # reg,reg :: 
     addq     %rax,%r12               # reg,reg ::  modifies flags!!
     jmp      Addr0x8fb3              # value ::  target: 0x8fb3 CodeAddr: 0x8fb3
Addr0x8ff8:
     movl     Var0x24328(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24328
     movq     0x58(%rbx),%rdi         # memOffsetBase,reg :: 
     movl     $0x200,%ecx             # imm,reg :: 
     movq     %rsp,%rsi               # reg,reg :: 
     movq     Var0x24320(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x24320
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     movq     %rax,%rcx               # reg,reg :: 
     jne      Addr0x8f4a              # value ::  target: 0x8f4a CodeAddr: 0x8f4a
     jmp      Addr0x8f50              # value ::  target: 0x8f50 CodeAddr: 0x8f50
Addr0x9030:
     movq     %rsp,%rsi               # reg,reg :: 
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%rcx               # reg,reg :: 
     jmp      Addr0x8efe              # value ::  target: 0x8efe CodeAddr: 0x8efe
Addr0x9040:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 172 ------------ 
#
# startAddr  = 0x9050
# startindex = 4723
# endAddr    = 0x9aa0
# endindex   = 5265
# len        = 2641 (0xa51)
# len1       = 2652 (0xa5c) to (0x9aa1)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x9050:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x1000,%rsp            # imm,reg ::  modifies flags!!
     orq      $0x0,(%rsp)             # imm,memBase ::  modifies flags!!
     subq     $0x328,%rsp             # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x1318(%rsp)       # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0xb8(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rdi,%r12               # reg,reg :: 
     je       Addr0x9490              # value ::  target: 0x9490 CodeAddr: 0x9490
     leaq     0xb4(%rsp),%rsi         # memOffsetBase,reg :: 
     leaq     0x18(%rdi),%rdi         # memOffsetBase,reg :: 
     callq    Addr0xe500              # value ::  target: 0xe500 CodeAddr: 0xe500 CALLS 0xe500
     cmpb     $0x0,Var0x24364(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24364 modifies flags!!
     jne      Addr0x94de              # value ::  target: 0x94de CodeAddr: 0x94de
Addr0x90ae:
     movb     $0x0,0xbe(%rsp)         # imm,memOffsetBase :: 
Addr0x90b6:
     movl     Var0x24334(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24334
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x9510              # value ::  target: 0x9510 CodeAddr: 0x9510
Addr0x90c5:
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x93c8              # value ::  target: 0x93c8 CodeAddr: 0x93c8
     movq     0x68(%r12),%rax         # memOffsetBase,reg :: 
     movq     0x60(%r12),%rdx         # memOffsetBase,reg :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x20(%rsp)         # reg,memOffsetBase :: 
Addr0x90e2:
     movzbl   0xb8(%r12),%edx         # memOffsetBase,reg :: 
     cmpb     $0x0,Var0x242fc(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fc modifies flags!!
     jne      Addr0x93f0              # value ::  target: 0x93f0 CodeAddr: 0x93f0
     leaq     0x4d0(%rsp),%rbp        # memOffsetBase,reg :: 
     movq     %rbp,%rbx               # reg,reg :: 
Addr0x9103:
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     je       Addr0x917d              # value ::  target: 0x917d CodeAddr: 0x917d
     leaq     Var0x197e2(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x197e2
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x9910              # value ::  target: 0x9910 CodeAddr: 0x9910
Addr0x911b:
     movl     Var0x2435c(%rip),%r13d  # memOffsetBase,reg ::  DataAddr: 0x2435c
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     subl     %eax,%r13d              # reg,reg ::  modifies flags!!
     movl     %r13d,%eax              # reg,reg :: 
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     jle      Addr0x915d              # value ::  target: 0x915d CodeAddr: 0x915d
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     leaq     0x1(%rbx,%rax,1),%rcx   # memOffsetBaseIndexScale,reg :: 
     movq     %rbx,%rax               # reg,reg :: 
Addr0x9148:
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movb     $0x20,-0x1(%rax)        # imm,memOffsetBase :: 
     cmpq     %rcx,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x9148              # value ::  target: 0x9148 CodeAddr: 0x9148
     movslq   %edx,%rax               # reg,reg :: 
     leaq     0x1(%rbx,%rax,1),%rbx   # memOffsetBaseIndexScale,reg :: 
Addr0x915d:
     movzbl   (%r14),%eax             # memBase,reg :: 
     addq     $0x1,%r14               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movb     %al,-0x1(%rbx)          # reg,memOffsetBase :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x915d              # value ::  target: 0x915d CodeAddr: 0x915d
     movb     $0x20,-0x1(%rbx)        # imm,memOffsetBase :: 
     movzbl   0xb8(%r12),%edx         # memOffsetBase,reg :: 
Addr0x917d:
     leaq     Var0x197e2(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197e2
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x9680              # value ::  target: 0x9680 CodeAddr: 0x9680
Addr0x918c:
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rbx,%rdi               # reg,reg :: 
     movl     Var0x24358(%rip),%r9d   # memOffsetBase,reg ::  DataAddr: 0x24358
     leaq     Var0x197ff(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197ff
     pushq    %rax                    # reg :: 
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     0xc4(%rsp),%r8          # memOffsetBase,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     popq     %r8                     # reg :: 
     popq     %r9                     # reg :: 
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     jne      Addr0x96a0              # value ::  target: 0x96a0 CodeAddr: 0x96a0
Addr0x91d9:
     cmpb     $0x0,Var0x23021(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23021 modifies flags!!
     jne      Addr0x9200              # value ::  target: 0x9200 CodeAddr: 0x9200
     cmpb     $0x0,Var0x23020(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23020 modifies flags!!
     jne      Addr0x9200              # value ::  target: 0x9200 CodeAddr: 0x9200
     cmpb     $0x0,Var0x2432e(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432e modifies flags!!
     je       Addr0x9790              # value ::  target: 0x9790 CodeAddr: 0x9790
Addr0x9200:
     movq     Var0x23288(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %rbp,%rdi               # reg,reg :: 
     subq     %rbp,%rbx               # reg,reg ::  modifies flags!!
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     addq     %rbx,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     cmpb     $0x0,Var0x23021(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23021 modifies flags!!
     jne      Addr0x96d0              # value ::  target: 0x96d0 CodeAddr: 0x96d0
     cmpb     $0x0,Var0x23020(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23020 modifies flags!!
     jne      Addr0x96f6              # value ::  target: 0x96f6 CodeAddr: 0x96f6
Addr0x9233:
     cmpb     $0x0,Var0x2432e(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432e modifies flags!!
     jne      Addr0x9729              # value ::  target: 0x9729 CodeAddr: 0x9729
Addr0x9240:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     movq     %rbp,%rbx               # reg,reg :: 
     jne      Addr0x9752              # value ::  target: 0x9752 CodeAddr: 0x9752
Addr0x9250:
     cmpb     $0x0,0xb8(%r12)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x9480              # value ::  target: 0x9480 CodeAddr: 0x9480
     movl     0x30(%r12),%eax         # memOffsetBase,reg :: 
     andl     $0xb000,%eax            # imm,reg ::  CodeAddr: 0xb000 modifies flags!!
     cmpl     $0x2000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0x9850              # value ::  target: 0x9850 CodeAddr: 0x9850
     movq     0x48(%r12),%rdi         # memOffsetBase,reg :: 
     movq     Var0x23018(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x23018
     leaq     0xe0(%rsp),%rsi         # memOffsetBase,reg :: 
     movl     $0x1,%ecx               # imm,reg :: 
     movl     Var0x2431c(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x2431c
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     movq     %rax,%r14               # reg,reg :: 
Addr0x929b:
     movl     Var0x2433c(%rip),%r13d  # memOffsetBase,reg ::  DataAddr: 0x2433c
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     subl     %eax,%r13d              # reg,reg ::  modifies flags!!
     movl     %r13d,%eax              # reg,reg :: 
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     jle      Addr0x92dd              # value ::  target: 0x92dd CodeAddr: 0x92dd
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     leaq     0x1(%rbx,%rax,1),%rcx   # memOffsetBaseIndexScale,reg :: 
     movq     %rbx,%rax               # reg,reg :: 
Addr0x92c8:
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movb     $0x20,-0x1(%rax)        # imm,memOffsetBase :: 
     cmpq     %rcx,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x92c8              # value ::  target: 0x92c8 CodeAddr: 0x92c8
     movslq   %edx,%rax               # reg,reg :: 
     leaq     0x1(%rbx,%rax,1),%rbx   # memOffsetBaseIndexScale,reg :: 
Addr0x92dd:
     movzbl   (%r14),%eax             # memBase,reg :: 
     addq     $0x1,%r14               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movb     %al,-0x1(%rbx)          # reg,memOffsetBase :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x92dd              # value ::  target: 0x92dd CodeAddr: 0x92dd
     movb     $0x20,-0x1(%rbx)        # imm,memOffsetBase :: 
Addr0x92f4:
     movb     $0x1,(%rbx)             # imm,memBase :: 
     leaq     Var0x197e2(%rip),%r13   # memOffsetBase,reg ::  DataAddr: 0x197e2
     cmpb     $0x0,0xb8(%r12)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x95a8              # value ::  target: 0x95a8 CodeAddr: 0x95a8
Addr0x930d:
     movl     Var0x23014(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x23014
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     js       Addr0x9970              # value ::  target: 0x9970 CodeAddr: 0x9970
Addr0x931d:
     movq     %r13,%r9                # reg,reg :: 
     leaq     Var0x1980f(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1980f
     movq     %rbx,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     (%rbx,%rax,1),%r13      # memBaseIndexScale,reg :: 
Addr0x9349:
     movq     Var0x23288(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %rbp,%rdi               # reg,reg :: 
     subq     %rbp,%r13               # reg,reg ::  modifies flags!!
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     %r13,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r12,%rdi               # reg,reg :: 
     leaq     Var0x241a0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x241a0
     addq     %r13,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     callq    Addr0x8a60              # value ::  target: 0x8a60 CodeAddr: 0x8a60 CALLS 0x8a60
     movl     0xa8(%r12),%edx         # memOffsetBase,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     cmpl     $0x6,%edx               # imm,reg ::  modifies flags!!
     je       Addr0x9538              # value ::  target: 0x9538 CodeAddr: 0x9538
     movl     Var0x24314(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24314
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x9770              # value ::  target: 0x9770 CodeAddr: 0x9770
Addr0x9398:
     movq     0x1318(%rsp),%rax       # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x9a90              # value ::  target: 0x9a90 CodeAddr: 0x9a90
     addq     $0x1328,%rsp            # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x93c8:
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x9530              # value ::  target: 0x9530 CodeAddr: 0x9530
     movq     0x78(%r12),%rax         # memOffsetBase,reg :: 
     movq     0x70(%r12),%rdx         # memOffsetBase,reg :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x20(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x90e2              # value ::  target: 0x90e2 CodeAddr: 0x90e2
Addr0x93f0:
     leaq     Var0x197e2(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x197e2
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x9409              # value ::  target: 0x9409 CodeAddr: 0x9409
     movq     0x20(%r12),%rdi         # memOffsetBase,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0x97e0              # value ::  target: 0x97e0 CodeAddr: 0x97e0
Addr0x9409:
     leaq     0x4d0(%rsp),%rbp        # memOffsetBase,reg :: 
     movl     Var0x24360(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x24360
     movl     $0xe3b,%edx             # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x1980f(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1980f
     movl     $0x1,%esi               # imm,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rbp,%rbx               # reg,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
Addr0x9436:
     movl     (%rbx),%eax             # memBase,reg :: 
     addq     $0x4,%rbx               # imm,reg ::  modifies flags!!
     leal     -0x1010101(%rax),%edx   # memOffsetBase,reg :: 
     notl     %eax                    # reg :: 
     andl     %eax,%edx               # reg,reg ::  modifies flags!!
     andl     $0x80808080,%edx        # imm,reg ::  modifies flags!!
     je       Addr0x9436              # value ::  target: 0x9436 CodeAddr: 0x9436
     movl     %edx,%eax               # reg,reg :: 
     shrl     $0x10,%eax              # imm,reg ::  modifies flags!!
     testl    $0x8080,%edx            # imm,reg ::  CodeAddr: 0x8080 modifies flags!!
     cmovel   %eax,%edx               # reg,reg :: 
     leaq     0x2(%rbx),%rax          # memOffsetBase,reg :: 
     cmoveq   %rax,%rbx               # reg,reg :: 
     movl     %edx,%eax               # reg,reg :: 
     addb     %dl,%al                 # reg,reg ::  modifies flags!!
     movzbl   0xb8(%r12),%edx         # memOffsetBase,reg :: 
     sbbq     $0x3,%rbx               # imm,reg ::  modifies flags!!
     jmp      Addr0x9103              # value ::  target: 0x9103 CodeAddr: 0x9103
Addr0x9480:
     leaq     Var0x197e2(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x197e2
     jmp      Addr0x929b              # value ::  target: 0x929b CodeAddr: 0x929b
Addr0x9490:
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     leaq     Var0x18750(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x18750
     movl     $0x3f3f,%r10d           # imm,reg :: 
     cmpb     $0x0,Var0x24364(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24364 modifies flags!!
     movw     %r10w,0xbd(%rsp)        # reg,memOffsetBase :: 
     movzbl   (%rdx,%rax,1),%eax      # memBaseIndexScale,reg :: 
     movb     $0x0,0xbf(%rsp)         # imm,memOffsetBase :: 
     movb     %al,0xb4(%rsp)          # reg,memOffsetBase :: 
     movabsq  $0x3f3f3f3f3f3f3f3f,%rax# imm,reg :: 
     movq     %rax,0xb5(%rsp)         # reg,memOffsetBase :: 
     je       Addr0x90ae              # value ::  target: 0x90ae CodeAddr: 0x90ae
Addr0x94de:
     movl     0xbc(%r12),%eax         # memOffsetBase,reg :: 
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x9840              # value ::  target: 0x9840 CodeAddr: 0x9840
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x90b6              # value ::  target: 0x90b6 CodeAddr: 0x90b6
     movl     Var0x24334(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24334
     movb     $0x2b,0xbe(%rsp)        # imm,memOffsetBase :: 
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0x90c5              # value ::  target: 0x90c5 CodeAddr: 0x90c5
Addr0x9510:
     movq     0x88(%r12),%rax         # memOffsetBase,reg :: 
     movq     0x80(%r12),%rdx         # memOffsetBase,reg :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x20(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x90e2              # value ::  target: 0x90e2 CodeAddr: 0x90e2
Addr0x9530:
     jmp      Addr0x4da0              # value ::  target: 0x4da0 CodeAddr: 0x4da0
Addr0x9538:
     cmpq     $0x0,0x8(%r12)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x9398              # value ::  target: 0x9398 CodeAddr: 0x9398
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x4,%edx               # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x19814(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19814
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     leaq     0x4(%r13,%rbp,1),%rcx   # memOffsetBaseIndexScale,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     addq     $0x4,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     callq    Addr0x8a60              # value ::  target: 0x8a60 CodeAddr: 0x8a60 CALLS 0x8a60
     movl     Var0x24314(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24314
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     je       Addr0x9398              # value ::  target: 0x9398 CodeAddr: 0x9398
     movl     0xac(%r12),%esi         # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x7b30              # value ::  target: 0x7b30 CodeAddr: 0x7b30 CALLS 0x7b30
     jmp      Addr0x9398              # value ::  target: 0x9398 CodeAddr: 0x9398
Addr0x95a8:
     leaq     0x30(%rsp),%r13         # memOffsetBase,reg :: 
     movq     Var0x242a8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x242a8
     leaq     0x20(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     callq    Addr0x17030             # value ::  target: 0x17030 CodeAddr: 0x17030 CALLS 0x17030
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x9660              # value ::  target: 0x9660 CodeAddr: 0x9660
     movq     Var0x24370(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x24370
     movq     0x20(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     Var0x24378(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24378
     movq     0x28(%rsp),%r9          # memOffsetBase,reg :: 
     cmpq     %rcx,%rdx               # reg,reg ::  modifies flags!!
     jl       Addr0x9a10              # value ::  target: 0x9a10 CodeAddr: 0x9a10
     jg       Addr0x97f8              # value ::  target: 0x97f8 CodeAddr: 0x97f8
     movl     %esi,%edi               # reg,reg :: 
     movl     %r9d,%eax               # reg,reg :: 
     cmpl     %r9d,%esi               # reg,reg ::  modifies flags!!
     js       Addr0x9a10              # value ::  target: 0x9a10 CodeAddr: 0x9a10
     subq     $0xf0c2ac,%rdx          # imm,reg ::  modifies flags!!
     cmpq     %rdx,%rcx               # reg,reg ::  modifies flags!!
     jg       Addr0x9835              # value ::  target: 0x9835 CodeAddr: 0x9835
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x9611:
     cmpb     $0x0,Var0x233c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x233c8 modifies flags!!
     movq     Var0x242a8(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x242a8
     je       Addr0x9a00              # value ::  target: 0x9a00 CodeAddr: 0x9a00
     leaq     (%rax,%rax,1),%rdx      # memBaseIndexScale,reg :: 
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     movslq   0x40(%rsp),%rdx         # memOffsetBase,reg :: 
     leaq     (%rdx,%rax,4),%rdx      # memBaseIndexScale,reg :: 
     leaq     Var0x233e0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x233e0
     shlq     $0x7,%rdx               # imm,reg ::  modifies flags!!
     addq     %rax,%rdx               # reg,reg ::  modifies flags!!
Addr0x9643:
     movq     %r13,%rcx               # reg,reg :: 
     movl     $0x3e9,%esi             # imm,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x13280             # value ::  target: 0x13280 CodeAddr: 0x13280 CALLS 0x13280
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x9660              # value ::  target: 0x9660 CodeAddr: 0x9660
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
     jmp      Addr0x9669              # value ::  target: 0x9669 CodeAddr: 0x9669
Addr0x9660:
     cmpb     $0x0,(%rbx)             # imm,memBase ::  modifies flags!!
     jne      Addr0x993c              # value ::  target: 0x993c CodeAddr: 0x993c
Addr0x9669:
     movl     $0x20,%ecx              # imm,reg :: 
     leaq     0x1(%rbx),%r13          # memOffsetBase,reg :: 
     movw     %cx,(%rbx)              # reg,memBase :: 
     jmp      Addr0x9349              # value ::  target: 0x9349 CodeAddr: 0x9349
Addr0x9680:
     movq     0x28(%r12),%rdi         # memOffsetBase,reg :: 
     leaq     0xe0(%rsp),%rsi         # memOffsetBase,reg :: 
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     jmp      Addr0x918c              # value ::  target: 0x918c CodeAddr: 0x918c
Addr0x96a0:
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x2,%edx               # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x19807(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19807
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     addq     $0x2,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     jmp      Addr0x91d9              # value ::  target: 0x91d9 CodeAddr: 0x91d9
Addr0x96d0:
     movzbl   0xb8(%r12),%edx         # memOffsetBase,reg :: 
     movl     0x34(%r12),%edi         # memOffsetBase,reg :: 
     movl     Var0x24350(%rip),%esi   # memOffsetBase,reg ::  DataAddr: 0x24350
     callq    Addr0x7780              # value ::  target: 0x7780 CodeAddr: 0x7780 CALLS 0x7780
     cmpb     $0x0,Var0x23020(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23020 modifies flags!!
     je       Addr0x9233              # value ::  target: 0x9233 CodeAddr: 0x9233
Addr0x96f6:
     cmpb     $0x0,0xb8(%r12)         # imm,memOffsetBase ::  modifies flags!!
     movl     Var0x2434c(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x2434c
     leaq     Var0x197e2(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x197e2
     movl     0x38(%r12),%esi         # memOffsetBase,reg :: 
     jne      Addr0x97a8              # value ::  target: 0x97a8 CodeAddr: 0x97a8
Addr0x9717:
     callq    Addr0x76c0              # value ::  target: 0x76c0 CodeAddr: 0x76c0 CALLS 0x76c0
     cmpb     $0x0,Var0x2432e(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432e modifies flags!!
     je       Addr0x9240              # value ::  target: 0x9240 CodeAddr: 0x9240
Addr0x9729:
     movl     0x34(%r12),%edi         # memOffsetBase,reg :: 
     movl     Var0x24348(%rip),%esi   # memOffsetBase,reg ::  DataAddr: 0x24348
     movq     %rbp,%rbx               # reg,reg :: 
     movzbl   0xb8(%r12),%edx         # memOffsetBase,reg :: 
     callq    Addr0x7780              # value ::  target: 0x7780 CodeAddr: 0x7780 CALLS 0x7780
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     je       Addr0x9250              # value ::  target: 0x9250 CodeAddr: 0x9250
Addr0x9752:
     movq     0xb0(%r12),%rdi         # memOffsetBase,reg :: 
     movl     Var0x24354(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24354
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x76c0              # value ::  target: 0x76c0 CodeAddr: 0x76c0 CALLS 0x76c0
     jmp      Addr0x9250              # value ::  target: 0x9250 CodeAddr: 0x9250
Addr0x9770:
     movzbl   0xb8(%r12),%edi         # memOffsetBase,reg :: 
     movl     0x30(%r12),%esi         # memOffsetBase,reg :: 
     callq    Addr0x7b30              # value ::  target: 0x7b30 CodeAddr: 0x7b30 CALLS 0x7b30
     jmp      Addr0x9398              # value ::  target: 0x9398 CodeAddr: 0x9398
Addr0x9790:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     je       Addr0x9250              # value ::  target: 0x9250 CodeAddr: 0x9250
     jmp      Addr0x9200              # value ::  target: 0x9200 CodeAddr: 0x9200
Addr0x97a8:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x2432d(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432d modifies flags!!
     jne      Addr0x9717              # value ::  target: 0x9717 CodeAddr: 0x9717
     movl     %esi,%edi               # reg,reg :: 
     movq     %rsi,0x8(%rsp)          # reg,memOffsetBase :: 
     movl     %edx,0x4(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x10d70             # value ::  target: 0x10d70 CodeAddr: 0x10d70 CALLS 0x10d70
     movq     0x8(%rsp),%rsi          # memOffsetBase,reg :: 
     movl     0x4(%rsp),%edx          # memOffsetBase,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     jmp      Addr0x9717              # value ::  target: 0x9717 CodeAddr: 0x9717
Addr0x97e0:
     leaq     0xe0(%rsp),%rsi         # memOffsetBase,reg :: 
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%r9                # reg,reg :: 
     jmp      Addr0x9409              # value ::  target: 0x9409 CodeAddr: 0x9409
Addr0x97f8:
     leaq     -0xf0c2ac(%rdx),%rdi    # memOffsetBase,reg :: 
     cmpq     %rcx,%rdi               # reg,reg ::  modifies flags!!
     jl       Addr0x9a86              # value ::  target: 0x9a86 CodeAddr: 0x9a86
Addr0x9808:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     %rcx,%rdi               # reg,reg ::  modifies flags!!
     jg       Addr0x9611              # value ::  target: 0x9611 CodeAddr: 0x9611
     cmpl     %r9d,%esi               # reg,reg ::  modifies flags!!
     jns      Addr0x9611              # value ::  target: 0x9611 CodeAddr: 0x9611
Addr0x981c:
     cmpq     %rdx,%rcx               # reg,reg ::  modifies flags!!
     jl       Addr0x9a86              # value ::  target: 0x9a86 CodeAddr: 0x9a86
     movl     $0x0,%eax               # imm,reg :: 
     jg       Addr0x9611              # value ::  target: 0x9611 CodeAddr: 0x9611
     movl     %r9d,%eax               # reg,reg :: 
     movl     %esi,%edi               # reg,reg :: 
Addr0x9835:
     subl     %edi,%eax               # reg,reg ::  modifies flags!!
     shrl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     jmp      Addr0x9611              # value ::  target: 0x9611 CodeAddr: 0x9611
Addr0x9840:
     movb     $0x2e,0xbe(%rsp)        # imm,memOffsetBase :: 
     jmp      Addr0x90b6              # value ::  target: 0x90b6 CodeAddr: 0x90b6
Addr0x9850:
     movl     Var0x24344(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24344
     movl     Var0x24340(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24340
     leaq     0xe0(%rsp),%rsi         # memOffsetBase,reg :: 
     movl     Var0x2433c(%rip),%r13d  # memOffsetBase,reg ::  DataAddr: 0x2433c
     leal     0x2(%rdx,%rax,1),%eax   # memOffsetBaseIndexScale,reg :: 
     subl     %eax,%r13d              # reg,reg ::  modifies flags!!
     movq     0x40(%r12),%rax         # memOffsetBase,reg :: 
     movzbl   %al,%edx                # reg,reg :: 
     shrq     $0xc,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,%rdi               # reg,reg :: 
     xorb     %dil,%dil               # reg,reg ::  modifies flags!!
     orl      %edx,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movl     Var0x24340(%rip),%r15d  # memOffsetBase,reg ::  DataAddr: 0x24340
     leaq     0xc0(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     movq     0x40(%r12),%rax         # memOffsetBase,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     shrq     $0x8,%rdi               # imm,reg ::  modifies flags!!
     movl     %edi,%edx               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     andl     $0xfff,%edx             # imm,reg ::  modifies flags!!
     andl     $0xfffff000,%edi        # imm,reg ::  modifies flags!!
     orl      %edx,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     pushq    %r14                    # reg :: 
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%r8d               # imm,reg :: 
     pushq    %r15                    # reg :: 
     cmovnsl  %r13d,%r8d              # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     movq     %rax,%r9                # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     addl     Var0x24344(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x24344 modifies flags!!
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     leaq     Var0x1980a(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1980a
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movslq   Var0x2433c(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x2433c
     popq     %rsi                    # reg :: 
     popq     %rdi                    # reg :: 
     leaq     0x1(%rbx,%rax,1),%rbx   # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x92f4              # value ::  target: 0x92f4 CodeAddr: 0x92f4
Addr0x9910:
     movq     0x58(%r12),%rdi         # memOffsetBase,reg :: 
     movq     Var0x24320(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x24320
     leaq     0xe0(%rsp),%rsi         # memOffsetBase,reg :: 
     movl     $0x200,%ecx             # imm,reg :: 
     movl     Var0x24328(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24328
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     movq     %rax,%r14               # reg,reg :: 
     jmp      Addr0x911b              # value ::  target: 0x911b CodeAddr: 0x911b
Addr0x993c:
     cmpb     $0x0,0xb8(%r12)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x9a95              # value ::  target: 0x9a95 CodeAddr: 0x9a95
     movq     0x20(%rsp),%rdi         # memOffsetBase,reg :: 
     leaq     0xc0(%rsp),%rsi         # memOffsetBase,reg :: 
     callq    Addr0x10f20             # value ::  target: 0x10f20 CodeAddr: 0x10f20 CALLS 0x10f20
     movl     Var0x23014(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x23014
     movq     %rax,%r13               # reg,reg :: 
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     jns      Addr0x931d              # value ::  target: 0x931d CodeAddr: 0x931d
Addr0x9970:
     leaq     0x70(%rsp),%r14         # memOffsetBase,reg :: 
     movq     Var0x242a8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x242a8
     leaq     0x18(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     %r14,%rdx               # reg,reg :: 
     callq    Addr0x17030             # value ::  target: 0x17030 CodeAddr: 0x17030 CALLS 0x17030
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x99d6              # value ::  target: 0x99d6 CodeAddr: 0x99d6
     cmpb     $0x0,Var0x233c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x233c8 modifies flags!!
     movq     Var0x242a8(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x242a8
     movq     Var0x23040(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x23040
     jne      Addr0x9a50              # value ::  target: 0x9a50 CodeAddr: 0x9a50
Addr0x99b2:
     leaq     0xe0(%rsp),%r15         # memOffsetBase,reg :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     movq     %r14,%rcx               # reg,reg :: 
     movl     $0x3e9,%esi             # imm,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x13280             # value ::  target: 0x13280 CodeAddr: 0x13280 CALLS 0x13280
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x9a6b              # value ::  target: 0x9a6b CodeAddr: 0x9a6b
Addr0x99d6:
     movl     Var0x23014(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x23014
Addr0x99dd:
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     jns      Addr0x931d              # value ::  target: 0x931d CodeAddr: 0x931d
     movl     $0x0,Var0x23014(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23014
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x931d              # value ::  target: 0x931d CodeAddr: 0x931d
Addr0x9a00:
     leaq     Var0x23040(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x23040
     movq     (%rdx,%rax,8),%rdx      # memBaseIndexScale,reg :: 
     jmp      Addr0x9643              # value ::  target: 0x9643 CodeAddr: 0x9643
Addr0x9a10:
     leaq     Var0x24370(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24370
     callq    Addr0xeae0              # value ::  target: 0xeae0 CodeAddr: 0xeae0 CALLS 0xeae0
     movq     0x20(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x28(%rsp),%r9          # memOffsetBase,reg :: 
     movq     Var0x24370(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x24370
     movq     Var0x24378(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24378
     leaq     -0xf0c2ac(%rdx),%rdi    # memOffsetBase,reg :: 
     cmpq     %rcx,%rdi               # reg,reg ::  modifies flags!!
     jge      Addr0x9808              # value ::  target: 0x9808 CodeAddr: 0x9808
     jmp      Addr0x981c              # value ::  target: 0x981c CodeAddr: 0x981c
Addr0x9a50:
     movslq   0x80(%rsp),%rdx         # memOffsetBase,reg :: 
     leaq     Var0x233e0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x233e0
     shlq     $0x7,%rdx               # imm,reg ::  modifies flags!!
     addq     %rax,%rdx               # reg,reg ::  modifies flags!!
     jmp      Addr0x99b2              # value ::  target: 0x99b2 CodeAddr: 0x99b2
Addr0x9a6b:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rax,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x114b0             # value ::  target: 0x114b0 CodeAddr: 0x114b0 CALLS 0x114b0
     movl     %eax,Var0x23014(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23014
     movl     %eax,%r8d               # reg,reg :: 
     jmp      Addr0x99dd              # value ::  target: 0x99dd CodeAddr: 0x99dd
Addr0x9a86:
     movl     $0x1,%eax               # imm,reg :: 
     jmp      Addr0x9611              # value ::  target: 0x9611 CodeAddr: 0x9611
Addr0x9a90:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x9a95:
     leaq     Var0x197e2(%rip),%r13   # memOffsetBase,reg ::  DataAddr: 0x197e2
     jmp      Addr0x930d              # value ::  target: 0x930d CodeAddr: 0x930d

# ----------- Function 173 ------------ 
#
# startAddr  = 0x9ab0
# startindex = 5268
# endAddr    = 0x9b49
# endindex   = 5303
# len        = 154 (0x9a)
# len1       = 160 (0xa0) to (0x9b4a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x9ab0:
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x1000,%rsp            # imm,reg ::  modifies flags!!
     orq      $0x0,(%rsp)             # imm,memBase ::  modifies flags!!
     subq     $0x1000,%rsp            # imm,reg ::  modifies flags!!
     orq      $0x0,(%rsp)             # imm,memBase ::  modifies flags!!
     subq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movq     %rdi,%rbx               # reg,reg :: 
     leaq     0x20(%rsp),%rbp         # memOffsetBase,reg :: 
     leaq     0x10(%rsp),%rdi         # memOffsetBase,reg :: 
     movl     %edx,%ecx               # reg,reg :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x2028(%rsp)       # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsi,%rdx               # reg,reg :: 
     leaq     0xf(%rsp),%r9           # memOffsetBase,reg :: 
     leaq     0x18(%rsp),%r8          # memOffsetBase,reg :: 
     movq     %rbx,%rsi               # reg,reg :: 
     movq     %rbp,0x10(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x81e0              # value ::  target: 0x81e0 CodeAddr: 0x81e0 CALLS 0x81e0
     movq     0x10(%rsp),%rdi         # memOffsetBase,reg :: 
     cmpq     %rbp,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x9b1e              # value ::  target: 0x9b1e CodeAddr: 0x9b1e
     cmpq     %rbx,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x9b1e              # value ::  target: 0x9b1e CodeAddr: 0x9b1e
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
Addr0x9b1e:
     movzbl   0xf(%rsp),%eax          # memOffsetBase,reg :: 
     addq     0x18(%rsp),%rax         # memOffsetBase,reg ::  modifies flags!!
     movq     0x2028(%rsp),%rbx       # memOffsetBase,reg :: 
     xorq     0x28,%rbx               # value,reg ::  modifies flags!!
     jne      Addr0x9b45              # value ::  target: 0x9b45 CodeAddr: 0x9b45
     addq     $0x2038,%rsp            # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x9b45:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 174 ------------ 
#
# startAddr  = 0x9b50
# startindex = 5305
# endAddr    = 0x9cf6
# endindex   = 5392
# len        = 423 (0x1a7)
# len1       = 432 (0x1b0) to (0x9cf7)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x9b50:
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x2a8,%rsp             # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x298(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x242fc(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fc modifies flags!!
     je       Addr0x9c28              # value ::  target: 0x9c28 CodeAddr: 0x9c28
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     je       Addr0x9cc0              # value ::  target: 0x9cc0 CodeAddr: 0x9cc0
     movslq   Var0x24360(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x24360
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     je       Addr0x9ca8              # value ::  target: 0x9ca8 CodeAddr: 0x9ca8
Addr0x9ba1:
     movslq   Var0x2435c(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x2435c
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
Addr0x9bac:
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
Addr0x9baf:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     jne      Addr0x9c88              # value ::  target: 0x9c88 CodeAddr: 0x9c88
Addr0x9bbc:
     movl     0xc4(%rbp),%edx         # memOffsetBase,reg :: 
     movq     Var0x242d0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x242d0
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x9ab0              # value ::  target: 0x9ab0 CodeAddr: 0x9ab0 CALLS 0x9ab0
     leaq     (%rbx,%rax,1),%r8       # memBaseIndexScale,reg :: 
     movl     Var0x24314(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24314
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x9c00              # value ::  target: 0x9c00 CodeAddr: 0x9c00
     movl     0xa8(%rbp),%edx         # memOffsetBase,reg :: 
     movl     0x30(%rbp),%esi         # memOffsetBase,reg :: 
     movzbl   0xb8(%rbp),%edi         # memOffsetBase,reg :: 
     callq    Addr0x7a40              # value ::  target: 0x7a40 CodeAddr: 0x7a40 CALLS 0x7a40
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     addq     %rax,%r8                # reg,reg ::  modifies flags!!
Addr0x9c00:
     movq     0x298(%rsp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x9cf2              # value ::  target: 0x9cf2 CodeAddr: 0x9cf2
     addq     $0x2a8,%rsp             # imm,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x9c28:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
Addr0x9c2a:
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     je       Addr0x9baf              # value ::  target: 0x9baf CodeAddr: 0x9baf
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     jne      Addr0x9ba1              # value ::  target: 0x9ba1 CodeAddr: 0x9ba1
     cmpb     $0x0,0xb8(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0x2,%eax               # imm,reg :: 
     je       Addr0x9bac              # value ::  target: 0x9bac CodeAddr: 0x9bac
     movq     0x58(%rbp),%rdi         # memOffsetBase,reg :: 
     movq     Var0x24320(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x24320
     movq     %rsp,%rsi               # reg,reg :: 
     movl     $0x200,%ecx             # imm,reg :: 
     movl     Var0x24328(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24328
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jmp      Addr0x9bac              # value ::  target: 0x9bac CodeAddr: 0x9bac
Addr0x9c88:
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     je       Addr0x9ce0              # value ::  target: 0x9ce0 CodeAddr: 0x9ce0
Addr0x9c91:
     movslq   Var0x24354(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24354
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
Addr0x9c9c:
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
     jmp      Addr0x9bbc              # value ::  target: 0x9bbc CodeAddr: 0x9bbc
Addr0x9ca8:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     jne      Addr0x9c91              # value ::  target: 0x9c91 CodeAddr: 0x9c91
     jmp      Addr0x9bbc              # value ::  target: 0x9bbc CodeAddr: 0x9bbc
Addr0x9cc0:
     movq     0x20(%rdi),%rdi         # memOffsetBase,reg :: 
     movq     %rsp,%rsi               # reg,reg :: 
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x1(%rax),%rbx          # memOffsetBase,reg :: 
     jmp      Addr0x9c2a              # value ::  target: 0x9c2a CodeAddr: 0x9c2a
Addr0x9ce0:
     movq     0xb0(%rbp),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jmp      Addr0x9c9c              # value ::  target: 0x9c9c CodeAddr: 0x9c9c
Addr0x9cf2:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 175 ------------ 
#
# startAddr  = 0x9d00
# startindex = 5394
# endAddr    = 0x9fd5
# endindex   = 5582
# len        = 726 (0x2d6)
# len1       = 736 (0x2e0) to (0x9fd6)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x9d00:
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movl     %edi,%ebp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     Var0x243b0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x243b0
     movq     Var0x24200(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x24200
     cmpq     %rcx,%r9                # reg,reg ::  modifies flags!!
     movq     %rcx,%r12               # reg,reg :: 
     cmovbeq  %r9,%r12                # reg,reg :: 
     cmpq     Var0x232e0(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x232e0 modifies flags!!
     jbe      Addr0x9e33              # value ::  target: 0x9e33 CodeAddr: 0x9e33
     movq     %rcx,%rax               # reg,reg :: 
     movq     Var0x24208(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24208
     shrq     %rax                    # reg ::  modifies flags!!
     cmpq     %rax,%r12               # reg,reg ::  modifies flags!!
     jb       Addr0x9f99              # value ::  target: 0x9f99 CodeAddr: 0x9f99
     movl     $0x18,%edx              # imm,reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rcx                    # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     movzbl   %dl,%edx                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     leaq     (%rcx,%rcx,2),%rsi      # memBaseIndexScale,reg :: 
     shlq     $0x3,%rsi               # imm,reg ::  modifies flags!!
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     Var0x24200(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x24200
     movq     %rax,Var0x24208(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24208
Addr0x9d85:
     movq     Var0x232e0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x232e0
     movq     %rbx,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     subq     %rcx,%rdi               # reg,reg ::  modifies flags!!
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     addq     %rbx,%rcx               # reg,reg ::  modifies flags!!
     movq     %rdi,%rsi               # reg,reg :: 
     setb     %al                     # reg :: 
     imulq    %rcx,%rsi               # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     movq     %rsi,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rdi                    # reg :: 
     cmpq     %rax,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     movq     %rsi,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     shrq     %rdi                    # reg ::  modifies flags!!
     shrq     $0x3e,%rsi              # imm,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     shlq     $0x3,%rdi               # imm,reg ::  modifies flags!!
     js       Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %rax,%rdx               # reg,reg :: 
     movq     Var0x232e0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x232e0
     cmpq     %rax,%rbx               # reg,reg ::  modifies flags!!
     jbe      Addr0x9e25              # value ::  target: 0x9e25 CodeAddr: 0x9e25
     movq     Var0x24208(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24208
     leaq     0x8(,%rax,8),%rax       # memOffsetIndexScale,reg :: 
     leaq     0x8(,%rbx,8),%rsi       # memOffsetIndexScale,reg :: 
Addr0x9e10:
     leaq     (%rax,%rax,2),%rcx      # memBaseIndexScale,reg :: 
     movq     %rdx,-0x8(%rdi,%rcx,1)  # reg,memOffsetBaseIndexScale :: 
     addq     %rax,%rdx               # reg,reg ::  modifies flags!!
     addq     $0x8,%rax               # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x9e10              # value ::  target: 0x9e10 CodeAddr: 0x9e10
Addr0x9e25:
     movq     %rbx,Var0x232e0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x232e0
     movq     Var0x243b0(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x243b0
Addr0x9e33:
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x9e89              # value ::  target: 0x9e89 CodeAddr: 0x9e89
     movq     Var0x24208(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x24208
     leaq     0x3(%r12,%r12,2),%r8    # memOffsetBaseIndexScale,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     $0x3,%ecx               # imm,reg :: 
Addr0x9e50:
     movq     -0x8(%rdi,%rcx,8),%rax  # memOffsetBaseIndexScale,reg :: 
     movb     $0x1,-0x18(%rdi,%rcx,8) # imm,memOffsetBaseIndexScale :: 
     addq     $0x8,%rsi               # imm,reg ::  modifies flags!!
     movq     %rcx,-0x10(%rdi,%rcx,8) # reg,memOffsetBaseIndexScale :: 
     leaq     (%rax,%rsi,1),%rdx      # memBaseIndexScale,reg :: 
Addr0x9e70:
     movq     $0x3,(%rax)             # imm,memBase :: 
     addq     $0x8,%rax               # imm,reg ::  modifies flags!!
     cmpq     %rax,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x9e70              # value ::  target: 0x9e70 CodeAddr: 0x9e70
     addq     $0x3,%rcx               # imm,reg ::  modifies flags!!
     cmpq     %rcx,%r8                # reg,reg ::  modifies flags!!
     jne      Addr0x9e50              # value ::  target: 0x9e50 CodeAddr: 0x9e50
Addr0x9e89:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     testq    %r9,%r9                 # reg,reg ::  modifies flags!!
     je       Addr0x9f5d              # value ::  target: 0x9f5d CodeAddr: 0x9f5d
Addr0x9e98:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     (%rax,%rbx,8),%rdi      # memBaseIndexScale,reg :: 
     callq    Addr0x9b50              # value ::  target: 0x9b50 CodeAddr: 0x9b50 CALLS 0x9b50
     movq     Var0x243b0(%rip),%r10   # memOffsetBase,reg ::  DataAddr: 0x243b0
     movq     %rax,%r8                # reg,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x9f50              # value ::  target: 0x9f50 CodeAddr: 0x9f50
     movq     Var0x242b0(%rip),%r11   # memOffsetBase,reg ::  DataAddr: 0x242b0
     movq     Var0x24208(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x24208
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     leaq     0x2(%rax),%r9           # memOffsetBase,reg :: 
     jmp      Addr0x9f2e              # value ::  target: 0x9f2e CodeAddr: 0x9f2e
Addr0x9ed8:
     leaq     -0x1(%r10,%rcx,1),%rax  # memOffsetBaseIndexScale,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rax,%r13               # reg,reg :: 
     movq     %rbx,%rax               # reg,reg :: 
     divq     %r13                    # reg :: 
     movq     %rax,%r13               # reg,reg :: 
Addr0x9ef0:
     movq     0x10(%rsi),%rdx         # memOffsetBase,reg :: 
     cmpq     %rdi,%r13               # reg,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     cmovneq  %r9,%rax                # reg,reg :: 
     leaq     (%rdx,%r13,8),%rdi      # memBaseIndexScale,reg :: 
     movq     (%rdi),%rdx             # memBase,reg :: 
     cmpq     %rax,%rdx               # reg,reg ::  modifies flags!!
     jae      Addr0x9f25              # value ::  target: 0x9f25 CodeAddr: 0x9f25
     movq     0x8(%rsi),%r13          # memOffsetBase,reg :: 
     subq     %rdx,%r13               # reg,reg ::  modifies flags!!
     movq     %r13,%rdx               # reg,reg :: 
     addq     %rax,%rdx               # reg,reg ::  modifies flags!!
     movq     %rdx,0x8(%rsi)          # reg,memOffsetBase :: 
     movq     %rax,(%rdi)             # reg,memBase :: 
     cmpq     %r11,0x8(%rsi)          # reg,memOffsetBase ::  modifies flags!!
     setb     (%rsi)                  # memBase :: 
Addr0x9f25:
     addq     $0x18,%rsi              # imm,reg ::  modifies flags!!
     cmpq     %rcx,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x9f50              # value ::  target: 0x9f50 CodeAddr: 0x9f50
Addr0x9f2e:
     movq     %rcx,%rdi               # reg,reg :: 
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     cmpb     $0x0,(%rsi)             # imm,memBase ::  modifies flags!!
     je       Addr0x9f25              # value ::  target: 0x9f25 CodeAddr: 0x9f25
     testb    %bpl,%bpl               # reg,reg ::  modifies flags!!
     jne      Addr0x9ed8              # value ::  target: 0x9ed8 CodeAddr: 0x9ed8
     movq     %rbx,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     jmp      Addr0x9ef0              # value ::  target: 0x9ef0 CodeAddr: 0x9ef0
Addr0x9f50:
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     %r10,%rbx               # reg,reg ::  modifies flags!!
     jb       Addr0x9e98              # value ::  target: 0x9e98 CodeAddr: 0x9e98
Addr0x9f5d:
     cmpq     $0x1,%r12               # imm,reg ::  modifies flags!!
     jbe      Addr0x9f8b              # value ::  target: 0x9f8b CodeAddr: 0x9f8b
     movq     Var0x24208(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x24208
     leaq     (%r12,%r12,2),%rax      # memBaseIndexScale,reg :: 
     leaq     -0x18(%rdx,%rax,8),%rax # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x9f86              # value ::  target: 0x9f86 CodeAddr: 0x9f86
Addr0x9f78:
     subq     $0x1,%r12               # imm,reg ::  modifies flags!!
     subq     $0x18,%rax              # imm,reg ::  modifies flags!!
     cmpq     $0x1,%r12               # imm,reg ::  modifies flags!!
     je       Addr0x9f8b              # value ::  target: 0x9f8b CodeAddr: 0x9f8b
Addr0x9f86:
     cmpb     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     je       Addr0x9f78              # value ::  target: 0x9f78 CodeAddr: 0x9f78
Addr0x9f8b:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x9f99:
     movl     $0x30,%edx              # imm,reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %r12                    # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     movzbl   %dl,%edx                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x9fd1              # value ::  target: 0x9fd1 CodeAddr: 0x9fd1
     leaq     (%r12,%r12,1),%rbx      # memBaseIndexScale,reg :: 
     leaq     (%rbx,%r12,1),%rsi      # memBaseIndexScale,reg :: 
     shlq     $0x4,%rsi               # imm,reg ::  modifies flags!!
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     %rax,Var0x24208(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24208
     jmp      Addr0x9d85              # value ::  target: 0x9d85 CodeAddr: 0x9d85
Addr0x9fd1:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 176 ------------ 
#
# startAddr  = 0x9fe0
# startindex = 5584
# endAddr    = 0xa197
# endindex   = 5697
# len        = 440 (0x1b8)
# len1       = 448 (0x1c0) to (0xa198)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x9fe0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     je       Addr0xa108              # value ::  target: 0xa108 CodeAddr: 0xa108
     movsbl   %dil,%r15d              # reg,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     movl     %r15d,%r14d             # reg,reg :: 
     jmp      Addr0xa038              # value ::  target: 0xa038 CodeAddr: 0xa038
Addr0xa010:
     movq     %r13,%rbp               # reg,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xa0e0              # value ::  target: 0xa0e0 CodeAddr: 0xa0e0
Addr0xa01c:
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     callq    Addr0x8eb0              # value ::  target: 0x8eb0 CodeAddr: 0x8eb0 CALLS 0x8eb0
     cmpq     %rbx,Var0x243b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     jbe      Addr0xa108              # value ::  target: 0xa108 CodeAddr: 0xa108
Addr0xa038:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     cmpq     $0x0,Var0x242b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b0 modifies flags!!
     movq     (%rax,%rbx,8),%r12      # memBaseIndexScale,reg :: 
     je       Addr0xa010              # value ::  target: 0xa010 CodeAddr: 0xa010
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x9b50              # value ::  target: 0x9b50 CodeAddr: 0x9b50 CALLS 0x9b50
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xa138              # value ::  target: 0xa138 CodeAddr: 0xa138
     movq     Var0x242b0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x242b0
     leaq     0x2(%r13),%rbp          # memOffsetBase,reg :: 
     leaq     (%rax,%rbp,1),%rcx      # memBaseIndexScale,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xa086              # value ::  target: 0xa086 CodeAddr: 0xa086
     cmpq     %rcx,%rdx               # reg,reg ::  modifies flags!!
     jbe      Addr0xa0f0              # value ::  target: 0xa0f0 CodeAddr: 0xa0f0
     movq     $0xfffffffffffffffd,%rdx# imm,reg :: 
     subq     %rax,%rdx               # reg,reg ::  modifies flags!!
     cmpq     %r13,%rdx               # reg,reg ::  modifies flags!!
     jb       Addr0xa0f0              # value ::  target: 0xa0f0 CodeAddr: 0xa0f0
Addr0xa086:
     movq     %rcx,%r13               # reg,reg :: 
Addr0xa090:
     movl     $0x20,%r8d              # imm,reg :: 
     movl     $0x20,%edx              # imm,reg :: 
Addr0xa09b:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa148              # value ::  target: 0xa148 CodeAddr: 0xa148
     leaq     0x1(%rax),%rcx          # memOffsetBase,reg :: 
     movq     %rcx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     %r14b,(%rax)            # reg,memBase :: 
Addr0xa0bb:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa170              # value ::  target: 0xa170 CodeAddr: 0xa170
     leaq     0x1(%rax),%rcx          # memOffsetBase,reg :: 
     movq     %rcx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     %dl,(%rax)              # reg,memBase :: 
     jmp      Addr0xa01c              # value ::  target: 0xa01c CodeAddr: 0xa01c
Addr0xa0e0:
     leaq     0x2(%r13),%rbp          # memOffsetBase,reg :: 
     movq     %rbp,%r13               # reg,reg :: 
     jmp      Addr0xa090              # value ::  target: 0xa090 CodeAddr: 0xa090
Addr0xa0f0:
     movq     %rax,%r13               # reg,reg :: 
     movl     $0xa,%r8d               # imm,reg :: 
     movl     $0xa,%edx               # imm,reg :: 
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     jmp      Addr0xa09b              # value ::  target: 0xa09b CodeAddr: 0xa09b
Addr0xa108:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa180              # value ::  target: 0xa180 CodeAddr: 0xa180
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xa138:
     movq     %r13,%rbp               # reg,reg :: 
     addq     %rax,%r13               # reg,reg ::  modifies flags!!
     jmp      Addr0xa01c              # value ::  target: 0xa01c CodeAddr: 0xa01c
Addr0xa148:
     movl     %r15d,%esi              # reg,reg :: 
     movl     %r8d,0xc(%rsp)          # reg,memOffsetBase :: 
     movb     %dl,0xb(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     movzbl   0xb(%rsp),%edx          # memOffsetBase,reg :: 
     movl     0xc(%rsp),%r8d          # memOffsetBase,reg :: 
     jmp      Addr0xa0bb              # value ::  target: 0xa0bb CodeAddr: 0xa0bb
Addr0xa170:
     movl     %r8d,%esi               # reg,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xa01c              # value ::  target: 0xa01c CodeAddr: 0xa01c
Addr0xa180:
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movl     $0xa,%esi               # imm,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950

# ----------- Function 177 ------------ 
#
# startAddr  = 0xa1a0
# startindex = 5699
# endAddr    = 0xa52a
# endindex   = 5918
# len        = 907 (0x38b)
# len1       = 912 (0x390) to (0xa52b)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#  has jump ptr!
#
# -------------------------------------------

Addr0xa1a0:
     cmpl     $0x4,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     ja       Addr0xa52a              # value ::  target: 0xa52a CodeAddr: 0xa52a
     pushq    %r15                    # reg :: 
     leaq     Var0x18144(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x18144
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movl     Var0x24338(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24338
     movslq   (%rdx,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax" calcAddr: 0x0
#    JUMP TABLE 
#  #{'addr': 41423, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 5712, 'size': 3, 'jumpTable': 'unknown', 'calcAddr': 0}
     cmpq     $0x0,Var0x242b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b0 modifies flags!!
     je       Addr0xa4a0              # value ::  target: 0xa4a0 CodeAddr: 0xa4a0
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x9d00              # value ::  target: 0x9d00 CodeAddr: 0x9d00 CALLS 0x9d00
     leaq     (%rax,%rax,2),%rdx      # memBaseIndexScale,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     Var0x24208(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24208
     leaq     -0x18(%rax,%rdx,8),%r14 # memOffsetBaseIndexScale,reg :: 
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     (%rax),%rbp             # memBase,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x9b50              # value ::  target: 0x9b50 CodeAddr: 0x9b50 CALLS 0x9b50
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     movq     0x10(%r14),%rax         # memOffsetBase,reg :: 
     movq     (%rax),%r12             # memBase,reg :: 
     callq    Addr0x8eb0              # value ::  target: 0x8eb0 CodeAddr: 0x8eb0 CALLS 0x8eb0
     cmpq     $0x1,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     jbe      Addr0xa4d0              # value ::  target: 0xa4d0 CodeAddr: 0xa4d0
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x1,%ebx               # imm,reg :: 
     jmp      Addr0xa29d              # value ::  target: 0xa29d CodeAddr: 0xa29d
Addr0xa240:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa500              # value ::  target: 0xa500 CodeAddr: 0xa500
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0xa263:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     %r13,%rsi               # reg,reg :: 
     movq     (%rax,%rbx,8),%r12      # memBaseIndexScale,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x8eb0              # value ::  target: 0x8eb0 CodeAddr: 0x8eb0 CALLS 0x8eb0
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x9b50              # value ::  target: 0x9b50 CodeAddr: 0x9b50 CALLS 0x9b50
     movq     0x10(%r14),%rdx         # memOffsetBase,reg :: 
     cmpq     Var0x243b0(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243b0 modifies flags!!
     movq     %rax,%r15               # reg,reg :: 
     movq     (%rdx,%rbp,8),%r12      # memBaseIndexScale,reg :: 
     jae      Addr0xa4d0              # value ::  target: 0xa4d0 CodeAddr: 0xa4d0
Addr0xa29d:
     movq     %rbx,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     0x8(%rsp)               # memOffsetBase :: 
     movq     %rdx,%rbp               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xa240              # value ::  target: 0xa240 CodeAddr: 0xa240
     addq     %r13,%r12               # reg,reg ::  modifies flags!!
     leaq     (%r15,%r13,1),%rdi      # memBaseIndexScale,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     movq     %r12,%r13               # reg,reg :: 
     callq    Addr0x7520              # value ::  target: 0x7520 CodeAddr: 0x7520 CALLS 0x7520
     jmp      Addr0xa263              # value ::  target: 0xa263 CodeAddr: 0xa263
     movl     $0x2c,%edi              # imm,reg :: 
Addr0xa2cd:
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x9fe0              # value ::  target: 0x9fe0 CodeAddr: 0x9fe0
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     je       Addr0xa487              # value ::  target: 0xa487 CodeAddr: 0xa487
Addr0xa2f0:
     callq    Addr0x8170              # value ::  target: 0x8170 CodeAddr: 0x8170 CALLS 0x8170
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     (%rax,%rbx,8),%rdi      # memBaseIndexScale,reg :: 
     callq    Addr0x9050              # value ::  target: 0x9050 CodeAddr: 0x9050 CALLS 0x9050
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa4c0              # value ::  target: 0xa4c0 CodeAddr: 0xa4c0
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0xa325:
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     %rbx,Var0x243b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     ja       Addr0xa2f0              # value ::  target: 0xa2f0 CodeAddr: 0xa2f0
     jmp      Addr0xa487              # value ::  target: 0xa487 CodeAddr: 0xa487
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     je       Addr0xa487              # value ::  target: 0xa487 CodeAddr: 0xa487
Addr0xa350:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     (%rax,%rbx,8),%rdi      # memBaseIndexScale,reg :: 
     callq    Addr0x8eb0              # value ::  target: 0x8eb0 CodeAddr: 0x8eb0 CALLS 0x8eb0
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa4b0              # value ::  target: 0xa4b0 CodeAddr: 0xa4b0
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0xa382:
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     %rbx,Var0x243b0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     ja       Addr0xa350              # value ::  target: 0xa350 CodeAddr: 0xa350
     jmp      Addr0xa487              # value ::  target: 0xa487 CodeAddr: 0xa487
     cmpq     $0x0,Var0x242b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b0 modifies flags!!
     je       Addr0xa4a0              # value ::  target: 0xa4a0 CodeAddr: 0xa4a0
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     callq    Addr0x9d00              # value ::  target: 0x9d00 CodeAddr: 0x9d00 CALLS 0x9d00
     movq     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     leaq     (%rax,%rax,2),%rdx      # memBaseIndexScale,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     movq     Var0x24208(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24208
     leaq     -0x18(%rax,%rdx,8),%r15 # memOffsetBaseIndexScale,reg :: 
     movq     Var0x243b0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243b0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     setne    %r14b                   # reg :: 
     addq     %rax,%r14               # reg,reg ::  modifies flags!!
     movq     %r14,0x18(%rsp)         # reg,memOffsetBase :: 
     je       Addr0xa487              # value ::  target: 0xa487 CodeAddr: 0xa487
Addr0xa3f0:
     movq     0x10(%rsp),%r13         # memOffsetBase,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     jmp      Addr0xa412              # value ::  target: 0xa412 CodeAddr: 0xa412
Addr0xa400:
     addq     %r14,%rbp               # reg,reg ::  modifies flags!!
     leaq     (%rbx,%r14,1),%rdi      # memBaseIndexScale,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rbp,%r14               # reg,reg :: 
     callq    Addr0x7520              # value ::  target: 0x7520 CodeAddr: 0x7520 CALLS 0x7520
Addr0xa412:
     movq     Var0x243a0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243a0
     movq     (%rax,%r13,8),%rdi      # memBaseIndexScale,reg :: 
     movq     %rdi,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x9b50              # value ::  target: 0x9b50 CodeAddr: 0x9b50 CALLS 0x9b50
     movq     0x8(%rsp),%rdi          # memOffsetBase,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     movq     0x10(%r15),%rax         # memOffsetBase,reg :: 
     movq     (%rax,%r12,1),%rbp      # memBaseIndexScale,reg :: 
     addq     $0x8,%r12               # imm,reg ::  modifies flags!!
     callq    Addr0x8eb0              # value ::  target: 0x8eb0 CodeAddr: 0x8eb0 CALLS 0x8eb0
     addq     0x18(%rsp),%r13         # memOffsetBase,reg ::  modifies flags!!
     cmpq     Var0x243b0(%rip),%r13   # memOffsetBase,reg ::  DataAddr: 0x243b0 modifies flags!!
     jb       Addr0xa400              # value ::  target: 0xa400 CodeAddr: 0xa400
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa4f0              # value ::  target: 0xa4f0 CodeAddr: 0xa4f0
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0xa471:
     addq     $0x1,0x10(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x18(%rsp)         # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0xa3f0              # value ::  target: 0xa3f0 CodeAddr: 0xa3f0
Addr0xa487:
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xa4a0:
     movl     $0x20,%edi              # imm,reg :: 
     jmp      Addr0xa2cd              # value ::  target: 0xa2cd CodeAddr: 0xa2cd
Addr0xa4b0:
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xa382              # value ::  target: 0xa382 CodeAddr: 0xa382
Addr0xa4c0:
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xa325              # value ::  target: 0xa325 CodeAddr: 0xa325
Addr0xa4d0:
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xa512              # value ::  target: 0xa512 CodeAddr: 0xa512
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
     jmp      Addr0xa487              # value ::  target: 0xa487 CodeAddr: 0xa487
Addr0xa4f0:
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xa471              # value ::  target: 0xa471 CodeAddr: 0xa471
Addr0xa500:
     movl     $0xa,%esi               # imm,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xa263              # value ::  target: 0xa263 CodeAddr: 0xa263
Addr0xa512:
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movl     $0xa,%esi               # imm,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950
Addr0xa52a:
     retq    

# ----------- Function 178 ------------ 
#
# startAddr  = 0xa530
# startindex = 5920
# endAddr    = 0xa5af
# endindex   = 5959
# len        = 128 (0x80)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa530:
     endbr64 
     movl     0xa8(%rdi),%edx         # memOffsetBase,reg :: 
     movq     %rsi,%rax               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%edx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%edx               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     orl      %edx,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%dl                # reg,reg ::  modifies flags!!
     jne      Addr0xa578              # value ::  target: 0xa578 CodeAddr: 0xa578
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xa5a8              # value ::  target: 0xa5a8 CodeAddr: 0xa5a8
Addr0xa567:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xa57c              # value ::  target: 0xa57c CodeAddr: 0xa57c
Addr0xa571:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa578:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xa567              # value ::  target: 0xa567 CodeAddr: 0xa567
Addr0xa57c:
     movq     0x48(%rdi),%rcx         # memOffsetBase,reg :: 
     cmpq     %rcx,0x48(%rax)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa5a8              # value ::  target: 0xa5a8 CodeAddr: 0xa5a8
     jne      Addr0xa598              # value ::  target: 0xa598 CodeAddr: 0xa598
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rax),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xa598:
     setl     %r8b                    # reg :: 
     movzbl   %r8b,%r8d               # reg,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa5a8:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xa571              # value ::  target: 0xa571 CodeAddr: 0xa571

# ----------- Function 179 ------------ 
#
# startAddr  = 0xa5b0
# startindex = 5960
# endAddr    = 0xa5e5
# endindex   = 5974
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xa5e6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa5b0:
     endbr64 
     movq     0x48(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x48(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa5e0              # value ::  target: 0xa5e0 CodeAddr: 0xa5e0
     jne      Addr0xa5d0              # value ::  target: 0xa5d0 CodeAddr: 0xa5d0
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xa5d0:
     setl     %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     retq    
Addr0xa5e0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 180 ------------ 
#
# startAddr  = 0xa5f0
# startindex = 5976
# endAddr    = 0xa667
# endindex   = 6013
# len        = 120 (0x78)
# len1       = 128 (0x80) to (0xa668)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa5f0:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xa630              # value ::  target: 0xa630 CodeAddr: 0xa630
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xa660              # value ::  target: 0xa660 CodeAddr: 0xa660
Addr0xa622:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xa634              # value ::  target: 0xa634 CodeAddr: 0xa634
Addr0xa62c:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa630:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xa622              # value ::  target: 0xa622 CodeAddr: 0xa622
Addr0xa634:
     movq     0x48(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x48(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa660              # value ::  target: 0xa660 CodeAddr: 0xa660
     jne      Addr0xa650              # value ::  target: 0xa650 CodeAddr: 0xa650
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xa650:
     setl     %r8b                    # reg :: 
     movzbl   %r8b,%r8d               # reg,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa660:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xa62c              # value ::  target: 0xa62c CodeAddr: 0xa62c

# ----------- Function 181 ------------ 
#
# startAddr  = 0xa670
# startindex = 6015
# endAddr    = 0xa6e7
# endindex   = 6052
# len        = 120 (0x78)
# len1       = 128 (0x80) to (0xa6e8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa670:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xa6b0              # value ::  target: 0xa6b0 CodeAddr: 0xa6b0
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xa6e0              # value ::  target: 0xa6e0 CodeAddr: 0xa6e0
Addr0xa6a2:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xa6b4              # value ::  target: 0xa6b4 CodeAddr: 0xa6b4
Addr0xa6ac:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa6b0:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xa6a2              # value ::  target: 0xa6a2 CodeAddr: 0xa6a2
Addr0xa6b4:
     movq     0x48(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x48(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa6e0              # value ::  target: 0xa6e0 CodeAddr: 0xa6e0
     jne      Addr0xa6d0              # value ::  target: 0xa6d0 CodeAddr: 0xa6d0
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xa6d0:
     setl     %r8b                    # reg :: 
     movzbl   %r8b,%r8d               # reg,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa6e0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xa6ac              # value ::  target: 0xa6ac CodeAddr: 0xa6ac

# ----------- Function 182 ------------ 
#
# startAddr  = 0xa6f0
# startindex = 6054
# endAddr    = 0xa76f
# endindex   = 6093
# len        = 128 (0x80)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa6f0:
     endbr64 
     movl     0xa8(%rdi),%edx         # memOffsetBase,reg :: 
     movq     %rsi,%rax               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%edx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%edx               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     orl      %edx,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%dl                # reg,reg ::  modifies flags!!
     jne      Addr0xa738              # value ::  target: 0xa738 CodeAddr: 0xa738
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xa768              # value ::  target: 0xa768 CodeAddr: 0xa768
Addr0xa727:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xa73c              # value ::  target: 0xa73c CodeAddr: 0xa73c
Addr0xa731:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa738:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xa727              # value ::  target: 0xa727 CodeAddr: 0xa727
Addr0xa73c:
     movq     0x48(%rdi),%rcx         # memOffsetBase,reg :: 
     cmpq     %rcx,0x48(%rax)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa768              # value ::  target: 0xa768 CodeAddr: 0xa768
     jne      Addr0xa758              # value ::  target: 0xa758 CodeAddr: 0xa758
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rax),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xa758:
     setl     %r8b                    # reg :: 
     movzbl   %r8b,%r8d               # reg,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa768:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xa731              # value ::  target: 0xa731 CodeAddr: 0xa731

# ----------- Function 183 ------------ 
#
# startAddr  = 0xa770
# startindex = 6094
# endAddr    = 0xa7a5
# endindex   = 6109
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xa7a6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa770:
     endbr64 
     movq     0x48(%rdi),%rdx         # memOffsetBase,reg :: 
     movq     %rsi,%rax               # reg,reg :: 
     cmpq     %rdx,0x48(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa7a0              # value ::  target: 0xa7a0 CodeAddr: 0xa7a0
     jne      Addr0xa790              # value ::  target: 0xa790 CodeAddr: 0xa790
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rax),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xa790:
     setl     %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     retq    
Addr0xa7a0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 184 ------------ 
#
# startAddr  = 0xa7b0
# startindex = 6111
# endAddr    = 0xa7e5
# endindex   = 6126
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xa7e6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa7b0:
     endbr64 
     movq     0x48(%rdi),%rdx         # memOffsetBase,reg :: 
     movq     %rsi,%rax               # reg,reg :: 
     cmpq     %rdx,0x48(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa7e0              # value ::  target: 0xa7e0 CodeAddr: 0xa7e0
     jne      Addr0xa7d0              # value ::  target: 0xa7d0 CodeAddr: 0xa7d0
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rax),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xa7d0:
     setl     %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     retq    
Addr0xa7e0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 185 ------------ 
#
# startAddr  = 0xa7f0
# startindex = 6128
# endAddr    = 0xa87f
# endindex   = 6167
# len        = 144 (0x90)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa7f0:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xa830              # value ::  target: 0xa830 CodeAddr: 0xa830
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xa878              # value ::  target: 0xa878 CodeAddr: 0xa878
Addr0xa822:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xa834              # value ::  target: 0xa834 CodeAddr: 0xa834
Addr0xa82c:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa830:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xa822              # value ::  target: 0xa822 CodeAddr: 0xa822
Addr0xa834:
     movq     0x80(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x80(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa878              # value ::  target: 0xa878 CodeAddr: 0xa878
     jl       Addr0xa868              # value ::  target: 0xa868 CodeAddr: 0xa868
     movq     0x88(%rsi),%r8          # memOffsetBase,reg :: 
     subl     0x88(%rdi),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xa82c              # value ::  target: 0xa82c CodeAddr: 0xa82c
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xa868:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa878:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xa82c              # value ::  target: 0xa82c CodeAddr: 0xa82c

# ----------- Function 186 ------------ 
#
# startAddr  = 0xa880
# startindex = 6168
# endAddr    = 0xa8ff
# endindex   = 6207
# len        = 128 (0x80)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xa880:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xa8c0              # value ::  target: 0xa8c0 CodeAddr: 0xa8c0
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xa8f8              # value ::  target: 0xa8f8 CodeAddr: 0xa8f8
Addr0xa8b2:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xa8c4              # value ::  target: 0xa8c4 CodeAddr: 0xa8c4
Addr0xa8bc:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa8c0:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xa8b2              # value ::  target: 0xa8b2 CodeAddr: 0xa8b2
Addr0xa8c4:
     movq     0x70(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x70(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xa8f8              # value ::  target: 0xa8f8 CodeAddr: 0xa8f8
     jl       Addr0xa8e8              # value ::  target: 0xa8e8 CodeAddr: 0xa8e8
     movq     0x78(%rsi),%r8          # memOffsetBase,reg :: 
     subl     0x78(%rdi),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xa8bc              # value ::  target: 0xa8bc CodeAddr: 0xa8bc
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xa8e8:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xa8f8:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xa8bc              # value ::  target: 0xa8bc CodeAddr: 0xa8bc

# ----------- Function 187 ------------ 
#
# startAddr  = 0xa900
# startindex = 6208
# endAddr    = 0xa9c0
# endindex   = 6261
# len        = 193 (0xc1)
# len1       = 204 (0xcc) to (0xa9c1)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xa900:
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movl     %edi,%ebx               # reg,reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x2432d(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432d modifies flags!!
     je       Addr0xa998              # value ::  target: 0xa998 CodeAddr: 0xa998
Addr0xa921:
     movq     %rsp,%rbp               # reg,reg :: 
     movl     %ebx,%r8d               # reg,reg :: 
     leaq     Var0x197d8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197d8
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x15,%edx              # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbp,%rax               # reg,reg :: 
Addr0xa945:
     movl     (%rax),%ecx             # memBase,reg :: 
     addq     $0x4,%rax               # imm,reg ::  modifies flags!!
     leal     -0x1010101(%rcx),%edx   # memOffsetBase,reg :: 
     notl     %ecx                    # reg :: 
     andl     %ecx,%edx               # reg,reg ::  modifies flags!!
     andl     $0x80808080,%edx        # imm,reg ::  modifies flags!!
     je       Addr0xa945              # value ::  target: 0xa945 CodeAddr: 0xa945
     movl     %edx,%ecx               # reg,reg :: 
     shrl     $0x10,%ecx              # imm,reg ::  modifies flags!!
     testl    $0x8080,%edx            # imm,reg ::  CodeAddr: 0x8080 modifies flags!!
     cmovel   %ecx,%edx               # reg,reg :: 
     leaq     0x2(%rax),%rcx          # memOffsetBase,reg :: 
     cmoveq   %rcx,%rax               # reg,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     addb     %dl,%sil                # reg,reg ::  modifies flags!!
     sbbq     $0x3,%rax               # imm,reg ::  modifies flags!!
     subl     %ebp,%eax               # reg,reg ::  modifies flags!!
Addr0xa97e:
     movq     0x18(%rsp),%rbx         # memOffsetBase,reg :: 
     xorq     0x28,%rbx               # value,reg ::  modifies flags!!
     jne      Addr0xa9bc              # value ::  target: 0xa9bc CodeAddr: 0xa9bc
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0xa998:
     callq    Addr0x10bc0             # value ::  target: 0x10bc0 CodeAddr: 0x10bc0 CALLS 0x10bc0
     movq     %rax,%rdi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xa921              # value ::  target: 0xa921 CodeAddr: 0xa921
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     movl     $0x0,%edx               # imm,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     cmovsl   %edx,%eax               # reg,reg :: 
     jmp      Addr0xa97e              # value ::  target: 0xa97e CodeAddr: 0xa97e
Addr0xa9bc:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 188 ------------ 
#
# startAddr  = 0xa9d0
# startindex = 6264
# endAddr    = 0xb8b3
# endindex   = 7082
# len        = 3812 (0xee4)
# len1       = 3823 (0xeef) to (0xb8b4)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xa9d0:
     pushq    %rbp                    # reg :: 
     movq     %rsp,%rbp               # reg,reg :: 
     pushq    %r15                    # reg :: 
     movq     %rcx,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movl     %esi,%r13d              # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x368,%rsp             # imm,reg ::  modifies flags!!
     movl     %edx,-0x384(%rbp)       # reg,memOffsetBase :: 
     movq     Var0x243b0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x243b0
     movq     Var0x243c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x243c0
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,-0x38(%rbp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     Var0x243b8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x243b8 modifies flags!!
     jne      Addr0xaa65              # value ::  target: 0xaa65 CodeAddr: 0xaa65
     movl     $0x190,%edx             # imm,reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rcx                    # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     movzbl   %dl,%edx                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xb8af              # value ::  target: 0xb8af CodeAddr: 0xb8af
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0xb8af              # value ::  target: 0xb8af CodeAddr: 0xb8af
     leaq     (%rcx,%rcx,4),%rax      # memBaseIndexScale,reg :: 
     leaq     (%rax,%rax,4),%rsi      # memBaseIndexScale,reg :: 
     shlq     $0x4,%rsi               # imm,reg ::  modifies flags!!
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     Var0x243b0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x243b0
     shlq     Var0x243b8(%rip)        # memOffsetBase ::  DataAddr: 0x243b8 modifies flags!!
     movq     %rax,Var0x243c0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243c0
     movq     %rax,%rdi               # reg,reg :: 
Addr0xaa65:
     leaq     (%rcx,%rcx,4),%rax      # memBaseIndexScale,reg :: 
     leaq     (%rax,%rax,4),%rax      # memBaseIndexScale,reg :: 
     leaq     (%rdi,%rax,8),%rbx      # memBaseIndexScale,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     0x8(%rbx),%rdi          # memOffsetBase,reg :: 
     movq     %rbx,%rcx               # reg,reg :: 
     movq     $0x0,0xc0(%rbx)         # imm,memOffsetBase :: 
     andq     $0xfffffffffffffff8,%rdi# imm,reg ::  modifies flags!!
     movq     $0x0,(%rbx)             # imm,memBase :: 
     subq     %rdi,%rcx               # reg,reg ::  modifies flags!!
     addl     $0xc8,%ecx              # imm,reg ::  modifies flags!!
     shrl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     rep stosq %rax,%es:(%rdi)         # reg,memBase :: "%rax,%es:(%rdi)" != "%rax,(%rdi)"
#{'addr': 43676, 'op': 'stosq', 'prefix': 'rep', 'args': [Arg(argText='%rax', star=None, offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None), Arg(argText='(%rdi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rdi', calcAddr=None, segReg='%es:', round=None)], 'idx': 6312, 'size': 3}
     movq     $0x0,0x20(%rbx)         # imm,memOffsetBase :: 
     movl     %r13d,0xa8(%rbx)        # reg,memOffsetBase :: 
     cmpb     $0x0,Var0x243a9(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a9 modifies flags!!
     movl     $0xffffffff,0xc4(%rbx)  # imm,memOffsetBase :: 
     jne      Addr0xaace              # value ::  target: 0xaace CodeAddr: 0xaace
     cmpb     $0x0,Var0x243a8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a8 modifies flags!!
     jne      Addr0xb2e0              # value ::  target: 0xb2e0 CodeAddr: 0xb2e0
Addr0xaace:
     cmpb     $0x0,-0x384(%rbp)       # imm,memOffsetBase ::  modifies flags!!
     movzbl   Var0x24311(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x24311
     je       Addr0xac20              # value ::  target: 0xac20 CodeAddr: 0xac20
     movzbl   (%r12),%edx             # memBase,reg :: 
     movq     %r12,%r14               # reg,reg :: 
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     je       Addr0xaafd              # value ::  target: 0xaafd CodeAddr: 0xaafd
     movzbl   (%r15),%esi             # memBase,reg :: 
     testb    %sil,%sil               # reg,reg ::  modifies flags!!
     jne      Addr0xad31              # value ::  target: 0xad31 CodeAddr: 0xad31
Addr0xaafd:
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     jne      Addr0xb1d1              # value ::  target: 0xb1d1 CodeAddr: 0xb1d1
Addr0xab06:
     movl     Var0x242f8(%rip),%ecx   # memOffsetBase,reg ::  DataAddr: 0x242f8
     leaq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     cmpl     $0x4,%ecx               # imm,reg ::  modifies flags!!
     ja       Addr0xaf20              # value ::  target: 0xaf20 CodeAddr: 0xaf20
     cmpl     $0x2,%ecx               # imm,reg ::  modifies flags!!
     ja       Addr0xb160              # value ::  target: 0xb160 CodeAddr: 0xb160
Addr0xab22:
     movq     %r15,%rdx               # reg,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x48d0              # value ::  target: 0x48d0 CodeAddr: 0x48d0 CALLS 0x48d0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xaf46              # value ::  target: 0xaf46 CodeAddr: 0xaf46
Addr0xab3c:
     movb     $0x1,0xb8(%rbx)         # imm,memOffsetBase :: 
     cmpl     $0x5,%r13d              # imm,reg ::  modifies flags!!
     je       Addr0xb100              # value ::  target: 0xb100 CodeAddr: 0xb100
     movl     0x30(%rbx),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x8000,%eax            # imm,reg ::  CodeAddr: 0x8000 modifies flags!!
     je       Addr0xb100              # value ::  target: 0xb100 CodeAddr: 0xb100
Addr0xab60:
     movl     Var0x24338(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xaf80              # value ::  target: 0xaf80 CodeAddr: 0xaf80
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     jne      Addr0xaf80              # value ::  target: 0xaf80 CodeAddr: 0xaf80
Addr0xab7b:
     movl     0x30(%rbx),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0xa000,%eax            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     je       Addr0xb4f8              # value ::  target: 0xb4f8 CodeAddr: 0xb4f8
Addr0xab8e:
     cmpl     $0x4000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0xb510              # value ::  target: 0xb510 CodeAddr: 0xb510
     movl     $0x5,0xa8(%rbx)         # imm,memOffsetBase :: 
Addr0xaba3:
     movl     Var0x24338(%rip),%r9d   # memOffsetBase,reg ::  DataAddr: 0x24338
     movq     0x58(%rbx),%r14         # memOffsetBase,reg :: 
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     je       Addr0xada8              # value ::  target: 0xada8 CodeAddr: 0xada8
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     jne      Addr0xada8              # value ::  target: 0xada8 CodeAddr: 0xada8
Addr0xabc4:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     jne      Addr0xae24              # value ::  target: 0xae24 CodeAddr: 0xae24
Addr0xabd1:
     movzbl   Var0x242fc(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x242fc
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xb218              # value ::  target: 0xb218 CodeAddr: 0xb218
Addr0xabe0:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x15b10             # value ::  target: 0x15b10 CodeAddr: 0x15b10 CALLS 0x15b10
     addq     $0x1,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     movq     %rax,(%rbx)             # reg,memBase :: 
Addr0xabf3:
     movq     -0x38(%rbp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xb8aa              # value ::  target: 0xb8aa CodeAddr: 0xb8aa
     leaq     -0x28(%rbp),%rsp        # memOffsetBase,reg :: 
     movq     %r14,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0xac20:
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     jne      Addr0xb1c0              # value ::  target: 0xb1c0 CodeAddr: 0xb1c0
     cmpb     $0x0,Var0x242a1(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a1 modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     cmpl     $0x3,%r13d              # imm,reg ::  modifies flags!!
     je       Addr0xb7c8              # value ::  target: 0xb7c8 CodeAddr: 0xb7c8
Addr0xac40:
     movzbl   Var0x242fc(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x242fc
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xb670              # value ::  target: 0xb670 CodeAddr: 0xb670
     cmpb     $0x0,Var0x242a0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a0 modifies flags!!
     je       Addr0xb730              # value ::  target: 0xb730 CodeAddr: 0xb730
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     movl     %ecx,%edx               # reg,reg :: 
     cmpl     $0x6,%r13d              # imm,reg ::  modifies flags!!
     je       Addr0xb684              # value ::  target: 0xb684 CodeAddr: 0xb684
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xb684              # value ::  target: 0xb684 CodeAddr: 0xb684
     cmpb     $0x0,Var0x242a0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a0 modifies flags!!
     je       Addr0xb730              # value ::  target: 0xb730 CodeAddr: 0xb730
Addr0xac83:
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     cmpl     $0x5,%r13d              # imm,reg ::  modifies flags!!
     jne      Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
     cmpl     $0x3,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314 modifies flags!!
     je       Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     movb     %r8b,-0x390(%rbp)       # reg,memOffsetBase :: 
     je       Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
     movl     $0xe,%edi               # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     movl     $0x10,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     movl     $0x11,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     movl     $0x15,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
Addr0xad10:
     movzbl   (%r12),%edx             # memBase,reg :: 
     movq     %r12,%r14               # reg,reg :: 
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     je       Addr0xab06              # value ::  target: 0xab06 CodeAddr: 0xab06
Addr0xad21:
     movzbl   (%r15),%esi             # memBase,reg :: 
     movq     %r12,%r14               # reg,reg :: 
     testb    %sil,%sil               # reg,reg ::  modifies flags!!
     je       Addr0xab06              # value ::  target: 0xab06 CodeAddr: 0xab06
Addr0xad31:
     movq     %r12,%rdi               # reg,reg :: 
     movb     %dl,-0x386(%rbp)        # reg,memOffsetBase :: 
     movb     %r8b,-0x385(%rbp)       # reg,memOffsetBase :: 
     movb     %sil,-0x390(%rbp)       # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rsp,%rsi               # reg,reg :: 
     movzbl   -0x386(%rbp),%edx       # memOffsetBase,reg :: 
     movzbl   -0x385(%rbp),%r8d       # memOffsetBase,reg :: 
     leaq     0x19(%r14,%rax,1),%rax  # memOffsetBaseIndexScale,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     andq     $0xfffffffffffff000,%rax# imm,reg ::  modifies flags!!
     subq     %rax,%rsi               # reg,reg ::  modifies flags!!
     andq     $0xfffffffffffffff0,%rcx# imm,reg ::  modifies flags!!
     movq     %rsi,%rax               # reg,reg :: 
     movzbl   -0x390(%rbp),%esi       # memOffsetBase,reg :: 
Addr0xad89:
     cmpq     %rax,%rsp               # reg,reg ::  modifies flags!!
     je       Addr0xb3e8              # value ::  target: 0xb3e8 CodeAddr: 0xb3e8
     subq     $0x1000,%rsp            # imm,reg ::  modifies flags!!
     orq      $0x0,0xff8(%rsp)        # imm,memOffsetBase ::  modifies flags!!
     jmp      Addr0xad89              # value ::  target: 0xad89 CodeAddr: 0xad89
Addr0xada8:
     movq     Var0x24320(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x24320
     movl     Var0x24328(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24328
     movl     $0x200,%ecx             # imm,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     leaq     -0x2d0(%rbp),%r13       # memOffsetBase,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     cmpl     Var0x2435c(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x2435c modifies flags!!
     jle      Addr0xade4              # value ::  target: 0xade4 CodeAddr: 0xade4
     movl     %eax,Var0x2435c(%rip)   # reg,memOffsetBase ::  DataAddr: 0x2435c
Addr0xade4:
     movl     Var0x24338(%rip),%r8d   # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     jne      Addr0xabc4              # value ::  target: 0xabc4 CodeAddr: 0xabc4
     cmpb     $0x0,Var0x23021(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23021 modifies flags!!
     jne      Addr0xb638              # value ::  target: 0xb638 CodeAddr: 0xb638
Addr0xae01:
     cmpb     $0x0,Var0x23020(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23020 modifies flags!!
     jne      Addr0xb5b0              # value ::  target: 0xb5b0 CodeAddr: 0xb5b0
Addr0xae0e:
     cmpb     $0x0,Var0x2432e(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432e modifies flags!!
     jne      Addr0xb588              # value ::  target: 0xb588 CodeAddr: 0xb588
Addr0xae1b:
     cmpb     $0x0,Var0x24365(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24365 modifies flags!!
     je       Addr0xae3c              # value ::  target: 0xae3c CodeAddr: 0xae3c
Addr0xae24:
     movq     0xb0(%rbx),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpl     Var0x24354(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24354 modifies flags!!
     jg       Addr0xb320              # value ::  target: 0xb320 CodeAddr: 0xb320
Addr0xae3c:
     movl     Var0x24338(%rip),%edi   # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     jne      Addr0xabd1              # value ::  target: 0xabd1 CodeAddr: 0xabd1
     movq     0x28(%rbx),%rdi         # memOffsetBase,reg :: 
     leaq     -0x2f0(%rbp),%rsi       # memOffsetBase,reg :: 
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpl     Var0x24358(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24358 modifies flags!!
     jle      Addr0xae70              # value ::  target: 0xae70 CodeAddr: 0xae70
     movl     %eax,Var0x24358(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24358
Addr0xae70:
     movl     0x30(%rbx),%eax         # memOffsetBase,reg :: 
     andl     $0xb000,%eax            # imm,reg ::  CodeAddr: 0xb000 modifies flags!!
     cmpl     $0x2000,%eax            # imm,reg ::  modifies flags!!
     jne      Addr0xb330              # value ::  target: 0xb330 CodeAddr: 0xb330
     movq     0x40(%rbx),%rax         # memOffsetBase,reg :: 
     leaq     -0x2d0(%rbp),%r13       # memOffsetBase,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     shrq     $0x8,%rdi               # imm,reg ::  modifies flags!!
     movl     %edi,%edx               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     andl     $0xfff,%edx             # imm,reg ::  modifies flags!!
     andl     $0xfffff000,%edi        # imm,reg ::  modifies flags!!
     orl      %edx,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpl     Var0x24344(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24344 modifies flags!!
     jle      Addr0xaeca              # value ::  target: 0xaeca CodeAddr: 0xaeca
     movl     %eax,Var0x24344(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24344
Addr0xaeca:
     movq     0x40(%rbx),%rax         # memOffsetBase,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movzbl   %al,%edx                # reg,reg :: 
     shrq     $0xc,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,%rdi               # reg,reg :: 
     xorb     %dil,%dil               # reg,reg ::  modifies flags!!
     orl      %edx,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movl     Var0x24340(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24340
     cmpl     %edx,%eax               # reg,reg ::  modifies flags!!
     jle      Addr0xaeff              # value ::  target: 0xaeff CodeAddr: 0xaeff
     movl     %eax,Var0x24340(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24340
     movl     %eax,%edx               # reg,reg :: 
Addr0xaeff:
     movl     Var0x24344(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24344
     leal     0x2(%rdx,%rax,1),%eax   # memOffsetBaseIndexScale,reg :: 
     cmpl     Var0x2433c(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x2433c modifies flags!!
     jle      Addr0xabd1              # value ::  target: 0xabd1 CodeAddr: 0xabd1
     jmp      Addr0xb368              # value ::  target: 0xb368 CodeAddr: 0xb368
Addr0xaf20:
     cmpl     $0x5,%ecx               # imm,reg ::  modifies flags!!
     jne      Addr0xab22              # value ::  target: 0xab22 CodeAddr: 0xab22
Addr0xaf29:
     movq     %r15,%rdx               # reg,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x4b40              # value ::  target: 0x4b40 CodeAddr: 0x4b40 CALLS 0x4b40
     movl     $0x1,%edx               # imm,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xab3c              # value ::  target: 0xab3c CodeAddr: 0xab3c
Addr0xaf46:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19831(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19831
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movl     -0x384(%rbp),%r15d      # memOffsetBase,reg :: 
     movq     %r14,%rdx               # reg,reg :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     movq     %rax,%rsi               # reg,reg :: 
     movzbl   %r15b,%edi              # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     testb    %r15b,%r15b             # reg,reg ::  modifies flags!!
     jne      Addr0xabf3              # value ::  target: 0xabf3 CodeAddr: 0xabf3
     jmp      Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
Addr0xaf80:
     movq     Var0x232f0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x232f0
     cmpq     %rax,0x18(%rbx)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0xb547              # value ::  target: 0xb547 CodeAddr: 0xb547
     leaq     0xb0(%rbx),%rsi         # memOffsetBase,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xb250              # value ::  target: 0xb250 CodeAddr: 0xb250
     callq    Addr0x16870             # value ::  target: 0x16870 CodeAddr: 0x16870 CALLS 0x16870
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0xb25d              # value ::  target: 0xb25d CodeAddr: 0xb25d
Addr0xafb0:
     movq     0xb0(%rbx),%rdi         # memOffsetBase,reg :: 
     movl     $0xa,%ecx               # imm,reg :: 
     leaq     Var0x1985f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1985f
     repz cmpsb %es:(%rdi),%ds:(%rsi)   # memBase,memBase :: "%es:(%rdi),%ds:(%rsi)" != "(%rdi),(%rsi)" modifies flags!!
#{'addr': 44995, 'op': 'cmpsb', 'prefix': 'repz', 'args': [Arg(argText='(%rdi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rdi', calcAddr=None, segReg='%es:', round=None), Arg(argText='(%rsi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rsi', calcAddr=None, segReg='%ds:', round=None)], 'idx': 6589, 'size': 2}
     movl     Var0x24338(%rip),%ecx   # memOffsetBase,reg ::  DataAddr: 0x24338
     seta     %al                     # reg :: 
     sbbb     $0x0,%al                # imm,reg ::  modifies flags!!
     movsbl   %al,%eax                # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     setne    %dl                     # reg :: 
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     je       Addr0xb378              # value ::  target: 0xb378 CodeAddr: 0xb378
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xb576              # value ::  target: 0xb576 CodeAddr: 0xb576
     movl     $0x1,0xbc(%rbx)         # imm,memOffsetBase :: 
     movb     $0x1,Var0x24364(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24364
Addr0xaff9:
     movl     0x30(%rbx),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0xa000,%eax            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     jne      Addr0xab8e              # value ::  target: 0xab8e CodeAddr: 0xab8e
     movl     Var0x24338(%rip),%r13d  # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     jne      Addr0xb4f8              # value ::  target: 0xb4f8 CodeAddr: 0xb4f8
Addr0xb01c:
     movq     0x48(%rbx),%rsi         # memOffsetBase,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0xd3e0              # value ::  target: 0xd3e0 CodeAddr: 0xd3e0 CALLS 0xd3e0
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xb788              # value ::  target: 0xb788 CodeAddr: 0xb788
Addr0xb038:
     cmpb     $0x2f,0x0(%r13)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xb660              # value ::  target: 0xb660 CodeAddr: 0xb660
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0xe090              # value ::  target: 0xe090 CodeAddr: 0xe090 CALLS 0xe090
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xb660              # value ::  target: 0xb660 CodeAddr: 0xb660
     movq     %r13,%rdi               # reg,reg :: 
     movq     %rax,-0x390(%rbp)       # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     -0x390(%rbp),%rdx       # memOffsetBase,reg :: 
     leaq     0x2(%rdx,%rax,1),%rdi   # memOffsetBaseIndexScale,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     -0x390(%rbp),%rdx       # memOffsetBase,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     cmpb     $0x2f,-0x1(%r14,%rdx,1) # imm,memOffsetBaseIndexScale ::  modifies flags!!
     je       Addr0xb08a              # value ::  target: 0xb08a CodeAddr: 0xb08a
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
Addr0xb08a:
     movq     %r14,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4bf0              # value ::  target: 0x4bf0 CodeAddr: 0x4bf0 CALLS 0x4bf0
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x47a0              # value ::  target: 0x47a0 CodeAddr: 0x47a0 CALLS 0x47a0
Addr0xb0a0:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0xb7ba              # value ::  target: 0xb7ba CodeAddr: 0xb7ba
     movl     0xc4(%rbx),%r11d        # memOffsetBase,reg :: 
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     je       Addr0xb860              # value ::  target: 0xb860 CodeAddr: 0xb860
Addr0xb0b9:
     cmpl     $0x1,Var0x24314(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24314 modifies flags!!
     ja       Addr0xb478              # value ::  target: 0xb478 CodeAddr: 0xb478
     cmpb     $0x0,Var0x242fd(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fd modifies flags!!
     jne      Addr0xb478              # value ::  target: 0xb478 CodeAddr: 0xb478
Addr0xb0d3:
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movl     0x30(%rbx),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0xa000,%eax            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     jne      Addr0xab8e              # value ::  target: 0xab8e CodeAddr: 0xab8e
Addr0xb0ee:
     movl     $0x6,0xa8(%rbx)         # imm,memOffsetBase :: 
     jmp      Addr0xaba3              # value ::  target: 0xaba3 CodeAddr: 0xaba3
Addr0xb100:
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     je       Addr0xab60              # value ::  target: 0xab60 CodeAddr: 0xab60
     movl     $0x15,%edi              # imm,reg :: 
     movb     %dl,-0x390(%rbp)        # reg,memOffsetBase :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%edx       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xab60              # value ::  target: 0xab60 CodeAddr: 0xab60
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     0x18(%rbx),%r13         # memOffsetBase,reg :: 
     cmpq     Var0x232f8(%rip),%r13   # memOffsetBase,reg ::  DataAddr: 0x232f8 modifies flags!!
     movl     $0x5f,(%rax)            # imm,memBase :: 
     movzbl   -0x390(%rbp),%edx       # memOffsetBase,reg :: 
     je       Addr0xb152              # value ::  target: 0xb152 CodeAddr: 0xb152
     movq     %r13,Var0x232f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x232f8
Addr0xb152:
     movb     $0x0,0xc0(%rbx)         # imm,memOffsetBase :: 
     jmp      Addr0xab60              # value ::  target: 0xab60 CodeAddr: 0xab60
Addr0xb160:
     cmpb     $0x0,-0x384(%rbp)       # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xab22              # value ::  target: 0xab22 CodeAddr: 0xab22
     movq     %r15,%rdx               # reg,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movl     %ecx,-0x390(%rbp)       # reg,memOffsetBase :: 
     callq    Addr0x4b40              # value ::  target: 0x4b40 CodeAddr: 0x4b40 CALLS 0x4b40
     movl     -0x390(%rbp),%ecx       # memOffsetBase,reg :: 
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     je       Addr0xb1ab              # value ::  target: 0xb1ab CodeAddr: 0xb1ab
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0xb6f0              # value ::  target: 0xb6f0 CodeAddr: 0xb6f0
     movl     0x30(%rbx),%edx         # memOffsetBase,reg :: 
     andl     $0xf000,%edx            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x4000,%edx            # imm,reg ::  modifies flags!!
     jne      Addr0xab22              # value ::  target: 0xab22 CodeAddr: 0xab22
Addr0xb1ab:
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xb6fe              # value ::  target: 0xb6fe CodeAddr: 0xb6fe
     movzbl   -0x384(%rbp),%edx       # memOffsetBase,reg :: 
     jmp      Addr0xab3c              # value ::  target: 0xab3c CodeAddr: 0xab3c
Addr0xb1c0:
     movzbl   (%r12),%edx             # memBase,reg :: 
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0xb308              # value ::  target: 0xb308 CodeAddr: 0xb308
     movq     %r12,%r14               # reg,reg :: 
Addr0xb1d1:
     movl     $0x2,%esi               # imm,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0xd900              # value ::  target: 0xd900 CodeAddr: 0xd900 CALLS 0xd900
     movq     %rax,0x10(%rbx)         # reg,memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xab06              # value ::  target: 0xab06 CodeAddr: 0xab06
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19819(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19819
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   -0x384(%rbp),%edi       # memOffsetBase,reg :: 
     movq     %r14,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     jmp      Addr0xab06              # value ::  target: 0xab06 CodeAddr: 0xab06
Addr0xb218:
     movq     0x20(%rbx),%rdi         # memOffsetBase,reg :: 
     leaq     -0x2d0(%rbp),%rsi       # memOffsetBase,reg :: 
     callq    Addr0x10fc0             # value ::  target: 0x10fc0 CodeAddr: 0x10fc0 CALLS 0x10fc0
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpl     Var0x24360(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24360 modifies flags!!
     jle      Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
     movl     %eax,Var0x24360(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24360
     jmp      Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
Addr0xb250:
     callq    Addr0x16890             # value ::  target: 0x16890 CodeAddr: 0x16890 CALLS 0x16890
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jns      Addr0xafb0              # value ::  target: 0xafb0 CodeAddr: 0xafb0
Addr0xb25d:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     (%rax),%edx             # memBase,reg :: 
     movq     %rax,%r13               # reg,reg :: 
     cmpl     $0x5f,%edx              # imm,reg ::  modifies flags!!
     leal     -0x16(%rdx),%esi        # memOffsetBase,reg :: 
     sete     %cl                     # reg :: 
     andl     $0xffffffef,%esi        # imm,reg ::  modifies flags!!
     je       Addr0xb279              # value ::  target: 0xb279 CodeAddr: 0xb279
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xb284              # value ::  target: 0xb284 CodeAddr: 0xb284
Addr0xb279:
     movq     0x18(%rbx),%rax         # memOffsetBase,reg :: 
     movq     %rax,Var0x232f0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x232f0
Addr0xb284:
     leaq     Var0x23022(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23022
     movq     %rax,0xb0(%rbx)         # reg,memOffsetBase :: 
     cmpl     $0x3d,%edx              # imm,reg ::  modifies flags!!
     je       Addr0xb568              # value ::  target: 0xb568 CodeAddr: 0xb568
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xb568              # value ::  target: 0xb568 CodeAddr: 0xb568
     movl     $0x0,0xbc(%rbx)         # imm,memOffsetBase :: 
Addr0xb2ad:
     movq     %r14,%rdx               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x3,%esi               # imm,reg :: 
     callq    Addr0x14e60             # value ::  target: 0x14e60 CodeAddr: 0x14e60 CALLS 0x14e60
     movq     %rax,%r13               # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %r13,%rcx               # reg,reg :: 
     leaq     Var0x1be9c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9c
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     (%rax),%esi             # memBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0xaff9              # value ::  target: 0xaff9 CodeAddr: 0xaff9
Addr0xb2e0:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x7020              # value ::  target: 0x7020 CodeAddr: 0x7020 CALLS 0x7020
     movzbl   %al,%edx                # reg,reg :: 
     movl     %edx,0xc4(%rbx)         # reg,memOffsetBase :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xaace              # value ::  target: 0xaace CodeAddr: 0xaace
     movb     $0x1,Var0x243a9(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243a9
     jmp      Addr0xaace              # value ::  target: 0xaace CodeAddr: 0xaace
Addr0xb308:
     movzbl   (%r15),%esi             # memBase,reg :: 
     movq     %r12,%r14               # reg,reg :: 
     testb    %sil,%sil               # reg,reg ::  modifies flags!!
     je       Addr0xb1d1              # value ::  target: 0xb1d1 CodeAddr: 0xb1d1
     jmp      Addr0xad31              # value ::  target: 0xad31 CodeAddr: 0xad31
Addr0xb320:
     movl     %eax,Var0x24354(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24354
     jmp      Addr0xae3c              # value ::  target: 0xae3c CodeAddr: 0xae3c
Addr0xb330:
     movq     0x48(%rbx),%rdi         # memOffsetBase,reg :: 
     movq     Var0x23018(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x23018
     leaq     -0x2d0(%rbp),%rsi       # memOffsetBase,reg :: 
     movl     $0x1,%ecx               # imm,reg :: 
     movl     Var0x2431c(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x2431c
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     cmpl     Var0x2433c(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x2433c modifies flags!!
     jle      Addr0xabd1              # value ::  target: 0xabd1 CodeAddr: 0xabd1
Addr0xb368:
     movl     %eax,Var0x2433c(%rip)   # reg,memOffsetBase ::  DataAddr: 0x2433c
     jmp      Addr0xabd1              # value ::  target: 0xabd1 CodeAddr: 0xabd1
Addr0xb378:
     movb     %dl,-0x390(%rbp)        # reg,memOffsetBase :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movzbl   -0x390(%rbp),%edx       # memOffsetBase,reg :: 
     movq     %rax,%r13               # reg,reg :: 
Addr0xb38d:
     movq     Var0x232e8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x232e8
     cmpq     %rax,0x18(%rbx)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0xb880              # value ::  target: 0xb880 CodeAddr: 0xb880
     movl     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     movb     %dl,-0x390(%rbp)        # reg,memOffsetBase :: 
     callq    Addr0xe1d0              # value ::  target: 0xe1d0 CodeAddr: 0xe1d0 CALLS 0xe1d0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jle      Addr0xb740              # value ::  target: 0xb740 CodeAddr: 0xb740
     movl     $0x1,%edx               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x2,%ecx               # imm,reg :: 
Addr0xb3cb:
     movl     %ecx,0xbc(%rbx)         # reg,memOffsetBase :: 
     movb     %dl,Var0x24364(%rip)    # reg,memOffsetBase ::  DataAddr: 0x24364
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xb2ad              # value ::  target: 0xb2ad CodeAddr: 0xb2ad
     jmp      Addr0xaff9              # value ::  target: 0xaff9 CodeAddr: 0xaff9
Addr0xb3e8:
     andl     $0xfff,%ecx             # imm,reg ::  modifies flags!!
     subq     %rcx,%rsp               # reg,reg ::  modifies flags!!
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0xb6e0              # value ::  target: 0xb6e0 CodeAddr: 0xb6e0
Addr0xb3fa:
     leaq     0xf(%rsp),%r10          # memOffsetBase,reg :: 
     movzbl   0x1(%r15),%edi          # memOffsetBase,reg :: 
     andq     $0xfffffffffffffff0,%r10# imm,reg ::  modifies flags!!
     movq     %r10,%r14               # reg,reg :: 
     cmpb     $0x2e,%sil              # imm,reg ::  modifies flags!!
     je       Addr0xb4e0              # value ::  target: 0xb4e0 CodeAddr: 0xb4e0
Addr0xb415:
     movq     %r15,%rcx               # reg,reg :: 
     jmp      Addr0xb429              # value ::  target: 0xb429 CodeAddr: 0xb429
Addr0xb420:
     movl     %edi,%esi               # reg,reg :: 
     movzbl   0x1(%rcx),%edi          # memOffsetBase,reg :: 
     movq     %rax,%r10               # reg,reg :: 
Addr0xb429:
     leaq     0x1(%r10),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     movb     %sil,-0x1(%rax)         # reg,memOffsetBase :: 
     testb    %dil,%dil               # reg,reg ::  modifies flags!!
     jne      Addr0xb420              # value ::  target: 0xb420 CodeAddr: 0xb420
     cmpq     %rcx,%r15               # reg,reg ::  modifies flags!!
     jae      Addr0xb44c              # value ::  target: 0xb44c CodeAddr: 0xb44c
     cmpb     $0x2f,-0x1(%rcx)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xb44c              # value ::  target: 0xb44c CodeAddr: 0xb44c
     movb     $0x2f,(%rax)            # imm,memBase :: 
     leaq     0x2(%r10),%rax          # memOffsetBase,reg :: 
Addr0xb44c:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xb469              # value ::  target: 0xb469 CodeAddr: 0xb469
     movq     %r12,%rcx               # reg,reg :: 
Addr0xb458:
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     movb     %dl,(%rax)              # reg,memBase :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movzbl   (%rcx),%edx             # memBase,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xb458              # value ::  target: 0xb458 CodeAddr: 0xb458
Addr0xb469:
     movb     $0x0,(%rax)             # imm,memBase :: 
     jmp      Addr0xaafd              # value ::  target: 0xaafd CodeAddr: 0xaafd
Addr0xb478:
     leaq     -0x380(%rbp),%rdx       # memOffsetBase,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x4b40              # value ::  target: 0x4b40 CodeAddr: 0x4b40 CALLS 0x4b40
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xb0d3              # value ::  target: 0xb0d3 CodeAddr: 0xb0d3
     cmpb     $0x0,-0x384(%rbp)       # imm,memOffsetBase ::  modifies flags!!
     movb     $0x1,0xb9(%rbx)         # imm,memOffsetBase :: 
     movl     -0x368(%rbp),%eax       # memOffsetBase,reg :: 
     je       Addr0xb4d0              # value ::  target: 0xb4d0 CodeAddr: 0xb4d0
     movl     Var0x24338(%rip),%r10d  # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %r10d,%r10d             # reg,reg ::  modifies flags!!
     je       Addr0xb4d0              # value ::  target: 0xb4d0 CodeAddr: 0xb4d0
     movl     %eax,%edx               # reg,reg :: 
     andl     $0xf000,%edx            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x4000,%edx            # imm,reg ::  modifies flags!!
     je       Addr0xb0d3              # value ::  target: 0xb0d3 CodeAddr: 0xb0d3
Addr0xb4d0:
     movl     %eax,0xac(%rbx)         # reg,memOffsetBase :: 
     jmp      Addr0xb0d3              # value ::  target: 0xb0d3 CodeAddr: 0xb0d3
Addr0xb4e0:
     movq     %r10,%rax               # reg,reg :: 
     testb    %dil,%dil               # reg,reg ::  modifies flags!!
     je       Addr0xb44c              # value ::  target: 0xb44c CodeAddr: 0xb44c
     jmp      Addr0xb415              # value ::  target: 0xb415 CodeAddr: 0xb415
Addr0xb4f8:
     cmpb     $0x0,Var0x242fd(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fd modifies flags!!
     jne      Addr0xb01c              # value ::  target: 0xb01c CodeAddr: 0xb01c
     jmp      Addr0xb0ee              # value ::  target: 0xb0ee CodeAddr: 0xb0ee
Addr0xb510:
     cmpb     $0x0,-0x384(%rbp)       # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xb538              # value ::  target: 0xb538 CodeAddr: 0xb538
     cmpb     $0x0,Var0x242f5(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f5 modifies flags!!
     jne      Addr0xb538              # value ::  target: 0xb538 CodeAddr: 0xb538
     movl     $0x9,0xa8(%rbx)         # imm,memOffsetBase :: 
     jmp      Addr0xaba3              # value ::  target: 0xaba3 CodeAddr: 0xaba3
Addr0xb538:
     movl     $0x3,0xa8(%rbx)         # imm,memOffsetBase :: 
     jmp      Addr0xaba3              # value ::  target: 0xaba3 CodeAddr: 0xaba3
Addr0xb547:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x5f,(%rax)            # imm,memBase :: 
     movq     %rax,%r13               # reg,reg :: 
     leaq     Var0x23022(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23022
     movq     %rax,0xb0(%rbx)         # reg,memOffsetBase :: 
Addr0xb568:
     movl     Var0x24338(%rip),%esi   # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %esi,%esi               # reg,reg ::  modifies flags!!
     je       Addr0xb6d0              # value ::  target: 0xb6d0 CodeAddr: 0xb6d0
Addr0xb576:
     movl     $0x0,0xbc(%rbx)         # imm,memOffsetBase :: 
     jmp      Addr0xab7b              # value ::  target: 0xab7b CodeAddr: 0xab7b
Addr0xb588:
     movl     0x34(%rbx),%edi         # memOffsetBase,reg :: 
     callq    Addr0xa900              # value ::  target: 0xa900 CodeAddr: 0xa900 CALLS 0xa900
     cmpl     Var0x24348(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24348 modifies flags!!
     jle      Addr0xae1b              # value ::  target: 0xae1b CodeAddr: 0xae1b
     movl     %eax,Var0x24348(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24348
     jmp      Addr0xae1b              # value ::  target: 0xae1b CodeAddr: 0xae1b
Addr0xb5b0:
     cmpb     $0x0,Var0x2432d(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432d modifies flags!!
     movl     0x38(%rbx),%r15d        # memOffsetBase,reg :: 
     je       Addr0xb830              # value ::  target: 0xb830 CodeAddr: 0xb830
Addr0xb5c1:
     movl     %r15d,%r8d              # reg,reg :: 
     leaq     Var0x197d8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197d8
     movq     %r13,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x15,%edx              # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %r13,%rax               # reg,reg :: 
Addr0xb5e2:
     movl     (%rax),%ecx             # memBase,reg :: 
     addq     $0x4,%rax               # imm,reg ::  modifies flags!!
     leal     -0x1010101(%rcx),%edx   # memOffsetBase,reg :: 
     notl     %ecx                    # reg :: 
     andl     %ecx,%edx               # reg,reg ::  modifies flags!!
     andl     $0x80808080,%edx        # imm,reg ::  modifies flags!!
     je       Addr0xb5e2              # value ::  target: 0xb5e2 CodeAddr: 0xb5e2
     movl     %edx,%ecx               # reg,reg :: 
     shrl     $0x10,%ecx              # imm,reg ::  modifies flags!!
     testl    $0x8080,%edx            # imm,reg ::  CodeAddr: 0x8080 modifies flags!!
     cmovel   %ecx,%edx               # reg,reg :: 
     leaq     0x2(%rax),%rcx          # memOffsetBase,reg :: 
     cmoveq   %rcx,%rax               # reg,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     addb     %dl,%sil                # reg,reg ::  modifies flags!!
     sbbq     $0x3,%rax               # imm,reg ::  modifies flags!!
     subl     %r13d,%eax              # reg,reg ::  modifies flags!!
Addr0xb61c:
     cmpl     %eax,Var0x2434c(%rip)   # reg,memOffsetBase ::  DataAddr: 0x2434c modifies flags!!
     jge      Addr0xae0e              # value ::  target: 0xae0e CodeAddr: 0xae0e
     movl     %eax,Var0x2434c(%rip)   # reg,memOffsetBase ::  DataAddr: 0x2434c
     jmp      Addr0xae0e              # value ::  target: 0xae0e CodeAddr: 0xae0e
Addr0xb638:
     movl     0x34(%rbx),%edi         # memOffsetBase,reg :: 
     callq    Addr0xa900              # value ::  target: 0xa900 CodeAddr: 0xa900 CALLS 0xa900
     cmpl     Var0x24350(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24350 modifies flags!!
     jle      Addr0xae01              # value ::  target: 0xae01 CodeAddr: 0xae01
     movl     %eax,Var0x24350(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24350
     jmp      Addr0xae01              # value ::  target: 0xae01 CodeAddr: 0xae01
Addr0xb660:
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x15b10             # value ::  target: 0x15b10 CodeAddr: 0x15b10 CALLS 0x15b10
     movq     %rax,%r15               # reg,reg :: 
     jmp      Addr0xb0a0              # value ::  target: 0xb0a0 CodeAddr: 0xb0a0
Addr0xb670:
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x6,%r13d              # imm,reg ::  modifies flags!!
     je       Addr0xb684              # value ::  target: 0xb684 CodeAddr: 0xb684
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
Addr0xb684:
     cmpl     $0x5,Var0x242f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f8 modifies flags!!
     je       Addr0xb890              # value ::  target: 0xb890 CodeAddr: 0xb890
     cmpb     $0x0,Var0x24390(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24390 modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     cmpb     $0x0,Var0x242fd(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242fd modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     cmpb     $0x0,Var0x242a0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242a0 modifies flags!!
     je       Addr0xb730              # value ::  target: 0xb730 CodeAddr: 0xb730
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     jmp      Addr0xac83              # value ::  target: 0xac83 CodeAddr: 0xac83
Addr0xb6d0:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     jmp      Addr0xb38d              # value ::  target: 0xb38d CodeAddr: 0xb38d
Addr0xb6e0:
     orq      $0x0,-0x8(%rsp,%rcx,1)  # imm,memOffsetBaseIndexScale ::  modifies flags!!
     jmp      Addr0xb3fa              # value ::  target: 0xb3fa CodeAddr: 0xb3fa
Addr0xb6f0:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpl     $0x2,(%rax)             # imm,memBase ::  modifies flags!!
     je       Addr0xab22              # value ::  target: 0xab22 CodeAddr: 0xab22
Addr0xb6fe:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19831(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19831
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r14,%rdx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     jmp      Addr0xabf3              # value ::  target: 0xabf3 CodeAddr: 0xabf3
Addr0xb730:
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     jmp      Addr0xabe0              # value ::  target: 0xabe0 CodeAddr: 0xabe0
Addr0xb740:
     movl     0x0(%r13),%ecx          # memOffsetBase,reg :: 
     shrl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     movzbl   -0x390(%rbp),%edx       # memOffsetBase,reg :: 
     leal     -0x16(%rcx),%esi        # memOffsetBase,reg :: 
     andl     $0xffffffef,%esi        # imm,reg ::  modifies flags!!
     je       Addr0xb75b              # value ::  target: 0xb75b CodeAddr: 0xb75b
     cmpl     $0x5f,%ecx              # imm,reg ::  modifies flags!!
     jne      Addr0xb766              # value ::  target: 0xb766 CodeAddr: 0xb766
Addr0xb75b:
     movq     0x18(%rbx),%rcx         # memOffsetBase,reg :: 
     movq     %rcx,Var0x232e8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x232e8
Addr0xb766:
     movl     $0x1,%ecx               # imm,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xb3cb              # value ::  target: 0xb3cb CodeAddr: 0xb3cb
     movzbl   Var0x24364(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24364
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     jmp      Addr0xb3cb              # value ::  target: 0xb3cb CodeAddr: 0xb3cb
Addr0xb788:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19842(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19842
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   -0x384(%rbp),%edi       # memOffsetBase,reg :: 
     movq     %r14,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     testq    %r13,%r13               # reg,reg ::  modifies flags!!
     jne      Addr0xb038              # value ::  target: 0xb038 CodeAddr: 0xb038
Addr0xb7ba:
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     jmp      Addr0xb0d3              # value ::  target: 0xb0d3 CodeAddr: 0xb0d3
Addr0xb7c8:
     cmpb     $0x0,Var0x24312(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24312 modifies flags!!
     je       Addr0xac40              # value ::  target: 0xac40 CodeAddr: 0xac40
     movl     $0x13,%edi              # imm,reg :: 
     movb     %r8b,-0x390(%rbp)       # reg,memOffsetBase :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     movl     $0x12,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     movl     $0x14,%edi              # imm,reg :: 
     callq    Addr0x6b40              # value ::  target: 0x6b40 CodeAddr: 0x6b40 CALLS 0x6b40
     movzbl   -0x390(%rbp),%r8d       # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xad10              # value ::  target: 0xad10 CodeAddr: 0xad10
     jmp      Addr0xac40              # value ::  target: 0xac40 CodeAddr: 0xac40
Addr0xb830:
     movl     %r15d,%edi              # reg,reg :: 
     callq    Addr0x10d70             # value ::  target: 0x10d70 CodeAddr: 0x10d70 CALLS 0x10d70
     movq     %rax,%rdi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xb5c1              # value ::  target: 0xb5c1 CodeAddr: 0xb5c1
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x116d0             # value ::  target: 0x116d0 CodeAddr: 0x116d0 CALLS 0x116d0
     movl     $0x0,%edx               # imm,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     cmovsl   %edx,%eax               # reg,reg :: 
     jmp      Addr0xb61c              # value ::  target: 0xb61c CodeAddr: 0xb61c
Addr0xb860:
     movq     0x8(%rbx),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x7020              # value ::  target: 0x7020 CodeAddr: 0x7020 CALLS 0x7020
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xb0b9              # value ::  target: 0xb0b9 CodeAddr: 0xb0b9
     movl     $0xffffffff,0xc4(%rbx)  # imm,memOffsetBase :: 
     jmp      Addr0xb0b9              # value ::  target: 0xb0b9 CodeAddr: 0xb0b9
Addr0xb880:
     movl     $0x5f,0x0(%r13)         # imm,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0xb766              # value ::  target: 0xb766 CodeAddr: 0xb766
Addr0xb890:
     movzbl   (%r12),%edx             # memBase,reg :: 
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0xad21              # value ::  target: 0xad21 CodeAddr: 0xad21
     leaq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     %r12,%r14               # reg,reg :: 
     jmp      Addr0xaf29              # value ::  target: 0xaf29 CodeAddr: 0xaf29
Addr0xb8aa:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0xb8af:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 189 ------------ 
#
# startAddr  = 0xb8c0
# startindex = 7085
# endAddr    = 0xbfb0
# endindex   = 7470
# len        = 1777 (0x6f1)
# len1       = 1788 (0x6fc) to (0xbfb1)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xb8c0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     movq     %rsi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x358,%rsp             # imm,reg ::  modifies flags!!
     movl     %edx,0x14(%rsp)         # reg,memOffsetBase :: 
     movb     %dl,0x13(%rsp)          # reg,memOffsetBase :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x348(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %r13,%rdi               # reg,reg :: 
     movl     $0x0,(%rax)             # imm,memBase :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0x4870              # value ::  target: 0x4870 CodeAddr: 0x4870 CALLS 0x4870
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xbf52              # value ::  target: 0xbf52 CodeAddr: 0xbf52
     cmpq     $0x0,Var0x243c8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243c8 modifies flags!!
     movq     %rax,%r12               # reg,reg :: 
     je       Addr0xba75              # value ::  target: 0xba75 CodeAddr: 0xba75
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4aa0              # value ::  target: 0x4aa0 CodeAddr: 0x4aa0 CALLS 0x4aa0
     leaq     0x20(%rsp),%rdx         # memOffsetBase,reg :: 
     movl     %eax,%esi               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0xbbf0              # value ::  target: 0xbbf0 CodeAddr: 0xbbf0
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x4b90              # value ::  target: 0x4b90 CodeAddr: 0x4b90 CALLS 0x4b90
     shrl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xbc08              # value ::  target: 0xbc08 CodeAddr: 0xbc08
Addr0xb94e:
     movq     0x28(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x20(%rsp),%rdx         # memOffsetBase,reg :: 
     movl     $0x10,%edi              # imm,reg :: 
     movq     %rcx,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     movq     Var0x243c8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x243c8
     movq     %rax,%rsi               # reg,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     movq     %rcx,(%rax)             # reg,memBase :: 
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     callq    Addr0xfba0              # value ::  target: 0xfba0 CodeAddr: 0xfba0 CALLS 0xfba0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xbfa7              # value ::  target: 0xbfa7 CodeAddr: 0xbfa7
     cmpq     %rax,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xba20              # value ::  target: 0xba20 CodeAddr: 0xba20
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %r13,%rdx               # reg,reg :: 
     movl     $0x3,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x14e60             # value ::  target: 0x14e60 CodeAddr: 0x14e60 CALLS 0x14e60
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19da8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19da8
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%r13               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r13,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4a20              # value ::  target: 0x4a20 CodeAddr: 0x4a20 CALLS 0x4a20
     movl     $0x2,Var0x24210(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24210
Addr0xb9f1:
     movq     0x348(%rsp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xbfac              # value ::  target: 0xbfac CodeAddr: 0xbfac
     addq     $0x358,%rsp             # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xba20:
     movq     Var0x240f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x240f8
     movq     Var0x24100(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x24100
     movq     0x28(%rsp),%rbx         # memOffsetBase,reg :: 
     movq     0x20(%rsp),%rcx         # memOffsetBase,reg :: 
     subq     %rax,%rdx               # reg,reg ::  modifies flags!!
     cmpq     $0xf,%rdx               # imm,reg ::  modifies flags!!
     ja       Addr0xba63              # value ::  target: 0xba63 CodeAddr: 0xba63
     movl     $0x10,%esi              # imm,reg :: 
     leaq     Var0x240e0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x240e0
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x16ac0             # value ::  target: 0x16ac0 CodeAddr: 0x16ac0 CALLS 0x16ac0
     movq     Var0x240f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x240f8
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
Addr0xba63:
     leaq     0x10(%rax),%rdx         # memOffsetBase,reg :: 
     movq     %rdx,Var0x240f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x240f8
     movq     %rcx,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rbx,(%rax)             # reg,memBase :: 
Addr0xba75:
     callq    Addr0x6f70              # value ::  target: 0x6f70 CodeAddr: 0x6f70 CALLS 0x6f70
     cmpb     $0x0,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6 modifies flags!!
     je       Addr0xbbd8              # value ::  target: 0xbbd8 CodeAddr: 0xbbd8
Addr0xba87:
     cmpb     $0x0,Var0x23010(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23010 modifies flags!!
     jne      Addr0xbab8              # value ::  target: 0xbab8 CodeAddr: 0xbab8
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xbf7a              # value ::  target: 0xbf7a CodeAddr: 0xbf7a
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0xbab0:
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
Addr0xbab8:
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     movb     $0x0,Var0x23010(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23010
     jne      Addr0xbf28              # value ::  target: 0xbf28 CodeAddr: 0xbf28
Addr0xbacc:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     cmpb     $0x0,Var0x24311(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24311 modifies flags!!
     jne      Addr0xbeb0              # value ::  target: 0xbeb0 CodeAddr: 0xbeb0
Addr0xbadb:
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     movq     Var0x242c8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x242c8
     movl     $0xffffffff,%edx        # imm,reg :: 
     leaq     Var0x24140(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x24140
     cmoveq   %r13,%r14               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0x1,%r8d               # imm,reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     pushq    %rbx                    # reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x8650              # value ::  target: 0x8650 CodeAddr: 0x8650 CALLS 0x8650
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movl     $0x1,%esi               # imm,reg :: 
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x2,%edx               # imm,reg :: 
     leaq     Var0x19a73(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19a73
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     addq     $0x2,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     popq     %rcx                    # reg :: 
     popq     %rsi                    # reg :: 
Addr0xbb39:
     movq     $0x0,0x8(%rsp)          # imm,memOffsetBase :: 
Addr0xbb48:
     movl     $0x0,0x0(%rbp)          # imm,memOffsetBase :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4b50              # value ::  target: 0x4b50 CodeAddr: 0x4b50 CALLS 0x4b50
     movq     %rax,%rbx               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xbc40              # value ::  target: 0xbc40 CodeAddr: 0xbc40
     leaq     0x13(%rax),%r15         # memOffsetBase,reg :: 
     movl     Var0x242f0(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x242f0
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     je       Addr0xbdc0              # value ::  target: 0xbdc0 CodeAddr: 0xbdc0
     cmpb     $0x2e,0x13(%rbx)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xbda0              # value ::  target: 0xbda0 CodeAddr: 0xbda0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xbdc0              # value ::  target: 0xbdc0 CodeAddr: 0xbdc0
     movq     Var0x242e0(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x242e0
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     jne      Addr0xbbad              # value ::  target: 0xbbad CodeAddr: 0xbbad
     jmp      Addr0xbdc0              # value ::  target: 0xbdc0 CodeAddr: 0xbdc0
Addr0xbba0:
     movq     0x8(%r14),%r14          # memOffsetBase,reg :: 
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xbdc0              # value ::  target: 0xbdc0 CodeAddr: 0xbdc0
Addr0xbbad:
     movq     (%r14),%rdi             # memBase,reg :: 
     movl     $0x4,%edx               # imm,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     callq    Addr0x49d0              # value ::  target: 0x49d0 CodeAddr: 0x49d0 CALLS 0x49d0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xbba0              # value ::  target: 0xbba0 CodeAddr: 0xbba0
Addr0xbbc8:
     callq    Addr0x8090              # value ::  target: 0x8090 CodeAddr: 0x8090 CALLS 0x8090
     jmp      Addr0xbb48              # value ::  target: 0xbb48 CodeAddr: 0xbb48
Addr0xbbd8:
     cmpb     $0x0,Var0x242b8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242b8 modifies flags!!
     je       Addr0xbb39              # value ::  target: 0xbb39 CodeAddr: 0xbb39
     jmp      Addr0xba87              # value ::  target: 0xba87 CodeAddr: 0xba87
Addr0xbbf0:
     movq     %r13,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x4b40              # value ::  target: 0x4b40 CodeAddr: 0x4b40 CALLS 0x4b40
     shrl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xb94e              # value ::  target: 0xb94e CodeAddr: 0xb94e
Addr0xbc08:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19d80(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19d80
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   0x14(%rsp),%edi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4a20              # value ::  target: 0x4a20 CodeAddr: 0x4a20 CALLS 0x4a20
     jmp      Addr0xb9f1              # value ::  target: 0xb9f1 CodeAddr: 0xb9f1
Addr0xbc40:
     movl     0x0(%rbp),%edx          # memOffsetBase,reg :: 
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     je       Addr0xbc74              # value ::  target: 0xbc74 CodeAddr: 0xbc74
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19882(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19882
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   0x13(%rsp),%edi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     cmpl     $0x4b,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
Addr0xbc74:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4a20              # value ::  target: 0x4a20 CodeAddr: 0x4a20 CALLS 0x4a20
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xbe80              # value ::  target: 0xbe80 CodeAddr: 0xbe80
Addr0xbc84:
     callq    Addr0x7180              # value ::  target: 0x7180 CodeAddr: 0x7180 CALLS 0x7180
     cmpb     $0x0,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6 modifies flags!!
     jne      Addr0xbe70              # value ::  target: 0xbe70 CodeAddr: 0xbe70
Addr0xbc96:
     movl     Var0x24338(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x24338
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xbcad              # value ::  target: 0xbcad CodeAddr: 0xbcad
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     je       Addr0xbd83              # value ::  target: 0xbd83 CodeAddr: 0xbd83
Addr0xbcad:
     cmpb     $0x0,Var0x24318(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24318 modifies flags!!
     jne      Addr0xbef8              # value ::  target: 0xbef8 CodeAddr: 0xbef8
Addr0xbcba:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x198ac(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x198ac
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     Var0x23288(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %rax,%rbp               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     addq     %rax,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xbf89              # value ::  target: 0xbf89 CodeAddr: 0xbf89
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0x20,(%rax)            # imm,memBase :: 
Addr0xbd0e:
     movl     Var0x24328(%rip),%edx   # memOffsetBase,reg ::  DataAddr: 0x24328
     movq     0x8(%rsp),%rdi          # memOffsetBase,reg :: 
     movl     $0x200,%ecx             # imm,reg :: 
     leaq     0xb0(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     Var0x24320(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x24320
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     callq    Addr0xffa0              # value ::  target: 0xffa0 CodeAddr: 0xffa0 CALLS 0xffa0
     movq     Var0x23288(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x23288
     movq     %rax,%rbp               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     addq     %rax,Var0x241f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xbf98              # value ::  target: 0xbf98 CodeAddr: 0xbf98
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
Addr0xbd7b:
     addq     $0x1,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
Addr0xbd83:
     cmpq     $0x0,Var0x243b0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243b0 modifies flags!!
     je       Addr0xb9f1              # value ::  target: 0xb9f1 CodeAddr: 0xb9f1
     callq    Addr0xa1a0              # value ::  target: 0xa1a0 CodeAddr: 0xa1a0 CALLS 0xa1a0
     jmp      Addr0xb9f1              # value ::  target: 0xb9f1 CodeAddr: 0xb9f1
Addr0xbda0:
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x2e,0x14(%rbx)        # imm,memOffsetBase ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpb     $0x0,0x14(%rbx,%rax,1)  # imm,memOffsetBaseIndexScale ::  modifies flags!!
     je       Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
Addr0xbdc0:
     movq     Var0x242e8(%rip),%r14   # memOffsetBase,reg ::  DataAddr: 0x242e8
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     jne      Addr0xbdd9              # value ::  target: 0xbdd9 CodeAddr: 0xbdd9
     jmp      Addr0xbdf8              # value ::  target: 0xbdf8 CodeAddr: 0xbdf8
Addr0xbdd0:
     movq     0x8(%r14),%r14          # memOffsetBase,reg :: 
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xbdf8              # value ::  target: 0xbdf8 CodeAddr: 0xbdf8
Addr0xbdd9:
     movq     (%r14),%rdi             # memBase,reg :: 
     movl     $0x4,%edx               # imm,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     callq    Addr0x49d0              # value ::  target: 0x49d0 CodeAddr: 0x49d0 CALLS 0x49d0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xbdd0              # value ::  target: 0xbdd0 CodeAddr: 0xbdd0
     jmp      Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
Addr0xbdf8:
     movzbl   0x12(%rbx),%eax         # memOffsetBase,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     cmpb     $0xd,%al                # imm,reg ::  modifies flags!!
     ja       Addr0xbe12              # value ::  target: 0xbe12 CodeAddr: 0xbe12
     movzbl   %al,%eax                # reg,reg :: 
     leaq     Var0x185c0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x185c0
     movl     (%rcx,%rax,4),%esi      # memBaseIndexScale,reg :: 
Addr0xbe12:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r13,%rcx               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0xa9d0              # value ::  target: 0xa9d0 CodeAddr: 0xa9d0 CALLS 0xa9d0
     addq     %rax,0x8(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     cmpl     $0x1,Var0x24338(%rip)   # imm,memOffsetBase ::  DataAddr: 0x24338 modifies flags!!
     jne      Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
     cmpl     $0xffffffff,Var0x24330(%rip)# imm,memOffsetBase ::  DataAddr: 0x24330 modifies flags!!
     jne      Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
     cmpb     $0x0,Var0x2432c(%rip)   # imm,memOffsetBase ::  DataAddr: 0x2432c modifies flags!!
     jne      Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
     cmpb     $0x0,Var0x242f6(%rip)   # imm,memOffsetBase ::  DataAddr: 0x242f6 modifies flags!!
     jne      Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
     callq    Addr0x7180              # value ::  target: 0x7180 CodeAddr: 0x7180 CALLS 0x7180
     callq    Addr0xa1a0              # value ::  target: 0xa1a0 CodeAddr: 0xa1a0 CALLS 0xa1a0
     callq    Addr0x6f70              # value ::  target: 0x6f70 CodeAddr: 0x6f70 CALLS 0x6f70
     jmp      Addr0xbbc8              # value ::  target: 0xbbc8 CodeAddr: 0xbbc8
Addr0xbe70:
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x7390              # value ::  target: 0x7390 CodeAddr: 0x7390 CALLS 0x7390
     jmp      Addr0xbc96              # value ::  target: 0xbc96 CodeAddr: 0xbc96
Addr0xbe80:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19897(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19897
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   0x14(%rsp),%edi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     jmp      Addr0xbc84              # value ::  target: 0xbc84 CodeAddr: 0xbc84
Addr0xbeb0:
     movl     $0x2,%esi               # imm,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0xd900              # value ::  target: 0xd900 CodeAddr: 0xd900 CALLS 0xd900
     movq     %rax,%rbx               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xbadb              # value ::  target: 0xbadb CodeAddr: 0xbadb
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19819(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19819
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   0x14(%rsp),%edi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     jmp      Addr0xbadb              # value ::  target: 0xbadb CodeAddr: 0xbadb
Addr0xbef8:
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x2,%edx               # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x19807(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19807
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     addq     $0x2,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     jmp      Addr0xbcba              # value ::  target: 0xbcba CodeAddr: 0xbcba
Addr0xbf28:
     movq     Var0x23288(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x2,%edx               # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x19807(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19807
     callq    Addr0x4bd0              # value ::  target: 0x4bd0 CodeAddr: 0x4bd0 CALLS 0x4bd0
     addq     $0x2,Var0x241f8(%rip)   # imm,memOffsetBase ::  DataAddr: 0x241f8 modifies flags!!
     jmp      Addr0xbacc              # value ::  target: 0xbacc CodeAddr: 0xbacc
Addr0xbf52:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19869(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19869
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movzbl   0x14(%rsp),%edi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     callq    Addr0x77f0              # value ::  target: 0x77f0 CodeAddr: 0x77f0 CALLS 0x77f0
     jmp      Addr0xb9f1              # value ::  target: 0xb9f1 CodeAddr: 0xb9f1
Addr0xbf7a:
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xbab0              # value ::  target: 0xbab0 CodeAddr: 0xbab0
Addr0xbf89:
     movl     $0x20,%esi              # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xbd0e              # value ::  target: 0xbd0e CodeAddr: 0xbd0e
Addr0xbf98:
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950 CALLS 0x4950
     jmp      Addr0xbd7b              # value ::  target: 0xbd7b CodeAddr: 0xbd7b
Addr0xbfa7:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30
Addr0xbfac:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 190 ------------ 
#
# startAddr  = 0xbfc0
# startindex = 7473
# endAddr    = 0xc005
# endindex   = 7490
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc006)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xbfc0:
     endbr64 
     movq     0x80(%rdi),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     cmpq     %rax,0x80(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc000              # value ::  target: 0xc000 CodeAddr: 0xc000
     jl       Addr0xbff8              # value ::  target: 0xbff8 CodeAddr: 0xbff8
     movq     0x88(%rdi),%rax         # memOffsetBase,reg :: 
     subl     0x88(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xbffd              # value ::  target: 0xbffd CodeAddr: 0xbffd
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xbff8:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xbffd:
     retq    
Addr0xc000:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 191 ------------ 
#
# startAddr  = 0xc010
# startindex = 7492
# endAddr    = 0xc055
# endindex   = 7509
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc056)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc010:
     endbr64 
     movq     0x60(%rdi),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     cmpq     %rax,0x60(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc050              # value ::  target: 0xc050 CodeAddr: 0xc050
     jl       Addr0xc040              # value ::  target: 0xc040 CodeAddr: 0xc040
     movq     0x68(%rdi),%rax         # memOffsetBase,reg :: 
     subl     0x68(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc045              # value ::  target: 0xc045 CodeAddr: 0xc045
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc040:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc045:
     retq    
Addr0xc050:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 192 ------------ 
#
# startAddr  = 0xc060
# startindex = 7511
# endAddr    = 0xc0a5
# endindex   = 7526
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc0a6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc060:
     endbr64 
     movq     0x80(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x80(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc0a0              # value ::  target: 0xc0a0 CodeAddr: 0xc0a0
     jl       Addr0xc090              # value ::  target: 0xc090 CodeAddr: 0xc090
     movq     0x88(%rsi),%rax         # memOffsetBase,reg :: 
     subl     0x88(%rdi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc095              # value ::  target: 0xc095 CodeAddr: 0xc095
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc090:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc095:
     retq    
Addr0xc0a0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 193 ------------ 
#
# startAddr  = 0xc0b0
# startindex = 7528
# endAddr    = 0xc0e5
# endindex   = 7544
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xc0e6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc0b0:
     endbr64 
     movq     0x70(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x70(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc0e0              # value ::  target: 0xc0e0 CodeAddr: 0xc0e0
     jl       Addr0xc0d8              # value ::  target: 0xc0d8 CodeAddr: 0xc0d8
     movq     0x78(%rsi),%rax         # memOffsetBase,reg :: 
     subl     0x78(%rdi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc0dd              # value ::  target: 0xc0dd CodeAddr: 0xc0dd
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc0d8:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc0dd:
     retq    
Addr0xc0e0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 194 ------------ 
#
# startAddr  = 0xc0f0
# startindex = 7546
# endAddr    = 0xc135
# endindex   = 7563
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc136)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc0f0:
     endbr64 
     movq     0x70(%rdi),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     cmpq     %rax,0x70(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc130              # value ::  target: 0xc130 CodeAddr: 0xc130
     jl       Addr0xc120              # value ::  target: 0xc120 CodeAddr: 0xc120
     movq     0x78(%rdi),%rax         # memOffsetBase,reg :: 
     subl     0x78(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc125              # value ::  target: 0xc125 CodeAddr: 0xc125
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc120:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc125:
     retq    
Addr0xc130:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 195 ------------ 
#
# startAddr  = 0xc140
# startindex = 7565
# endAddr    = 0xc175
# endindex   = 7581
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xc176)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc140:
     endbr64 
     movq     0x60(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x60(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc170              # value ::  target: 0xc170 CodeAddr: 0xc170
     jl       Addr0xc168              # value ::  target: 0xc168 CodeAddr: 0xc168
     movq     0x68(%rsi),%rax         # memOffsetBase,reg :: 
     subl     0x68(%rdi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc16d              # value ::  target: 0xc16d CodeAddr: 0xc16d
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc168:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc16d:
     retq    
Addr0xc170:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 196 ------------ 
#
# startAddr  = 0xc180
# startindex = 7583
# endAddr    = 0xc207
# endindex   = 7624
# len        = 136 (0x88)
# len1       = 144 (0x90) to (0xc208)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc180:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0xc1c8              # value ::  target: 0xc1c8 CodeAddr: 0xc1c8
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc200              # value ::  target: 0xc200 CodeAddr: 0xc200
Addr0xc1b7:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc1cc              # value ::  target: 0xc1cc CodeAddr: 0xc1cc
Addr0xc1c1:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc1c8:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xc1b7              # value ::  target: 0xc1b7 CodeAddr: 0xc1b7
Addr0xc1cc:
     movq     0x60(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x60(%rdx)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc200              # value ::  target: 0xc200 CodeAddr: 0xc200
     jl       Addr0xc1f0              # value ::  target: 0xc1f0 CodeAddr: 0xc1f0
     movq     0x68(%rdi),%r8          # memOffsetBase,reg :: 
     subl     0x68(%rdx),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc1c1              # value ::  target: 0xc1c1 CodeAddr: 0xc1c1
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc1f0:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc200:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc1c1              # value ::  target: 0xc1c1 CodeAddr: 0xc1c1

# ----------- Function 197 ------------ 
#
# startAddr  = 0xc210
# startindex = 7626
# endAddr    = 0xc28f
# endindex   = 7665
# len        = 128 (0x80)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc210:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xc250              # value ::  target: 0xc250 CodeAddr: 0xc250
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc288              # value ::  target: 0xc288 CodeAddr: 0xc288
Addr0xc242:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc254              # value ::  target: 0xc254 CodeAddr: 0xc254
Addr0xc24c:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc250:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xc242              # value ::  target: 0xc242 CodeAddr: 0xc242
Addr0xc254:
     movq     0x70(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x70(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc288              # value ::  target: 0xc288 CodeAddr: 0xc288
     jl       Addr0xc278              # value ::  target: 0xc278 CodeAddr: 0xc278
     movq     0x78(%rsi),%r8          # memOffsetBase,reg :: 
     subl     0x78(%rdi),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc24c              # value ::  target: 0xc24c CodeAddr: 0xc24c
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc278:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc288:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc24c              # value ::  target: 0xc24c CodeAddr: 0xc24c

# ----------- Function 198 ------------ 
#
# startAddr  = 0xc290
# startindex = 7666
# endAddr    = 0xc31f
# endindex   = 7705
# len        = 144 (0x90)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc290:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xc2d0              # value ::  target: 0xc2d0 CodeAddr: 0xc2d0
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc318              # value ::  target: 0xc318 CodeAddr: 0xc318
Addr0xc2c2:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc2d4              # value ::  target: 0xc2d4 CodeAddr: 0xc2d4
Addr0xc2cc:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc2d0:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xc2c2              # value ::  target: 0xc2c2 CodeAddr: 0xc2c2
Addr0xc2d4:
     movq     0x80(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x80(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc318              # value ::  target: 0xc318 CodeAddr: 0xc318
     jl       Addr0xc308              # value ::  target: 0xc308 CodeAddr: 0xc308
     movq     0x88(%rsi),%r8          # memOffsetBase,reg :: 
     subl     0x88(%rdi),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc2cc              # value ::  target: 0xc2cc CodeAddr: 0xc2cc
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc308:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc318:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc2cc              # value ::  target: 0xc2cc CodeAddr: 0xc2cc

# ----------- Function 199 ------------ 
#
# startAddr  = 0xc320
# startindex = 7706
# endAddr    = 0xc3a7
# endindex   = 7747
# len        = 136 (0x88)
# len1       = 144 (0x90) to (0xc3a8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc320:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0xc368              # value ::  target: 0xc368 CodeAddr: 0xc368
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc3a0              # value ::  target: 0xc3a0 CodeAddr: 0xc3a0
Addr0xc357:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc36c              # value ::  target: 0xc36c CodeAddr: 0xc36c
Addr0xc361:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc368:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xc357              # value ::  target: 0xc357 CodeAddr: 0xc357
Addr0xc36c:
     movq     0x70(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x70(%rdx)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc3a0              # value ::  target: 0xc3a0 CodeAddr: 0xc3a0
     jl       Addr0xc390              # value ::  target: 0xc390 CodeAddr: 0xc390
     movq     0x78(%rdi),%r8          # memOffsetBase,reg :: 
     subl     0x78(%rdx),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc361              # value ::  target: 0xc361 CodeAddr: 0xc361
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc390:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc3a0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc361              # value ::  target: 0xc361 CodeAddr: 0xc361

# ----------- Function 200 ------------ 
#
# startAddr  = 0xc3b0
# startindex = 7749
# endAddr    = 0xc447
# endindex   = 7790
# len        = 152 (0x98)
# len1       = 160 (0xa0) to (0xc448)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc3b0:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0xc3f8              # value ::  target: 0xc3f8 CodeAddr: 0xc3f8
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc440              # value ::  target: 0xc440 CodeAddr: 0xc440
Addr0xc3e7:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc3fc              # value ::  target: 0xc3fc CodeAddr: 0xc3fc
Addr0xc3f1:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc3f8:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xc3e7              # value ::  target: 0xc3e7 CodeAddr: 0xc3e7
Addr0xc3fc:
     movq     0x80(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x80(%rdx)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc440              # value ::  target: 0xc440 CodeAddr: 0xc440
     jl       Addr0xc430              # value ::  target: 0xc430 CodeAddr: 0xc430
     movq     0x88(%rdi),%r8          # memOffsetBase,reg :: 
     subl     0x88(%rdx),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc3f1              # value ::  target: 0xc3f1 CodeAddr: 0xc3f1
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc430:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc440:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc3f1              # value ::  target: 0xc3f1 CodeAddr: 0xc3f1

# ----------- Function 201 ------------ 
#
# startAddr  = 0xc450
# startindex = 7792
# endAddr    = 0xc4cf
# endindex   = 7831
# len        = 128 (0x80)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc450:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xc490              # value ::  target: 0xc490 CodeAddr: 0xc490
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc4c8              # value ::  target: 0xc4c8 CodeAddr: 0xc4c8
Addr0xc482:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc494              # value ::  target: 0xc494 CodeAddr: 0xc494
Addr0xc48c:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc490:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xc482              # value ::  target: 0xc482 CodeAddr: 0xc482
Addr0xc494:
     movq     0x60(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x60(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc4c8              # value ::  target: 0xc4c8 CodeAddr: 0xc4c8
     jl       Addr0xc4b8              # value ::  target: 0xc4b8 CodeAddr: 0xc4b8
     movq     0x68(%rsi),%r8          # memOffsetBase,reg :: 
     subl     0x68(%rdi),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc48c              # value ::  target: 0xc48c CodeAddr: 0xc48c
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc4b8:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc4c8:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc48c              # value ::  target: 0xc48c CodeAddr: 0xc48c

# ----------- Function 202 ------------ 
#
# startAddr  = 0xc4d0
# startindex = 7832
# endAddr    = 0xc505
# endindex   = 7848
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xc506)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc4d0:
     endbr64 
     movq     0x70(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x70(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc500              # value ::  target: 0xc500 CodeAddr: 0xc500
     jl       Addr0xc4f8              # value ::  target: 0xc4f8 CodeAddr: 0xc4f8
     movq     0x78(%rsi),%rax         # memOffsetBase,reg :: 
     subl     0x78(%rdi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc4fd              # value ::  target: 0xc4fd CodeAddr: 0xc4fd
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc4f8:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc4fd:
     retq    
Addr0xc500:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 203 ------------ 
#
# startAddr  = 0xc510
# startindex = 7850
# endAddr    = 0xc555
# endindex   = 7867
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc556)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc510:
     endbr64 
     movq     0x70(%rdi),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     cmpq     %rax,0x70(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc550              # value ::  target: 0xc550 CodeAddr: 0xc550
     jl       Addr0xc540              # value ::  target: 0xc540 CodeAddr: 0xc540
     movq     0x78(%rdi),%rax         # memOffsetBase,reg :: 
     subl     0x78(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc545              # value ::  target: 0xc545 CodeAddr: 0xc545
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc540:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc545:
     retq    
Addr0xc550:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 204 ------------ 
#
# startAddr  = 0xc560
# startindex = 7869
# endAddr    = 0xc5a5
# endindex   = 7884
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc5a6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc560:
     endbr64 
     movq     0x80(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x80(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc5a0              # value ::  target: 0xc5a0 CodeAddr: 0xc5a0
     jl       Addr0xc590              # value ::  target: 0xc590 CodeAddr: 0xc590
     movq     0x88(%rsi),%rax         # memOffsetBase,reg :: 
     subl     0x88(%rdi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc595              # value ::  target: 0xc595 CodeAddr: 0xc595
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc590:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc595:
     retq    
Addr0xc5a0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 205 ------------ 
#
# startAddr  = 0xc5b0
# startindex = 7886
# endAddr    = 0xc5f5
# endindex   = 7903
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc5f6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc5b0:
     endbr64 
     movq     0x60(%rdi),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     cmpq     %rax,0x60(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc5f0              # value ::  target: 0xc5f0 CodeAddr: 0xc5f0
     jl       Addr0xc5e0              # value ::  target: 0xc5e0 CodeAddr: 0xc5e0
     movq     0x68(%rdi),%rax         # memOffsetBase,reg :: 
     subl     0x68(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc5e5              # value ::  target: 0xc5e5 CodeAddr: 0xc5e5
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc5e0:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc5e5:
     retq    
Addr0xc5f0:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 206 ------------ 
#
# startAddr  = 0xc600
# startindex = 7905
# endAddr    = 0xc635
# endindex   = 7921
# len        = 54 (0x36)
# len1       = 64 (0x40) to (0xc636)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc600:
     endbr64 
     movq     0x60(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x60(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc630              # value ::  target: 0xc630 CodeAddr: 0xc630
     jl       Addr0xc628              # value ::  target: 0xc628 CodeAddr: 0xc628
     movq     0x68(%rsi),%rax         # memOffsetBase,reg :: 
     subl     0x68(%rdi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc62d              # value ::  target: 0xc62d CodeAddr: 0xc62d
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc628:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc62d:
     retq    
Addr0xc630:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 207 ------------ 
#
# startAddr  = 0xc640
# startindex = 7923
# endAddr    = 0xc685
# endindex   = 7940
# len        = 70 (0x46)
# len1       = 80 (0x50) to (0xc686)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc640:
     endbr64 
     movq     0x80(%rdi),%rax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     cmpq     %rax,0x80(%rsi)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc680              # value ::  target: 0xc680 CodeAddr: 0xc680
     jl       Addr0xc678              # value ::  target: 0xc678 CodeAddr: 0xc678
     movq     0x88(%rdi),%rax         # memOffsetBase,reg :: 
     subl     0x88(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc67d              # value ::  target: 0xc67d CodeAddr: 0xc67d
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc678:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xc67d:
     retq    
Addr0xc680:
     movl     $0xffffffff,%eax        # imm,reg :: 
     retq    

# ----------- Function 208 ------------ 
#
# startAddr  = 0xc690
# startindex = 7942
# endAddr    = 0xc717
# endindex   = 7983
# len        = 136 (0x88)
# len1       = 144 (0x90) to (0xc718)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc690:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0xc6d8              # value ::  target: 0xc6d8 CodeAddr: 0xc6d8
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc710              # value ::  target: 0xc710 CodeAddr: 0xc710
Addr0xc6c7:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc6dc              # value ::  target: 0xc6dc CodeAddr: 0xc6dc
Addr0xc6d1:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc6d8:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xc6c7              # value ::  target: 0xc6c7 CodeAddr: 0xc6c7
Addr0xc6dc:
     movq     0x60(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x60(%rdx)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc710              # value ::  target: 0xc710 CodeAddr: 0xc710
     jl       Addr0xc700              # value ::  target: 0xc700 CodeAddr: 0xc700
     movq     0x68(%rdi),%r8          # memOffsetBase,reg :: 
     subl     0x68(%rdx),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc6d1              # value ::  target: 0xc6d1 CodeAddr: 0xc6d1
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc700:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc710:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc6d1              # value ::  target: 0xc6d1 CodeAddr: 0xc6d1

# ----------- Function 209 ------------ 
#
# startAddr  = 0xc720
# startindex = 7985
# endAddr    = 0xc7a7
# endindex   = 8026
# len        = 136 (0x88)
# len1       = 144 (0x90) to (0xc7a8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc720:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0xc768              # value ::  target: 0xc768 CodeAddr: 0xc768
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc7a0              # value ::  target: 0xc7a0 CodeAddr: 0xc7a0
Addr0xc757:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc76c              # value ::  target: 0xc76c CodeAddr: 0xc76c
Addr0xc761:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc768:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xc757              # value ::  target: 0xc757 CodeAddr: 0xc757
Addr0xc76c:
     movq     0x70(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x70(%rdx)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc7a0              # value ::  target: 0xc7a0 CodeAddr: 0xc7a0
     jl       Addr0xc790              # value ::  target: 0xc790 CodeAddr: 0xc790
     movq     0x78(%rdi),%r8          # memOffsetBase,reg :: 
     subl     0x78(%rdx),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc761              # value ::  target: 0xc761 CodeAddr: 0xc761
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc790:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc7a0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc761              # value ::  target: 0xc761 CodeAddr: 0xc761

# ----------- Function 210 ------------ 
#
# startAddr  = 0xc7b0
# startindex = 8028
# endAddr    = 0xc847
# endindex   = 8069
# len        = 152 (0x98)
# len1       = 160 (0xa0) to (0xc848)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc7b0:
     endbr64 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     0xa8(%rsi),%esi         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%esi               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     orb      %sil,%al                # reg,reg ::  modifies flags!!
     jne      Addr0xc7f8              # value ::  target: 0xc7f8 CodeAddr: 0xc7f8
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc840              # value ::  target: 0xc840 CodeAddr: 0xc840
Addr0xc7e7:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc7fc              # value ::  target: 0xc7fc CodeAddr: 0xc7fc
Addr0xc7f1:
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc7f8:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xc7e7              # value ::  target: 0xc7e7 CodeAddr: 0xc7e7
Addr0xc7fc:
     movq     0x80(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x80(%rdx)         # reg,memOffsetBase ::  modifies flags!!
     jg       Addr0xc840              # value ::  target: 0xc840 CodeAddr: 0xc840
     jl       Addr0xc830              # value ::  target: 0xc830 CodeAddr: 0xc830
     movq     0x88(%rdi),%r8          # memOffsetBase,reg :: 
     subl     0x88(%rdx),%r8d         # memOffsetBase,reg ::  modifies flags!!
     jne      Addr0xc7f1              # value ::  target: 0xc7f1 CodeAddr: 0xc7f1
     movq     (%rdi),%rsi             # memBase,reg :: 
     movq     (%rdx),%rdi             # memBase,reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xc830:
     movl     $0x1,%r8d               # imm,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     retq    
Addr0xc840:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc7f1              # value ::  target: 0xc7f1 CodeAddr: 0xc7f1

# ----------- Function 211 ------------ 
#
# startAddr  = 0xc850
# startindex = 8071
# endAddr    = 0xc8b4
# endindex   = 8104
# len        = 101 (0x65)
# len1       = 112 (0x70) to (0xc8b5)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc850:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     (%rbx),%rdi             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     %rax,%rsi               # reg,reg :: 
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rsi               # reg,reg :: 
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rbp               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310 CALLS 0x7310
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xc8b0              # value ::  target: 0xc8b0 CodeAddr: 0xc8b0
     movq     (%rbx),%rsi             # memBase,reg :: 
     movq     (%r12),%rdi             # memBase,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc8b0:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 212 ------------ 
#
# startAddr  = 0xc8c0
# startindex = 8106
# endAddr    = 0xc924
# endindex   = 8138
# len        = 101 (0x65)
# len1       = 112 (0x70) to (0xc925)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc8c0:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     movq     (%r12),%rdi             # memBase,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     (%rbx),%rdi             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     %rax,%rsi               # reg,reg :: 
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rsi               # reg,reg :: 
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rbp               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310 CALLS 0x7310
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xc920              # value ::  target: 0xc920 CodeAddr: 0xc920
     movq     (%rbx),%rsi             # memBase,reg :: 
     movq     (%r12),%rdi             # memBase,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc920:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 213 ------------ 
#
# startAddr  = 0xc930
# startindex = 8140
# endAddr    = 0xc9e7
# endindex   = 8198
# len        = 184 (0xb8)
# len1       = 192 (0xc0) to (0xc9e8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc930:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xc980              # value ::  target: 0xc980 CodeAddr: 0xc980
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xc9e0              # value ::  target: 0xc9e0 CodeAddr: 0xc9e0
Addr0xc96c:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xc984              # value ::  target: 0xc984 CodeAddr: 0xc984
Addr0xc976:
     popq     %rbx                    # reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0xc980:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xc96c              # value ::  target: 0xc96c CodeAddr: 0xc96c
Addr0xc984:
     movq     (%rbx),%rdi             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     %rax,%rsi               # reg,reg :: 
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rsi               # reg,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%r12               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310 CALLS 0x7310
     movl     %eax,%r8d               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xc976              # value ::  target: 0xc976 CodeAddr: 0xc976
     movq     0x0(%rbp),%rsi          # memOffsetBase,reg :: 
     movq     (%rbx),%rdi             # memBase,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xc9e0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xc976              # value ::  target: 0xc976 CodeAddr: 0xc976

# ----------- Function 214 ------------ 
#
# startAddr  = 0xc9f0
# startindex = 8200
# endAddr    = 0xcaa7
# endindex   = 8258
# len        = 184 (0xb8)
# len1       = 192 (0xc0) to (0xcaa8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xc9f0:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xca40              # value ::  target: 0xca40 CodeAddr: 0xca40
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xcaa0              # value ::  target: 0xcaa0 CodeAddr: 0xcaa0
Addr0xca2c:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xca44              # value ::  target: 0xca44 CodeAddr: 0xca44
Addr0xca36:
     popq     %rbx                    # reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0xca40:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xca2c              # value ::  target: 0xca2c CodeAddr: 0xca2c
Addr0xca44:
     movq     (%rbx),%rdi             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     %rax,%rsi               # reg,reg :: 
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rsi               # reg,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%r12               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310 CALLS 0x7310
     movl     %eax,%r8d               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xca36              # value ::  target: 0xca36 CodeAddr: 0xca36
     movq     0x0(%rbp),%rsi          # memOffsetBase,reg :: 
     movq     (%rbx),%rdi             # memBase,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x7310              # value ::  target: 0x7310 CodeAddr: 0x7310
Addr0xcaa0:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xca36              # value ::  target: 0xca36 CodeAddr: 0xca36

# ----------- Function 215 ------------ 
#
# startAddr  = 0xcab0
# startindex = 8260
# endAddr    = 0xcb2b
# endindex   = 8297
# len        = 124 (0x7c)
# len1       = 128 (0x80) to (0xcb2c)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xcab0:
     endbr64 
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     (%rdi),%r12             # memBase,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     0x0(%r13),%r13          # memOffsetBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xcb10              # value ::  target: 0xcb10 CodeAddr: 0xcb10
     movq     %rax,%rsi               # reg,reg :: 
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     cmoveq   %rax,%rbp               # reg,reg :: 
Addr0xcaf6:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xcb1c              # value ::  target: 0xcb1c CodeAddr: 0xcb1c
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0xcb10:
     leaq     Var0x197fe(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0xcaf6              # value ::  target: 0xcaf6 CodeAddr: 0xcaf6
Addr0xcb1c:
     popq     %rbp                    # reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80

# ----------- Function 216 ------------ 
#
# startAddr  = 0xcb30
# startindex = 8299
# endAddr    = 0xcbab
# endindex   = 8336
# len        = 124 (0x7c)
# len1       = 128 (0x80) to (0xcbac)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xcb30:
     endbr64 
     pushq    %r13                    # reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     (%rsi),%r12             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     0x0(%r13),%r13          # memOffsetBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xcb90              # value ::  target: 0xcb90 CodeAddr: 0xcb90
     movq     %rax,%rsi               # reg,reg :: 
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     cmoveq   %rax,%rbp               # reg,reg :: 
Addr0xcb76:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xcb9c              # value ::  target: 0xcb9c CodeAddr: 0xcb9c
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0xcb90:
     leaq     Var0x197fe(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0xcb76              # value ::  target: 0xcb76 CodeAddr: 0xcb76
Addr0xcb9c:
     popq     %rbp                    # reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80

# ----------- Function 217 ------------ 
#
# startAddr  = 0xcbb0
# startindex = 8338
# endAddr    = 0xcc9a
# endindex   = 8408
# len        = 235 (0xeb)
# len1       = 240 (0xf0) to (0xcc9b)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xcbb0:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     0xa8(%rdi),%eax         # memOffsetBase,reg :: 
     movl     0xa8(%rsi),%ecx         # memOffsetBase,reg :: 
     cmpl     $0x3,%eax               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     orl      %eax,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x3,%ecx               # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpl     $0x9,%ecx               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     orb      %cl,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xcc10              # value ::  target: 0xcc10 CodeAddr: 0xcc10
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xcc90              # value ::  target: 0xcc90 CodeAddr: 0xcc90
Addr0xcbf3:
     movl     $0x1,%r8d               # imm,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xcc14              # value ::  target: 0xcc14 CodeAddr: 0xcc14
Addr0xcbfd:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     %r8d,%eax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0xcc10:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xcbf3              # value ::  target: 0xcbf3 CodeAddr: 0xcbf3
Addr0xcc14:
     movq     (%rdi),%r12             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     (%rbx),%r13             # memBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     movq     %rax,%rsi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xcc78              # value ::  target: 0xcc78 CodeAddr: 0xcc78
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     cmoveq   %rax,%rbp               # reg,reg :: 
Addr0xcc4d:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     movl     %eax,%r8d               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xcbfd              # value ::  target: 0xcbfd CodeAddr: 0xcbfd
Addr0xcc5c:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r13,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     jmp      Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80
Addr0xcc78:
     leaq     Var0x197fe(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x197fe
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0xcc4d              # value ::  target: 0xcc4d CodeAddr: 0xcc4d
     jmp      Addr0xcc5c              # value ::  target: 0xcc5c CodeAddr: 0xcc5c
Addr0xcc90:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xcbfd              # value ::  target: 0xcbfd CodeAddr: 0xcbfd

# ----------- Function 218 ------------ 
#
# startAddr  = 0xcca0
# startindex = 8410
# endAddr    = 0xd3d3
# endindex   = 8815
# len        = 1844 (0x734)
# len1       = 1854 (0x73e) to (0xd3d4)
# secid      = 15
# sec name   = .text
#
# -------------------------------------------

Addr0xcca0:
     endbr64 
     pushq    %r13                    # reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movl     %edi,%ebp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x88,%rsp              # imm,reg ::  modifies flags!!
     movq     Var0x24400(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x24400
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x78(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     je       Addr0xcd01              # value ::  target: 0xcd01 CodeAddr: 0xcd01
     leaq     Var0x19dd8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19dd8
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movq     %r12,%rcx               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
Addr0xccfa:
     movl     %ebp,%edi               # reg,reg :: 
     callq    Addr0x4d00              # value ::  target: 0x4d00 CodeAddr: 0x4d00 CALLS 0x4d00
Addr0xcd01:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x19e00(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19e00
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rdx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19e28(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19e28
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19eb8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19eb8
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19f08(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19f08
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a018(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a018
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a0b8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a0b8
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a228(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a228
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a398(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a398
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a540(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a540
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a580(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a580
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1a678(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a678
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a6c8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a6c8
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a760(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a760
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a908(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a908
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1a9a0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1a9a0
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1ab08(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1ab08
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1aba0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1aba0
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1ad08(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1ad08
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1ae38(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1ae38
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1b088(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b088
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1b150(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b150
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1b358(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b358
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b3a8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b3a8
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b438(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b438
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b5b0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b5b0
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b720(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b720
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b750(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b750
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b788(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b788
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b828(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b828
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1b9a0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1b9a0
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     Var0x23288(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23288
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1bac0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bac0
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     leaq     Var0x19936(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x19936
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movl     Var0x231e0(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x231e0
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     je       Addr0xd19e              # value ::  target: 0xd19e CodeAddr: 0xd19e
     cmpl     $0x2,%eax               # imm,reg ::  modifies flags!!
     leaq     Var0x198b3(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x198b3
     leaq     Var0x198b2(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x198b2
     cmovneq  %rax,%r12               # reg,reg :: 
Addr0xd19e:
     leaq     Var0x198b7(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x198b7
     leaq     Var0x198f6(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x198f6
     movq     $0x0,0x60(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     leaq     Var0x1992f(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1992f
     leaq     Var0x19900(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x19900
     movq     %rax,0x10(%rsp)         # reg,memOffsetBase :: 
     leaq     Var0x198c7(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x198c7
     leaq     Var0x19cf3(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19cf3
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     leaq     Var0x198dd(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x198dd
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
     leaq     Var0x198e7(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x198e7
     movq     %rcx,0x30(%rsp)         # reg,memOffsetBase :: 
     leaq     Var0x1990a(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1990a
     movq     %rbx,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     %rsp,%rbx               # reg,reg :: 
     movq     %rsi,(%rsp)             # reg,memBase :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x48(%rsp)         # reg,memOffsetBase :: 
     movq     %rcx,0x50(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x58(%rsp)         # reg,memOffsetBase :: 
     movq     $0x0,0x68(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0xd23d              # value ::  target: 0xd23d CodeAddr: 0xd23d
Addr0xd230:
     movq     0x10(%rbx),%rsi         # memOffsetBase,reg :: 
     addq     $0x10,%rbx              # imm,reg ::  modifies flags!!
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xd249              # value ::  target: 0xd249 CodeAddr: 0xd249
Addr0xd23d:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xd230              # value ::  target: 0xd230 CodeAddr: 0xd230
Addr0xd249:
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x19914(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19914
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     testq    %r13,%r13               # reg,reg ::  modifies flags!!
     je       Addr0xd321              # value ::  target: 0xd321 CodeAddr: 0xd321
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     leaq     Var0x1bb58(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bb58
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1992b(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1992b
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     movl     $0x5,%edi               # imm,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x4c00              # value ::  target: 0x4c00 CodeAddr: 0x4c00 CALLS 0x4c00
     movq     %rax,%rdi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xd2b3              # value ::  target: 0xd2b3 CodeAddr: 0xd2b3
     movl     $0x3,%edx               # imm,reg :: 
     leaq     Var0x19939(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19939
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xd3aa              # value ::  target: 0xd3aa CodeAddr: 0xd3aa
Addr0xd2b3:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bbc8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bbc8
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rcx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1bb58(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bb58
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     cmpq     %r13,%r12               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x197fe
     leaq     Var0x198d1(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x198d1
     cmovneq  %rcx,%r12               # reg,reg :: 
Addr0xd2f4:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1bbe8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bbe8
     movl     $0x5,%edx               # imm,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rcx               # reg,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     jmp      Addr0xccfa              # value ::  target: 0xccfa CodeAddr: 0xccfa
Addr0xd321:
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     leaq     Var0x1bb58(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bb58
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1992b(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1992b
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     movl     $0x5,%edi               # imm,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x4c00              # value ::  target: 0x4c00 CodeAddr: 0x4c00 CALLS 0x4c00
     movq     %rax,%rdi               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xd36c              # value ::  target: 0xd36c CodeAddr: 0xd36c
     movl     $0x3,%edx               # imm,reg :: 
     leaq     Var0x19939(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19939
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xd3a7              # value ::  target: 0xd3a7 CodeAddr: 0xd3a7
Addr0xd36c:
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bbc8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bbc8
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %r12,%r13               # reg,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rcx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1bb58(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bb58
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x198d1(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x198d1
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     jmp      Addr0xd2f4              # value ::  target: 0xd2f4 CodeAddr: 0xd2f4
Addr0xd3a7:
     movq     %r12,%r13               # reg,reg :: 
Addr0xd3aa:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1bb80(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bb80
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rdx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     jmp      Addr0xd2b3              # value ::  target: 0xd2b3 CodeAddr: 0xd2b3

# ----------- Function 219 ------------ 
#
# startAddr  = 0xd3e0
# startindex = 8818
# endAddr    = 0xd4ce
# endindex   = 8887
# len        = 239 (0xef)
# len1       = 240 (0xf0) to (0xd4cf)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xd3e0:
     endbr64 
     pushq    %r15                    # reg :: 
     movl     $0x401,%eax             # imm,reg :: 
     pushq    %r14                    # reg :: 
     movabsq  $0x7ffffffffffffffe,%r14# imm,reg :: 
     pushq    %r13                    # reg :: 
     movabsq  $0x3fffffffffffffff,%r13# imm,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     leaq     0x1(%rsi),%rbx          # memOffsetBase,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     cmpq     $0x401,%rsi             # imm,reg ::  modifies flags!!
     cmovaeq  %rax,%rbx               # reg,reg :: 
Addr0xd420:
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%rbp               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xd46b              # value ::  target: 0xd46b CodeAddr: 0xd46b
Addr0xd430:
     movq     %rbx,%rdx               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4820              # value ::  target: 0x4820 CodeAddr: 0x4820 CALLS 0x4820
     movq     %rax,%r15               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xd498              # value ::  target: 0xd498 CodeAddr: 0xd498
Addr0xd446:
     cmpq     %r15,%rbx               # reg,reg ::  modifies flags!!
     ja       Addr0xd4b0              # value ::  target: 0xd4b0 CodeAddr: 0xd4b0
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     cmpq     %r13,%rbx               # reg,reg ::  modifies flags!!
     ja       Addr0xd480              # value ::  target: 0xd480 CodeAddr: 0xd480
     addq     %rbx,%rbx               # reg,reg ::  modifies flags!!
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%rbp               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xd430              # value ::  target: 0xd430 CodeAddr: 0xd430
Addr0xd46b:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rbp,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xd480:
     cmpq     %r14,%rbx               # reg,reg ::  modifies flags!!
     ja       Addr0xd4c0              # value ::  target: 0xd4c0 CodeAddr: 0xd4c0
     movabsq  $0x7fffffffffffffff,%rbx# imm,reg :: 
     jmp      Addr0xd420              # value ::  target: 0xd420 CodeAddr: 0xd420
Addr0xd498:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpl     $0x22,(%rax)            # imm,memBase ::  modifies flags!!
     je       Addr0xd446              # value ::  target: 0xd446 CodeAddr: 0xd446
     movq     %rbp,%rdi               # reg,reg :: 
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     jmp      Addr0xd46b              # value ::  target: 0xd46b CodeAddr: 0xd46b
Addr0xd4b0:
     movb     $0x0,0x0(%rbp,%r15,1)   # imm,memOffsetBaseIndexScale :: 
     jmp      Addr0xd46b              # value ::  target: 0xd46b CodeAddr: 0xd46b
Addr0xd4c0:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     movl     $0xc,(%rax)             # imm,memBase :: 
     jmp      Addr0xd46b              # value ::  target: 0xd46b CodeAddr: 0xd46b

# ----------- Function 220 ------------ 
#
# startAddr  = 0xd4d0
# startindex = 8889
# endAddr    = 0xd4dd
# endindex   = 8891
# len        = 14 (0xe)
# len1       = 16 (0x10) to (0xd4de)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0xd4d0:
     endbr64 
     movl     $0x1,%edi               # imm,reg :: 
     jmp      Addr0xcca0              # value ::  target: 0xcca0 CodeAddr: 0xcca0

# ----------- Function 221 ------------ 
#
# startAddr  = 0xd4e0
# startindex = 8893
# endAddr    = 0xd5ef
# endindex   = 8972
# len        = 272 (0x110)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0xd4e0:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     movq     %rdi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rcx,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     %rsi,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     (%rbx),%r15             # memBase,reg :: 
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0xd5e6              # value ::  target: 0xd5e6 CodeAddr: 0xd5e6
     movb     $0x0,0x17(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,%r12               # reg,reg :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     movq     $0xffffffffffffffff,(%rsp)# imm,memBase :: 
     jmp      Addr0xd578              # value ::  target: 0xd578 CodeAddr: 0xd578
Addr0xd530:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xd5a8              # value ::  target: 0xd5a8 CodeAddr: 0xd5a8
     movq     (%rsp),%rdi             # memBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     imulq    %r13,%rdi               # reg,reg ::  modifies flags!!
     addq     %rax,%rdi               # reg,reg ::  modifies flags!!
     callq    Addr0x4a30              # value ::  target: 0x4a30 CodeAddr: 0x4a30 CALLS 0x4a30
     movl     $0x1,%ecx               # imm,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     movzbl   0x17(%rsp),%eax         # memOffsetBase,reg :: 
     cmovnel  %ecx,%eax               # reg,reg :: 
     movb     %al,0x17(%rsp)          # reg,memOffsetBase :: 
Addr0xd563:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     addq     %r13,%rbp               # reg,reg ::  modifies flags!!
     movq     (%rax,%rbx,8),%r15      # memBaseIndexScale,reg :: 
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0xd5b0              # value ::  target: 0xd5b0 CodeAddr: 0xd5b0
Addr0xd578:
     movq     %r12,%rdx               # reg,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xd563              # value ::  target: 0xd563 CodeAddr: 0xd563
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpq     %r12,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xd5e0              # value ::  target: 0xd5e0 CodeAddr: 0xd5e0
     cmpq     $0xffffffffffffffff,(%rsp)# imm,memBase ::  modifies flags!!
     jne      Addr0xd530              # value ::  target: 0xd530 CodeAddr: 0xd530
     movq     %rbx,(%rsp)             # reg,memBase :: 
     jmp      Addr0xd563              # value ::  target: 0xd563 CodeAddr: 0xd563
Addr0xd5a8:
     movb     $0x1,0x17(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0xd563              # value ::  target: 0xd563 CodeAddr: 0xd563
Addr0xd5b0:
     cmpb     $0x0,0x17(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     $0xfffffffffffffffe,%rax# imm,reg :: 
     cmoveq   (%rsp),%rax             # memBase,reg :: 
     movq     %rax,(%rsp)             # reg,memBase :: 
Addr0xd5c5:
     movq     (%rsp),%rax             # memBase,reg :: 
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xd5e0:
     movq     %rbx,(%rsp)             # reg,memBase :: 
     jmp      Addr0xd5c5              # value ::  target: 0xd5c5 CodeAddr: 0xd5c5
Addr0xd5e6:
     movq     $0xffffffffffffffff,(%rsp)# imm,memBase :: 
     jmp      Addr0xd5c5              # value ::  target: 0xd5c5 CodeAddr: 0xd5c5

# ----------- Function 222 ------------ 
#
# startAddr  = 0xd5f0
# startindex = 8973
# endAddr    = 0xd672
# endindex   = 9013
# len        = 131 (0x83)
# len1       = 142 (0x8e) to (0xd673)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0xd5f0:
     endbr64 
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     cmpq     $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     je       Addr0xd660              # value ::  target: 0xd660 CodeAddr: 0xd660
     leaq     Var0x1be60(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1be60
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rax,%r12               # reg,reg :: 
Addr0xd620:
     movq     %rbp,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     callq    Addr0x15020             # value ::  target: 0x15020 CodeAddr: 0x15020 CALLS 0x15020
     movq     %r13,%rdx               # reg,reg :: 
     movl     $0x8,%esi               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x14c10             # value ::  target: 0x14c10 CodeAddr: 0x14c10 CALLS 0x14c10
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     popq     %rbx                    # reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     popq     %rbp                    # reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     popq     %r12                    # reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %r13                    # reg :: 
     jmp      Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60
Addr0xd660:
     leaq     Var0x1be45(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1be45
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rax,%r12               # reg,reg :: 
     jmp      Addr0xd620              # value ::  target: 0xd620 CodeAddr: 0xd620

# ----------- Function 223 ------------ 
#
# startAddr  = 0xd680
# startindex = 9016
# endAddr    = 0xd7a7
# endindex   = 9101
# len        = 296 (0x128)
# len1       = 304 (0x130) to (0xd7a8)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xd680:
     endbr64 
     pushq    %r15                    # reg :: 
     leaq     Var0x1be92(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x1be92
     pushq    %r14                    # reg :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     pushq    %r13                    # reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     leaq     Var0x1be7d(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1be7d
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     Var0x232c0(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movq     %rdi,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     movq     (%rbx),%r12             # memBase,reg :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     jne      Addr0xd719              # value ::  target: 0xd719 CodeAddr: 0xd719
     jmp      Addr0xd760              # value ::  target: 0xd760 CodeAddr: 0xd760
Addr0xd6e0:
     movq     %r12,%rdi               # reg,reg :: 
     movq     %rbp,%r14               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movq     %r15,%rdx               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
Addr0xd704:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     addq     %r13,%rbp               # reg,reg ::  modifies flags!!
     movq     (%rax,%rbx,8),%r12      # memBaseIndexScale,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0xd760              # value ::  target: 0xd760 CodeAddr: 0xd760
Addr0xd719:
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xd6e0              # value ::  target: 0xd6e0 CodeAddr: 0xd6e0
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x4a30              # value ::  target: 0x4a30 CodeAddr: 0x4a30 CALLS 0x4a30
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xd6e0              # value ::  target: 0xd6e0 CodeAddr: 0xd6e0
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x1be9a(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9a
     movq     %rax,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     jmp      Addr0xd704              # value ::  target: 0xd704 CodeAddr: 0xd704
Addr0xd760:
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movq     0x28(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     0x30(%rdi),%rax         # memOffsetBase,reg ::  modifies flags!!
     jae      Addr0xd790              # value ::  target: 0xd790 CodeAddr: 0xd790
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x28(%rdi)         # reg,memOffsetBase :: 
     movb     $0xa,(%rax)             # imm,memBase :: 
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xd790:
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movl     $0xa,%esi               # imm,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4950              # value ::  target: 0x4950 CodeAddr: 0x4950

# ----------- Function 224 ------------ 
#
# startAddr  = 0xd7b0
# startindex = 9103
# endAddr    = 0xd826
# endindex   = 9143
# len        = 119 (0x77)
# len1       = 128 (0x80) to (0xd827)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xd7b0:
     endbr64 
     pushq    %r15                    # reg :: 
     movq     %rsi,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     %r8,%r14                # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rcx,%r12               # reg,reg :: 
     movq     %r8,%rcx                # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r9,%rbx                # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0xd4e0              # value ::  target: 0xd4e0 CodeAddr: 0xd4e0 CALLS 0xd4e0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xd800              # value ::  target: 0xd800 CodeAddr: 0xd800
Addr0xd7ea:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xd800:
     movq     %rax,%rdx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0xd5f0              # value ::  target: 0xd5f0 CodeAddr: 0xd5f0 CALLS 0xd5f0
     movq     %r14,%rdx               # reg,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0xd680              # value ::  target: 0xd680 CodeAddr: 0xd680 CALLS 0xd680
     callq    *%rbx                   # reg :: "*%rbx" != "%rbx" no target? 
#{'addr': 55324, 'op': 'callq', 'args': [Arg(argText='%rbx', star='*', offset=None, imm=None, reg='%rbx', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 9141, 'size': 2}
     movq     $0xffffffffffffffff,%rax# imm,reg :: 
     jmp      Addr0xd7ea              # value ::  target: 0xd7ea CodeAddr: 0xd7ea

# ----------- Function 225 ------------ 
#
# startAddr  = 0xd830
# startindex = 9145
# endAddr    = 0xd884
# endindex   = 9177
# len        = 85 (0x55)
# len1       = 95 (0x5f) to (0xd885)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xd830:
     endbr64 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     (%rsi),%r14             # memBase,reg :: 
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xd879              # value ::  target: 0xd879 CodeAddr: 0xd879
     movq     %rdi,%r12               # reg,reg :: 
     movq     %rcx,%r13               # reg,reg :: 
     leaq     0x8(%rsi),%rbx          # memOffsetBase,reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     jmp      Addr0xd867              # value ::  target: 0xd867 CodeAddr: 0xd867
Addr0xd858:
     movq     (%rbx),%r14             # memBase,reg :: 
     addq     %r13,%rbp               # reg,reg ::  modifies flags!!
     addq     $0x8,%rbx               # imm,reg ::  modifies flags!!
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xd879              # value ::  target: 0xd879 CodeAddr: 0xd879
Addr0xd867:
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4a30              # value ::  target: 0x4a30 CodeAddr: 0x4a30 CALLS 0x4a30
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xd858              # value ::  target: 0xd858 CodeAddr: 0xd858
Addr0xd879:
     popq     %rbx                    # reg :: 
     movq     %r14,%rax               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    

# ----------- Function 226 ------------ 
#
# startAddr  = 0xd890
# startindex = 9180
# endAddr    = 0xd8fa
# endindex   = 9214
# len        = 107 (0x6b)
# len1       = 112 (0x70) to (0xd8fb)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xd890:
     endbr64 
     cmpq     %rsi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0xd8f8              # value ::  target: 0xd8f8 CodeAddr: 0xd8f8
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xd8f8              # value ::  target: 0xd8f8 CodeAddr: 0xd8f8
     leaq     -0x1(%rdx),%r10         # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     jmp      Addr0xd8bd              # value ::  target: 0xd8bd CodeAddr: 0xd8bd
Addr0xd8b0:
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xd8f1              # value ::  target: 0xd8f1 CodeAddr: 0xd8f1
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     cmpb     %cl,%r8b                # reg,reg ::  modifies flags!!
     jne      Addr0xd8f1              # value ::  target: 0xd8f1 CodeAddr: 0xd8f1
Addr0xd8bd:
     movzbl   (%rdi,%rdx,1),%eax      # memBaseIndexScale,reg :: 
     leal     -0x41(%rax),%ecx        # memOffsetBase,reg :: 
     movl     %eax,%r8d               # reg,reg :: 
     cmpl     $0x19,%ecx              # imm,reg ::  modifies flags!!
     ja       Addr0xd8d3              # value ::  target: 0xd8d3 CodeAddr: 0xd8d3
     addl     $0x20,%eax              # imm,reg ::  modifies flags!!
     addl     $0x20,%r8d              # imm,reg ::  modifies flags!!
Addr0xd8d3:
     movzbl   (%rsi,%rdx,1),%r9d      # memBaseIndexScale,reg :: 
     leal     -0x41(%r9),%r11d        # memOffsetBase,reg :: 
     movl     %r9d,%ecx               # reg,reg :: 
     cmpl     $0x19,%r11d             # imm,reg ::  modifies flags!!
     ja       Addr0xd8ec              # value ::  target: 0xd8ec CodeAddr: 0xd8ec
     addl     $0x20,%r9d              # imm,reg ::  modifies flags!!
     addl     $0x20,%ecx              # imm,reg ::  modifies flags!!
Addr0xd8ec:
     cmpq     %r10,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0xd8b0              # value ::  target: 0xd8b0 CodeAddr: 0xd8b0
Addr0xd8f1:
     subl     %r9d,%eax               # reg,reg ::  modifies flags!!
     retq    
Addr0xd8f8:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     retq    

# ----------- Function 227 ------------ 
#
# startAddr  = 0xd900
# startindex = 9216
# endAddr    = 0xdfbd
# endindex   = 9610
# len        = 1726 (0x6be)
# len1       = 1728 (0x6c0) to (0xdfbe)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xd900:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movl     %esi,%ebp               # reg,reg :: 
     andl     $0x3,%esi               # imm,reg ::  modifies flags!!
     pushq    %rbx                    # reg :: 
     subq     $0xe8,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0xd8(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leal     -0x1(%rsi),%eax         # memOffsetBase,reg :: 
     movl     %esi,0x14(%rsp)         # reg,memOffsetBase :: 
     testl    %eax,%esi               # reg,reg ::  modifies flags!!
     jne      Addr0xde10              # value ::  target: 0xde10 CodeAddr: 0xde10
     movq     %rdi,%r15               # reg,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0xde10              # value ::  target: 0xde10 CodeAddr: 0xde10
     movzbl   (%rdi),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xdec8              # value ::  target: 0xdec8 CodeAddr: 0xdec8
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     je       Addr0xdb7c              # value ::  target: 0xdb7c CodeAddr: 0xdb7c
     callq    Addr0x15ca0             # value ::  target: 0x15ca0 CodeAddr: 0x15ca0 CALLS 0x15ca0
     movq     %rax,%r14               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xdb50              # value ::  target: 0xdb50 CodeAddr: 0xdb50
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rax,%r13               # reg,reg :: 
     cmpq     $0xfff,%rax             # imm,reg ::  modifies flags!!
     jbe      Addr0xdedb              # value ::  target: 0xdedb CodeAddr: 0xdedb
     addq     %r14,%r13               # reg,reg ::  modifies flags!!
     movq     %r13,%rbx               # reg,reg :: 
Addr0xd989:
     movzbl   (%r15),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xdfa2              # value ::  target: 0xdfa2 CodeAddr: 0xdfa2
Addr0xd995:
     movq     %r15,0x28(%rsp)         # reg,memOffsetBase :: 
     andl     $0x4,%ebp               # imm,reg ::  modifies flags!!
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x38(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     movl     %ebp,0x24(%rsp)         # reg,memOffsetBase :: 
     movq     %r13,%rbp               # reg,reg :: 
     movq     %r15,%r13               # reg,reg :: 
     setne    0x23(%rsp)              # memOffsetBase :: 
Addr0xd9d0:
     movl     %eax,%ecx               # reg,reg :: 
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     jne      Addr0xd9f6              # value ::  target: 0xd9f6 CodeAddr: 0xd9f6
Addr0xd9e0:
     movzbl   0x1(%r13),%ecx          # memOffsetBase,reg :: 
     addq     $0x1,%r13               # imm,reg ::  modifies flags!!
     cmpb     $0x2f,%cl               # imm,reg ::  modifies flags!!
     je       Addr0xd9e0              # value ::  target: 0xd9e0 CodeAddr: 0xd9e0
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xdaf0              # value ::  target: 0xdaf0 CodeAddr: 0xdaf0
Addr0xd9f6:
     movq     %r13,%r15               # reg,reg :: 
Addr0xda00:
     movq     %r15,%r12               # reg,reg :: 
     movzbl   0x1(%r15),%eax          # memOffsetBase,reg :: 
     addq     $0x1,%r15               # imm,reg ::  modifies flags!!
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xda14              # value ::  target: 0xda14 CodeAddr: 0xda14
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     jne      Addr0xda00              # value ::  target: 0xda00 CodeAddr: 0xda00
Addr0xda14:
     cmpq     %r13,%r15               # reg,reg ::  modifies flags!!
     je       Addr0xdaf0              # value ::  target: 0xdaf0 CodeAddr: 0xdaf0
     movq     %r15,%rdx               # reg,reg :: 
     subq     %r13,%rdx               # reg,reg ::  modifies flags!!
     cmpq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     je       Addr0xdc70              # value ::  target: 0xdc70 CodeAddr: 0xdc70
     cmpq     $0x2,%rdx               # imm,reg ::  modifies flags!!
     jne      Addr0xda3c              # value ::  target: 0xda3c CodeAddr: 0xda3c
     cmpb     $0x2e,%cl               # imm,reg ::  modifies flags!!
     je       Addr0xddc8              # value ::  target: 0xddc8 CodeAddr: 0xddc8
Addr0xda3c:
     cmpb     $0x2f,-0x1(%rbp)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xda4a              # value ::  target: 0xda4a CodeAddr: 0xda4a
     movb     $0x2f,0x0(%rbp)         # imm,memOffsetBase :: 
     addq     $0x1,%rbp               # imm,reg ::  modifies flags!!
Addr0xda4a:
     leaq     0x0(%rbp,%rdx,1),%rax   # memOffsetBaseIndexScale,reg :: 
     cmpq     %rax,%rbx               # reg,reg ::  modifies flags!!
     ja       Addr0xda8f              # value ::  target: 0xda8f CodeAddr: 0xda8f
     subq     %r14,%rbx               # reg,reg ::  modifies flags!!
     subq     %r14,%rbp               # reg,reg ::  modifies flags!!
     movq     %r14,%rdi               # reg,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     leaq     0x1(%rdx,%rbx,1),%rax   # memOffsetBaseIndexScale,reg :: 
     addq     $0x1000,%rbx            # imm,reg ::  modifies flags!!
     cmpq     $0x1000,%rdx            # imm,reg ::  modifies flags!!
     cmovgeq  %rax,%rbx               # reg,reg :: 
     movq     %rbx,%rsi               # reg,reg :: 
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
     addq     %rax,%rbp               # reg,reg ::  modifies flags!!
Addr0xda8f:
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     cmpl     $0x2,0x14(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     leaq     0x0(%rbp,%rdx,1),%rbp   # memOffsetBaseIndexScale,reg :: 
     movb     $0x0,0x0(%rbp)          # imm,memOffsetBase :: 
     jne      Addr0xdbc0              # value ::  target: 0xdbc0 CodeAddr: 0xdbc0
     cmpb     $0x0,0x23(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xdbc0              # value ::  target: 0xdbc0 CodeAddr: 0xdbc0
Addr0xdac3:
     movl     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
Addr0xdacb:
     cmpb     $0x0,(%r15)             # imm,memBase ::  modifies flags!!
     je       Addr0xdadc              # value ::  target: 0xdadc CodeAddr: 0xdadc
     cmpl     $0x2,0x14(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0xdf90              # value ::  target: 0xdf90 CodeAddr: 0xdf90
Addr0xdadc:
     movzbl   (%r15),%eax             # memBase,reg :: 
     movq     %r15,%r13               # reg,reg :: 
Addr0xdae3:
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xd9d0              # value ::  target: 0xd9d0 CodeAddr: 0xd9d0
Addr0xdaf0:
     movq     %rbp,%r13               # reg,reg :: 
Addr0xdaf3:
     leaq     0x1(%r14),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r13               # reg,reg ::  modifies flags!!
     jbe      Addr0xdb07              # value ::  target: 0xdb07 CodeAddr: 0xdb07
     cmpb     $0x2f,-0x1(%r13)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xdf58              # value ::  target: 0xdf58 CodeAddr: 0xdf58
Addr0xdb07:
     leaq     0x1(%r13),%rax          # memOffsetBase,reg :: 
Addr0xdb0b:
     movb     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     cmpq     %rbx,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xdb2a              # value ::  target: 0xdb2a CodeAddr: 0xdb2a
     movq     %r13,%r9                # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     subq     %r14,%r9                # reg,reg ::  modifies flags!!
     leaq     0x1(%r9),%rsi           # memOffsetBase,reg :: 
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     %rax,%r14               # reg,reg :: 
Addr0xdb2a:
     movq     0x30(%rsp),%rdi         # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xdb50              # value ::  target: 0xdb50 CodeAddr: 0xdb50
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0xf680              # value ::  target: 0xf680 CodeAddr: 0xf680 CALLS 0xf680
Addr0xdb50:
     movq     0xd8(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xdfb9              # value ::  target: 0xdfb9 CodeAddr: 0xdfb9
     addq     $0xe8,%rsp              # imm,reg ::  modifies flags!!
     movq     %r14,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xdb7c:
     movl     $0x1000,%edi            # imm,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movb     $0x2f,(%rax)            # imm,memBase :: 
     movq     %rax,%r14               # reg,reg :: 
     leaq     0x1000(%rax),%rbx       # memOffsetBase,reg :: 
     leaq     0x1(%rax),%r13          # memOffsetBase,reg :: 
     movzbl   (%r15),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xd995              # value ::  target: 0xd995 CodeAddr: 0xd995
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0xdb07              # value ::  target: 0xdb07 CodeAddr: 0xdb07
Addr0xdbc0:
     movl     0x24(%rsp),%eax         # memOffsetBase,reg :: 
     leaq     0x40(%rsp),%r13         # memOffsetBase,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xdc88              # value ::  target: 0xdc88 CodeAddr: 0xdc88
     callq    Addr0x4b40              # value ::  target: 0x4b40 CodeAddr: 0x4b40 CALLS 0x4b40
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
Addr0xdbe6:
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xdc48              # value ::  target: 0xdc48 CodeAddr: 0xdc48
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     (%rax),%edx             # memBase,reg :: 
     movq     %rax,%r13               # reg,reg :: 
     movl     0x14(%rsp),%eax         # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xde60              # value ::  target: 0xde60 CodeAddr: 0xde60
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     jne      Addr0xdac3              # value ::  target: 0xdac3 CodeAddr: 0xdac3
     leaq     Var0x19b03(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x19b03
     movq     %r15,%rdi               # reg,reg :: 
     movl     %edx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4a10              # value ::  target: 0x4a10 CodeAddr: 0x4a10 CALLS 0x4a10
     movl     0x8(%rsp),%edx          # memOffsetBase,reg :: 
     cmpb     $0x0,(%r15,%rax,1)      # imm,memBaseIndexScale ::  modifies flags!!
     jne      Addr0xde60              # value ::  target: 0xde60 CodeAddr: 0xde60
     cmpl     $0x2,%edx               # imm,reg ::  modifies flags!!
     jne      Addr0xde60              # value ::  target: 0xde60 CodeAddr: 0xde60
Addr0xdc34:
     movzbl   0x1(%r12),%eax          # memOffsetBase,reg :: 
     movq     %r15,%r13               # reg,reg :: 
     jmp      Addr0xdae3              # value ::  target: 0xdae3 CodeAddr: 0xdae3
Addr0xdc48:
     movl     0x58(%rsp),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0xa000,%eax            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     je       Addr0xdca0              # value ::  target: 0xdca0 CodeAddr: 0xdca0
     cmpl     $0x4000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0xdadc              # value ::  target: 0xdadc CodeAddr: 0xdadc
     jmp      Addr0xdacb              # value ::  target: 0xdacb CodeAddr: 0xdacb
Addr0xdc70:
     cmpb     $0x2e,%cl               # imm,reg ::  modifies flags!!
     jne      Addr0xda3c              # value ::  target: 0xda3c CodeAddr: 0xda3c
Addr0xdc79:
     movq     %r15,%r13               # reg,reg :: 
     jmp      Addr0xdae3              # value ::  target: 0xdae3 CodeAddr: 0xdae3
Addr0xdc88:
     callq    Addr0x48d0              # value ::  target: 0x48d0 CodeAddr: 0x48d0 CALLS 0x48d0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     jmp      Addr0xdbe6              # value ::  target: 0xdbe6 CodeAddr: 0xdbe6
Addr0xdca0:
     cmpq     $0x0,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xde23              # value ::  target: 0xde23 CodeAddr: 0xde23
Addr0xdcac:
     movq     0x28(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     callq    Addr0xe320              # value ::  target: 0xe320 CodeAddr: 0xe320 CALLS 0xe320
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xdd75              # value ::  target: 0xdd75 CodeAddr: 0xdd75
     movq     0x28(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     callq    Addr0xe290              # value ::  target: 0xe290 CodeAddr: 0xe290 CALLS 0xe290
     movq     0x70(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0xd3e0              # value ::  target: 0xd3e0 CodeAddr: 0xd3e0 CALLS 0xd3e0
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xdefa              # value ::  target: 0xdefa CodeAddr: 0xdefa
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     cmpq     $0x0,0x38(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     je       Addr0xde90              # value ::  target: 0xde90 CodeAddr: 0xde90
     leaq     0x1(%r12,%rax,1),%rcx   # memOffsetBaseIndexScale,reg :: 
     cmpq     0x38(%rsp),%rcx         # memOffsetBase,reg ::  modifies flags!!
     ja       Addr0xdf28              # value ::  target: 0xdf28 CodeAddr: 0xdf28
Addr0xdd23:
     movq     0x30(%rsp),%rax         # memOffsetBase,reg :: 
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movq     %r15,%rsi               # reg,reg :: 
     leaq     (%rax,%r12,1),%rdi      # memBaseIndexScale,reg :: 
     callq    Addr0x4c50              # value ::  target: 0x4c50 CodeAddr: 0x4c50 CALLS 0x4c50
     movq     0x30(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     cmpb     $0x2f,0x0(%r13)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,%r15               # reg,reg :: 
     leaq     0x1(%r14),%rax          # memOffsetBase,reg :: 
     je       Addr0xdf1c              # value ::  target: 0xdf1c CodeAddr: 0xdf1c
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     ja       Addr0xdf64              # value ::  target: 0xdf64 CodeAddr: 0xdf64
Addr0xdd68:
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     jmp      Addr0xdadc              # value ::  target: 0xdadc CodeAddr: 0xdadc
Addr0xdd75:
     cmpl     $0x2,0x14(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xdc34              # value ::  target: 0xdc34 CodeAddr: 0xdc34
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x28,%edx              # imm,reg :: 
     movq     %rax,%r15               # reg,reg :: 
Addr0xdd8d:
     movq     0x30(%rsp),%rdi         # memOffsetBase,reg :: 
     movl     %edx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movl     0x8(%rsp),%edx          # memOffsetBase,reg :: 
Addr0xdda7:
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     movl     %edx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0xf680              # value ::  target: 0xf680 CodeAddr: 0xf680 CALLS 0xf680
     movl     0x8(%rsp),%edx          # memOffsetBase,reg :: 
Addr0xddb9:
     movl     %edx,(%r15)             # reg,memBase :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     jmp      Addr0xdb50              # value ::  target: 0xdb50 CodeAddr: 0xdb50
Addr0xddc8:
     cmpb     $0x2e,0x1(%r13)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0xda3c              # value ::  target: 0xda3c CodeAddr: 0xda3c
     leaq     0x1(%r14),%rdx          # memOffsetBase,reg :: 
     movq     %r15,%r13               # reg,reg :: 
     cmpq     %rdx,%rbp               # reg,reg ::  modifies flags!!
     jbe      Addr0xdae3              # value ::  target: 0xdae3 CodeAddr: 0xdae3
     subq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     cmpq     %r14,%rbp               # reg,reg ::  modifies flags!!
     jbe      Addr0xdae3              # value ::  target: 0xdae3 CodeAddr: 0xdae3
Addr0xddf0:
     cmpb     $0x2f,-0x1(%rbp)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xdc79              # value ::  target: 0xdc79 CodeAddr: 0xdc79
     subq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     cmpq     %r14,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0xddf0              # value ::  target: 0xddf0 CodeAddr: 0xddf0
     jmp      Addr0xdc79              # value ::  target: 0xdc79 CodeAddr: 0xdc79
Addr0xde10:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     movl     $0x16,(%rax)            # imm,memBase :: 
     jmp      Addr0xdb50              # value ::  target: 0xdb50 CodeAddr: 0xdb50
Addr0xde23:
     leaq     Addr0xfec0(%rip),%r8    # memOffsetBase,reg ::  CodeAddr: 0xfec0
     leaq     Addr0xfe80(%rip),%rcx   # memOffsetBase,reg ::  CodeAddr: 0xfe80
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     $0x7,%edi               # imm,reg :: 
     leaq     Addr0xfe00(%rip),%rdx   # memOffsetBase,reg ::  CodeAddr: 0xfe00
     callq    Addr0xf4c0              # value ::  target: 0xf4c0 CodeAddr: 0xf4c0 CALLS 0xf4c0
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xdcac              # value ::  target: 0xdcac CodeAddr: 0xdcac
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30
Addr0xde60:
     movq     %r13,%r15               # reg,reg :: 
Addr0xde63:
     movq     0x30(%rsp),%rdi         # memOffsetBase,reg :: 
     movl     %edx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     cmpq     $0x0,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     0x8(%rsp),%edx          # memOffsetBase,reg :: 
     je       Addr0xddb9              # value ::  target: 0xddb9 CodeAddr: 0xddb9
     jmp      Addr0xdda7              # value ::  target: 0xdda7 CodeAddr: 0xdda7
Addr0xde90:
     leaq     0x1(%r12,%rax,1),%rax   # memOffsetBaseIndexScale,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,%rdi               # reg,reg :: 
     cmpq     $0x1000,%rax            # imm,reg ::  modifies flags!!
     movl     $0x1000,%eax            # imm,reg :: 
     cmovaeq  %rdi,%rax               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0xdd23              # value ::  target: 0xdd23 CodeAddr: 0xdd23
Addr0xdec8:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     movl     $0x2,(%rax)             # imm,memBase :: 
     jmp      Addr0xdb50              # value ::  target: 0xdb50 CodeAddr: 0xdb50
Addr0xdedb:
     movq     %r14,%rdi               # reg,reg :: 
     movl     $0x1000,%esi            # imm,reg :: 
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     %rax,%r14               # reg,reg :: 
     addq     %rax,%r13               # reg,reg ::  modifies flags!!
     leaq     0x1000(%rax),%rbx       # memOffsetBase,reg :: 
     jmp      Addr0xd989              # value ::  target: 0xd989 CodeAddr: 0xd989
Addr0xdefa:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpl     $0x2,0x14(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     (%rax),%edx             # memBase,reg :: 
     movq     %rax,%r13               # reg,reg :: 
     jne      Addr0xdf14              # value ::  target: 0xdf14 CodeAddr: 0xdf14
     cmpl     $0xc,%edx               # imm,reg ::  modifies flags!!
     jne      Addr0xdc34              # value ::  target: 0xdc34 CodeAddr: 0xdc34
Addr0xdf14:
     movq     %r13,%r15               # reg,reg :: 
     jmp      Addr0xdd8d              # value ::  target: 0xdd8d CodeAddr: 0xdd8d
Addr0xdf1c:
     movb     $0x2f,(%r14)            # imm,memBase :: 
     movq     %rax,%rbp               # reg,reg :: 
     jmp      Addr0xdd68              # value ::  target: 0xdd68 CodeAddr: 0xdd68
Addr0xdf28:
     movq     0x30(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %rcx,%rsi               # reg,reg :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     movq     0x28(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     movq     %rcx,0x38(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0xdd23              # value ::  target: 0xdd23 CodeAddr: 0xdd23
Addr0xdf58:
     movq     %r13,%rax               # reg,reg :: 
     subq     $0x1,%r13               # imm,reg ::  modifies flags!!
     jmp      Addr0xdb0b              # value ::  target: 0xdb0b CodeAddr: 0xdb0b
Addr0xdf64:
     subq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     cmpq     %rbp,%r14               # reg,reg ::  modifies flags!!
     jae      Addr0xdd68              # value ::  target: 0xdd68 CodeAddr: 0xdd68
Addr0xdf71:
     cmpb     $0x2f,-0x1(%rbp)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xdd68              # value ::  target: 0xdd68 CodeAddr: 0xdd68
     subq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     cmpq     %rbp,%r14               # reg,reg ::  modifies flags!!
     jne      Addr0xdf71              # value ::  target: 0xdf71 CodeAddr: 0xdf71
     jmp      Addr0xdd68              # value ::  target: 0xdd68 CodeAddr: 0xdd68
Addr0xdf90:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x14,%edx              # imm,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     jmp      Addr0xde63              # value ::  target: 0xde63 CodeAddr: 0xde63
Addr0xdfa2:
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0xdaf3              # value ::  target: 0xdaf3 CodeAddr: 0xdaf3
Addr0xdfb9:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 228 ------------ 
#
# startAddr  = 0xdfc0
# startindex = 9612
# endAddr    = 0xdfcb
# endindex   = 9614
# len        = 12 (0xc)
# len1       = 16 (0x10) to (0xdfcc)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xdfc0:
     endbr64 
     movq     %rdi,Var0x243d8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243d8
     retq    

# ----------- Function 229 ------------ 
#
# startAddr  = 0xdfd0
# startindex = 9616
# endAddr    = 0xdfdb
# endindex   = 9618
# len        = 12 (0xc)
# len1       = 16 (0x10) to (0xdfdc)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xdfd0:
     endbr64 
     movb     %dil,Var0x243d0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243d0
     retq    

# ----------- Function 230 ------------ 
#
# startAddr  = 0xdfe0
# startindex = 9620
# endAddr    = 0xe089
# endindex   = 9666
# len        = 170 (0xaa)
# len1       = 176 (0xb0) to (0xe08a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xdfe0:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     Var0x23288(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23288
     callq    Addr0x17270             # value ::  target: 0x17270 CodeAddr: 0x17270 CALLS 0x17270
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xe011              # value ::  target: 0xe011 CodeAddr: 0xe011
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpb     $0x0,Var0x243d0(%rip)   # imm,memOffsetBase ::  DataAddr: 0x243d0 modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     je       Addr0xe029              # value ::  target: 0xe029 CodeAddr: 0xe029
     cmpl     $0x20,(%rax)            # imm,memBase ::  modifies flags!!
     jne      Addr0xe029              # value ::  target: 0xe029 CodeAddr: 0xe029
Addr0xe011:
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     callq    Addr0x17270             # value ::  target: 0x17270 CodeAddr: 0x17270 CALLS 0x17270
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xe068              # value ::  target: 0xe068 CodeAddr: 0xe068
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0xe029:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1be9f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1be9f
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     Var0x243d8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x243d8
     movq     %rax,%r12               # reg,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0xe073              # value ::  target: 0xe073 CodeAddr: 0xe073
     callq    Addr0x14e30             # value ::  target: 0x14e30 CodeAddr: 0x14e30 CALLS 0x14e30
     movl     (%rbx),%esi             # memBase,reg :: 
     movq     %r12,%r8                # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,%rcx               # reg,reg :: 
     leaq     Var0x1998c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1998c
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
Addr0xe068:
     movl     Var0x231f8(%rip),%edi   # memOffsetBase,reg ::  DataAddr: 0x231f8
     callq    Addr0x4790              # value ::  target: 0x4790 CodeAddr: 0x4790 CALLS 0x4790
Addr0xe073:
     movl     (%rbx),%esi             # memBase,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     leaq     Var0x1be9c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9c
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0xe068              # value ::  target: 0xe068 CodeAddr: 0xe068

# ----------- Function 231 ------------ 
#
# startAddr  = 0xe090
# startindex = 9668
# endAddr    = 0xe0c9
# endindex   = 9688
# len        = 58 (0x3a)
# len1       = 64 (0x40) to (0xe0ca)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe090:
     endbr64 
     pushq    %rbp                    # reg :: 
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     cmpb     $0x2f,(%rdi)            # imm,memBase ::  modifies flags!!
     sete     %bpl                    # reg :: 
     callq    Addr0xe140              # value ::  target: 0xe140 CodeAddr: 0xe140 CALLS 0xe140
     subq     %rbx,%rax               # reg,reg ::  modifies flags!!
     jmp      Addr0xe0be              # value ::  target: 0xe0be CodeAddr: 0xe0be
Addr0xe0b0:
     cmpb     $0x2f,-0x1(%rbx,%rax,1) # imm,memOffsetBaseIndexScale ::  modifies flags!!
     leaq     -0x1(%rax),%rdx         # memOffsetBase,reg :: 
     jne      Addr0xe0c3              # value ::  target: 0xe0c3 CodeAddr: 0xe0c3
     movq     %rdx,%rax               # reg,reg :: 
Addr0xe0be:
     cmpq     %rbp,%rax               # reg,reg ::  modifies flags!!
     ja       Addr0xe0b0              # value ::  target: 0xe0b0 CodeAddr: 0xe0b0
Addr0xe0c3:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    

# ----------- Function 232 ------------ 
#
# startAddr  = 0xe0d0
# startindex = 9690
# endAddr    = 0xe131
# endindex   = 9721
# len        = 98 (0x62)
# len1       = 108 (0x6c) to (0xe132)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe0d0:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0xe090              # value ::  target: 0xe090 CodeAddr: 0xe090 CALLS 0xe090
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     sete     %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     leaq     0x1(%rbx,%rax,1),%rdi   # memOffsetBaseIndexScale,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%r8                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xe11b              # value ::  target: 0xe11b CodeAddr: 0xe11b
     movq     %rbx,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     %rax,%r8                # reg,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xe128              # value ::  target: 0xe128 CodeAddr: 0xe128
Addr0xe116:
     movb     $0x0,(%r8,%rbx,1)       # imm,memBaseIndexScale :: 
Addr0xe11b:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0xe128:
     movb     $0x2e,(%rax)            # imm,memBase :: 
     movl     $0x1,%ebx               # imm,reg :: 
     jmp      Addr0xe116              # value ::  target: 0xe116 CodeAddr: 0xe116

# ----------- Function 233 ------------ 
#
# startAddr  = 0xe140
# startindex = 9724
# endAddr    = 0xe19c
# endindex   = 9755
# len        = 93 (0x5d)
# len1       = 96 (0x60) to (0xe19d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe140:
     endbr64 
     movzbl   (%rdi),%edx             # memBase,reg :: 
     movq     %rdi,%rax               # reg,reg :: 
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0xe15d              # value ::  target: 0xe15d CodeAddr: 0xe15d
Addr0xe150:
     movzbl   0x1(%rax),%edx          # memOffsetBase,reg :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     je       Addr0xe150              # value ::  target: 0xe150 CodeAddr: 0xe150
Addr0xe15d:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xe19c              # value ::  target: 0xe19c CodeAddr: 0xe19c
     movq     %rax,%rcx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     jmp      Addr0xe186              # value ::  target: 0xe186 CodeAddr: 0xe186
Addr0xe170:
     testb    %sil,%sil               # reg,reg ::  modifies flags!!
     je       Addr0xe17a              # value ::  target: 0xe17a CodeAddr: 0xe17a
     movq     %rcx,%rax               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
Addr0xe17a:
     movzbl   0x1(%rcx),%edx          # memOffsetBase,reg :: 
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xe19c              # value ::  target: 0xe19c CodeAddr: 0xe19c
Addr0xe186:
     cmpb     $0x2f,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0xe170              # value ::  target: 0xe170 CodeAddr: 0xe170
     movzbl   0x1(%rcx),%edx          # memOffsetBase,reg :: 
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     movl     $0x1,%esi               # imm,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xe186              # value ::  target: 0xe186 CodeAddr: 0xe186
Addr0xe19c:
     retq    

# ----------- Function 234 ------------ 
#
# startAddr  = 0xe1a0
# startindex = 9757
# endAddr    = 0xe1c4
# endindex   = 9769
# len        = 37 (0x25)
# len1       = 47 (0x2f) to (0xe1c5)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe1a0:
     endbr64 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
Addr0xe1ad:
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jbe      Addr0xe1be              # value ::  target: 0xe1be CodeAddr: 0xe1be
     cmpb     $0x2f,-0x1(%rbx,%rax,1) # imm,memOffsetBaseIndexScale ::  modifies flags!!
     leaq     -0x1(%rax),%rdx         # memOffsetBase,reg :: 
     je       Addr0xe1c0              # value ::  target: 0xe1c0 CodeAddr: 0xe1c0
Addr0xe1be:
     popq     %rbx                    # reg :: 
     retq    
Addr0xe1c0:
     movq     %rdx,%rax               # reg,reg :: 
     jmp      Addr0xe1ad              # value ::  target: 0xe1ad CodeAddr: 0xe1ad

# ----------- Function 235 ------------ 
#
# startAddr  = 0xe1d0
# startindex = 9772
# endAddr    = 0xe28d
# endindex   = 9835
# len        = 190 (0xbe)
# len1       = 192 (0xc0) to (0xe28e)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe1d0:
     endbr64 
     movl     0x18(%rsi),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0xa000,%eax            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     jne      Addr0xe1f0              # value ::  target: 0xe1f0 CodeAddr: 0xe1f0
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     retq    
Addr0xe1f0:
     pushq    %rbp                    # reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     leaq     Var0x1beab(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1beab
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x4cc0              # value ::  target: 0x4cc0 CodeAddr: 0x4cc0 CALLS 0x4cc0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xe220              # value ::  target: 0xe220 CodeAddr: 0xe220
     je       Addr0xe240              # value ::  target: 0xe240 CodeAddr: 0xe240
Addr0xe213:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0x1,%eax               # imm,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0xe220:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     (%rax),%edi             # memBase,reg :: 
     cmpl     $0x3d,%edi              # imm,reg ::  modifies flags!!
     je       Addr0xe240              # value ::  target: 0xe240 CodeAddr: 0xe240
Addr0xe22c:
     callq    Addr0x17230             # value ::  target: 0x17230 CodeAddr: 0x17230 CALLS 0x17230
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movzbl   %al,%eax                # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     negl     %eax                    # reg ::  modifies flags!!
     retq    
Addr0xe240:
     movl     0x18(%rbx),%eax         # memOffsetBase,reg :: 
     andl     $0xf000,%eax            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x4000,%eax            # imm,reg ::  modifies flags!!
     je       Addr0xe260              # value ::  target: 0xe260 CodeAddr: 0xe260
Addr0xe24f:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0xe251:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0xe260:
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     leaq     Var0x1bec3(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1bec3
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4cc0              # value ::  target: 0x4cc0 CodeAddr: 0x4cc0 CALLS 0x4cc0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xe280              # value ::  target: 0xe280 CodeAddr: 0xe280
     jne      Addr0xe213              # value ::  target: 0xe213 CodeAddr: 0xe213
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0xe251              # value ::  target: 0xe251 CodeAddr: 0xe251
Addr0xe280:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     (%rax),%edi             # memBase,reg :: 
     cmpl     $0x3d,%edi              # imm,reg ::  modifies flags!!
     jne      Addr0xe22c              # value ::  target: 0xe22c CodeAddr: 0xe22c
     jmp      Addr0xe24f              # value ::  target: 0xe24f CodeAddr: 0xe24f

# ----------- Function 236 ------------ 
#
# startAddr  = 0xe290
# startindex = 9837
# endAddr    = 0xe315
# endindex   = 9881
# len        = 134 (0x86)
# len1       = 144 (0x90) to (0xe316)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xe290:
     endbr64 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0xe310              # value ::  target: 0xe310 CodeAddr: 0xe310
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     movl     $0x18,%edi              # imm,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdx,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %r13,%rdi               # reg,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0x15b10             # value ::  target: 0x15b10 CodeAddr: 0x15b10 CALLS 0x15b10
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %rax,0x0(%rbp)          # reg,memOffsetBase :: 
     movq     0x8(%rbx),%rax          # memOffsetBase,reg :: 
     movq     %rax,0x8(%rbp)          # reg,memOffsetBase :: 
     movq     (%rbx),%rax             # memBase,reg :: 
     movq     %rax,0x10(%rbp)         # reg,memOffsetBase :: 
     callq    Addr0xfba0              # value ::  target: 0xfba0 CodeAddr: 0xfba0 CALLS 0xfba0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xe311              # value ::  target: 0xe311 CodeAddr: 0xe311
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     je       Addr0xe300              # value ::  target: 0xe300 CodeAddr: 0xe300
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     jmp      Addr0xfec0              # value ::  target: 0xfec0 CodeAddr: 0xfec0
Addr0xe300:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0xe310:
     retq    
Addr0xe311:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 237 ------------ 
#
# startAddr  = 0xe320
# startindex = 9883
# endAddr    = 0xe379
# endindex   = 9904
# len        = 90 (0x5a)
# len1       = 96 (0x60) to (0xe37a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe320:
     endbr64 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0xe360              # value ::  target: 0xe360 CodeAddr: 0xe360
     movq     0x8(%rdx),%rax          # memOffsetBase,reg :: 
     movq     %rsi,(%rsp)             # reg,memBase :: 
     movq     %rsp,%rsi               # reg,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     (%rdx),%rax             # memBase,reg :: 
     movq     %rax,0x10(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0xf260              # value ::  target: 0xf260 CodeAddr: 0xf260 CALLS 0xf260
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
Addr0xe360:
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0xe375              # value ::  target: 0xe375 CodeAddr: 0xe375
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0xe375:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 238 ------------ 
#
# startAddr  = 0xe380
# startindex = 9906
# endAddr    = 0xe4f2
# endindex   = 10017
# len        = 371 (0x173)
# len1       = 382 (0x17e) to (0xe4f3)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe380:
     endbr64 
     movl     %edi,%edx               # reg,reg :: 
     movl     $0x2d,%eax              # imm,reg :: 
     andl     $0xf000,%edx            # imm,reg ::  CodeAddr: 0xf000 modifies flags!!
     cmpl     $0x8000,%edx            # imm,reg ::  CodeAddr: 0x8000 modifies flags!!
     je       Addr0xe3ed              # value ::  target: 0xe3ed CodeAddr: 0xe3ed
     movl     $0x64,%eax              # imm,reg :: 
     cmpl     $0x4000,%edx            # imm,reg ::  modifies flags!!
     je       Addr0xe3ed              # value ::  target: 0xe3ed CodeAddr: 0xe3ed
     movl     $0x62,%eax              # imm,reg :: 
     cmpl     $0x6000,%edx            # imm,reg ::  modifies flags!!
     je       Addr0xe3ed              # value ::  target: 0xe3ed CodeAddr: 0xe3ed
     movl     $0x63,%eax              # imm,reg :: 
     cmpl     $0x2000,%edx            # imm,reg ::  modifies flags!!
     je       Addr0xe3ed              # value ::  target: 0xe3ed CodeAddr: 0xe3ed
     movl     $0x6c,%eax              # imm,reg :: 
     cmpl     $0xa000,%edx            # imm,reg ::  CodeAddr: 0xa000 modifies flags!!
     je       Addr0xe3ed              # value ::  target: 0xe3ed CodeAddr: 0xe3ed
     movl     $0x70,%eax              # imm,reg :: 
     cmpl     $0x1000,%edx            # imm,reg ::  modifies flags!!
     je       Addr0xe3ed              # value ::  target: 0xe3ed CodeAddr: 0xe3ed
     cmpl     $0xc000,%edx            # imm,reg ::  CodeAddr: 0xc000 modifies flags!!
     movl     $0x73,%eax              # imm,reg :: 
     movl     $0x3f,%edx              # imm,reg :: 
     cmovnel  %edx,%eax               # reg,reg :: 
Addr0xe3ed:
     movb     %al,(%rsi)              # reg,memBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x100,%eax             # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffbb,%eax        # imm,reg ::  modifies flags!!
     addl     $0x72,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x1(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x80,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffb6,%eax        # imm,reg ::  modifies flags!!
     addl     $0x77,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x2(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x40,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     testl    $0x800,%edi             # imm,reg ::  modifies flags!!
     je       Addr0xe4c8              # value ::  target: 0xe4c8 CodeAddr: 0xe4c8
     andl     $0xffffffe0,%eax        # imm,reg ::  modifies flags!!
     addl     $0x73,%eax              # imm,reg ::  modifies flags!!
Addr0xe435:
     movb     %al,0x3(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x20,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffbb,%eax        # imm,reg ::  modifies flags!!
     addl     $0x72,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x4(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x10,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffb6,%eax        # imm,reg ::  modifies flags!!
     addl     $0x77,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x5(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x8,%eax               # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     testl    $0x400,%edi             # imm,reg ::  modifies flags!!
     je       Addr0xe4d8              # value ::  target: 0xe4d8 CodeAddr: 0xe4d8
     andl     $0xffffffe0,%eax        # imm,reg ::  modifies flags!!
     addl     $0x73,%eax              # imm,reg ::  modifies flags!!
Addr0xe476:
     movb     %al,0x6(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x4,%eax               # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffbb,%eax        # imm,reg ::  modifies flags!!
     addl     $0x72,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x7(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x2,%eax               # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffb6,%eax        # imm,reg ::  modifies flags!!
     addl     $0x77,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x8(%rsi)           # reg,memOffsetBase :: 
     movl     %edi,%eax               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0x200,%edi             # imm,reg ::  modifies flags!!
     je       Addr0xe4e0              # value ::  target: 0xe4e0 CodeAddr: 0xe4e0
     andl     $0xffffffe0,%eax        # imm,reg ::  modifies flags!!
     addl     $0x74,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x9(%rsi)           # reg,memOffsetBase :: 
     movl     $0x20,%eax              # imm,reg :: 
     movw     %ax,0xa(%rsi)           # reg,memOffsetBase :: 
     retq    
Addr0xe4c8:
     andl     $0xffffffb5,%eax        # imm,reg ::  modifies flags!!
     addl     $0x78,%eax              # imm,reg ::  modifies flags!!
     jmp      Addr0xe435              # value ::  target: 0xe435 CodeAddr: 0xe435
Addr0xe4d8:
     andl     $0xffffffb5,%eax        # imm,reg ::  modifies flags!!
     addl     $0x78,%eax              # imm,reg ::  modifies flags!!
     jmp      Addr0xe476              # value ::  target: 0xe476 CodeAddr: 0xe476
Addr0xe4e0:
     andl     $0xffffffb5,%eax        # imm,reg ::  modifies flags!!
     addl     $0x78,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x9(%rsi)           # reg,memOffsetBase :: 
     movl     $0x20,%eax              # imm,reg :: 
     movw     %ax,0xa(%rsi)           # reg,memOffsetBase :: 
     retq    

# ----------- Function 239 ------------ 
#
# startAddr  = 0xe500
# startindex = 10020
# endAddr    = 0xe50b
# endindex   = 10022
# len        = 12 (0xc)
# len1       = 16 (0x10) to (0xe50c)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0xe500:
     endbr64 
     movl     0x18(%rdi),%edi         # memOffsetBase,reg :: 
     jmp      Addr0xe380              # value ::  target: 0xe380 CodeAddr: 0xe380

# ----------- Function 240 ------------ 
#
# startAddr  = 0xe510
# startindex = 10024
# endAddr    = 0xe52b
# endindex   = 10031
# len        = 28 (0x1c)
# len1       = 32 (0x20) to (0xe52c)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe510:
     endbr64 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0xe530              # value ::  target: 0xe530 CodeAddr: 0xe530 CALLS 0xe530
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xe527              # value ::  target: 0xe527 CodeAddr: 0xe527
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0xe527:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 241 ------------ 
#
# startAddr  = 0xe530
# startindex = 10033
# endAddr    = 0xe628
# endindex   = 10107
# len        = 249 (0xf9)
# len1       = 256 (0x100) to (0xe629)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe530:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0xe140              # value ::  target: 0xe140 CodeAddr: 0xe140 CALLS 0xe140
     movq     %rax,%r13               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0xe1a0              # value ::  target: 0xe1a0 CodeAddr: 0xe1a0 CALLS 0xe1a0
     subq     %r12,%r13               # reg,reg ::  modifies flags!!
     movq     %rbp,%rdi               # reg,reg :: 
     leaq     0x0(%r13,%rax,1),%r14   # memOffsetBaseIndexScale,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rax,%r13               # reg,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xe5a8              # value ::  target: 0xe5a8 CodeAddr: 0xe5a8
     cmpb     $0x2f,-0x1(%r12,%r14,1) # imm,memOffsetBaseIndexScale ::  modifies flags!!
     je       Addr0xe620              # value ::  target: 0xe620 CodeAddr: 0xe620
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     movl     $0x0,%r15d              # imm,reg :: 
     cmpb     $0x2f,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0x2f,%eax              # imm,reg :: 
     cmovel   %r15d,%eax              # reg,reg :: 
     setne    %bl                     # reg :: 
     movb     %al,0x7(%rsp)           # reg,memOffsetBase :: 
     jmp      Addr0xe5c4              # value ::  target: 0xe5c4 CodeAddr: 0xe5c4
Addr0xe5a8:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     movl     $0x0,%r15d              # imm,reg :: 
     cmpb     $0x2f,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0x2e,%eax              # imm,reg :: 
     cmovnel  %r15d,%eax              # reg,reg :: 
     sete     %bl                     # reg :: 
     movb     %al,0x7(%rsp)           # reg,memOffsetBase :: 
Addr0xe5c4:
     leaq     0x1(%r14,%r13,1),%rdi   # memOffsetBaseIndexScale,reg :: 
     addq     %rbx,%rdi               # reg,reg ::  modifies flags!!
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%r15               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xe60d              # value ::  target: 0xe60d CodeAddr: 0xe60d
     movq     %rax,%rdi               # reg,reg :: 
     movq     %r14,%rdx               # reg,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     callq    Addr0x4c40              # value ::  target: 0x4c40 CodeAddr: 0x4c40 CALLS 0x4c40
     movzbl   0x7(%rsp),%ecx          # memOffsetBase,reg :: 
     leaq     (%rax,%rbx,1),%rdi      # memBaseIndexScale,reg :: 
     movb     %cl,(%rax)              # reg,memBase :: 
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xe5ff              # value ::  target: 0xe5ff CodeAddr: 0xe5ff
     movq     %rdi,(%rax)             # reg,memBase :: 
Addr0xe5ff:
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4c40              # value ::  target: 0x4c40 CodeAddr: 0x4c40 CALLS 0x4c40
     movb     $0x0,(%rax)             # imm,memBase :: 
Addr0xe60d:
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %r15,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xe620:
     movb     $0x0,0x7(%rsp)          # imm,memOffsetBase :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     jmp      Addr0xe5c4              # value ::  target: 0xe5c4 CodeAddr: 0xe5c4

# ----------- Function 242 ------------ 
#
# startAddr  = 0xe630
# startindex = 10109
# endAddr    = 0xe6d6
# endindex   = 10167
# len        = 167 (0xa7)
# len1       = 176 (0xb0) to (0xe6d7)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe630:
     movq     (%rdi),%rdx             # memBase,reg :: 
     movzbl   (%rdx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xe6d0              # value ::  target: 0xe6d0 CodeAddr: 0xe6d0
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     jmp      Addr0xe66a              # value ::  target: 0xe66a CodeAddr: 0xe66a
Addr0xe650:
     cmpb     $0x5a,%al               # imm,reg ::  modifies flags!!
     jg       Addr0xe698              # value ::  target: 0xe698 CodeAddr: 0xe698
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     cmpb     $0x41,%al               # imm,reg ::  modifies flags!!
     cmovlq   %rsi,%r8                # reg,reg :: 
Addr0xe65c:
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movq     %rdx,(%rdi)             # reg,memBase :: 
     movzbl   (%rdx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xe691              # value ::  target: 0xe691 CodeAddr: 0xe691
Addr0xe66a:
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xe650              # value ::  target: 0xe650 CodeAddr: 0xe650
     cmpb     $0x2e,%al               # imm,reg ::  modifies flags!!
     je       Addr0xe6c0              # value ::  target: 0xe6c0 CodeAddr: 0xe6c0
     cmpb     $0x5a,%al               # imm,reg ::  modifies flags!!
     jg       Addr0xe6b0              # value ::  target: 0xe6b0 CodeAddr: 0xe6b0
     cmpb     $0x40,%al               # imm,reg ::  modifies flags!!
     jg       Addr0xe65c              # value ::  target: 0xe65c CodeAddr: 0xe65c
     subl     $0x30,%eax              # imm,reg ::  modifies flags!!
     cmpb     $0xa,%al                # imm,reg ::  modifies flags!!
     cmovaeq  %rsi,%r8                # reg,reg :: 
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movq     %rdx,(%rdi)             # reg,memBase :: 
     movzbl   (%rdx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xe66a              # value ::  target: 0xe66a CodeAddr: 0xe66a
Addr0xe691:
     movq     %r8,%rax                # reg,reg :: 
     retq    
Addr0xe698:
     leal     -0x61(%rax),%r9d        # memOffsetBase,reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     cmpb     $0x19,%r9b              # imm,reg ::  modifies flags!!
     jbe      Addr0xe65c              # value ::  target: 0xe65c CodeAddr: 0xe65c
Addr0xe6a4:
     cmpb     $0x7e,%al               # imm,reg ::  modifies flags!!
     cmovneq  %rsi,%r8                # reg,reg :: 
     jmp      Addr0xe65c              # value ::  target: 0xe65c CodeAddr: 0xe65c
Addr0xe6b0:
     leal     -0x61(%rax),%r9d        # memOffsetBase,reg :: 
     cmpb     $0x19,%r9b              # imm,reg ::  modifies flags!!
     ja       Addr0xe6a4              # value ::  target: 0xe6a4 CodeAddr: 0xe6a4
     jmp      Addr0xe65c              # value ::  target: 0xe65c CodeAddr: 0xe65c
Addr0xe6c0:
     testq    %r8,%r8                 # reg,reg ::  modifies flags!!
     movl     $0x1,%ecx               # imm,reg :: 
     cmoveq   %rdx,%r8                # reg,reg :: 
     jmp      Addr0xe65c              # value ::  target: 0xe65c CodeAddr: 0xe65c
Addr0xe6d0:
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 243 ------------ 
#
# startAddr  = 0xe6e0
# startindex = 10169
# endAddr    = 0xead7
# endindex   = 10434
# len        = 1016 (0x3f8)
# len1       = 1024 (0x400) to (0xead8)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xe6e0:
     endbr64 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     movl     %eax,%r12d              # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xe746              # value ::  target: 0xe746 CodeAddr: 0xe746
     movzbl   (%rbx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xe94c              # value ::  target: 0xe94c CodeAddr: 0xe94c
     movzbl   0x0(%rbp),%edx          # memOffsetBase,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xe740              # value ::  target: 0xe740 CodeAddr: 0xe740
     cmpb     $0x2e,(%rbx)            # imm,memBase ::  modifies flags!!
     jne      Addr0xe734              # value ::  target: 0xe734 CodeAddr: 0xe734
     cmpb     $0x0,0x1(%rbx)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xe94c              # value ::  target: 0xe94c CodeAddr: 0xe94c
Addr0xe734:
     cmpb     $0x2e,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0xe770              # value ::  target: 0xe770 CodeAddr: 0xe770
     cmpb     $0x0,0x1(%rbp)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0xe770              # value ::  target: 0xe770 CodeAddr: 0xe770
Addr0xe740:
     movl     $0x1,%r12d              # imm,reg :: 
Addr0xe746:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xeac1              # value ::  target: 0xeac1 CodeAddr: 0xeac1
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0xe770:
     cmpb     $0x2e,(%rbx)            # imm,memBase ::  modifies flags!!
     jne      Addr0xe78c              # value ::  target: 0xe78c CodeAddr: 0xe78c
     movzbl   0x1(%rbx),%ecx          # memOffsetBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     cmpl     %ecx,%esi               # reg,reg ::  modifies flags!!
     jne      Addr0xe78c              # value ::  target: 0xe78c CodeAddr: 0xe78c
     cmpb     $0x0,0x2(%rbx)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xe94c              # value ::  target: 0xe94c CodeAddr: 0xe94c
Addr0xe78c:
     cmpb     $0x2e,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xe920              # value ::  target: 0xe920 CodeAddr: 0xe920
Addr0xe796:
     cmpb     $0x2e,%al               # imm,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpb     $0x2e,%dl               # imm,reg ::  modifies flags!!
     je       Addr0xe7a8              # value ::  target: 0xe7a8 CodeAddr: 0xe7a8
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xe94c              # value ::  target: 0xe94c CodeAddr: 0xe94c
Addr0xe7a8:
     cmpb     $0x2e,%dl               # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpb     $0x2e,%al               # imm,reg ::  modifies flags!!
     je       Addr0xea40              # value ::  target: 0xea40 CodeAddr: 0xea40
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0xe740              # value ::  target: 0xe740 CodeAddr: 0xe740
Addr0xe7ba:
     leaq     0x8(%rsp),%rdi          # memOffsetBase,reg :: 
     movq     %rbx,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rbp,0x10(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0xe630              # value ::  target: 0xe630 CodeAddr: 0xe630 CALLS 0xe630
     leaq     0x10(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     callq    Addr0xe630              # value ::  target: 0xe630 CodeAddr: 0xe630 CALLS 0xe630
     movq     %rax,%r13               # reg,reg :: 
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xea70              # value ::  target: 0xea70 CodeAddr: 0xea70
     subq     %rbx,%r14               # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xeace              # value ::  target: 0xeace CodeAddr: 0xeace
Addr0xe7f3:
     subq     %rbp,%r13               # reg,reg ::  modifies flags!!
     cmpq     %r13,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xea90              # value ::  target: 0xea90 CodeAddr: 0xea90
Addr0xe7ff:
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
Addr0xe803:
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     ja       Addr0xe811              # value ::  target: 0xe811 CodeAddr: 0xe811
     cmpq     %rcx,%r13               # reg,reg ::  modifies flags!!
     jbe      Addr0xe746              # value ::  target: 0xe746 CodeAddr: 0xe746
Addr0xe811:
     movq     %rcx,%r8                # reg,reg :: 
     subq     %rdx,%r8                # reg,reg ::  modifies flags!!
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0xe88f              # value ::  target: 0xe88f CodeAddr: 0xe88f
Addr0xe81c:
     movzbl   (%rbx,%rdx,1),%esi      # memBaseIndexScale,reg :: 
     movsbl   %sil,%eax               # reg,reg :: 
     subl     $0x30,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     jbe      Addr0xe88f              # value ::  target: 0xe88f CodeAddr: 0xe88f
     movzbl   %sil,%eax               # reg,reg :: 
     leal     -0x30(%rax),%edi        # memOffsetBase,reg :: 
     cmpl     $0x9,%edi               # imm,reg ::  modifies flags!!
     ja       Addr0xe8c6              # value ::  target: 0xe8c6 CodeAddr: 0xe8c6
     cmpq     %rcx,%r13               # reg,reg ::  modifies flags!!
     je       Addr0xe882              # value ::  target: 0xe882 CodeAddr: 0xe882
     movzbl   0x0(%rbp,%rcx,1),%edi   # memOffsetBaseIndexScale,reg :: 
Addr0xe846:
     movl     %edi,%esi               # reg,reg :: 
Addr0xe848:
     movzbl   %dil,%edi               # reg,reg :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     leal     -0x30(%rdi),%eax        # memOffsetBase,reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     jbe      Addr0xe882              # value ::  target: 0xe882 CodeAddr: 0xe882
Addr0xe857:
     movl     %edi,%eax               # reg,reg :: 
     cmpb     $0x5a,%sil              # imm,reg ::  modifies flags!!
     jg       Addr0xea28              # value ::  target: 0xea28 CodeAddr: 0xea28
     cmpb     $0x40,%sil              # imm,reg ::  modifies flags!!
     jg       Addr0xe879              # value ::  target: 0xe879 CodeAddr: 0xe879
Addr0xe869:
     cmpb     $0x7e,%sil              # imm,reg ::  modifies flags!!
     je       Addr0xeab9              # value ::  target: 0xeab9 CodeAddr: 0xeab9
     leal     0x100(%rdi),%eax        # memOffsetBase,reg :: 
Addr0xe879:
     cmpl     %r9d,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xea5d              # value ::  target: 0xea5d CodeAddr: 0xea5d
Addr0xe882:
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     ja       Addr0xe81c              # value ::  target: 0xe81c CodeAddr: 0xe81c
Addr0xe88f:
     movzbl   0x0(%rbp,%rcx,1),%edi   # memOffsetBaseIndexScale,reg :: 
     movsbl   %dil,%esi               # reg,reg :: 
     cmpq     %rcx,%r13               # reg,reg ::  modifies flags!!
     jbe      Addr0xe964              # value ::  target: 0xe964 CodeAddr: 0xe964
     movsbl   %dil,%eax               # reg,reg :: 
     subl     $0x30,%eax              # imm,reg ::  modifies flags!!
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     jbe      Addr0xe964              # value ::  target: 0xe964 CodeAddr: 0xe964
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     je       Addr0xe848              # value ::  target: 0xe848 CodeAddr: 0xe848
     movzbl   (%rbx,%rdx,1),%eax      # memBaseIndexScale,reg :: 
     leal     -0x30(%rax),%r9d        # memOffsetBase,reg :: 
     movl     %eax,%esi               # reg,reg :: 
     cmpl     $0x9,%r9d               # imm,reg ::  modifies flags!!
     jbe      Addr0xe846              # value ::  target: 0xe846 CodeAddr: 0xe846
Addr0xe8c6:
     movl     %eax,%r9d               # reg,reg :: 
     cmpb     $0x5a,%sil              # imm,reg ::  modifies flags!!
     jg       Addr0xea00              # value ::  target: 0xea00 CodeAddr: 0xea00
     cmpb     $0x40,%sil              # imm,reg ::  modifies flags!!
     jg       Addr0xea0d              # value ::  target: 0xea0d CodeAddr: 0xea0d
Addr0xe8dd:
     cmpb     $0x7e,%sil              # imm,reg ::  modifies flags!!
     je       Addr0xeab0              # value ::  target: 0xeab0 CodeAddr: 0xeab0
     leal     0x100(%rax),%r9d        # memOffsetBase,reg :: 
Addr0xe8ee:
     leaq     (%rdx,%r8,1),%rax       # memBaseIndexScale,reg :: 
     cmpq     %rax,%r13               # reg,reg ::  modifies flags!!
     je       Addr0xea60              # value ::  target: 0xea60 CodeAddr: 0xea60
Addr0xe8fb:
     movzbl   0x0(%rbp,%rcx,1),%esi   # memOffsetBaseIndexScale,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movzbl   %sil,%edi               # reg,reg :: 
     leal     -0x30(%rdi),%r10d       # memOffsetBase,reg :: 
     cmpl     $0x9,%r10d              # imm,reg ::  modifies flags!!
     jbe      Addr0xe879              # value ::  target: 0xe879 CodeAddr: 0xe879
     jmp      Addr0xe857              # value ::  target: 0xe857 CodeAddr: 0xe857
Addr0xe920:
     movzbl   0x1(%rbp),%ecx          # memOffsetBase,reg :: 
     movl     $0x2e,%esi              # imm,reg :: 
     cmpl     %ecx,%esi               # reg,reg ::  modifies flags!!
     jne      Addr0xe796              # value ::  target: 0xe796 CodeAddr: 0xe796
     cmpb     $0x0,0x2(%rbp)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xe740              # value ::  target: 0xe740 CodeAddr: 0xe740
     jmp      Addr0xe796              # value ::  target: 0xe796 CodeAddr: 0xe796
Addr0xe940:
     subl     $0x30,%esi              # imm,reg ::  modifies flags!!
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     ja       Addr0xe803              # value ::  target: 0xe803 CodeAddr: 0xe803
Addr0xe94c:
     movl     $0xffffffff,%r12d       # imm,reg :: 
     jmp      Addr0xe746              # value ::  target: 0xe746 CodeAddr: 0xe746
Addr0xe960:
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
Addr0xe964:
     movsbl   (%rbx,%rdx,1),%eax      # memBaseIndexScale,reg :: 
     cmpb     $0x30,%al               # imm,reg ::  modifies flags!!
     je       Addr0xe960              # value ::  target: 0xe960 CodeAddr: 0xe960
     cmpb     $0x30,%dil              # imm,reg ::  modifies flags!!
     jne      Addr0xe987              # value ::  target: 0xe987 CodeAddr: 0xe987
Addr0xe978:
     addq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     movsbl   0x0(%rbp,%rcx,1),%esi   # memOffsetBaseIndexScale,reg :: 
     cmpb     $0x30,%sil              # imm,reg ::  modifies flags!!
     je       Addr0xe978              # value ::  target: 0xe978 CodeAddr: 0xe978
Addr0xe987:
     leal     -0x30(%rax),%edi        # memOffsetBase,reg :: 
     cmpl     $0x9,%edi               # imm,reg ::  modifies flags!!
     ja       Addr0xe940              # value ::  target: 0xe940 CodeAddr: 0xe940
     movq     %rcx,%r9                # reg,reg :: 
     movq     %rdx,%rdi               # reg,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     subq     %rdx,%r9                # reg,reg ::  modifies flags!!
     leaq     0x0(%rbp,%r9,1),%r10    # memOffsetBaseIndexScale,reg :: 
Addr0xe9a0:
     leal     -0x30(%rsi),%r9d        # memOffsetBase,reg :: 
     cmpl     $0x9,%r9d               # imm,reg ::  modifies flags!!
     ja       Addr0xe740              # value ::  target: 0xe740 CodeAddr: 0xe740
     subl     %esi,%eax               # reg,reg ::  modifies flags!!
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     cmovel   %eax,%r8d               # reg,reg :: 
     addq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     movsbl   (%rbx,%rdi,1),%eax      # memBaseIndexScale,reg :: 
     movq     %rdi,%r9                # reg,reg :: 
     movsbl   (%r10,%rdi,1),%esi      # memBaseIndexScale,reg :: 
     subq     %rdx,%r9                # reg,reg ::  modifies flags!!
     leal     -0x30(%rax),%r11d       # memOffsetBase,reg :: 
     addq     %rcx,%r9                # reg,reg ::  modifies flags!!
     cmpl     $0x9,%r11d              # imm,reg ::  modifies flags!!
     jbe      Addr0xe9a0              # value ::  target: 0xe9a0 CodeAddr: 0xe9a0
     movsbl   %sil,%edx               # reg,reg :: 
     subl     $0x30,%edx              # imm,reg ::  modifies flags!!
     cmpl     $0x9,%edx               # imm,reg ::  modifies flags!!
     jbe      Addr0xe94c              # value ::  target: 0xe94c CodeAddr: 0xe94c
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     jne      Addr0xeac6              # value ::  target: 0xeac6 CodeAddr: 0xeac6
     movq     %rdi,%rdx               # reg,reg :: 
     movq     %r9,%rcx                # reg,reg :: 
     jmp      Addr0xe803              # value ::  target: 0xe803 CodeAddr: 0xe803
Addr0xea00:
     leal     -0x61(%rsi),%edi        # memOffsetBase,reg :: 
     cmpb     $0x19,%dil              # imm,reg ::  modifies flags!!
     ja       Addr0xe8dd              # value ::  target: 0xe8dd CodeAddr: 0xe8dd
Addr0xea0d:
     leaq     (%rdx,%r8,1),%rsi       # memBaseIndexScale,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     %rsi,%r13               # reg,reg ::  modifies flags!!
     jne      Addr0xe8fb              # value ::  target: 0xe8fb CodeAddr: 0xe8fb
     jmp      Addr0xe879              # value ::  target: 0xe879 CodeAddr: 0xe879
Addr0xea28:
     leal     -0x61(%rsi),%r10d       # memOffsetBase,reg :: 
     cmpb     $0x19,%r10b             # imm,reg ::  modifies flags!!
     jbe      Addr0xe879              # value ::  target: 0xe879 CodeAddr: 0xe879
     jmp      Addr0xe869              # value ::  target: 0xe869 CodeAddr: 0xe869
Addr0xea40:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0xe7ba              # value ::  target: 0xe7ba CodeAddr: 0xe7ba
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xe7ba              # value ::  target: 0xe7ba CodeAddr: 0xe7ba
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     jmp      Addr0xe7ba              # value ::  target: 0xe7ba CodeAddr: 0xe7ba
Addr0xea5d:
     subl     %eax,%r9d               # reg,reg ::  modifies flags!!
Addr0xea60:
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmovnel  %r9d,%r12d              # reg,reg :: 
     jmp      Addr0xe746              # value ::  target: 0xe746 CodeAddr: 0xe746
Addr0xea70:
     movq     0x8(%rsp),%r14          # memOffsetBase,reg :: 
     subq     %rbx,%r14               # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xe7f3              # value ::  target: 0xe7f3 CodeAddr: 0xe7f3
Addr0xea81:
     movq     0x10(%rsp),%r13         # memOffsetBase,reg :: 
     subq     %rbp,%r13               # reg,reg ::  modifies flags!!
     jmp      Addr0xe7ff              # value ::  target: 0xe7ff CodeAddr: 0xe7ff
Addr0xea90:
     movq     %r14,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x4770              # value ::  target: 0x4770 CodeAddr: 0x4770 CALLS 0x4770
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0xe7ff              # value ::  target: 0xe7ff CodeAddr: 0xe7ff
     movq     0x8(%rsp),%r14          # memOffsetBase,reg :: 
     subq     %rbx,%r14               # reg,reg ::  modifies flags!!
     jmp      Addr0xea81              # value ::  target: 0xea81 CodeAddr: 0xea81
Addr0xeab0:
     orl      $0xffffffff,%r9d        # imm,reg ::  modifies flags!!
     jmp      Addr0xe8ee              # value ::  target: 0xe8ee CodeAddr: 0xe8ee
Addr0xeab9:
     orl      $0xffffffff,%eax        # imm,reg ::  modifies flags!!
     jmp      Addr0xe879              # value ::  target: 0xe879 CodeAddr: 0xe879
Addr0xeac1:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0xeac6:
     movl     %r8d,%r12d              # reg,reg :: 
     jmp      Addr0xe746              # value ::  target: 0xe746 CodeAddr: 0xe746
Addr0xeace:
     movq     0x10(%rsp),%r13         # memOffsetBase,reg :: 
     jmp      Addr0xe7f3              # value ::  target: 0xe7f3 CodeAddr: 0xe7f3

# ----------- Function 244 ------------ 
#
# startAddr  = 0xeae0
# startindex = 10436
# endAddr    = 0xeb42
# endindex   = 10461
# len        = 99 (0x63)
# len1       = 109 (0x6d) to (0xeb43)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xeae0:
     endbr64 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rsi               # reg,reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     subq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4830              # value ::  target: 0x4830 CodeAddr: 0x4830 CALLS 0x4830
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0xeb28              # value ::  target: 0xeb28 CodeAddr: 0xeb28
     movq     %rsp,%rdi               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x49a0              # value ::  target: 0x49a0 CodeAddr: 0x49a0 CALLS 0x49a0
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     %rax,(%rbx)             # reg,memBase :: 
     imulq    $0x3e8,0x8(%rsp),%rax   # imm,memOffsetBase,reg ::  modifies flags!!
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
Addr0xeb28:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xeb3e              # value ::  target: 0xeb3e CodeAddr: 0xeb3e
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     retq    
Addr0xeb3e:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 245 ------------ 
#
# startAddr  = 0xeb50
# startindex = 10464
# endAddr    = 0xeb9c
# endindex   = 10488
# len        = 77 (0x4d)
# len1       = 80 (0x50) to (0xeb9d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xeb50:
     endbr64 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x4c00              # value ::  target: 0x4c00 CodeAddr: 0x4c00 CALLS 0x4c00
     movq     %rax,%rsi               # reg,reg :: 
     movl     $0x1,%eax               # imm,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xeb89              # value ::  target: 0xeb89 CodeAddr: 0xeb89
     cmpb     $0x43,(%rsi)            # imm,memBase ::  modifies flags!!
     je       Addr0xeb90              # value ::  target: 0xeb90 CodeAddr: 0xeb90
Addr0xeb71:
     movl     $0x6,%ecx               # imm,reg :: 
     leaq     Var0x1bedc(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1bedc
     repz cmpsb %es:(%rdi),%ds:(%rsi)   # memBase,memBase :: "%es:(%rdi),%ds:(%rsi)" != "(%rdi),(%rsi)" modifies flags!!
#{'addr': 60285, 'op': 'cmpsb', 'prefix': 'repz', 'args': [Arg(argText='(%rdi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rdi', calcAddr=None, segReg='%es:', round=None), Arg(argText='(%rsi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rsi', calcAddr=None, segReg='%ds:', round=None)], 'idx': 10476, 'size': 2}
     seta     %al                     # reg :: 
     sbbb     $0x0,%al                # imm,reg ::  modifies flags!!
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
Addr0xeb89:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0xeb90:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x1(%rsi)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0xeb71              # value ::  target: 0xeb71 CodeAddr: 0xeb71
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    

# ----------- Function 246 ------------ 
#
# startAddr  = 0xeba0
# startindex = 10490
# endAddr    = 0xebb3
# endindex   = 10496
# len        = 20 (0x14)
# len1       = 31 (0x1f) to (0xebb4)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xeba0:
     endbr64 
     movq     %rdi,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     rorq     $0x3,%rax               # imm,reg ::  modifies flags!!
     divq     %rsi                    # reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     retq    

# ----------- Function 247 ------------ 
#
# startAddr  = 0xebc0
# startindex = 10499
# endAddr    = 0xebca
# endindex   = 10502
# len        = 11 (0xb)
# len1       = 16 (0x10) to (0xebcb)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xebc0:
     endbr64 
     cmpq     %rdi,%rsi               # reg,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     retq    

# ----------- Function 248 ------------ 
#
# startAddr  = 0xebd0
# startindex = 10504
# endAddr    = 0xebf0
# endindex   = 10514
# len        = 33 (0x21)
# len1       = 44 (0x2c) to (0xebf1)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xebd0:
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     movq     %rsi,%rdi               # reg,reg :: 
     movq     0x10(%rbx),%rsi         # memOffsetBase,reg :: 
     callq    *0x30(%rbx)             # memOffsetBase :: "*0x30(%rbx)" != "0x30(%rbx)" no target? 
#{'addr': 60379, 'op': 'callq', 'args': [Arg(argText='0x30(%rbx)', star='*', offset=48, imm=None, reg=None, type='memOffsetBase', index=None, scale=None, value=None, base='%rbx', calcAddr=None, segReg=None, round=None)], 'idx': 10508, 'size': 3}
     cmpq     %rax,0x10(%rbx)         # reg,memOffsetBase ::  modifies flags!!
     jbe      Addr0x4daa              # value ::  target: 0x4daa CodeAddr: 0x4daa
     shlq     $0x4,%rax               # imm,reg ::  modifies flags!!
     addq     (%rbx),%rax             # memBase,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     retq    

# ----------- Function 249 ------------ 
#
# startAddr  = 0xec00
# startindex = 10517
# endAddr    = 0xecff
# endindex   = 10597
# len        = 256 (0x100)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0xec00:
     pushq    %r14                    # reg :: 
     movq     %rdx,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movl     %ecx,%r13d              # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     callq    Addr0xebd0              # value ::  target: 0xebd0 CodeAddr: 0xebd0 CALLS 0xebd0
     movq     %rax,(%r14)             # reg,memBase :: 
     movq     (%rax),%rsi             # memBase,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xeca1              # value ::  target: 0xeca1 CodeAddr: 0xeca1
     movq     %rax,%rbx               # reg,reg :: 
     cmpq     %rbp,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xecf8              # value ::  target: 0xecf8 CodeAddr: 0xecf8
     movq     %rbp,%rdi               # reg,reg :: 
     callq    *0x38(%r12)             # memOffsetBase :: "*0x38(%r12)" != "0x38(%r12)" no target? 
#{'addr': 60467, 'op': 'callq', 'args': [Arg(argText='0x38(%r12)', star='*', offset=56, imm=None, reg=None, type='memOffsetBase', index=None, scale=None, value=None, base='%r12', calcAddr=None, segReg=None, round=None)], 'idx': 10535, 'size': 5}
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xec98              # value ::  target: 0xec98 CodeAddr: 0xec98
     movq     (%rbx),%rax             # memBase,reg :: 
Addr0xec3f:
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     je       Addr0xeca3              # value ::  target: 0xeca3 CodeAddr: 0xeca3
     movq     0x8(%rbx),%rdx          # memOffsetBase,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xece8              # value ::  target: 0xece8 CodeAddr: 0xece8
     movdqu   (%rdx),%xmm0            # memBase,reg :: 
     movups   %xmm0,(%rbx)            # reg,memBase :: 
     movq     $0x0,(%rdx)             # imm,memBase :: 
     movq     0x48(%r12),%rcx         # memOffsetBase,reg :: 
     movq     %rcx,0x8(%rdx)          # reg,memOffsetBase :: 
     popq     %rbx                    # reg :: 
     movq     %rdx,0x48(%r12)         # reg,memOffsetBase :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0xec80:
     movq     (%rax),%rsi             # memBase,reg :: 
     cmpq     %rbp,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xecb0              # value ::  target: 0xecb0 CodeAddr: 0xecb0
     movq     %rbp,%rdi               # reg,reg :: 
     callq    *0x38(%r12)             # memOffsetBase :: "*0x38(%r12)" != "0x38(%r12)" no target? 
#{'addr': 60555, 'op': 'callq', 'args': [Arg(argText='0x38(%r12)', star='*', offset=56, imm=None, reg=None, type='memOffsetBase', index=None, scale=None, value=None, base='%r12', calcAddr=None, segReg=None, round=None)], 'idx': 10561, 'size': 5}
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xecb0              # value ::  target: 0xecb0 CodeAddr: 0xecb0
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
Addr0xec98:
     movq     0x8(%rbx),%rax          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xec80              # value ::  target: 0xec80 CodeAddr: 0xec80
Addr0xeca1:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0xeca3:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0xecb0:
     movq     0x8(%rbx),%rdx          # memOffsetBase,reg :: 
     movq     (%rdx),%rax             # memBase,reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     je       Addr0xeca3              # value ::  target: 0xeca3 CodeAddr: 0xeca3
     movq     0x8(%rdx),%rcx          # memOffsetBase,reg :: 
     movq     %rcx,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     $0x0,(%rdx)             # imm,memBase :: 
     movq     0x48(%r12),%rcx         # memOffsetBase,reg :: 
     movq     %rcx,0x8(%rdx)          # reg,memOffsetBase :: 
     popq     %rbx                    # reg :: 
     movq     %rdx,0x48(%r12)         # reg,memOffsetBase :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0xece8:
     movq     $0x0,(%rbx)             # imm,memBase :: 
     jmp      Addr0xeca3              # value ::  target: 0xeca3 CodeAddr: 0xeca3
Addr0xecf8:
     movq     %rsi,%rax               # reg,reg :: 
     jmp      Addr0xec3f              # value ::  target: 0xec3f CodeAddr: 0xec3f

# ----------- Function 250 ------------ 
#
# startAddr  = 0xed00
# startindex = 10598
# endAddr    = 0xed7d
# endindex   = 10629
# len        = 126 (0x7e)
# len1       = 128 (0x80) to (0xed7e)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xed00:
     movq     (%rdi),%rax             # memBase,reg :: 
     leaq     Var0x1bf60(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bf60
     cmpq     %rdx,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xed78              # value ::  target: 0xed78 CodeAddr: 0xed78
     movss    0x8(%rax),%xmm0         # memOffsetBase,reg :: 
     comiss   Var0x1bf74(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf74
     jbe      Addr0xed6e              # value ::  target: 0xed6e CodeAddr: 0xed6e
     movss    Var0x1bf78(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x1bf78
     comiss   %xmm0,%xmm1             # reg,reg :: 
     jbe      Addr0xed6e              # value ::  target: 0xed6e CodeAddr: 0xed6e
     movss    0xc(%rax),%xmm1         # memOffsetBase,reg :: 
     comiss   Var0x1bf7c(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x1bf7c
     jbe      Addr0xed6e              # value ::  target: 0xed6e CodeAddr: 0xed6e
     movss    (%rax),%xmm1            # memBase,reg :: 
     comiss   Var0x1bf80(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x1bf80
     jb       Addr0xed6e              # value ::  target: 0xed6e CodeAddr: 0xed6e
     addss    Var0x1bf74(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x1bf74 modifies flags!!
     movss    0x4(%rax),%xmm2         # memOffsetBase,reg :: 
     comiss   %xmm1,%xmm2             # reg,reg :: 
     jbe      Addr0xed6e              # value ::  target: 0xed6e CodeAddr: 0xed6e
     movss    Var0x1bf84(%rip),%xmm3  # memOffsetBase,reg ::  DataAddr: 0x1bf84
     comiss   %xmm2,%xmm3             # reg,reg :: 
     jb       Addr0xed6e              # value ::  target: 0xed6e CodeAddr: 0xed6e
     comiss   %xmm1,%xmm0             # reg,reg :: 
     movl     $0x1,%eax               # imm,reg :: 
     ja       Addr0xed7d              # value ::  target: 0xed7d CodeAddr: 0xed7d
Addr0xed6e:
     movq     %rdx,(%rdi)             # reg,memBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     retq    
Addr0xed78:
     movl     $0x1,%eax               # imm,reg :: 
Addr0xed7d:
     retq    

# ----------- Function 251 ------------ 
#
# startAddr  = 0xed80
# startindex = 10631
# endAddr    = 0xeeaa
# endindex   = 10711
# len        = 299 (0x12b)
# len1       = 304 (0x130) to (0xeeab)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xed80:
     movaps   %xmm0,%xmm1             # reg,reg :: 
     testb    %sil,%sil               # reg,reg ::  modifies flags!!
     jne      Addr0xedd0              # value ::  target: 0xedd0 CodeAddr: 0xedd0
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     js       Addr0xee83              # value ::  target: 0xee83 CodeAddr: 0xee83
     pxor     %xmm0,%xmm0             # reg,reg :: 
     cvtsi2ssq %rdi,%xmm0              # reg,reg :: 
Addr0xed9a:
     divss    %xmm1,%xmm0             # reg,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     comiss   Var0x1bf88(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf88
     jae      Addr0xee7f              # value ::  target: 0xee7f CodeAddr: 0xee7f
     comiss   Var0x1bf8c(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf8c
     jb       Addr0xeea1              # value ::  target: 0xeea1 CodeAddr: 0xeea1
     subss    Var0x1bf8c(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf8c modifies flags!!
     cvttss2si %xmm0,%rdi              # reg,reg :: 
     btcq     $0x3f,%rdi              # imm,reg ::  modifies flags!!
Addr0xedd0:
     cmpq     $0xa,%rdi               # imm,reg ::  modifies flags!!
     movl     $0xa,%r8d               # imm,reg :: 
     movabsq  $0xaaaaaaaaaaaaaaab,%r9 # imm,reg :: 
     cmovaeq  %rdi,%r8                # reg,reg :: 
     orq      $0x1,%r8                # imm,reg ::  modifies flags!!
     cmpq     $0xffffffffffffffff,%r8 # imm,reg ::  modifies flags!!
     je       Addr0xee5f              # value ::  target: 0xee5f CodeAddr: 0xee5f
Addr0xedf8:
     movq     %r8,%rax                # reg,reg :: 
     movq     %r8,%rcx                # reg,reg :: 
     mulq     %r9                     # reg ::  modifies flags!!
     movq     %rdx,%rax               # reg,reg :: 
     andq     $0xfffffffffffffffe,%rdx# imm,reg ::  modifies flags!!
     shrq     %rax                    # reg ::  modifies flags!!
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     subq     %rax,%rcx               # reg,reg ::  modifies flags!!
     movq     %rcx,%rax               # reg,reg :: 
     cmpq     $0x9,%r8                # imm,reg ::  modifies flags!!
     jbe      Addr0xee50              # value ::  target: 0xee50 CodeAddr: 0xee50
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     je       Addr0xee55              # value ::  target: 0xee55 CodeAddr: 0xee55
     movl     $0x10,%edi              # imm,reg :: 
     movl     $0x9,%esi               # imm,reg :: 
     movl     $0x3,%ecx               # imm,reg :: 
     jmp      Addr0xee39              # value ::  target: 0xee39 CodeAddr: 0xee39
Addr0xee30:
     addq     $0x8,%rdi               # imm,reg ::  modifies flags!!
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xee55              # value ::  target: 0xee55 CodeAddr: 0xee55
Addr0xee39:
     addq     $0x2,%rcx               # imm,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     addq     %rdi,%rsi               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     cmpq     %rsi,%r8                # reg,reg ::  modifies flags!!
     ja       Addr0xee30              # value ::  target: 0xee30 CodeAddr: 0xee30
Addr0xee50:
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xee66              # value ::  target: 0xee66 CodeAddr: 0xee66
Addr0xee55:
     addq     $0x2,%r8                # imm,reg ::  modifies flags!!
     cmpq     $0xffffffffffffffff,%r8 # imm,reg ::  modifies flags!!
     jne      Addr0xedf8              # value ::  target: 0xedf8 CodeAddr: 0xedf8
Addr0xee5f:
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     retq    
Addr0xee66:
     movq     %r8,%rax                # reg,reg :: 
     shrq     $0x3d,%rax              # imm,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     btq      $0x3c,%r8               # imm,reg ::  modifies flags!!
     movzbl   %al,%eax                # reg,reg :: 
     jb       Addr0xee5f              # value ::  target: 0xee5f CodeAddr: 0xee5f
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xee5f              # value ::  target: 0xee5f CodeAddr: 0xee5f
Addr0xee7f:
     movq     %r8,%rax                # reg,reg :: 
     retq    
Addr0xee83:
     movq     %rdi,%rax               # reg,reg :: 
     andl     $0x1,%edi               # imm,reg ::  modifies flags!!
     pxor     %xmm0,%xmm0             # reg,reg :: 
     shrq     %rax                    # reg ::  modifies flags!!
     orq      %rdi,%rax               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rax,%xmm0              # reg,reg :: 
     addss    %xmm0,%xmm0             # reg,reg ::  modifies flags!!
     jmp      Addr0xed9a              # value ::  target: 0xed9a CodeAddr: 0xed9a
Addr0xeea1:
     cvttss2si %xmm0,%rdi              # reg,reg :: 
     jmp      Addr0xedd0              # value ::  target: 0xedd0 CodeAddr: 0xedd0

# ----------- Function 252 ------------ 
#
# startAddr  = 0xeeb0
# startindex = 10713
# endAddr    = 0xeff9
# endindex   = 10809
# len        = 330 (0x14a)
# len1       = 336 (0x150) to (0xeffa)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xeeb0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     movq     %rdi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movl     %edx,%r13d              # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     (%rsi),%rbp             # memBase,reg :: 
     cmpq     0x8(%rsi),%rbp          # memOffsetBase,reg ::  modifies flags!!
     jb       Addr0xeee7              # value ::  target: 0xeee7 CodeAddr: 0xeee7
     jmp      Addr0xefb2              # value ::  target: 0xefb2 CodeAddr: 0xefb2
Addr0xeed8:
     addq     $0x10,%rbp              # imm,reg ::  modifies flags!!
     cmpq     %rbp,0x8(%r12)          # reg,memOffsetBase ::  modifies flags!!
     jbe      Addr0xefb2              # value ::  target: 0xefb2 CodeAddr: 0xefb2
Addr0xeee7:
     movq     0x0(%rbp),%r15          # memOffsetBase,reg :: 
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0xeed8              # value ::  target: 0xeed8 CodeAddr: 0xeed8
     movq     0x8(%rbp),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xef11              # value ::  target: 0xef11 CodeAddr: 0xef11
     jmp      Addr0xef50              # value ::  target: 0xef50 CodeAddr: 0xef50
Addr0xef00:
     movq     0x8(%rax),%rcx          # memOffsetBase,reg :: 
     movq     %rcx,0x8(%rdx)          # reg,memOffsetBase :: 
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xef4c              # value ::  target: 0xef4c CodeAddr: 0xef4c
Addr0xef11:
     movq     (%rbx),%r15             # memBase,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     callq    Addr0xebd0              # value ::  target: 0xebd0 CodeAddr: 0xebd0 CALLS 0xebd0
     movq     %rbx,%rdx               # reg,reg :: 
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     cmpq     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     jne      Addr0xef00              # value ::  target: 0xef00 CodeAddr: 0xef00
     movq     %r15,(%rax)             # reg,memBase :: 
     addq     $0x1,0x18(%r14)         # imm,memOffsetBase ::  modifies flags!!
     movq     $0x0,(%rdx)             # imm,memBase :: 
     movq     0x48(%r14),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x8(%rdx)          # reg,memOffsetBase :: 
     movq     %rdx,0x48(%r14)         # reg,memOffsetBase :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xef11              # value ::  target: 0xef11 CodeAddr: 0xef11
Addr0xef4c:
     movq     0x0(%rbp),%r15          # memOffsetBase,reg :: 
Addr0xef50:
     movq     $0x0,0x8(%rbp)          # imm,memOffsetBase :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     jne      Addr0xeed8              # value ::  target: 0xeed8 CodeAddr: 0xeed8
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0xebd0              # value ::  target: 0xebd0 CodeAddr: 0xebd0 CALLS 0xebd0
     cmpq     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     je       Addr0xefd0              # value ::  target: 0xefd0 CodeAddr: 0xefd0
     movq     0x48(%r14),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xefda              # value ::  target: 0xefda CodeAddr: 0xefda
     movq     0x8(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x48(%r14)         # reg,memOffsetBase :: 
Addr0xef86:
     movq     0x8(%rbx),%rdx          # memOffsetBase,reg :: 
     movq     %r15,(%rax)             # reg,memBase :: 
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
Addr0xef95:
     movq     $0x0,0x0(%rbp)          # imm,memOffsetBase :: 
     addq     $0x10,%rbp              # imm,reg ::  modifies flags!!
     subq     $0x1,0x18(%r12)         # imm,memOffsetBase ::  modifies flags!!
     cmpq     %rbp,0x8(%r12)          # reg,memOffsetBase ::  modifies flags!!
     ja       Addr0xeee7              # value ::  target: 0xeee7 CodeAddr: 0xeee7
Addr0xefb2:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0x1,%eax               # imm,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xefd0:
     movq     %r15,(%rax)             # reg,memBase :: 
     addq     $0x1,0x18(%r14)         # imm,memOffsetBase ::  modifies flags!!
     jmp      Addr0xef95              # value ::  target: 0xef95 CodeAddr: 0xef95
Addr0xefda:
     movl     $0x10,%edi              # imm,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xef86              # value ::  target: 0xef86 CodeAddr: 0xef86
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    

# ----------- Function 253 ------------ 
#
# startAddr  = 0xf000
# startindex = 10811
# endAddr    = 0xf008
# endindex   = 10813
# len        = 9 (0x9)
# len1       = 16 (0x10) to (0xf009)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf000:
     endbr64 
     movq     0x10(%rdi),%rax         # memOffsetBase,reg :: 
     retq    

# ----------- Function 254 ------------ 
#
# startAddr  = 0xf010
# startindex = 10815
# endAddr    = 0xf018
# endindex   = 10817
# len        = 9 (0x9)
# len1       = 16 (0x10) to (0xf019)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf010:
     endbr64 
     movq     0x18(%rdi),%rax         # memOffsetBase,reg :: 
     retq    

# ----------- Function 255 ------------ 
#
# startAddr  = 0xf020
# startindex = 10819
# endAddr    = 0xf028
# endindex   = 10821
# len        = 9 (0x9)
# len1       = 16 (0x10) to (0xf029)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf020:
     endbr64 
     movq     0x20(%rdi),%rax         # memOffsetBase,reg :: 
     retq    

# ----------- Function 256 ------------ 
#
# startAddr  = 0xf030
# startindex = 10823
# endAddr    = 0xf088
# endindex   = 10851
# len        = 89 (0x59)
# len1       = 96 (0x60) to (0xf089)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf030:
     endbr64 
     movq     (%rdi),%rcx             # memBase,reg :: 
     movq     0x8(%rdi),%rsi          # memOffsetBase,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0xf051              # value ::  target: 0xf051 CodeAddr: 0xf051
     jmp      Addr0xf085              # value ::  target: 0xf085 CodeAddr: 0xf085
Addr0xf048:
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jae      Addr0xf085              # value ::  target: 0xf085 CodeAddr: 0xf085
Addr0xf051:
     cmpq     $0x0,(%rcx)             # imm,memBase ::  modifies flags!!
     je       Addr0xf048              # value ::  target: 0xf048 CodeAddr: 0xf048
     movq     0x8(%rcx),%rax          # memOffsetBase,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf075              # value ::  target: 0xf075 CodeAddr: 0xf075
Addr0xf068:
     movq     0x8(%rax),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xf068              # value ::  target: 0xf068 CodeAddr: 0xf068
Addr0xf075:
     cmpq     %rdx,%r8                # reg,reg ::  modifies flags!!
     cmovbq   %rdx,%r8                # reg,reg :: 
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0xf051              # value ::  target: 0xf051 CodeAddr: 0xf051
Addr0xf085:
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 257 ------------ 
#
# startAddr  = 0xf090
# startindex = 10853
# endAddr    = 0xf0f6
# endindex   = 10885
# len        = 103 (0x67)
# len1       = 112 (0x70) to (0xf0f7)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf090:
     endbr64 
     movq     (%rdi),%rcx             # memBase,reg :: 
     movq     0x8(%rdi),%rsi          # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0xf0b9              # value ::  target: 0xf0b9 CodeAddr: 0xf0b9
     jmp      Addr0xf0e6              # value ::  target: 0xf0e6 CodeAddr: 0xf0e6
Addr0xf0b0:
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jae      Addr0xf0e6              # value ::  target: 0xf0e6 CodeAddr: 0xf0e6
Addr0xf0b9:
     cmpq     $0x0,(%rcx)             # imm,memBase ::  modifies flags!!
     je       Addr0xf0b0              # value ::  target: 0xf0b0 CodeAddr: 0xf0b0
     movq     0x8(%rcx),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%r8                # imm,reg ::  modifies flags!!
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf0b0              # value ::  target: 0xf0b0 CodeAddr: 0xf0b0
Addr0xf0d0:
     movq     0x8(%rax),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xf0d0              # value ::  target: 0xf0d0 CodeAddr: 0xf0d0
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0xf0b9              # value ::  target: 0xf0b9 CodeAddr: 0xf0b9
Addr0xf0e6:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     %r8,0x18(%rdi)          # reg,memOffsetBase ::  modifies flags!!
     je       Addr0xf0ef              # value ::  target: 0xf0ef CodeAddr: 0xf0ef
     retq    
Addr0xf0ef:
     cmpq     %rdx,0x20(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     sete     %al                     # reg :: 
     retq    

# ----------- Function 258 ------------ 
#
# startAddr  = 0xf100
# startindex = 10887
# endAddr    = 0xf256
# endindex   = 10981
# len        = 343 (0x157)
# len1       = 352 (0x160) to (0xf257)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0xf100:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     (%rdi),%rcx             # memBase,reg :: 
     movq     0x8(%rdi),%rsi          # memOffsetBase,reg :: 
     movq     0x20(%rdi),%r8          # memOffsetBase,reg :: 
     movq     0x10(%rdi),%rbx         # memOffsetBase,reg :: 
     movq     0x18(%rdi),%r13         # memOffsetBase,reg :: 
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0xf139              # value ::  target: 0xf139 CodeAddr: 0xf139
     jmp      Addr0xf16d              # value ::  target: 0xf16d CodeAddr: 0xf16d
Addr0xf130:
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jae      Addr0xf16d              # value ::  target: 0xf16d CodeAddr: 0xf16d
Addr0xf139:
     cmpq     $0x0,(%rcx)             # imm,memBase ::  modifies flags!!
     je       Addr0xf130              # value ::  target: 0xf130 CodeAddr: 0xf130
     movq     0x8(%rcx),%rax          # memOffsetBase,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf15d              # value ::  target: 0xf15d CodeAddr: 0xf15d
Addr0xf150:
     movq     0x8(%rax),%rax          # memOffsetBase,reg :: 
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xf150              # value ::  target: 0xf150 CodeAddr: 0xf150
Addr0xf15d:
     cmpq     %rdx,%r12               # reg,reg ::  modifies flags!!
     cmovbq   %rdx,%r12               # reg,reg :: 
     addq     $0x10,%rcx              # imm,reg ::  modifies flags!!
     cmpq     %rsi,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0xf139              # value ::  target: 0xf139 CodeAddr: 0xf139
Addr0xf16d:
     movq     %r8,%rcx                # reg,reg :: 
     leaq     Var0x1bee2(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bee2
     movq     %rbp,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x1,%esi               # imm,reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rbx,%rcx               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x1befa(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1befa
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     testq    %r13,%r13               # reg,reg ::  modifies flags!!
     js       Addr0xf210              # value ::  target: 0xf210 CodeAddr: 0xf210
     pxor     %xmm0,%xmm0             # reg,reg :: 
     cvtsi2sdq %r13,%xmm0              # reg,reg :: 
     mulsd    Var0x1bf90(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf90 modifies flags!!
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     js       Addr0xf239              # value ::  target: 0xf239 CodeAddr: 0xf239
Addr0xf1ba:
     pxor     %xmm1,%xmm1             # reg,reg :: 
     cvtsi2sdq %rbx,%xmm1              # reg,reg :: 
Addr0xf1c3:
     divsd    %xmm1,%xmm0             # reg,reg :: 
     movq     %r13,%rcx               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x1bf30(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bf30
     movl     $0x1,%eax               # imm,reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r12,%rcx               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbx                    # reg :: 
     leaq     Var0x1bf12(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bf12
     popq     %rbp                    # reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     popq     %r12                    # reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %r13                    # reg :: 
     jmp      Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20
Addr0xf210:
     movq     %r13,%rax               # reg,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     pxor     %xmm0,%xmm0             # reg,reg :: 
     shrq     %rax                    # reg ::  modifies flags!!
     andl     $0x1,%edx               # imm,reg ::  modifies flags!!
     orq      %rdx,%rax               # reg,reg ::  modifies flags!!
     cvtsi2sdq %rax,%xmm0              # reg,reg :: 
     addsd    %xmm0,%xmm0             # reg,reg ::  modifies flags!!
     mulsd    Var0x1bf90(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf90 modifies flags!!
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jns      Addr0xf1ba              # value ::  target: 0xf1ba CodeAddr: 0xf1ba
Addr0xf239:
     movq     %rbx,%rax               # reg,reg :: 
     andl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     pxor     %xmm1,%xmm1             # reg,reg :: 
     shrq     %rax                    # reg ::  modifies flags!!
     orq      %rbx,%rax               # reg,reg ::  modifies flags!!
     cvtsi2sdq %rax,%xmm1              # reg,reg :: 
     addsd    %xmm1,%xmm1             # reg,reg ::  modifies flags!!
     jmp      Addr0xf1c3              # value ::  target: 0xf1c3 CodeAddr: 0xf1c3

# ----------- Function 259 ------------ 
#
# startAddr  = 0xf260
# startindex = 10983
# endAddr    = 0xf2b2
# endindex   = 11016
# len        = 83 (0x53)
# len1       = 94 (0x5e) to (0xf2b3)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf260:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     callq    Addr0xebd0              # value ::  target: 0xebd0 CodeAddr: 0xebd0 CALLS 0xebd0
     movq     (%rax),%rsi             # memBase,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xf29d              # value ::  target: 0xf29d CodeAddr: 0xf29d
     movq     %rax,%rbx               # reg,reg :: 
     jmp      Addr0xf283              # value ::  target: 0xf283 CodeAddr: 0xf283
Addr0xf280:
     movq     (%rbx),%rsi             # memBase,reg :: 
Addr0xf283:
     cmpq     %rbp,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0xf2ab              # value ::  target: 0xf2ab CodeAddr: 0xf2ab
     movq     %rbp,%rdi               # reg,reg :: 
     callq    *0x38(%r12)             # memOffsetBase :: "*0x38(%r12)" != "0x38(%r12)" no target? 
#{'addr': 62091, 'op': 'callq', 'args': [Arg(argText='0x38(%r12)', star='*', offset=56, imm=None, reg=None, type='memOffsetBase', index=None, scale=None, value=None, base='%r12', calcAddr=None, segReg=None, round=None)], 'idx': 10999, 'size': 5}
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xf2a8              # value ::  target: 0xf2a8 CodeAddr: 0xf2a8
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xf280              # value ::  target: 0xf280 CodeAddr: 0xf280
Addr0xf29d:
     popq     %rbx                    # reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0xf2a8:
     movq     (%rbx),%rbp             # memBase,reg :: 
Addr0xf2ab:
     movq     %rbp,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 260 ------------ 
#
# startAddr  = 0xf2c0
# startindex = 11019
# endAddr    = 0xf30b
# endindex   = 11041
# len        = 76 (0x4c)
# len1       = 80 (0x50) to (0xf30c)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xf2c0:
     endbr64 
     cmpq     $0x0,0x20(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xf300              # value ::  target: 0xf300 CodeAddr: 0xf300
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     (%rdi),%rax             # memBase,reg :: 
     movq     0x8(%rdi),%rdx          # memOffsetBase,reg :: 
     cmpq     %rdx,%rax               # reg,reg ::  modifies flags!!
     jb       Addr0xf2e9              # value ::  target: 0xf2e9 CodeAddr: 0xf2e9
     jmp      Addr0x4daf              # value ::  target: 0x4daf CodeAddr: 0x4daf
Addr0xf2e0:
     addq     $0x10,%rax              # imm,reg ::  modifies flags!!
     cmpq     %rdx,%rax               # reg,reg ::  modifies flags!!
     jae      Addr0xf307              # value ::  target: 0xf307 CodeAddr: 0xf307
Addr0xf2e9:
     movq     (%rax),%r8              # memBase,reg :: 
     testq    %r8,%r8                 # reg,reg ::  modifies flags!!
     je       Addr0xf2e0              # value ::  target: 0xf2e0 CodeAddr: 0xf2e0
     movq     %r8,%rax                # reg,reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0xf300:
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     retq    
Addr0xf307:
     jmp      Addr0x4daf              # value ::  target: 0x4daf CodeAddr: 0x4daf

# ----------- Function 261 ------------ 
#
# startAddr  = 0xf310
# startindex = 11043
# endAddr    = 0xf37c
# endindex   = 11082
# len        = 109 (0x6d)
# len1       = 112 (0x70) to (0xf37d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf310:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0xebd0              # value ::  target: 0xebd0 CodeAddr: 0xebd0 CALLS 0xebd0
     movq     %rax,%rdx               # reg,reg :: 
     jmp      Addr0xf335              # value ::  target: 0xf335 CodeAddr: 0xf335
Addr0xf330:
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xf346              # value ::  target: 0xf346 CodeAddr: 0xf346
Addr0xf335:
     movq     (%rdx),%rcx             # memBase,reg :: 
     movq     0x8(%rdx),%rdx          # memOffsetBase,reg :: 
     cmpq     %rbx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0xf330              # value ::  target: 0xf330 CodeAddr: 0xf330
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0xf370              # value ::  target: 0xf370 CodeAddr: 0xf370
Addr0xf346:
     movq     0x8(%rbp),%rdx          # memOffsetBase,reg :: 
     jmp      Addr0xf358              # value ::  target: 0xf358 CodeAddr: 0xf358
Addr0xf350:
     movq     (%rax),%r8              # memBase,reg :: 
     testq    %r8,%r8                 # reg,reg ::  modifies flags!!
     jne      Addr0xf364              # value ::  target: 0xf364 CodeAddr: 0xf364
Addr0xf358:
     addq     $0x10,%rax              # imm,reg ::  modifies flags!!
     cmpq     %rax,%rdx               # reg,reg ::  modifies flags!!
     ja       Addr0xf350              # value ::  target: 0xf350 CodeAddr: 0xf350
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0xf364:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0xf370:
     movq     (%rdx),%r8              # memBase,reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 262 ------------ 
#
# startAddr  = 0xf380
# startindex = 11084
# endAddr    = 0xf3c2
# endindex   = 11106
# len        = 67 (0x43)
# len1       = 78 (0x4e) to (0xf3c3)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf380:
     endbr64 
     movq     (%rdi),%r9              # memBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     %r9,0x8(%rdi)           # reg,memOffsetBase ::  modifies flags!!
     jbe      Addr0xf3c2              # value ::  target: 0xf3c2 CodeAddr: 0xf3c2
Addr0xf38f:
     cmpq     $0x0,(%r9)              # imm,memBase ::  modifies flags!!
     jne      Addr0xf3a0              # value ::  target: 0xf3a0 CodeAddr: 0xf3a0
Addr0xf395:
     addq     $0x10,%r9               # imm,reg ::  modifies flags!!
     cmpq     %r9,0x8(%rdi)           # reg,memOffsetBase ::  modifies flags!!
     ja       Addr0xf38f              # value ::  target: 0xf38f CodeAddr: 0xf38f
     retq    
Addr0xf3a0:
     movq     %r9,%rcx                # reg,reg :: 
     jmp      Addr0xf3bd              # value ::  target: 0xf3bd CodeAddr: 0xf3bd
Addr0xf3a8:
     movq     (%rcx),%r8              # memBase,reg :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movq     %r8,-0x8(%rsi,%rax,8)   # reg,memOffsetBaseIndexScale :: 
     movq     0x8(%rcx),%rcx          # memOffsetBase,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     je       Addr0xf395              # value ::  target: 0xf395 CodeAddr: 0xf395
Addr0xf3bd:
     cmpq     %rax,%rdx               # reg,reg ::  modifies flags!!
     ja       Addr0xf3a8              # value ::  target: 0xf3a8 CodeAddr: 0xf3a8
Addr0xf3c2:
     retq    

# ----------- Function 263 ------------ 
#
# startAddr  = 0xf3d0
# startindex = 11109
# endAddr    = 0xf447
# endindex   = 11154
# len        = 120 (0x78)
# len1       = 128 (0x80) to (0xf448)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf3d0:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     (%rdi),%r14             # memBase,reg :: 
     cmpq     %r14,0x8(%rdi)          # reg,memOffsetBase ::  modifies flags!!
     jbe      Addr0xf443              # value ::  target: 0xf443 CodeAddr: 0xf443
     movq     %rdi,%r15               # reg,reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
Addr0xf3f7:
     movq     (%r14),%rdi             # memBase,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0xf420              # value ::  target: 0xf420 CodeAddr: 0xf420
Addr0xf3ff:
     addq     $0x10,%r14              # imm,reg ::  modifies flags!!
     cmpq     %r14,0x8(%r15)          # reg,memOffsetBase ::  modifies flags!!
     ja       Addr0xf3f7              # value ::  target: 0xf3f7 CodeAddr: 0xf3f7
Addr0xf409:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xf420:
     movq     %r14,%rbx               # reg,reg :: 
     jmp      Addr0xf438              # value ::  target: 0xf438 CodeAddr: 0xf438
Addr0xf428:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xf3ff              # value ::  target: 0xf3ff CodeAddr: 0xf3ff
     movq     (%rbx),%rdi             # memBase,reg :: 
Addr0xf438:
     movq     %r13,%rsi               # reg,reg :: 
     callq    *%rbp                   # reg :: "*%rbp" != "%rbp" no target? 
#{'addr': 62523, 'op': 'callq', 'args': [Arg(argText='%rbp', star='*', offset=None, imm=None, reg='%rbp', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 11149, 'size': 2}
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xf428              # value ::  target: 0xf428 CodeAddr: 0xf428
     jmp      Addr0xf409              # value ::  target: 0xf409 CodeAddr: 0xf409
Addr0xf443:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     jmp      Addr0xf409              # value ::  target: 0xf409 CodeAddr: 0xf409

# ----------- Function 264 ------------ 
#
# startAddr  = 0xf450
# startindex = 11156
# endAddr    = 0xf480
# endindex   = 11173
# len        = 49 (0x31)
# len1       = 60 (0x3c) to (0xf481)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf450:
     endbr64 
     movzbl   (%rdi),%ecx             # memBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0xf47d              # value ::  target: 0xf47d CodeAddr: 0xf47d
Addr0xf460:
     movq     %rdx,%rax               # reg,reg :: 
     addq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     shlq     $0x5,%rax               # imm,reg ::  modifies flags!!
     subq     %rdx,%rax               # reg,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     movzbl   (%rdi),%ecx             # memBase,reg :: 
     divq     %rsi                    # reg :: 
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0xf460              # value ::  target: 0xf460 CodeAddr: 0xf460
Addr0xf47d:
     movq     %rdx,%rax               # reg,reg :: 
     retq    

# ----------- Function 265 ------------ 
#
# startAddr  = 0xf490
# startindex = 11176
# endAddr    = 0xf4b3
# endindex   = 11182
# len        = 36 (0x24)
# len1       = 47 (0x2f) to (0xf4b4)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf490:
     endbr64 
     movabsq  $0x3f80000000000000,%rax# imm,reg :: 
     movb     $0x0,0x10(%rdi)         # imm,memOffsetBase :: 
     movq     %rax,(%rdi)             # reg,memBase :: 
     movabsq  $0x3fb4fdf43f4ccccd,%rax# imm,reg :: 
     movq     %rax,0x8(%rdi)          # reg,memOffsetBase :: 
     retq    

# ----------- Function 266 ------------ 
#
# startAddr  = 0xf4c0
# startindex = 11185
# endAddr    = 0xf5cc
# endindex   = 11253
# len        = 269 (0x10d)
# len1       = 272 (0x110) to (0xf5cd)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xf4c0:
     endbr64 
     pushq    %r15                    # reg :: 
     leaq     Addr0xeba0(%rip),%rax   # memOffsetBase,reg ::  CodeAddr: 0xeba0
     movq     %rsi,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     %r8,%r14                # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     movl     $0x50,%edi              # imm,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rcx,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rbp               # reg,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     leaq     Addr0xebc0(%rip),%rax   # memOffsetBase,reg ::  CodeAddr: 0xebc0
     cmoveq   %rax,%rbx               # reg,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf5a4              # value ::  target: 0xf5a4 CodeAddr: 0xf5a4
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     leaq     Var0x1bf60(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1bf60
     leaq     0x28(%r12),%rdi         # memOffsetBase,reg :: 
     cmoveq   %rax,%r15               # reg,reg :: 
     movq     %r15,0x28(%r12)         # reg,memOffsetBase :: 
     callq    Addr0xed00              # value ::  target: 0xed00 CodeAddr: 0xed00 CALLS 0xed00
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xf5c0              # value ::  target: 0xf5c0 CodeAddr: 0xf5c0
     movzbl   0x10(%r15),%esi         # memOffsetBase,reg :: 
     movss    0x8(%r15),%xmm0         # memOffsetBase,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0xed80              # value ::  target: 0xed80 CodeAddr: 0xed80 CALLS 0xed80
     movq     %rax,0x10(%r12)         # reg,memOffsetBase :: 
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf5c0              # value ::  target: 0xf5c0 CodeAddr: 0xf5c0
     movl     $0x10,%esi              # imm,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a60              # value ::  target: 0x4a60 CodeAddr: 0x4a60 CALLS 0x4a60
     movq     %rax,(%r12)             # reg,memBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf5c0              # value ::  target: 0xf5c0 CodeAddr: 0xf5c0
     shlq     $0x4,%r13               # imm,reg ::  modifies flags!!
     movq     %rbp,0x30(%r12)         # reg,memOffsetBase :: 
     addq     %rax,%r13               # reg,reg ::  modifies flags!!
     movq     %rbx,0x38(%r12)         # reg,memOffsetBase :: 
     movq     %r13,0x8(%r12)          # reg,memOffsetBase :: 
     movq     $0x0,0x18(%r12)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%r12)         # imm,memOffsetBase :: 
     movq     %r14,0x40(%r12)         # reg,memOffsetBase :: 
     movq     $0x0,0x48(%r12)         # imm,memOffsetBase :: 
Addr0xf5a4:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0xf5c0:
     movq     %r12,%rdi               # reg,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     jmp      Addr0xf5a4              # value ::  target: 0xf5a4 CodeAddr: 0xf5a4

# ----------- Function 267 ------------ 
#
# startAddr  = 0xf5d0
# startindex = 11255
# endAddr    = 0xf67f
# endindex   = 11303
# len        = 176 (0xb0)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0xf5d0:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     (%rdi),%r12             # memBase,reg :: 
     cmpq     0x8(%rdi),%r12          # memOffsetBase,reg ::  modifies flags!!
     jb       Addr0xf5fa              # value ::  target: 0xf5fa CodeAddr: 0xf5fa
     jmp      Addr0xf66b              # value ::  target: 0xf66b CodeAddr: 0xf66b
Addr0xf5f0:
     addq     $0x10,%r12              # imm,reg ::  modifies flags!!
     cmpq     %r12,0x8(%rbp)          # reg,memOffsetBase ::  modifies flags!!
     jbe      Addr0xf66b              # value ::  target: 0xf66b CodeAddr: 0xf66b
Addr0xf5fa:
     cmpq     $0x0,(%r12)             # imm,memBase ::  modifies flags!!
     je       Addr0xf5f0              # value ::  target: 0xf5f0 CodeAddr: 0xf5f0
     movq     0x8(%r12),%rbx          # memOffsetBase,reg :: 
     movq     0x40(%rbp),%rdx         # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xf61b              # value ::  target: 0xf61b CodeAddr: 0xf61b
     jmp      Addr0xf645              # value ::  target: 0xf645 CodeAddr: 0xf645
Addr0xf618:
     movq     %rax,%rbx               # reg,reg :: 
Addr0xf61b:
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xf629              # value ::  target: 0xf629 CodeAddr: 0xf629
     movq     (%rbx),%rdi             # memBase,reg :: 
     callq    *%rdx                   # reg :: "*%rdx" != "%rdx" no target? 
#{'addr': 63011, 'op': 'callq', 'args': [Arg(argText='%rdx', star='*', offset=None, imm=None, reg='%rdx', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 11280, 'size': 2}
     movq     0x40(%rbp),%rdx         # memOffsetBase,reg :: 
Addr0xf629:
     movq     0x8(%rbx),%rax          # memOffsetBase,reg :: 
     movq     0x48(%rbp),%rcx         # memOffsetBase,reg :: 
     movq     $0x0,(%rbx)             # imm,memBase :: 
     movq     %rcx,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     %rbx,0x48(%rbp)         # reg,memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0xf618              # value ::  target: 0xf618 CodeAddr: 0xf618
Addr0xf645:
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0xf650              # value ::  target: 0xf650 CodeAddr: 0xf650
     movq     (%r12),%rdi             # memBase,reg :: 
     callq    *%rdx                   # reg :: "*%rdx" != "%rdx" no target? 
#{'addr': 63054, 'op': 'callq', 'args': [Arg(argText='%rdx', star='*', offset=None, imm=None, reg='%rdx', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 11292, 'size': 2}
Addr0xf650:
     movq     $0x0,(%r12)             # imm,memBase :: 
     addq     $0x10,%r12              # imm,reg ::  modifies flags!!
     movq     $0x0,-0x8(%r12)         # imm,memOffsetBase :: 
     cmpq     %r12,0x8(%rbp)          # reg,memOffsetBase ::  modifies flags!!
     ja       Addr0xf5fa              # value ::  target: 0xf5fa CodeAddr: 0xf5fa
Addr0xf66b:
     popq     %rbx                    # reg :: 
     movq     $0x0,0x18(%rbp)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%rbp)         # imm,memOffsetBase :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 268 ------------ 
#
# startAddr  = 0xf680
# startindex = 11304
# endAddr    = 0xf765
# endindex   = 11368
# len        = 230 (0xe6)
# len1       = 240 (0xf0) to (0xf766)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0xf680:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     cmpq     $0x0,0x40(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     movq     (%rdi),%rbp             # memBase,reg :: 
     movq     0x8(%rdi),%rax          # memOffsetBase,reg :: 
     je       Addr0xf6f3              # value ::  target: 0xf6f3 CodeAddr: 0xf6f3
     cmpq     $0x0,0x20(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xf6f3              # value ::  target: 0xf6f3 CodeAddr: 0xf6f3
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     jb       Addr0xf6b9              # value ::  target: 0xf6b9 CodeAddr: 0xf6b9
     jmp      Addr0xf72c              # value ::  target: 0xf72c CodeAddr: 0xf72c
Addr0xf6b0:
     addq     $0x10,%rbp              # imm,reg ::  modifies flags!!
     cmpq     %rbp,%rax               # reg,reg ::  modifies flags!!
     jbe      Addr0xf6ef              # value ::  target: 0xf6ef CodeAddr: 0xf6ef
Addr0xf6b9:
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0xf6b0              # value ::  target: 0xf6b0 CodeAddr: 0xf6b0
     movq     %rbp,%rbx               # reg,reg :: 
     jmp      Addr0xf6d3              # value ::  target: 0xf6d3 CodeAddr: 0xf6d3
Addr0xf6d0:
     movq     (%rbx),%rdi             # memBase,reg :: 
Addr0xf6d3:
     callq    *0x40(%r12)             # memOffsetBase :: "*0x40(%r12)" != "0x40(%r12)" no target? 
#{'addr': 63187, 'op': 'callq', 'args': [Arg(argText='0x40(%r12)', star='*', offset=64, imm=None, reg=None, type='memOffsetBase', index=None, scale=None, value=None, base='%r12', calcAddr=None, segReg=None, round=None)], 'idx': 11329, 'size': 5}
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xf6d0              # value ::  target: 0xf6d0 CodeAddr: 0xf6d0
     movq     0x8(%r12),%rax          # memOffsetBase,reg :: 
     addq     $0x10,%rbp              # imm,reg ::  modifies flags!!
     cmpq     %rbp,%rax               # reg,reg ::  modifies flags!!
     ja       Addr0xf6b9              # value ::  target: 0xf6b9 CodeAddr: 0xf6b9
Addr0xf6ef:
     movq     (%r12),%rbp             # memBase,reg :: 
Addr0xf6f3:
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     jae      Addr0xf72c              # value ::  target: 0xf72c CodeAddr: 0xf72c
Addr0xf700:
     movq     0x8(%rbp),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xf721              # value ::  target: 0xf721 CodeAddr: 0xf721
Addr0xf710:
     movq     %rbx,%rdi               # reg,reg :: 
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xf710              # value ::  target: 0xf710 CodeAddr: 0xf710
Addr0xf721:
     addq     $0x10,%rbp              # imm,reg ::  modifies flags!!
     cmpq     %rbp,0x8(%r12)          # reg,memOffsetBase ::  modifies flags!!
     ja       Addr0xf700              # value ::  target: 0xf700 CodeAddr: 0xf700
Addr0xf72c:
     movq     0x48(%r12),%rbx         # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0xf751              # value ::  target: 0xf751 CodeAddr: 0xf751
Addr0xf740:
     movq     %rbx,%rdi               # reg,reg :: 
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0xf740              # value ::  target: 0xf740 CodeAddr: 0xf740
Addr0xf751:
     movq     (%r12),%rdi             # memBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     popq     %rbx                    # reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0

# ----------- Function 269 ------------ 
#
# startAddr  = 0xf770
# startindex = 11370
# endAddr    = 0xf8f3
# endindex   = 11465
# len        = 388 (0x184)
# len1       = 399 (0x18f) to (0xf8f4)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xf770:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     movq     %rsi,%rdi               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x68,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28(%rbp),%r12         # memOffsetBase,reg :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x58(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movzbl   0x10(%r12),%esi         # memOffsetBase,reg :: 
     movss    0x8(%r12),%xmm0         # memOffsetBase,reg :: 
     callq    Addr0xed80              # value ::  target: 0xed80 CodeAddr: 0xed80 CALLS 0xed80
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf8b0              # value ::  target: 0xf8b0 CodeAddr: 0xf8b0
     movq     %rax,%rbx               # reg,reg :: 
     cmpq     %rax,0x10(%rbp)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0xf8a0              # value ::  target: 0xf8a0 CodeAddr: 0xf8a0
     movl     $0x10,%esi              # imm,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a60              # value ::  target: 0x4a60 CodeAddr: 0x4a60 CALLS 0x4a60
     movq     %rax,(%rsp)             # reg,memBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf8b0              # value ::  target: 0xf8b0 CodeAddr: 0xf8b0
     movq     %rbx,0x10(%rsp)         # reg,memOffsetBase :: 
     shlq     $0x4,%rbx               # imm,reg ::  modifies flags!!
     movq     %rsp,%r13               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     addq     %rax,%rbx               # reg,reg ::  modifies flags!!
     movq     0x30(%rbp),%rax         # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     movq     %r12,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     movq     0x38(%rbp),%rax         # memOffsetBase,reg :: 
     movq     %rbx,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     movq     0x40(%rbp),%rax         # memOffsetBase,reg :: 
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     0x48(%rbp),%rax         # memOffsetBase,reg :: 
     movq     $0x0,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x48(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0xeeb0              # value ::  target: 0xeeb0 CodeAddr: 0xeeb0 CALLS 0xeeb0
     movl     %eax,%r12d              # reg,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xf8b8              # value ::  target: 0xf8b8 CodeAddr: 0xf8b8
     movq     0x48(%rsp),%rax         # memOffsetBase,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,0x48(%rbp)         # reg,memOffsetBase :: 
     callq    Addr0xeeb0              # value ::  target: 0xeeb0 CodeAddr: 0xeeb0 CALLS 0xeeb0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x4db4              # value ::  target: 0x4db4 CodeAddr: 0x4db4
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0xeeb0              # value ::  target: 0xeeb0 CodeAddr: 0xeeb0 CALLS 0xeeb0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x4db4              # value ::  target: 0x4db4 CodeAddr: 0x4db4
     movq     (%rsp),%rdi             # memBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
Addr0xf87c:
     movq     0x58(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xf8ef              # value ::  target: 0xf8ef CodeAddr: 0xf8ef
     addq     $0x68,%rsp              # imm,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0xf8a0:
     movl     $0x1,%r12d              # imm,reg :: 
     jmp      Addr0xf87c              # value ::  target: 0xf87c CodeAddr: 0xf87c
Addr0xf8b0:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     jmp      Addr0xf87c              # value ::  target: 0xf87c CodeAddr: 0xf87c
Addr0xf8b8:
     movq     0x0(%rbp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     %rax,0x0(%rbp)          # reg,memOffsetBase :: 
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movq     %rax,0x8(%rbp)          # reg,memOffsetBase :: 
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x10(%rbp)         # reg,memOffsetBase :: 
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x18(%rbp)         # reg,memOffsetBase :: 
     movq     0x48(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x48(%rbp)         # reg,memOffsetBase :: 
     jmp      Addr0xf87c              # value ::  target: 0xf87c CodeAddr: 0xf87c
Addr0xf8ef:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 270 ------------ 
#
# startAddr  = 0xf900
# startindex = 11468
# endAddr    = 0xfb98
# endindex   = 11632
# len        = 665 (0x299)
# len1       = 672 (0x2a0) to (0xfb99)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xf900:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x4db9              # value ::  target: 0x4db9 CodeAddr: 0x4db9
     movq     %rsp,%r12               # reg,reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     movq     %rdi,%rbx               # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     callq    Addr0xec00              # value ::  target: 0xec00 CodeAddr: 0xec00 CALLS 0xec00
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf970              # value ::  target: 0xf970 CodeAddr: 0xf970
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     testq    %r13,%r13               # reg,reg ::  modifies flags!!
     je       Addr0xf94e              # value ::  target: 0xf94e CodeAddr: 0xf94e
     movq     %rax,0x0(%r13)          # reg,memOffsetBase :: 
Addr0xf94e:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xfb94              # value ::  target: 0xfb94 CodeAddr: 0xfb94
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movl     %r8d,%eax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0xf970:
     movq     0x18(%rbx),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xf9f0              # value ::  target: 0xf9f0 CodeAddr: 0xf9f0
     pxor     %xmm1,%xmm1             # reg,reg :: 
     movq     0x28(%rbx),%rdx         # memOffsetBase,reg :: 
     cvtsi2ssq %rax,%xmm1              # reg,reg :: 
     movq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xfa1a              # value ::  target: 0xfa1a CodeAddr: 0xfa1a
Addr0xf993:
     pxor     %xmm0,%xmm0             # reg,reg :: 
     cvtsi2ssq %rax,%xmm0              # reg,reg :: 
     mulss    0x8(%rdx),%xmm0         # memOffsetBase,reg ::  modifies flags!!
     comiss   %xmm0,%xmm1             # reg,reg :: 
     ja       Addr0xfa41              # value ::  target: 0xfa41 CodeAddr: 0xfa41
Addr0xf9aa:
     movq     (%rsp),%r12             # memBase,reg :: 
     cmpq     $0x0,(%r12)             # imm,memBase ::  modifies flags!!
     je       Addr0xfab8              # value ::  target: 0xfab8 CodeAddr: 0xfab8
     movq     0x48(%rbx),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xfad8              # value ::  target: 0xfad8 CodeAddr: 0xfad8
     movq     0x8(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rdx,0x48(%rbx)         # reg,memOffsetBase :: 
Addr0xf9ce:
     movq     0x8(%r12),%rdx          # memOffsetBase,reg :: 
     movq     %rbp,(%rax)             # reg,memBase :: 
     movl     $0x1,%r8d               # imm,reg :: 
     movq     %rdx,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rax,0x8(%r12)          # reg,memOffsetBase :: 
     addq     $0x1,0x20(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     jmp      Addr0xf94e              # value ::  target: 0xf94e CodeAddr: 0xf94e
Addr0xf9f0:
     movq     %rax,%rdx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm1,%xmm1             # reg,reg :: 
     shrq     %rdx                    # reg ::  modifies flags!!
     orq      %rax,%rdx               # reg,reg ::  modifies flags!!
     movq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
     cvtsi2ssq %rdx,%xmm1              # reg,reg :: 
     movq     0x28(%rbx),%rdx         # memOffsetBase,reg :: 
     addss    %xmm1,%xmm1             # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jns      Addr0xf993              # value ::  target: 0xf993 CodeAddr: 0xf993
Addr0xfa1a:
     movq     %rax,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm0,%xmm0             # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     orq      %rax,%rcx               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rcx,%xmm0              # reg,reg :: 
     addss    %xmm0,%xmm0             # reg,reg ::  modifies flags!!
     mulss    0x8(%rdx),%xmm0         # memOffsetBase,reg ::  modifies flags!!
     comiss   %xmm0,%xmm1             # reg,reg :: 
     jbe      Addr0xf9aa              # value ::  target: 0xf9aa CodeAddr: 0xf9aa
Addr0xfa41:
     leaq     0x28(%rbx),%rdi         # memOffsetBase,reg :: 
     callq    Addr0xed00              # value ::  target: 0xed00 CodeAddr: 0xed00 CALLS 0xed00
     movq     0x28(%rbx),%rdx         # memOffsetBase,reg :: 
     movq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
     movss    0x8(%rdx),%xmm2         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xfb10              # value ::  target: 0xfb10 CodeAddr: 0xfb10
     pxor     %xmm0,%xmm0             # reg,reg :: 
     cvtsi2ssq %rax,%xmm0              # reg,reg :: 
Addr0xfa69:
     movq     0x18(%rbx),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xfaf0              # value ::  target: 0xfaf0 CodeAddr: 0xfaf0
     pxor     %xmm1,%xmm1             # reg,reg :: 
     cvtsi2ssq %rax,%xmm1              # reg,reg :: 
Addr0xfa7b:
     movaps   %xmm2,%xmm3             # reg,reg :: 
     mulss    %xmm0,%xmm3             # reg,reg ::  modifies flags!!
     comiss   %xmm3,%xmm1             # reg,reg :: 
     jbe      Addr0xf9aa              # value ::  target: 0xf9aa CodeAddr: 0xf9aa
     mulss    0xc(%rdx),%xmm0         # memOffsetBase,reg ::  modifies flags!!
     cmpb     $0x0,0x10(%rdx)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0xfb30              # value ::  target: 0xfb30 CodeAddr: 0xfb30
Addr0xfa9a:
     comiss   Var0x1bf88(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf88
     jb       Addr0xfb40              # value ::  target: 0xfb40 CodeAddr: 0xfb40
Addr0xfaa7:
     movl     $0xffffffff,%r8d        # imm,reg :: 
     jmp      Addr0xf94e              # value ::  target: 0xf94e CodeAddr: 0xf94e
Addr0xfab8:
     movq     %rbp,(%r12)             # reg,memBase :: 
     movl     $0x1,%r8d               # imm,reg :: 
     addq     $0x1,0x20(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     addq     $0x1,0x18(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     jmp      Addr0xf94e              # value ::  target: 0xf94e CodeAddr: 0xf94e
Addr0xfad8:
     movl     $0x10,%edi              # imm,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xfaa7              # value ::  target: 0xfaa7 CodeAddr: 0xfaa7
     jmp      Addr0xf9ce              # value ::  target: 0xf9ce CodeAddr: 0xf9ce
Addr0xfaf0:
     movq     %rax,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm1,%xmm1             # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     orq      %rax,%rcx               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rcx,%xmm1              # reg,reg :: 
     addss    %xmm1,%xmm1             # reg,reg ::  modifies flags!!
     jmp      Addr0xfa7b              # value ::  target: 0xfa7b CodeAddr: 0xfa7b
Addr0xfb10:
     movq     %rax,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm0,%xmm0             # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     orq      %rax,%rcx               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rcx,%xmm0              # reg,reg :: 
     addss    %xmm0,%xmm0             # reg,reg ::  modifies flags!!
     jmp      Addr0xfa69              # value ::  target: 0xfa69 CodeAddr: 0xfa69
Addr0xfb30:
     mulss    %xmm2,%xmm0             # reg,reg ::  modifies flags!!
     jmp      Addr0xfa9a              # value ::  target: 0xfa9a CodeAddr: 0xfa9a
Addr0xfb40:
     comiss   Var0x1bf8c(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf8c
     jae      Addr0xfb80              # value ::  target: 0xfb80 CodeAddr: 0xfb80
     cvttss2si %xmm0,%rsi              # reg,reg :: 
Addr0xfb4e:
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0xf770              # value ::  target: 0xf770 CodeAddr: 0xf770 CALLS 0xf770
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0xfaa7              # value ::  target: 0xfaa7 CodeAddr: 0xfaa7
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     movq     %r12,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0xec00              # value ::  target: 0xec00 CodeAddr: 0xec00 CALLS 0xec00
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xf9aa              # value ::  target: 0xf9aa CodeAddr: 0xf9aa
     jmp      Addr0x4db9              # value ::  target: 0x4db9 CodeAddr: 0x4db9
Addr0xfb80:
     subss    Var0x1bf8c(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf8c modifies flags!!
     cvttss2si %xmm0,%rsi              # reg,reg :: 
     btcq     $0x3f,%rsi              # imm,reg ::  modifies flags!!
     jmp      Addr0xfb4e              # value ::  target: 0xfb4e CodeAddr: 0xfb4e
Addr0xfb94:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 271 ------------ 
#
# startAddr  = 0xfba0
# startindex = 11634
# endAddr    = 0xfbf8
# endindex   = 11657
# len        = 89 (0x59)
# len1       = 96 (0x60) to (0xfbf9)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xfba0:
     endbr64 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsp,%rdx               # reg,reg :: 
     callq    Addr0xf900              # value ::  target: 0xf900 CodeAddr: 0xf900 CALLS 0xf900
     cmpl     $0xffffffff,%eax        # imm,reg ::  modifies flags!!
     je       Addr0xfbf0              # value ::  target: 0xfbf0 CodeAddr: 0xfbf0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rbx,%rax               # reg,reg :: 
     cmoveq   (%rsp),%rax             # memBase,reg :: 
Addr0xfbd3:
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0xfbf4              # value ::  target: 0xfbf4 CodeAddr: 0xfbf4
     addq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     retq    
Addr0xfbf0:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0xfbd3              # value ::  target: 0xfbd3 CodeAddr: 0xfbd3
Addr0xfbf4:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 272 ------------ 
#
# startAddr  = 0xfc00
# startindex = 11659
# endAddr    = 0xfdfb
# endindex   = 11785
# len        = 508 (0x1fc)
# len1       = 512 (0x200) to (0xfdfc)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xfc00:
     endbr64 
     pushq    %r12                    # reg :: 
     movl     $0x1,%ecx               # imm,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsp,%rdx               # reg,reg :: 
     callq    Addr0xec00              # value ::  target: 0xec00 CodeAddr: 0xec00 CALLS 0xec00
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0xfc43              # value ::  target: 0xfc43 CodeAddr: 0xfc43
     movq     (%rsp),%rax             # memBase,reg :: 
     subq     $0x1,0x20(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     cmpq     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     je       Addr0xfc68              # value ::  target: 0xfc68 CodeAddr: 0xfc68
Addr0xfc43:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0xfdf7              # value ::  target: 0xfdf7 CodeAddr: 0xfdf7
     addq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0xfc68:
     movq     0x18(%rbx),%rax         # memOffsetBase,reg :: 
     subq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,0x18(%rbx)         # reg,memOffsetBase :: 
     js       Addr0xfd50              # value ::  target: 0xfd50 CodeAddr: 0xfd50
     pxor     %xmm0,%xmm0             # reg,reg :: 
     movq     0x28(%rbx),%rdx         # memOffsetBase,reg :: 
     cvtsi2ssq %rax,%xmm0              # reg,reg :: 
     movq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xfd7a              # value ::  target: 0xfd7a CodeAddr: 0xfd7a
Addr0xfc94:
     pxor     %xmm1,%xmm1             # reg,reg :: 
     cvtsi2ssq %rax,%xmm1              # reg,reg :: 
Addr0xfc9d:
     mulss    (%rdx),%xmm1            # memBase,reg ::  modifies flags!!
     comiss   %xmm0,%xmm1             # reg,reg :: 
     jbe      Addr0xfc43              # value ::  target: 0xfc43 CodeAddr: 0xfc43
     leaq     0x28(%rbx),%rdi         # memOffsetBase,reg :: 
     callq    Addr0xed00              # value ::  target: 0xed00 CodeAddr: 0xed00 CALLS 0xed00
     movq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
     movq     0x28(%rbx),%rdx         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xfdc0              # value ::  target: 0xfdc0 CodeAddr: 0xfdc0
     pxor     %xmm0,%xmm0             # reg,reg :: 
     cvtsi2ssq %rax,%xmm0              # reg,reg :: 
Addr0xfcc9:
     movq     0x18(%rbx),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0xfda0              # value ::  target: 0xfda0 CodeAddr: 0xfda0
     pxor     %xmm1,%xmm1             # reg,reg :: 
     cvtsi2ssq %rax,%xmm1              # reg,reg :: 
Addr0xfcdf:
     movss    (%rdx),%xmm2            # memBase,reg :: 
     mulss    %xmm0,%xmm2             # reg,reg ::  modifies flags!!
     comiss   %xmm1,%xmm2             # reg,reg :: 
     jbe      Addr0xfc43              # value ::  target: 0xfc43 CodeAddr: 0xfc43
     mulss    0x4(%rdx),%xmm0         # memOffsetBase,reg ::  modifies flags!!
     cmpb     $0x0,0x10(%rdx)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0xfd00              # value ::  target: 0xfd00 CodeAddr: 0xfd00
     mulss    0x8(%rdx),%xmm0         # memOffsetBase,reg ::  modifies flags!!
Addr0xfd00:
     comiss   Var0x1bf8c(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf8c
     jae      Addr0xfde0              # value ::  target: 0xfde0 CodeAddr: 0xfde0
     cvttss2si %xmm0,%rsi              # reg,reg :: 
Addr0xfd12:
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0xf770              # value ::  target: 0xf770 CodeAddr: 0xf770 CALLS 0xf770
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0xfc43              # value ::  target: 0xfc43 CodeAddr: 0xfc43
     movq     0x48(%rbx),%rbp         # memOffsetBase,reg :: 
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     je       Addr0xfd41              # value ::  target: 0xfd41 CodeAddr: 0xfd41
Addr0xfd30:
     movq     %rbp,%rdi               # reg,reg :: 
     movq     0x8(%rbp),%rbp          # memOffsetBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0xfd30              # value ::  target: 0xfd30 CodeAddr: 0xfd30
Addr0xfd41:
     movq     $0x0,0x48(%rbx)         # imm,memOffsetBase :: 
     jmp      Addr0xfc43              # value ::  target: 0xfc43 CodeAddr: 0xfc43
Addr0xfd50:
     movq     %rax,%rdx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm0,%xmm0             # reg,reg :: 
     shrq     %rdx                    # reg ::  modifies flags!!
     orq      %rax,%rdx               # reg,reg ::  modifies flags!!
     movq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
     cvtsi2ssq %rdx,%xmm0              # reg,reg :: 
     movq     0x28(%rbx),%rdx         # memOffsetBase,reg :: 
     addss    %xmm0,%xmm0             # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jns      Addr0xfc94              # value ::  target: 0xfc94 CodeAddr: 0xfc94
Addr0xfd7a:
     movq     %rax,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm1,%xmm1             # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     orq      %rax,%rcx               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rcx,%xmm1              # reg,reg :: 
     addss    %xmm1,%xmm1             # reg,reg ::  modifies flags!!
     jmp      Addr0xfc9d              # value ::  target: 0xfc9d CodeAddr: 0xfc9d
Addr0xfda0:
     movq     %rax,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm1,%xmm1             # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     orq      %rax,%rcx               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rcx,%xmm1              # reg,reg :: 
     addss    %xmm1,%xmm1             # reg,reg ::  modifies flags!!
     jmp      Addr0xfcdf              # value ::  target: 0xfcdf CodeAddr: 0xfcdf
Addr0xfdc0:
     movq     %rax,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     pxor     %xmm0,%xmm0             # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     orq      %rax,%rcx               # reg,reg ::  modifies flags!!
     cvtsi2ssq %rcx,%xmm0              # reg,reg :: 
     addss    %xmm0,%xmm0             # reg,reg ::  modifies flags!!
     jmp      Addr0xfcc9              # value ::  target: 0xfcc9 CodeAddr: 0xfcc9
Addr0xfde0:
     subss    Var0x1bf8c(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x1bf8c modifies flags!!
     cvttss2si %xmm0,%rsi              # reg,reg :: 
     btcq     $0x3f,%rsi              # imm,reg ::  modifies flags!!
     jmp      Addr0xfd12              # value ::  target: 0xfd12 CodeAddr: 0xfd12
Addr0xfdf7:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 273 ------------ 
#
# startAddr  = 0xfe00
# startindex = 11787
# endAddr    = 0xfe2a
# endindex   = 11802
# len        = 43 (0x2b)
# len1       = 48 (0x30) to (0xfe2b)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xfe00:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     (%rdi),%rdi             # memBase,reg :: 
     callq    Addr0x17300             # value ::  target: 0x17300 CodeAddr: 0x17300 CALLS 0x17300
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorq     0x8(%rbp),%rax          # memOffsetBase,reg ::  modifies flags!!
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     divq     %rbx                    # reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     retq    

# ----------- Function 274 ------------ 
#
# startAddr  = 0xfe30
# startindex = 11804
# endAddr    = 0xfe40
# endindex   = 11809
# len        = 17 (0x11)
# len1       = 28 (0x1c) to (0xfe41)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xfe30:
     endbr64 
     movq     0x8(%rdi),%rax          # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rsi                    # reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     retq    

# ----------- Function 275 ------------ 
#
# startAddr  = 0xfe50
# startindex = 11812
# endAddr    = 0xfe7c
# endindex   = 11824
# len        = 45 (0x2d)
# len1       = 48 (0x30) to (0xfe7d)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0xfe50:
     endbr64 
     movq     0x8(%rsi),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,0x8(%rdi)          # reg,memOffsetBase ::  modifies flags!!
     je       Addr0xfe68              # value ::  target: 0xfe68 CodeAddr: 0xfe68
Addr0xfe5e:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     retq    
Addr0xfe68:
     movq     0x10(%rsi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x10(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0xfe5e              # value ::  target: 0xfe5e CodeAddr: 0xfe5e
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     jmp      Addr0x15230             # value ::  target: 0x15230 CodeAddr: 0x15230

# ----------- Function 276 ------------ 
#
# startAddr  = 0xfe80
# startindex = 11826
# endAddr    = 0xfeba
# endindex   = 11843
# len        = 59 (0x3b)
# len1       = 64 (0x40) to (0xfebb)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xfe80:
     endbr64 
     movq     0x8(%rsi),%rdx          # memOffsetBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpq     %rdx,0x8(%rdi)          # reg,memOffsetBase ::  modifies flags!!
     je       Addr0xfe98              # value ::  target: 0xfe98 CodeAddr: 0xfe98
Addr0xfe90:
     retq    
Addr0xfe98:
     movq     0x10(%rsi),%rcx         # memOffsetBase,reg :: 
     cmpq     %rcx,0x10(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0xfe90              # value ::  target: 0xfe90 CodeAddr: 0xfe90
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     (%rsi),%rsi             # memBase,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    

# ----------- Function 277 ------------ 
#
# startAddr  = 0xfec0
# startindex = 11845
# endAddr    = 0xfed8
# endindex   = 11852
# len        = 25 (0x19)
# len1       = 32 (0x20) to (0xfed9)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0xfec0:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     movq     (%rdi),%rdi             # memBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     jmp      Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0

# ----------- Function 278 ------------ 
#
# startAddr  = 0xfee0
# startindex = 11854
# endAddr    = 0xff96
# endindex   = 11906
# len        = 183 (0xb7)
# len1       = 192 (0xc0) to (0xff97)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xfee0:
     flds     Var0x1bf8c(%rip)        # memOffsetBase ::  DataAddr: 0x1bf8c
     fldt     0x8(%rsp)               # memOffsetBase :: 
     fcomi    %st(1),%st              # reg,reg ::  modifies flags!!
     jae      Addr0xff60              # value ::  target: 0xff60 CodeAddr: 0xff60
     fstp     %st(1)                  # reg :: 
     fnstcw   -0xa(%rsp)              # memOffsetBase :: 
     movzwl   -0xa(%rsp),%eax         # memOffsetBase,reg :: 
     orb      $0xc,%ah                # imm,reg ::  modifies flags!!
     movw     %ax,-0xc(%rsp)          # reg,memOffsetBase :: 
     fld      %st(0)                  # reg :: 
     fldcw    -0xc(%rsp)              # memOffsetBase :: 
     fistpll  -0x18(%rsp)             # memOffsetBase :: 
     fldcw    -0xa(%rsp)              # memOffsetBase :: 
     movq     -0x18(%rsp),%rax        # memOffsetBase,reg :: 
Addr0xff14:
     movq     %rax,-0x18(%rsp)        # reg,memOffsetBase :: 
     fildll   -0x18(%rsp)             # memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jns      Addr0xff28              # value ::  target: 0xff28 CodeAddr: 0xff28
     fadds    Var0x1bf88(%rip)        # memOffsetBase ::  DataAddr: 0x1bf88
Addr0xff28:
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     jne      Addr0xff58              # value ::  target: 0xff58 CodeAddr: 0xff58
     fxch     %st(1)                  # reg :: 
     fucomip  %st(1),%st              # reg,reg ::  modifies flags!!
     jp       Addr0xff38              # value ::  target: 0xff38 CodeAddr: 0xff38
     je       Addr0xff5a              # value ::  target: 0xff5a CodeAddr: 0xff5a
     fstp     %st(0)                  # reg :: 
     jmp      Addr0xff40              # value ::  target: 0xff40 CodeAddr: 0xff40
Addr0xff38:
     fstp     %st(0)                  # reg :: 
Addr0xff40:
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,-0x18(%rsp)        # reg,memOffsetBase :: 
     fildll   -0x18(%rsp)             # memOffsetBase :: 
     js       Addr0xff90              # value ::  target: 0xff90 CodeAddr: 0xff90
     jmp      Addr0xff5a              # value ::  target: 0xff5a CodeAddr: 0xff5a
Addr0xff58:
     fstp     %st(1)                  # reg :: 
Addr0xff5a:
     retq    
Addr0xff60:
     fnstcw   -0xa(%rsp)              # memOffsetBase :: 
     fsub     %st,%st(1)              # reg,reg :: 
     fxch     %st(1)                  # reg :: 
     movzwl   -0xa(%rsp),%eax         # memOffsetBase,reg :: 
     orb      $0xc,%ah                # imm,reg ::  modifies flags!!
     movw     %ax,-0xc(%rsp)          # reg,memOffsetBase :: 
     fldcw    -0xc(%rsp)              # memOffsetBase :: 
     fistpll  -0x18(%rsp)             # memOffsetBase :: 
     fldcw    -0xa(%rsp)              # memOffsetBase :: 
     movq     -0x18(%rsp),%rax        # memOffsetBase,reg :: 
     btcq     $0x3f,%rax              # imm,reg ::  modifies flags!!
     jmp      Addr0xff14              # value ::  target: 0xff14 CodeAddr: 0xff14
Addr0xff90:
     fadds    Var0x1bf88(%rip)        # memOffsetBase ::  DataAddr: 0x1bf88
     retq    

# ----------- Function 279 ------------ 
#
# startAddr  = 0xffa0
# startindex = 11908
# endAddr    = 0x109d8
# endindex   = 12594
# len        = 2617 (0xa39)
# len1       = 2624 (0xa40) to (0x109d9)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0xffa0:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movq     %rcx,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x98,%rsp              # imm,reg ::  modifies flags!!
     movq     %r8,0x10(%rsp)          # reg,memOffsetBase :: 
     movl     %edx,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x88(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     %edx,%eax               # reg,reg :: 
     andl     $0x20,%edx              # imm,reg ::  modifies flags!!
     andl     $0x3,%eax               # imm,reg ::  modifies flags!!
     cmpl     $0x1,%edx               # imm,reg ::  modifies flags!!
     movl     %edx,0x34(%rsp)         # reg,memOffsetBase :: 
     movl     %eax,0x18(%rsp)         # reg,memOffsetBase :: 
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffe8,%eax        # imm,reg ::  modifies flags!!
     addl     $0x400,%eax             # imm,reg ::  modifies flags!!
     movl     %eax,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x4800              # value ::  target: 0x4800 CodeAddr: 0x4800 CALLS 0x4800
     movq     (%rax),%r15             # memBase,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movl     $0x1,%edx               # imm,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     subq     $0x1,%rax               # imm,reg ::  modifies flags!!
     cmpq     $0x10,%rax              # imm,reg ::  modifies flags!!
     leaq     Var0x19af3(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19af3
     cmovaeq  %rax,%r15               # reg,reg :: 
     movq     0x10(%r12),%rax         # memOffsetBase,reg :: 
     movq     0x8(%r12),%r12          # memOffsetBase,reg :: 
     cmovaeq  %rdx,%r14               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     0x10(%rsp),%rcx         # memOffsetBase,reg :: 
     cmpq     $0x10,%rax              # imm,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     cmovaq   %rax,%r12               # reg,reg :: 
     leaq     0x287(%rbp),%rax        # memOffsetBase,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     cmpq     %r13,%rcx               # reg,reg ::  modifies flags!!
     ja       Addr0x101f8             # value ::  target: 0x101f8 CodeAddr: 0x101f8
     movq     %r13,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rcx                    # reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x10095             # value ::  target: 0x10095 CodeAddr: 0x10095
     movq     %rbx,%rdi               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     imulq    %rax,%rdi               # reg,reg ::  modifies flags!!
     movq     %rdi,%rax               # reg,reg :: 
     divq     %rsi                    # reg :: 
     cmpq     %rbx,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x10598             # value ::  target: 0x10598 CodeAddr: 0x10598
Addr0x10095:
     movq     %r13,0x20(%rsp)         # reg,memOffsetBase :: 
     fildll   0x20(%rsp)              # memOffsetBase :: 
     testq    %r13,%r13               # reg,reg ::  modifies flags!!
     js       Addr0x104d0             # value ::  target: 0x104d0 CodeAddr: 0x104d0
Addr0x100a7:
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
     fildll   0x20(%rsp)              # memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x104b0             # value ::  target: 0x104b0 CodeAddr: 0x104b0
     movq     %rbx,0x20(%rsp)         # reg,memOffsetBase :: 
     fdivrp   %st,%st(1)              # reg,reg :: 
     fildll   0x20(%rsp)              # memOffsetBase :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     js       Addr0x10490             # value ::  target: 0x10490 CodeAddr: 0x10490
Addr0x100d2:
     fmulp    %st,%st(1)              # reg,reg :: 
     testb    $0x10,0x40(%rsp)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x103c0             # value ::  target: 0x103c0 CodeAddr: 0x103c0
Addr0x100df:
     fildl    0x30(%rsp)              # memOffsetBase :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     fld      %st(0)                  # reg :: 
     jmp      Addr0x100f4             # value ::  target: 0x100f4 CodeAddr: 0x100f4
Addr0x100f0:
     fstp     %st(1)                  # reg :: 
     fxch     %st(2)                  # reg :: 
Addr0x100f4:
     fld      %st(0)                  # reg :: 
     addl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     fmul     %st(2),%st              # reg,reg :: 
     fxch     %st(3)                  # reg :: 
     fcomi    %st(3),%st              # reg,reg ::  modifies flags!!
     jb       Addr0x10110             # value ::  target: 0x10110 CodeAddr: 0x10110
     cmpl     $0x8,%ebx               # imm,reg ::  modifies flags!!
     jne      Addr0x100f0             # value ::  target: 0x100f0 CodeAddr: 0x100f0
     fstp     %st(2)                  # reg :: 
     fstp     %st(2)                  # reg :: 
     jmp      Addr0x10114             # value ::  target: 0x10114 CodeAddr: 0x10114
Addr0x10110:
     fstp     %st(2)                  # reg :: 
     fstp     %st(2)                  # reg :: 
Addr0x10114:
     movl     0x34(%rsp),%edi         # memOffsetBase,reg :: 
     leaq     0x1(%r14),%r15          # memOffsetBase,reg :: 
     fdivp    %st,%st(1)              # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     movl     0x18(%rsp),%edi         # memOffsetBase,reg :: 
     sete     %al                     # reg :: 
     leaq     0x2(%r14,%rax,1),%r14   # memOffsetBaseIndexScale,reg :: 
     cmpl     $0x1,%edi               # imm,reg ::  modifies flags!!
     je       Addr0x10690             # value ::  target: 0x10690 CodeAddr: 0x10690
     fldt     Var0x1bff0(%rip)        # memOffsetBase ::  DataAddr: 0x1bff0
     fcomip   %st(1),%st              # reg,reg ::  modifies flags!!
     ja       Addr0x10578             # value ::  target: 0x10578 CodeAddr: 0x10578
     fld      %st(0)                  # reg :: 
Addr0x10147:
     fstpt    0x20(%rsp)              # memOffsetBase :: 
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x1bf9e(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bf9e
     fstpt    (%rsp)                  # memBase :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     popq     %rsi                    # reg :: 
     popq     %rdi                    # reg :: 
     fldt     0x20(%rsp)              # memOffsetBase :: 
     cmpq     %r14,%rax               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     jbe      Addr0x105b8             # value ::  target: 0x105b8 CodeAddr: 0x105b8
     flds     Var0x1bfe4(%rip)        # memOffsetBase ::  DataAddr: 0x1bfe4
     fmul     %st,%st(1)              # reg,reg :: 
Addr0x10191:
     fldt     Var0x1bff0(%rip)        # memOffsetBase ::  DataAddr: 0x1bff0
     fcomip   %st(2),%st              # reg,reg ::  modifies flags!!
     jbe      Addr0x101b5             # value ::  target: 0x101b5 CodeAddr: 0x101b5
     fstps    0x20(%rsp)              # memOffsetBase :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     fstpt    (%rsp)                  # memBase :: 
     movl     0x28(%rsp),%edi         # memOffsetBase,reg :: 
     callq    Addr0xfee0              # value ::  target: 0xfee0 CodeAddr: 0xfee0 CALLS 0xfee0
     popq     %rax                    # reg :: 
     popq     %rdx                    # reg :: 
     flds     0x20(%rsp)              # memOffsetBase :: 
Addr0x101b5:
     fdivrp   %st,%st(1)              # reg,reg :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     leaq     Var0x1bf98(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bf98
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     fstpt    (%rsp)                  # memBase :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     movq     %rax,%r14               # reg,reg :: 
     jmp      Addr0x10412             # value ::  target: 0x10412 CodeAddr: 0x10412
Addr0x101f8:
     testq    %r13,%r13               # reg,reg ::  modifies flags!!
     je       Addr0x10095             # value ::  target: 0x10095 CodeAddr: 0x10095
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %r13                    # reg :: 
     movq     %rax,%r8                # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x10095             # value ::  target: 0x10095 CodeAddr: 0x10095
     movq     %rbx,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %r8                     # reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     leaq     (%rdx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     addq     %rax,%rax               # reg,reg ::  modifies flags!!
     divq     %r8                     # reg :: 
     addq     %rdx,%rdx               # reg,reg ::  modifies flags!!
     movl     %eax,%esi               # reg,reg :: 
     cmpq     %rdx,%r8                # reg,reg ::  modifies flags!!
     jbe      Addr0x10730             # value ::  target: 0x10730 CodeAddr: 0x10730
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     setne    %cl                     # reg :: 
Addr0x10244:
     movl     0x40(%rsp),%r10d        # memOffsetBase,reg :: 
     andl     $0x10,%r10d             # imm,reg ::  modifies flags!!
     je       Addr0x105ab             # value ::  target: 0x105ab CodeAddr: 0x105ab
Addr0x10253:
     movl     0x30(%rsp),%r8d         # memOffsetBase,reg :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     movq     %r8,%r11                # reg,reg :: 
     cmpq     %rdi,%r8                # reg,reg ::  modifies flags!!
     jbe      Addr0x10525             # value ::  target: 0x10525 CodeAddr: 0x10525
Addr0x10266:
     cmpl     $0x1,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     je       Addr0x10700             # value ::  target: 0x10700 CodeAddr: 0x10700
Addr0x10276:
     movl     0x18(%rsp),%r11d        # memOffsetBase,reg :: 
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     jne      Addr0x102a0             # value ::  target: 0x102a0 CodeAddr: 0x102a0
     addl     %esi,%ecx               # reg,reg ::  modifies flags!!
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     jle      Addr0x102a0             # value ::  target: 0x102a0 CodeAddr: 0x102a0
Addr0x10286:
     addq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     testl    %r10d,%r10d             # reg,reg ::  modifies flags!!
     je       Addr0x102a0             # value ::  target: 0x102a0 CodeAddr: 0x102a0
     movl     0x30(%rsp),%eax         # memOffsetBase,reg :: 
     cmpq     %rdi,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1074d             # value ::  target: 0x1074d CodeAddr: 0x1074d
Addr0x102a0:
     movabsq  $0xcccccccccccccccd,%rcx# imm,reg :: 
     movq     %r8,%r15                # reg,reg :: 
Addr0x102b0:
     movq     %rdi,%rax               # reg,reg :: 
     movq     %rdi,%rsi               # reg,reg :: 
     subq     $0x1,%r15               # imm,reg ::  modifies flags!!
     mulq     %rcx                    # reg ::  modifies flags!!
     shrq     $0x3,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%rdx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rax,%rax               # reg,reg ::  modifies flags!!
     subq     %rax,%rsi               # reg,reg ::  modifies flags!!
     movq     %rsi,%rax               # reg,reg :: 
     addl     $0x30,%eax              # imm,reg ::  modifies flags!!
     movb     %al,(%r15)              # reg,memBase :: 
     movq     %rdi,%rax               # reg,reg :: 
     movq     %rdx,%rdi               # reg,reg :: 
     cmpq     $0x9,%rax               # imm,reg ::  modifies flags!!
     ja       Addr0x102b0             # value ::  target: 0x102b0 CodeAddr: 0x102b0
     testb    $0x4,0x40(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10434             # value ::  target: 0x10434 CodeAddr: 0x10434
Addr0x102eb:
     movq     %r8,%r14                # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %r8,0x48(%rsp)          # reg,memOffsetBase :: 
     movq     $0xffffffffffffffff,%r13# imm,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     subq     %r15,%r14               # reg,reg ::  modifies flags!!
     leaq     0x50(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r14,%rdx               # reg,reg :: 
     movl     $0x29,%ecx              # imm,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %r12,%r15               # reg,reg :: 
     movq     %rdi,0x20(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x4ac0              # value ::  target: 0x4ac0 CodeAddr: 0x4ac0 CALLS 0x4ac0
     movl     %ebx,0x44(%rsp)         # reg,memOffsetBase :: 
     movq     0x38(%rsp),%r12         # memOffsetBase,reg :: 
     movq     %r14,%rbx               # reg,reg :: 
     movq     0x48(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x20(%rsp),%r14         # memOffsetBase,reg :: 
     movq     %rbp,0x38(%rsp)         # reg,memOffsetBase :: 
     movq     %r13,%rbp               # reg,reg :: 
     movq     0x18(%rsp),%r13         # memOffsetBase,reg :: 
     jmp      Addr0x1038c             # value ::  target: 0x1038c CodeAddr: 0x1038c
Addr0x10350:
     cmpq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     cmovaq   %rbx,%rbp               # reg,reg :: 
     subq     %rbp,%rbx               # reg,reg ::  modifies flags!!
     leaq     (%r14,%rbx,1),%rsi      # memBaseIndexScale,reg :: 
Addr0x1035e:
     subq     %rbp,%r8                # reg,reg ::  modifies flags!!
     movq     %rbp,%rdx               # reg,reg :: 
     movq     %r8,%rdi                # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     %rax,%r8                # reg,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x104f0             # value ::  target: 0x104f0 CodeAddr: 0x104f0
     subq     %r13,%r8                # reg,reg ::  modifies flags!!
     movq     %r13,%rdx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r8,%rdi                # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     %rax,%r8                # reg,reg :: 
Addr0x1038c:
     movzbl   (%r12),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x10350             # value ::  target: 0x10350 CodeAddr: 0x10350
     cmpb     $0x7e,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x104e0             # value ::  target: 0x104e0 CodeAddr: 0x104e0
     movzbl   %al,%r9d                # reg,reg :: 
     cmpq     %rbx,%r9                # reg,reg ::  modifies flags!!
     cmovaq   %rbx,%r9                # reg,reg :: 
     subq     %r9,%rbx                # reg,reg ::  modifies flags!!
     movq     %r9,%rbp                # reg,reg :: 
     leaq     (%r14,%rbx,1),%rsi      # memBaseIndexScale,reg :: 
Addr0x103b2:
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     jmp      Addr0x1035e             # value ::  target: 0x1035e CodeAddr: 0x1035e
Addr0x103c0:
     movl     0x18(%rsp),%edi         # memOffsetBase,reg :: 
     cmpl     $0x1,%edi               # imm,reg ::  modifies flags!!
     je       Addr0x103d7             # value ::  target: 0x103d7 CodeAddr: 0x103d7
     fldt     Var0x1bff0(%rip)        # memOffsetBase ::  DataAddr: 0x1bff0
     fcomip   %st(1),%st              # reg,reg ::  modifies flags!!
     ja       Addr0x10560             # value ::  target: 0x10560 CodeAddr: 0x10560
Addr0x103d7:
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x1bf98(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bf98
     movl     $0x1,%esi               # imm,reg :: 
     fstpt    (%rsp)                  # memBase :: 
     movl     $0xffffffff,%ebx        # imm,reg :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     popq     %r8                     # reg :: 
     popq     %r9                     # reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     movq     %rax,%r14               # reg,reg :: 
Addr0x10412:
     movq     0x8(%rsp),%r15          # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     subq     %rdx,%r15               # reg,reg ::  modifies flags!!
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x4c50              # value ::  target: 0x4c50 CodeAddr: 0x4c50 CALLS 0x4c50
     leaq     (%r15,%r14,1),%r8       # memBaseIndexScale,reg :: 
Addr0x10429:
     testb    $0x4,0x40(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x102eb             # value ::  target: 0x102eb CodeAddr: 0x102eb
Addr0x10434:
     testb    $0x80,0x40(%rsp)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10457             # value ::  target: 0x10457 CodeAddr: 0x10457
     cmpl     $0xffffffff,%ebx        # imm,reg ::  modifies flags!!
     je       Addr0x105e0             # value ::  target: 0x105e0 CodeAddr: 0x105e0
Addr0x10444:
     movl     0x40(%rsp),%eax         # memOffsetBase,reg :: 
     andl     $0x100,%eax             # imm,reg ::  modifies flags!!
     movl     %eax,%ecx               # reg,reg :: 
     orl      %ebx,%ecx               # reg,reg ::  modifies flags!!
     jne      Addr0x106e8             # value ::  target: 0x106e8 CodeAddr: 0x106e8
Addr0x10457:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movb     $0x0,(%rax)             # imm,memBase :: 
     movq     0x88(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x109a5             # value ::  target: 0x109a5 CodeAddr: 0x109a5
     addq     $0x98,%rsp              # imm,reg ::  modifies flags!!
     movq     %r15,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x10490:
     fadds    Var0x1bf88(%rip)        # memOffsetBase ::  DataAddr: 0x1bf88
     fmulp    %st,%st(1)              # reg,reg :: 
     testb    $0x10,0x40(%rsp)        # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x100df             # value ::  target: 0x100df CodeAddr: 0x100df
     jmp      Addr0x103c0             # value ::  target: 0x103c0 CodeAddr: 0x103c0
Addr0x104b0:
     fadds    Var0x1bf88(%rip)        # memOffsetBase ::  DataAddr: 0x1bf88
     movq     %rbx,0x20(%rsp)         # reg,memOffsetBase :: 
     fdivrp   %st,%st(1)              # reg,reg :: 
     fildll   0x20(%rsp)              # memOffsetBase :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jns      Addr0x100d2             # value ::  target: 0x100d2 CodeAddr: 0x100d2
     jmp      Addr0x10490             # value ::  target: 0x10490 CodeAddr: 0x10490
Addr0x104d0:
     fadds    Var0x1bf88(%rip)        # memOffsetBase ::  DataAddr: 0x1bf88
     jmp      Addr0x100a7             # value ::  target: 0x100a7 CodeAddr: 0x100a7
Addr0x104e0:
     movq     %rbx,%rbp               # reg,reg :: 
     movq     %r14,%rsi               # reg,reg :: 
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     jmp      Addr0x103b2             # value ::  target: 0x103b2 CodeAddr: 0x103b2
Addr0x104f0:
     movl     0x44(%rsp),%ebx         # memOffsetBase,reg :: 
     movq     0x38(%rsp),%rbp         # memOffsetBase,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     jmp      Addr0x10434             # value ::  target: 0x10434 CodeAddr: 0x10434
Addr0x10508:
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     setne    %cl                     # reg :: 
     movzbl   %cl,%ecx                # reg,reg :: 
Addr0x10510:
     addl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     cmpq     %r9,%r8                 # reg,reg ::  modifies flags!!
     ja       Addr0x107a0             # value ::  target: 0x107a0 CodeAddr: 0x107a0
     cmpl     $0x8,%ebx               # imm,reg ::  modifies flags!!
     je       Addr0x10266             # value ::  target: 0x10266 CodeAddr: 0x10266
Addr0x10525:
     movq     %rdi,%rax               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %r8                     # reg :: 
     movq     %rax,%r9                # reg,reg :: 
     leal     (%rdx,%rdx,4),%eax      # memBaseIndexScale,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     leal     (%rsi,%rax,2),%eax      # memBaseIndexScale,reg :: 
     movl     %ecx,%esi               # reg,reg :: 
     movq     %r9,%rdi                # reg,reg :: 
     divl     %r11d                   # reg :: 
     sarl     %esi                    # reg ::  modifies flags!!
     leal     (%rsi,%rdx,2),%edx      # memBaseIndexScale,reg :: 
     movl     %eax,%esi               # reg,reg :: 
     addl     %edx,%ecx               # reg,reg ::  modifies flags!!
     cmpl     %edx,%r11d              # reg,reg ::  modifies flags!!
     ja       Addr0x10508             # value ::  target: 0x10508 CodeAddr: 0x10508
     cmpl     %ecx,%r11d              # reg,reg ::  modifies flags!!
     setb     %cl                     # reg :: 
     movzbl   %cl,%ecx                # reg,reg :: 
     addl     $0x2,%ecx               # imm,reg ::  modifies flags!!
     jmp      Addr0x10510             # value ::  target: 0x10510 CodeAddr: 0x10510
Addr0x10560:
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     fstpt    (%rsp)                  # memBase :: 
     callq    Addr0xfee0              # value ::  target: 0xfee0 CodeAddr: 0xfee0 CALLS 0xfee0
     popq     %r10                    # reg :: 
     popq     %r11                    # reg :: 
     jmp      Addr0x103d7             # value ::  target: 0x103d7 CodeAddr: 0x103d7
Addr0x10578:
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     fld      %st(0)                  # reg :: 
     fstpt    (%rsp)                  # memBase :: 
     fstpt    0x30(%rsp)              # memOffsetBase :: 
     callq    Addr0xfee0              # value ::  target: 0xfee0 CodeAddr: 0xfee0 CALLS 0xfee0
     popq     %rcx                    # reg :: 
     popq     %rsi                    # reg :: 
     fldt     0x20(%rsp)              # memOffsetBase :: 
     jmp      Addr0x10147             # value ::  target: 0x10147 CodeAddr: 0x10147
Addr0x10598:
     movl     0x40(%rsp),%r10d        # memOffsetBase,reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     andl     $0x10,%r10d             # imm,reg ::  modifies flags!!
     jne      Addr0x10253             # value ::  target: 0x10253 CodeAddr: 0x10253
Addr0x105ab:
     movl     $0xffffffff,%ebx        # imm,reg :: 
     jmp      Addr0x10266             # value ::  target: 0x10266 CodeAddr: 0x10266
Addr0x105b8:
     testb    $0x8,0x40(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x105d0             # value ::  target: 0x105d0 CodeAddr: 0x105d0
     cmpb     $0x30,-0x1(%rbp,%rdx,1) # imm,memOffsetBaseIndexScale ::  modifies flags!!
     je       Addr0x10840             # value ::  target: 0x10840 CodeAddr: 0x10840
     fstp     %st(0)                  # reg :: 
     jmp      Addr0x105d2             # value ::  target: 0x105d2 CodeAddr: 0x105d2
Addr0x105d0:
     fstp     %st(0)                  # reg :: 
Addr0x105d2:
     movq     %rdx,%r14               # reg,reg :: 
     subq     %r15,%r14               # reg,reg ::  modifies flags!!
     jmp      Addr0x10412             # value ::  target: 0x10412 CodeAddr: 0x10412
Addr0x105e0:
     movq     0x10(%rsp),%rcx         # memOffsetBase,reg :: 
     cmpq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     jbe      Addr0x10877             # value ::  target: 0x10877 CodeAddr: 0x10877
     movl     0x30(%rsp),%edx         # memOffsetBase,reg :: 
     movl     $0x1,%ebx               # imm,reg :: 
     movl     $0x1,%eax               # imm,reg :: 
Addr0x10600:
     imulq    %rdx,%rax               # reg,reg ::  modifies flags!!
     cmpq     %rax,%rcx               # reg,reg ::  modifies flags!!
     jbe      Addr0x10611             # value ::  target: 0x10611 CodeAddr: 0x10611
     addl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     cmpl     $0x8,%ebx               # imm,reg ::  modifies flags!!
     jne      Addr0x10600             # value ::  target: 0x10600 CodeAddr: 0x10600
Addr0x10611:
     movl     0x40(%rsp),%ecx         # memOffsetBase,reg :: 
     movl     %ecx,%eax               # reg,reg :: 
     andl     $0x100,%eax             # imm,reg ::  modifies flags!!
     andl     $0x40,%ecx              # imm,reg ::  modifies flags!!
     je       Addr0x1063c             # value ::  target: 0x1063c CodeAddr: 0x1063c
Addr0x10621:
     leaq     0x288(%rbp),%rcx        # memOffsetBase,reg :: 
     movb     $0x20,0x287(%rbp)       # imm,memOffsetBase :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
Addr0x10634:
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     je       Addr0x109c7             # value ::  target: 0x109c7 CodeAddr: 0x109c7
Addr0x1063c:
     cmpl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     jne      Addr0x1064f             # value ::  target: 0x1064f CodeAddr: 0x1064f
     movl     0x34(%rsp),%r9d         # memOffsetBase,reg :: 
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     je       Addr0x10778             # value ::  target: 0x10778 CodeAddr: 0x10778
Addr0x1064f:
     movslq   %ebx,%rbx               # reg,reg :: 
     leaq     Var0x1bfd8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bfd8
     movq     0x8(%rsp),%rsi          # memOffsetBase,reg :: 
     movzbl   (%rcx,%rbx,1),%ecx      # memBaseIndexScale,reg :: 
     leaq     0x1(%rsi),%rdx          # memOffsetBase,reg :: 
     movb     %cl,(%rsi)              # reg,memBase :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x1078c             # value ::  target: 0x1078c CodeAddr: 0x1078c
     movl     0x34(%rsp),%r8d         # memOffsetBase,reg :: 
     testl    %r8d,%r8d               # reg,reg ::  modifies flags!!
     jne      Addr0x10740             # value ::  target: 0x10740 CodeAddr: 0x10740
Addr0x1067e:
     leaq     0x1(%rdx),%rax          # memOffsetBase,reg :: 
     movb     $0x42,(%rdx)            # imm,memBase :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     jmp      Addr0x10457             # value ::  target: 0x10457 CodeAddr: 0x10457
Addr0x10690:
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     leaq     Var0x1bf9e(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bf9e
     movq     %rbp,%rdi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     fld      %st(0)                  # reg :: 
     fstpt    (%rsp)                  # memBase :: 
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     fstpt    0x30(%rsp)              # memOffsetBase :: 
     callq    Addr0x4d90              # value ::  target: 0x4d90 CodeAddr: 0x4d90 CALLS 0x4d90
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rax,%rdx               # reg,reg :: 
     popq     %rax                    # reg :: 
     popq     %rcx                    # reg :: 
     fldt     0x20(%rsp)              # memOffsetBase :: 
     cmpq     %r14,%rdx               # reg,reg ::  modifies flags!!
     jbe      Addr0x105b8             # value ::  target: 0x105b8 CodeAddr: 0x105b8
     flds     Var0x1bfe4(%rip)        # memOffsetBase ::  DataAddr: 0x1bfe4
     fmul     %st,%st(1)              # reg,reg :: 
     jmp      Addr0x101b5             # value ::  target: 0x101b5 CodeAddr: 0x101b5
Addr0x106e8:
     testb    $0x40,0x40(%rsp)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10634             # value ::  target: 0x10634 CodeAddr: 0x10634
     jmp      Addr0x10621             # value ::  target: 0x10621 CodeAddr: 0x10621
Addr0x10700:
     movq     %rdi,%rax               # reg,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     addl     %eax,%esi               # reg,reg ::  modifies flags!!
     cmpl     $0x5,%esi               # imm,reg ::  modifies flags!!
     jle      Addr0x102a0             # value ::  target: 0x102a0 CodeAddr: 0x102a0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     jmp      Addr0x10286             # value ::  target: 0x10286 CodeAddr: 0x10286
Addr0x10730:
     setb     %cl                     # reg :: 
     movzbl   %cl,%ecx                # reg,reg :: 
     addl     $0x2,%ecx               # imm,reg ::  modifies flags!!
     jmp      Addr0x10244             # value ::  target: 0x10244 CodeAddr: 0x10244
Addr0x10740:
     movb     $0x69,0x1(%rsi)         # imm,memOffsetBase :: 
     leaq     0x2(%rsi),%rdx          # memOffsetBase,reg :: 
     jmp      Addr0x1067e             # value ::  target: 0x1067e CodeAddr: 0x1067e
Addr0x1074d:
     cmpl     $0x8,%ebx               # imm,reg ::  modifies flags!!
     je       Addr0x102a0             # value ::  target: 0x102a0 CodeAddr: 0x102a0
     addl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     testb    $0x8,0x40(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x108e8             # value ::  target: 0x108e8 CodeAddr: 0x108e8
Addr0x10764:
     movb     $0x31,-0x1(%r8)         # imm,memOffsetBase :: 
     leaq     -0x1(%r8),%r15          # memOffsetBase,reg :: 
     jmp      Addr0x10429             # value ::  target: 0x10429 CodeAddr: 0x10429
Addr0x10778:
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     movb     $0x6b,(%rcx)            # imm,memBase :: 
     leaq     0x1(%rcx),%rdx          # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x1067e             # value ::  target: 0x1067e CodeAddr: 0x1067e
Addr0x1078c:
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     jmp      Addr0x10457             # value ::  target: 0x10457 CodeAddr: 0x10457
Addr0x107a0:
     cmpq     $0x9,%r9                # imm,reg ::  modifies flags!!
     ja       Addr0x10266             # value ::  target: 0x10266 CodeAddr: 0x10266
     cmpl     $0x1,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10865             # value ::  target: 0x10865 CodeAddr: 0x10865
     movl     0x18(%rsp),%r13d        # memOffsetBase,reg :: 
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     setg     %sil                    # reg :: 
     andl     %esi,%edx               # reg,reg ::  modifies flags!!
Addr0x107c8:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x10858             # value ::  target: 0x10858 CodeAddr: 0x10858
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x109bf             # value ::  target: 0x109bf CodeAddr: 0x109bf
Addr0x107d8:
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     testb    $0x8,0x40(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x10820             # value ::  target: 0x10820 CodeAddr: 0x10820
     movl     $0x30,%eax              # imm,reg :: 
Addr0x107e9:
     leaq     0x286(%rbp),%r8         # memOffsetBase,reg :: 
     movb     %al,0x286(%rbp)         # reg,memOffsetBase :: 
     movl     %r14d,%r9d              # reg,reg :: 
     subq     %r14,%r8                # reg,reg ::  modifies flags!!
     cmpl     $0x8,%r14d              # imm,reg ::  modifies flags!!
     jae      Addr0x1087e             # value ::  target: 0x1087e CodeAddr: 0x1087e
     testb    $0x4,%r14b              # imm,reg ::  modifies flags!!
     jne      Addr0x10990             # value ::  target: 0x10990 CodeAddr: 0x10990
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     je       Addr0x1081e             # value ::  target: 0x1081e CodeAddr: 0x1081e
     movzbl   (%r15),%eax             # memBase,reg :: 
     movb     %al,(%r8)               # reg,memBase :: 
     testb    $0x2,%r9b               # imm,reg ::  modifies flags!!
     jne      Addr0x10832             # value ::  target: 0x10832 CodeAddr: 0x10832
Addr0x1081e:
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
Addr0x10820:
     cmpl     $0x1,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x102a0             # value ::  target: 0x102a0 CodeAddr: 0x102a0
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     jmp      Addr0x10276             # value ::  target: 0x10276 CodeAddr: 0x10276
Addr0x10832:
     movzwl   -0x2(%r15,%r9,1),%eax   # memOffsetBaseIndexScale,reg :: 
     movw     %ax,-0x2(%r8,%r9,1)     # reg,memOffsetBaseIndexScale :: 
     jmp      Addr0x1081e             # value ::  target: 0x1081e CodeAddr: 0x1081e
Addr0x10840:
     flds     Var0x1bfe4(%rip)        # memOffsetBase ::  DataAddr: 0x1bfe4
     cmpl     $0x1,0x18(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     fmul     %st,%st(1)              # reg,reg :: 
     jne      Addr0x10191             # value ::  target: 0x10191 CodeAddr: 0x10191
     jmp      Addr0x101b5             # value ::  target: 0x101b5 CodeAddr: 0x101b5
Addr0x10858:
     leal     0x1(%rax),%edx          # memOffsetBase,reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     je       Addr0x108d3             # value ::  target: 0x108d3 CodeAddr: 0x108d3
     leal     0x30(%rdx),%eax         # memOffsetBase,reg :: 
     jmp      Addr0x107e9             # value ::  target: 0x107e9 CodeAddr: 0x107e9
Addr0x10865:
     movl     %eax,%edx               # reg,reg :: 
     andl     $0x1,%edx               # imm,reg ::  modifies flags!!
     addl     %ecx,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0x2,%edx               # imm,reg ::  modifies flags!!
     setg     %dl                     # reg :: 
     jmp      Addr0x107c8             # value ::  target: 0x107c8 CodeAddr: 0x107c8
Addr0x10877:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     jmp      Addr0x10444             # value ::  target: 0x10444 CodeAddr: 0x10444
Addr0x1087e:
     movq     (%r15),%rax             # memBase,reg :: 
     leaq     0x8(%r8),%rcx           # memOffsetBase,reg :: 
     movq     %r8,%r9                 # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     andq     $0xfffffffffffffff8,%rcx# imm,reg ::  modifies flags!!
     movq     %rax,(%r8)              # reg,memBase :: 
     subq     %rcx,%r9                # reg,reg ::  modifies flags!!
     movl     %r14d,%eax              # reg,reg :: 
     movq     -0x8(%r15,%rax,1),%rdx  # memOffsetBaseIndexScale,reg :: 
     subq     %r9,%rsi                # reg,reg ::  modifies flags!!
     addl     %r14d,%r9d              # reg,reg ::  modifies flags!!
     andl     $0xfffffff8,%r9d        # imm,reg ::  modifies flags!!
     movq     %rdx,-0x8(%r8,%rax,1)   # reg,memOffsetBaseIndexScale :: 
     cmpl     $0x8,%r9d               # imm,reg ::  modifies flags!!
     jb       Addr0x1081e             # value ::  target: 0x1081e CodeAddr: 0x1081e
     andl     $0xfffffff8,%r9d        # imm,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x108bc:
     movl     %eax,%edx               # reg,reg :: 
     addl     $0x8,%eax               # imm,reg ::  modifies flags!!
     movq     (%rsi,%rdx,1),%r11      # memBaseIndexScale,reg :: 
     movq     %r11,(%rcx,%rdx,1)      # reg,memBaseIndexScale :: 
     cmpl     %r9d,%eax               # reg,reg ::  modifies flags!!
     jb       Addr0x108bc             # value ::  target: 0x108bc CodeAddr: 0x108bc
     jmp      Addr0x1081e             # value ::  target: 0x1081e CodeAddr: 0x1081e
Addr0x108d3:
     leaq     0x1(%r9),%rdi           # memOffsetBase,reg :: 
     cmpq     $0x9,%r9                # imm,reg ::  modifies flags!!
     je       Addr0x10986             # value ::  target: 0x10986 CodeAddr: 0x10986
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     jmp      Addr0x107d8             # value ::  target: 0x107d8 CodeAddr: 0x107d8
Addr0x108e8:
     movq     %r14,%rax               # reg,reg :: 
     movb     $0x30,-0x1(%r8)         # imm,memOffsetBase :: 
     notq     %rax                    # reg :: 
     addq     %rax,%r8                # reg,reg ::  modifies flags!!
     movl     %r14d,%eax              # reg,reg :: 
     cmpl     $0x8,%r14d              # imm,reg ::  modifies flags!!
     jae      Addr0x10938             # value ::  target: 0x10938 CodeAddr: 0x10938
     andl     $0x4,%r14d              # imm,reg ::  modifies flags!!
     jne      Addr0x109aa             # value ::  target: 0x109aa CodeAddr: 0x109aa
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x10764             # value ::  target: 0x10764 CodeAddr: 0x10764
     movzbl   (%r15),%edx             # memBase,reg :: 
     movb     %dl,(%r8)               # reg,memBase :: 
     testb    $0x2,%al                # imm,reg ::  modifies flags!!
     je       Addr0x10764             # value ::  target: 0x10764 CodeAddr: 0x10764
     movzwl   -0x2(%r15,%rax,1),%edx  # memOffsetBaseIndexScale,reg :: 
     movw     %dx,-0x2(%r8,%rax,1)    # reg,memOffsetBaseIndexScale :: 
     jmp      Addr0x10764             # value ::  target: 0x10764 CodeAddr: 0x10764
Addr0x10938:
     movq     (%r15),%rax             # memBase,reg :: 
     leaq     0x8(%r8),%rcx           # memOffsetBase,reg :: 
     andq     $0xfffffffffffffff8,%rcx# imm,reg ::  modifies flags!!
     movq     %rax,(%r8)              # reg,memBase :: 
     movl     %r14d,%eax              # reg,reg :: 
     movq     -0x8(%r15,%rax,1),%rdx  # memOffsetBaseIndexScale,reg :: 
     movq     %rdx,-0x8(%r8,%rax,1)   # reg,memOffsetBaseIndexScale :: 
     movq     %r8,%rax                # reg,reg :: 
     subq     %rcx,%rax               # reg,reg ::  modifies flags!!
     subq     %rax,%r15               # reg,reg ::  modifies flags!!
     addl     %r14d,%eax              # reg,reg ::  modifies flags!!
     andl     $0xfffffff8,%eax        # imm,reg ::  modifies flags!!
     cmpl     $0x8,%eax               # imm,reg ::  modifies flags!!
     jb       Addr0x10764             # value ::  target: 0x10764 CodeAddr: 0x10764
     andl     $0xfffffff8,%eax        # imm,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
Addr0x10970:
     movl     %edx,%esi               # reg,reg :: 
     addl     $0x8,%edx               # imm,reg ::  modifies flags!!
     movq     (%r15,%rsi,1),%rdi      # memBaseIndexScale,reg :: 
     movq     %rdi,(%rcx,%rsi,1)      # reg,memBaseIndexScale :: 
     cmpl     %eax,%edx               # reg,reg ::  modifies flags!!
     jb       Addr0x10970             # value ::  target: 0x10970 CodeAddr: 0x10970
     jmp      Addr0x10764             # value ::  target: 0x10764 CodeAddr: 0x10764
Addr0x10986:
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     jmp      Addr0x1081e             # value ::  target: 0x1081e CodeAddr: 0x1081e
Addr0x10990:
     movl     (%r15),%eax             # memBase,reg :: 
     movl     %eax,(%r8)              # reg,memBase :: 
     movl     -0x4(%r15,%r9,1),%eax   # memOffsetBaseIndexScale,reg :: 
     movl     %eax,-0x4(%r8,%r9,1)    # reg,memOffsetBaseIndexScale :: 
     jmp      Addr0x1081e             # value ::  target: 0x1081e CodeAddr: 0x1081e
Addr0x109a5:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x109aa:
     movl     (%r15),%edx             # memBase,reg :: 
     movl     %edx,(%r8)              # reg,memBase :: 
     movl     -0x4(%r15,%rax,1),%edx  # memOffsetBaseIndexScale,reg :: 
     movl     %edx,-0x4(%r8,%rax,1)   # reg,memOffsetBaseIndexScale :: 
     jmp      Addr0x10764             # value ::  target: 0x10764 CodeAddr: 0x10764
Addr0x109bf:
     addl     $0x30,%eax              # imm,reg ::  modifies flags!!
     jmp      Addr0x107e9             # value ::  target: 0x107e9 CodeAddr: 0x107e9
Addr0x109c7:
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x1067e             # value ::  target: 0x1067e CodeAddr: 0x1067e
     jmp      Addr0x10457             # value ::  target: 0x10457 CodeAddr: 0x10457

# ----------- Function 280 ------------ 
#
# startAddr  = 0x109e0
# startindex = 12596
# endAddr    = 0x10bbf
# endindex   = 12708
# len        = 480 (0x1e0)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0x109e0:
     endbr64 
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x10b30             # value ::  target: 0x10b30 CodeAddr: 0x10b30
Addr0x10a10:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     cmpb     $0x27,(%rbx)            # imm,memBase ::  modifies flags!!
     jne      Addr0x10a22             # value ::  target: 0x10a22 CodeAddr: 0x10a22
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movl     $0x4,%r12d              # imm,reg :: 
Addr0x10a22:
     movl     $0x4,%ecx               # imm,reg :: 
     leaq     Var0x1bfd0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bfd0
     leaq     Var0x229d0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x229d0
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0xd4e0              # value ::  target: 0xd4e0 CodeAddr: 0xd4e0 CALLS 0xd4e0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0x10a80             # value ::  target: 0x10a80 CodeAddr: 0x10a80
     cltq    
     leaq     Var0x1bfd0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1bfd0
     movq     $0x1,0x0(%rbp)          # imm,memOffsetBase :: 
     orl      (%rdx,%rax,4),%r12d     # memBaseIndexScale,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     %r12d,0x0(%r13)         # reg,memOffsetBase :: 
Addr0x10a5c:
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0x10bbb             # value ::  target: 0x10bbb CodeAddr: 0x10bbb
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x10a80:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %rsp,%rsi               # reg,reg :: 
     leaq     Var0x1bfbe(%rip),%r8    # memOffsetBase,reg ::  DataAddr: 0x1bfbe
     movq     %rbp,%rcx               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x16340             # value ::  target: 0x16340 CodeAddr: 0x16340 CALLS 0x16340
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x10ae8             # value ::  target: 0x10ae8 CodeAddr: 0x10ae8
     movzbl   (%rbx),%ecx             # memBase,reg :: 
     leal     -0x30(%rcx),%edx        # memOffsetBase,reg :: 
     movq     (%rsp),%rcx             # memBase,reg :: 
     cmpb     $0x9,%dl                # imm,reg ::  modifies flags!!
     ja       Addr0x10ac0             # value ::  target: 0x10ac0 CodeAddr: 0x10ac0
     jmp      Addr0x10ad7             # value ::  target: 0x10ad7 CodeAddr: 0x10ad7
Addr0x10ab0:
     movzbl   0x1(%rbx),%edi          # memOffsetBase,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     leal     -0x30(%rdi),%edx        # memOffsetBase,reg :: 
     cmpb     $0x9,%dl                # imm,reg ::  modifies flags!!
     jbe      Addr0x10ad7             # value ::  target: 0x10ad7 CodeAddr: 0x10ad7
Addr0x10ac0:
     cmpq     %rbx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x10ab0             # value ::  target: 0x10ab0 CodeAddr: 0x10ab0
     cmpb     $0x42,-0x1(%rcx)        # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10b90             # value ::  target: 0x10b90 CodeAddr: 0x10b90
     orb      $0x80,%r12b             # imm,reg ::  modifies flags!!
Addr0x10ad3:
     orl      $0x20,%r12d             # imm,reg ::  modifies flags!!
Addr0x10ad7:
     movq     0x0(%rbp),%rdx          # memOffsetBase,reg :: 
     movl     %r12d,0x0(%r13)         # reg,memOffsetBase :: 
     jmp      Addr0x10af4             # value ::  target: 0x10af4 CodeAddr: 0x10af4
Addr0x10ae8:
     movl     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     movq     0x0(%rbp),%rdx          # memOffsetBase,reg :: 
Addr0x10af4:
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x10a5c             # value ::  target: 0x10a5c CodeAddr: 0x10a5c
     leaq     Var0x1bfae(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1bfae
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     sbbq     %rax,%rax               # reg,reg ::  modifies flags!!
     andl     $0x200,%eax             # imm,reg ::  modifies flags!!
     addq     $0x200,%rax             # imm,reg ::  modifies flags!!
     movq     %rax,0x0(%rbp)          # reg,memOffsetBase :: 
     movl     $0x4,%eax               # imm,reg :: 
     jmp      Addr0x10a5c             # value ::  target: 0x10a5c CodeAddr: 0x10a5c
Addr0x10b30:
     leaq     Var0x19a1c(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19a1c
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%rbx               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x10a10             # value ::  target: 0x10a10 CodeAddr: 0x10a10
     leaq     Var0x1bfa4(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1bfa4
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%rbx               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x10a10             # value ::  target: 0x10a10 CodeAddr: 0x10a10
     leaq     Var0x1bfae(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1bfae
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x10ba6             # value ::  target: 0x10ba6 CodeAddr: 0x10ba6
     movq     $0x200,0x0(%rbp)        # imm,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     jmp      Addr0x10a5c             # value ::  target: 0x10a5c CodeAddr: 0x10a5c
Addr0x10b90:
     orl      $0x180,%r12d            # imm,reg ::  modifies flags!!
     cmpb     $0x69,-0x2(%rcx)        # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x10ad7             # value ::  target: 0x10ad7 CodeAddr: 0x10ad7
     jmp      Addr0x10ad3             # value ::  target: 0x10ad3 CodeAddr: 0x10ad3
Addr0x10ba6:
     movq     $0x400,0x0(%rbp)        # imm,memOffsetBase :: 
     movl     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     jmp      Addr0x10a5c             # value ::  target: 0x10a5c CodeAddr: 0x10a5c
Addr0x10bbb:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 281 ------------ 
#
# startAddr  = 0x10bc0
# startindex = 12709
# endAddr    = 0x10c54
# endindex   = 12753
# len        = 149 (0x95)
# len1       = 160 (0xa0) to (0x10c55)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x10bc0:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movl     %edi,%ebp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     Var0x243f8(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243f8
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x10be9             # value ::  target: 0x10be9 CodeAddr: 0x10be9
     jmp      Addr0x10c00             # value ::  target: 0x10c00 CodeAddr: 0x10c00
Addr0x10be0:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10c00             # value ::  target: 0x10c00 CodeAddr: 0x10c00
Addr0x10be9:
     cmpl     %ebp,(%rbx)             # reg,memBase ::  modifies flags!!
     jne      Addr0x10be0             # value ::  target: 0x10be0 CodeAddr: 0x10be0
Addr0x10bed:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x10(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10bf9             # value ::  target: 0x10bf9 CodeAddr: 0x10bf9
     leaq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
Addr0x10bf9:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x10c00:
     movl     %ebp,%edi               # reg,reg :: 
     leaq     Var0x197fe(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x197fe
     callq    Addr0x4880              # value ::  target: 0x4880 CodeAddr: 0x4880 CALLS 0x4880
     movl     $0x18,%edi              # imm,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x10c2b             # value ::  target: 0x10c2b CodeAddr: 0x10c2b
     movq     (%rax),%r12             # memBase,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x18(%rax),%rdi         # memOffsetBase,reg :: 
     andq     $0xfffffffffffffff8,%rdi# imm,reg ::  modifies flags!!
Addr0x10c2b:
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %r12,%rsi               # reg,reg :: 
     movl     %ebp,(%rax)             # reg,memBase :: 
     leaq     0x10(%rax),%rdi         # memOffsetBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x47a0              # value ::  target: 0x47a0 CodeAddr: 0x47a0 CALLS 0x47a0
     movq     Var0x243f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243f8
     movq     %rbx,Var0x243f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243f8
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     jmp      Addr0x10bed             # value ::  target: 0x10bed CodeAddr: 0x10bed

# ----------- Function 282 ------------ 
#
# startAddr  = 0x10c60
# startindex = 12755
# endAddr    = 0x10d69
# endindex   = 12834
# len        = 266 (0x10a)
# len1       = 272 (0x110) to (0x10d6a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x10c60:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     Var0x243f8(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243f8
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10cb0             # value ::  target: 0x10cb0 CodeAddr: 0x10cb0
     movzbl   (%rdi),%r12d            # memBase,reg :: 
     jmp      Addr0x10c89             # value ::  target: 0x10c89 CodeAddr: 0x10c89
Addr0x10c80:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10cb0             # value ::  target: 0x10cb0 CodeAddr: 0x10cb0
Addr0x10c89:
     cmpb     %r12b,0x10(%rbx)        # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x10c80             # value ::  target: 0x10c80 CodeAddr: 0x10c80
     leaq     0x10(%rbx),%rdi         # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x10c80             # value ::  target: 0x10c80 CodeAddr: 0x10c80
Addr0x10c9f:
     movq     %rbx,%r12               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %r12,%rax               # reg,reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x10cb0:
     movq     Var0x243f0(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243f0
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10cf8             # value ::  target: 0x10cf8 CodeAddr: 0x10cf8
     movzbl   0x0(%rbp),%r12d         # memOffsetBase,reg :: 
     jmp      Addr0x10cd1             # value ::  target: 0x10cd1 CodeAddr: 0x10cd1
Addr0x10cc8:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10cf8             # value ::  target: 0x10cf8 CodeAddr: 0x10cf8
Addr0x10cd1:
     cmpb     %r12b,0x10(%rbx)        # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x10cc8             # value ::  target: 0x10cc8 CodeAddr: 0x10cc8
     leaq     0x10(%rbx),%rdi         # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x10cc8             # value ::  target: 0x10cc8 CodeAddr: 0x10cc8
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %r12,%rax               # reg,reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x10cf8:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4ab0              # value ::  target: 0x4ab0 CodeAddr: 0x4ab0 CALLS 0x4ab0
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x18(%rax),%rdi         # memOffsetBase,reg :: 
     andq     $0xfffffffffffffff8,%rdi# imm,reg ::  modifies flags!!
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %rbp,%rsi               # reg,reg :: 
     leaq     0x10(%rax),%rdi         # memOffsetBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x47a0              # value ::  target: 0x47a0 CodeAddr: 0x47a0 CALLS 0x47a0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x10d50             # value ::  target: 0x10d50 CodeAddr: 0x10d50
     movl     0x10(%r12),%eax         # memOffsetBase,reg :: 
     movl     %eax,(%rbx)             # reg,memBase :: 
     movq     Var0x243f8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243f8
     movq     %rbx,Var0x243f8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243f8
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     jmp      Addr0x10c9f             # value ::  target: 0x10c9f CodeAddr: 0x10c9f
Addr0x10d50:
     movq     Var0x243f0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243f0
     movq     %rbx,Var0x243f0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243f0
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 283 ------------ 
#
# startAddr  = 0x10d70
# startindex = 12836
# endAddr    = 0x10e04
# endindex   = 12880
# len        = 149 (0x95)
# len1       = 160 (0xa0) to (0x10e05)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x10d70:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movl     %edi,%ebp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     Var0x243e8(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243e8
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x10d99             # value ::  target: 0x10d99 CodeAddr: 0x10d99
     jmp      Addr0x10db0             # value ::  target: 0x10db0 CodeAddr: 0x10db0
Addr0x10d90:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10db0             # value ::  target: 0x10db0 CodeAddr: 0x10db0
Addr0x10d99:
     cmpl     %ebp,(%rbx)             # reg,memBase ::  modifies flags!!
     jne      Addr0x10d90             # value ::  target: 0x10d90 CodeAddr: 0x10d90
Addr0x10d9d:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x10(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x10da9             # value ::  target: 0x10da9 CodeAddr: 0x10da9
     leaq     0x10(%rbx),%rax         # memOffsetBase,reg :: 
Addr0x10da9:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x10db0:
     movl     %ebp,%edi               # reg,reg :: 
     leaq     Var0x197fe(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x197fe
     callq    Addr0x4920              # value ::  target: 0x4920 CodeAddr: 0x4920 CALLS 0x4920
     movl     $0x18,%edi              # imm,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x10ddb             # value ::  target: 0x10ddb CodeAddr: 0x10ddb
     movq     (%rax),%r12             # memBase,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x18(%rax),%rdi         # memOffsetBase,reg :: 
     andq     $0xfffffffffffffff8,%rdi# imm,reg ::  modifies flags!!
Addr0x10ddb:
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %r12,%rsi               # reg,reg :: 
     movl     %ebp,(%rax)             # reg,memBase :: 
     leaq     0x10(%rax),%rdi         # memOffsetBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x47a0              # value ::  target: 0x47a0 CodeAddr: 0x47a0 CALLS 0x47a0
     movq     Var0x243e8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243e8
     movq     %rbx,Var0x243e8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243e8
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     jmp      Addr0x10d9d             # value ::  target: 0x10d9d CodeAddr: 0x10d9d

# ----------- Function 284 ------------ 
#
# startAddr  = 0x10e10
# startindex = 12882
# endAddr    = 0x10f19
# endindex   = 12961
# len        = 266 (0x10a)
# len1       = 272 (0x110) to (0x10f1a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x10e10:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     Var0x243e8(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243e8
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10e60             # value ::  target: 0x10e60 CodeAddr: 0x10e60
     movzbl   (%rdi),%r12d            # memBase,reg :: 
     jmp      Addr0x10e39             # value ::  target: 0x10e39 CodeAddr: 0x10e39
Addr0x10e30:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10e60             # value ::  target: 0x10e60 CodeAddr: 0x10e60
Addr0x10e39:
     cmpb     %r12b,0x10(%rbx)        # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x10e30             # value ::  target: 0x10e30 CodeAddr: 0x10e30
     leaq     0x10(%rbx),%rdi         # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x10e30             # value ::  target: 0x10e30 CodeAddr: 0x10e30
Addr0x10e4f:
     movq     %rbx,%r12               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %r12,%rax               # reg,reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x10e60:
     movq     Var0x243e0(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x243e0
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10ea8             # value ::  target: 0x10ea8 CodeAddr: 0x10ea8
     movzbl   0x0(%rbp),%r12d         # memOffsetBase,reg :: 
     jmp      Addr0x10e81             # value ::  target: 0x10e81 CodeAddr: 0x10e81
Addr0x10e78:
     movq     0x8(%rbx),%rbx          # memOffsetBase,reg :: 
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     je       Addr0x10ea8             # value ::  target: 0x10ea8 CodeAddr: 0x10ea8
Addr0x10e81:
     cmpb     %r12b,0x10(%rbx)        # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x10e78             # value ::  target: 0x10e78 CodeAddr: 0x10e78
     leaq     0x10(%rbx),%rdi         # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x10e78             # value ::  target: 0x10e78 CodeAddr: 0x10e78
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     movq     %r12,%rax               # reg,reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x10ea8:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4af0              # value ::  target: 0x4af0 CodeAddr: 0x4af0 CALLS 0x4af0
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x18(%rax),%rdi         # memOffsetBase,reg :: 
     andq     $0xfffffffffffffff8,%rdi# imm,reg ::  modifies flags!!
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %rbp,%rsi               # reg,reg :: 
     leaq     0x10(%rax),%rdi         # memOffsetBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x47a0              # value ::  target: 0x47a0 CodeAddr: 0x47a0 CALLS 0x47a0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x10f00             # value ::  target: 0x10f00 CodeAddr: 0x10f00
     movl     0x10(%r12),%eax         # memOffsetBase,reg :: 
     movl     %eax,(%rbx)             # reg,memBase :: 
     movq     Var0x243e8(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243e8
     movq     %rbx,Var0x243e8(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243e8
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     jmp      Addr0x10e4f             # value ::  target: 0x10e4f CodeAddr: 0x10e4f
Addr0x10f00:
     movq     Var0x243e0(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x243e0
     movq     %rbx,Var0x243e0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x243e0
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 285 ------------ 
#
# startAddr  = 0x10f20
# startindex = 12963
# endAddr    = 0x10fbb
# endindex   = 13006
# len        = 156 (0x9c)
# len1       = 160 (0xa0) to (0x10fbc)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x10f20:
     endbr64 
     movb     $0x0,0x14(%rsi)         # imm,memOffsetBase :: 
     leaq     0x14(%rsi),%r8          # memOffsetBase,reg :: 
     movabsq  $0xcccccccccccccccd,%rcx# imm,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     js       Addr0x10f70             # value ::  target: 0x10f70 CodeAddr: 0x10f70
Addr0x10f40:
     movq     %rdi,%rax               # reg,reg :: 
     subq     $0x1,%r8                # imm,reg ::  modifies flags!!
     mulq     %rcx                    # reg ::  modifies flags!!
     shrq     $0x3,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%rdx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rax,%rax               # reg,reg ::  modifies flags!!
     subq     %rax,%rdi               # reg,reg ::  modifies flags!!
     addl     $0x30,%edi              # imm,reg ::  modifies flags!!
     movb     %dil,(%r8)              # reg,memBase :: 
     movq     %rdx,%rdi               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x10f40             # value ::  target: 0x10f40 CodeAddr: 0x10f40
     movq     %r8,%rax                # reg,reg :: 
     retq    
Addr0x10f70:
     movabsq  $0x6666666666666667,%r9 # imm,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
Addr0x10f80:
     movq     %rdi,%rax               # reg,reg :: 
     movq     %r8,%rcx                # reg,reg :: 
     subq     $0x1,%r8                # imm,reg ::  modifies flags!!
     imulq    %r9                     # reg ::  modifies flags!!
     movq     %rdi,%rax               # reg,reg :: 
     sarq     $0x3f,%rax              # imm,reg ::  modifies flags!!
     sarq     $0x2,%rdx               # imm,reg ::  modifies flags!!
     subq     %rax,%rdx               # reg,reg ::  modifies flags!!
     leaq     (%rdx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     leal     (%rsi,%rax,2),%eax      # memBaseIndexScale,reg :: 
     subl     %edi,%eax               # reg,reg ::  modifies flags!!
     movq     %rdx,%rdi               # reg,reg :: 
     movb     %al,(%r8)               # reg,memBase :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x10f80             # value ::  target: 0x10f80 CodeAddr: 0x10f80
     movb     $0x2d,-0x1(%r8)         # imm,memOffsetBase :: 
     leaq     -0x2(%rcx),%r8          # memOffsetBase,reg :: 
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 286 ------------ 
#
# startAddr  = 0x10fc0
# startindex = 13008
# endAddr    = 0x11013
# endindex   = 13029
# len        = 84 (0x54)
# len1       = 94 (0x5e) to (0x11014)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x10fc0:
     endbr64 
     movb     $0x0,0x14(%rsi)         # imm,memOffsetBase :: 
     leaq     0x14(%rsi),%r8          # memOffsetBase,reg :: 
     movabsq  $0xcccccccccccccccd,%rcx# imm,reg :: 
Addr0x10fe0:
     movq     %rdi,%rax               # reg,reg :: 
     movq     %rdi,%rsi               # reg,reg :: 
     subq     $0x1,%r8                # imm,reg ::  modifies flags!!
     mulq     %rcx                    # reg ::  modifies flags!!
     shrq     $0x3,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%rdx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rax,%rax               # reg,reg ::  modifies flags!!
     subq     %rax,%rsi               # reg,reg ::  modifies flags!!
     movq     %rsi,%rax               # reg,reg :: 
     addl     $0x30,%eax              # imm,reg ::  modifies flags!!
     movb     %al,(%r8)               # reg,memBase :: 
     movq     %rdi,%rax               # reg,reg :: 
     movq     %rdx,%rdi               # reg,reg :: 
     cmpq     $0x9,%rax               # imm,reg ::  modifies flags!!
     ja       Addr0x10fe0             # value ::  target: 0x10fe0 CodeAddr: 0x10fe0
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 287 ------------ 
#
# startAddr  = 0x11020
# startindex = 13032
# endAddr    = 0x113fb
# endindex   = 13293
# len        = 988 (0x3dc)
# len1       = 992 (0x3e0) to (0x113fc)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x11020:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movl     %r9d,%ebp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movl     %r8d,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %rcx,0x10(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rax,%r8                # reg,reg :: 
     testb    $0x2,%bpl               # imm,reg ::  modifies flags!!
     je       Addr0x111a8             # value ::  target: 0x111a8 CodeAddr: 0x111a8
Addr0x1105c:
     movq     %r8,%r12                # reg,reg :: 
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
Addr0x11065:
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movq     (%rax),%rdx             # memBase,reg :: 
     cmpq     %r12,%rdx               # reg,reg ::  modifies flags!!
     jae      Addr0x11173             # value ::  target: 0x11173 CodeAddr: 0x11173
     movq     %rdx,%r8                # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x1107b:
     movq     0x10(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     %rdx,(%rcx)             # reg,memBase :: 
     movl     0x28(%rsp),%ecx         # memOffsetBase,reg :: 
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     je       Addr0x11199             # value ::  target: 0x11199 CodeAddr: 0x11199
Addr0x1108f:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     cmpl     $0x1,%ecx               # imm,reg ::  modifies flags!!
     je       Addr0x110a3             # value ::  target: 0x110a3 CodeAddr: 0x110a3
     movq     %rax,%r12               # reg,reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     shrq     %r12                    # reg ::  modifies flags!!
     addq     %r12,%rax               # reg,reg ::  modifies flags!!
Addr0x110a3:
     leaq     (%rax,%r8,1),%rcx       # memBaseIndexScale,reg :: 
     testb    $0x4,%bpl               # imm,reg ::  modifies flags!!
     je       Addr0x110b2             # value ::  target: 0x110b2 CodeAddr: 0x110b2
     movq     %r8,%rcx                # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x110b2:
     movq     0x18(%rsp),%rsi         # memOffsetBase,reg :: 
     andl     $0x8,%ebp               # imm,reg ::  modifies flags!!
     movl     $0x0,%edx               # imm,reg :: 
     cmovneq  %rdx,%r12               # reg,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x1114b             # value ::  target: 0x1114b CodeAddr: 0x1114b
     leaq     -0x1(%rbx,%rsi,1),%rbp  # memOffsetBaseIndexScale,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     cmpq     %rbp,%rbx               # reg,reg ::  modifies flags!!
     jae      Addr0x110f8             # value ::  target: 0x110f8 CodeAddr: 0x110f8
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x110e5             # value ::  target: 0x110e5 CodeAddr: 0x110e5
     jmp      Addr0x110f8             # value ::  target: 0x110f8 CodeAddr: 0x110f8
Addr0x110e0:
     cmpq     %rdi,%rbp               # reg,reg ::  modifies flags!!
     jbe      Addr0x110f8             # value ::  target: 0x110f8 CodeAddr: 0x110f8
Addr0x110e5:
     addq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     movq     %rbx,%rdx               # reg,reg :: 
     movb     $0x20,-0x1(%rdi)        # imm,memOffsetBase :: 
     subq     %rdi,%rdx               # reg,reg ::  modifies flags!!
     addq     %rax,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x110e0             # value ::  target: 0x110e0 CodeAddr: 0x110e0
Addr0x110f8:
     movq     %rbp,%rdx               # reg,reg :: 
     movb     $0x0,(%rdi)             # imm,memBase :: 
     movq     %r13,%rsi               # reg,reg :: 
     subq     %rdi,%rdx               # reg,reg ::  modifies flags!!
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     cmpq     %r8,%rdx                # reg,reg ::  modifies flags!!
     cmovaq   %r8,%rdx                # reg,reg :: 
     callq    Addr0x4c40              # value ::  target: 0x4c40 CodeAddr: 0x4c40 CALLS 0x4c40
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
     jbe      Addr0x11148             # value ::  target: 0x11148 CodeAddr: 0x11148
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     jne      Addr0x11135             # value ::  target: 0x11135 CodeAddr: 0x11135
     jmp      Addr0x11148             # value ::  target: 0x11148 CodeAddr: 0x11148
Addr0x11130:
     cmpq     %rdx,%rbp               # reg,reg ::  modifies flags!!
     jbe      Addr0x11148             # value ::  target: 0x11148 CodeAddr: 0x11148
Addr0x11135:
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movq     %r12,%rsi               # reg,reg :: 
     movb     $0x20,-0x1(%rdx)        # imm,memOffsetBase :: 
     subq     %rdx,%rsi               # reg,reg ::  modifies flags!!
     addq     %rax,%rsi               # reg,reg ::  modifies flags!!
     jne      Addr0x11130             # value ::  target: 0x11130 CodeAddr: 0x11130
Addr0x11148:
     movb     $0x0,(%rdx)             # imm,memBase :: 
Addr0x1114b:
     addq     %rcx,%r12               # reg,reg ::  modifies flags!!
Addr0x1114e:
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x11170:
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
Addr0x11173:
     cmpq     %rdx,%r12               # reg,reg ::  modifies flags!!
     jae      Addr0x113df             # value ::  target: 0x113df CodeAddr: 0x113df
     movq     0x10(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     subq     %r12,%rax               # reg,reg ::  modifies flags!!
     movq     %rdx,(%rcx)             # reg,memBase :: 
     movl     0x28(%rsp),%ecx         # memOffsetBase,reg :: 
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     jne      Addr0x1108f             # value ::  target: 0x1108f CodeAddr: 0x1108f
Addr0x11199:
     movq     %rax,%r12               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x110a3             # value ::  target: 0x110a3 CodeAddr: 0x110a3
Addr0x111a8:
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,%r14               # reg,reg :: 
     callq    Addr0x48b0              # value ::  target: 0x48b0 CodeAddr: 0x48b0 CALLS 0x48b0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jbe      Addr0x1105c             # value ::  target: 0x1105c CodeAddr: 0x1105c
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %r13,%rsi               # reg,reg :: 
     callq    Addr0x4810              # value ::  target: 0x4810 CodeAddr: 0x4810 CALLS 0x4810
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     jne      Addr0x11200             # value ::  target: 0x11200 CodeAddr: 0x11200
     testb    $0x1,%bpl               # imm,reg ::  modifies flags!!
     jne      Addr0x1105c             # value ::  target: 0x1105c CodeAddr: 0x1105c
Addr0x111e5:
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     movq     $0xffffffffffffffff,%r12# imm,reg :: 
     jmp      Addr0x1114e             # value ::  target: 0x1114e CodeAddr: 0x1114e
Addr0x11200:
     leaq     0x1(%rax),%r12          # memOffsetBase,reg :: 
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     leaq     0x0(,%r12,4),%rax       # memOffsetIndexScale,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movq     %rax,%r15               # reg,reg :: 
     je       Addr0x11393             # value ::  target: 0x11393 CodeAddr: 0x11393
     movq     %r12,%rdx               # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x4810              # value ::  target: 0x4810 CodeAddr: 0x4810 CALLS 0x4810
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1139d             # value ::  target: 0x1139d CodeAddr: 0x1139d
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     movl     $0x0,-0x4(%r15,%rax,1)  # imm,memOffsetBaseIndexScale :: 
     movl     (%r15),%edi             # memBase,reg :: 
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     je       Addr0x113a8             # value ::  target: 0x113a8 CodeAddr: 0x113a8
     movb     $0x0,0x2f(%rsp)         # imm,memOffsetBase :: 
     movq     %r15,%rdx               # reg,reg :: 
Addr0x11278:
     movq     %rdx,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x4d50              # value ::  target: 0x4d50 CodeAddr: 0x4d50 CALLS 0x4d50
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     movq     0x20(%rsp),%rdx         # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x112a0             # value ::  target: 0x112a0 CodeAddr: 0x112a0
     movl     $0xfffd,(%rdx)          # imm,memBase ::  CodeAddr: 0xfffd
     movb     $0x1,0x2f(%rsp)         # imm,memOffsetBase :: 
Addr0x112a0:
     movl     0x4(%rdx),%edi          # memOffsetBase,reg :: 
     addq     $0x4,%rdx               # imm,reg ::  modifies flags!!
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     jne      Addr0x11278             # value ::  target: 0x11278 CodeAddr: 0x11278
     movq     %r12,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x47f0              # value ::  target: 0x47f0 CodeAddr: 0x47f0 CALLS 0x47f0
     cmpb     $0x0,0x2f(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     movslq   %eax,%r12               # reg,reg :: 
     je       Addr0x113c0             # value ::  target: 0x113c0 CodeAddr: 0x113c0
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     %r15,%rsi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x4cb0              # value ::  target: 0x4cb0 CodeAddr: 0x4cb0 CALLS 0x4cb0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
Addr0x112ed:
     movq     0x20(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movq     %rax,%r14               # reg,reg :: 
     je       Addr0x113e9             # value ::  target: 0x113e9 CodeAddr: 0x113e9
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movl     (%r15),%edi             # memBase,reg :: 
     movq     %r15,%r13               # reg,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movq     (%rax),%rax             # memBase,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     jne      Addr0x1134b             # value ::  target: 0x1134b CodeAddr: 0x1134b
     jmp      Addr0x11370             # value ::  target: 0x11370 CodeAddr: 0x11370
Addr0x11330:
     cltq    
     addq     %r12,%rax               # reg,reg ::  modifies flags!!
     cmpq     %rax,0x8(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     jb       Addr0x11370             # value ::  target: 0x11370 CodeAddr: 0x11370
Addr0x1133c:
     movl     0x4(%r13),%edi          # memOffsetBase,reg :: 
     addq     $0x4,%r13               # imm,reg ::  modifies flags!!
     movq     %rax,%r12               # reg,reg :: 
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     je       Addr0x11370             # value ::  target: 0x11370 CodeAddr: 0x11370
Addr0x1134b:
     callq    Addr0x4b60              # value ::  target: 0x4b60 CodeAddr: 0x4b60 CALLS 0x4b60
     cmpl     $0xffffffff,%eax        # imm,reg ::  modifies flags!!
     jne      Addr0x11330             # value ::  target: 0x11330 CodeAddr: 0x11330
     movl     $0x1,%eax               # imm,reg :: 
     movl     $0xfffd,0x0(%r13)       # imm,memOffsetBase ::  CodeAddr: 0xfffd
     addq     %r12,%rax               # reg,reg ::  modifies flags!!
     cmpq     %rax,0x8(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     jae      Addr0x1133c             # value ::  target: 0x1133c CodeAddr: 0x1133c
Addr0x11370:
     movl     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     movq     0x20(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     movq     %r14,%r13               # reg,reg :: 
     callq    Addr0x4cb0              # value ::  target: 0x4cb0 CodeAddr: 0x4cb0 CALLS 0x4cb0
     movq     %rax,%r8                # reg,reg :: 
     jmp      Addr0x11065             # value ::  target: 0x11065 CodeAddr: 0x11065
Addr0x11393:
     testb    $0x1,%bpl               # imm,reg ::  modifies flags!!
     je       Addr0x111e5             # value ::  target: 0x111e5 CodeAddr: 0x111e5
Addr0x1139d:
     movq     %r8,%r12                # reg,reg :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     jmp      Addr0x11065             # value ::  target: 0x11065 CodeAddr: 0x11065
Addr0x113a8:
     movq     %r12,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %r8,0x8(%rsp)           # reg,memOffsetBase :: 
     callq    Addr0x47f0              # value ::  target: 0x47f0 CodeAddr: 0x47f0 CALLS 0x47f0
     movq     0x8(%rsp),%r8           # memOffsetBase,reg :: 
     movslq   %eax,%r12               # reg,reg :: 
Addr0x113c0:
     movq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movq     (%rax),%rdx             # memBase,reg :: 
     cmpq     %r12,%rdx               # reg,reg ::  modifies flags!!
     jae      Addr0x11170             # value ::  target: 0x11170 CodeAddr: 0x11170
     leaq     0x1(%r14),%rax          # memOffsetBase,reg :: 
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x112ed             # value ::  target: 0x112ed CodeAddr: 0x112ed
Addr0x113df:
     movq     %r12,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x1107b             # value ::  target: 0x1107b CodeAddr: 0x1107b
Addr0x113e9:
     testb    $0x1,%bpl               # imm,reg ::  modifies flags!!
     jne      Addr0x11065             # value ::  target: 0x11065 CodeAddr: 0x11065
     orq      $0xffffffffffffffff,%r12# imm,reg ::  modifies flags!!
     jmp      Addr0x1114e             # value ::  target: 0x1114e CodeAddr: 0x1114e

# ----------- Function 288 ------------ 
#
# startAddr  = 0x11400
# startindex = 13295
# endAddr    = 0x114a6
# endindex   = 13348
# len        = 167 (0xa7)
# len1       = 176 (0xb0) to (0x114a7)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x11400:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     movq     %rdi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movl     %edx,%r13d              # reg,reg :: 
     pushq    %r12                    # reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     (%rsi),%rax             # memBase,reg :: 
     movl     %ecx,0xc(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,(%rsp)             # reg,memBase :: 
Addr0x11430:
     leaq     0x1(%rax),%rbp          # memOffsetBase,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %r12,%r15               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4be0              # value ::  target: 0x4be0 CodeAddr: 0x4be0 CALLS 0x4be0
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1149d             # value ::  target: 0x1149d CodeAddr: 0x1149d
     movq     (%rsp),%rax             # memBase,reg :: 
     movl     0xc(%rsp),%r9d          # memOffsetBase,reg :: 
     movl     %r13d,%r8d              # reg,reg :: 
     movq     %rbx,%rcx               # reg,reg :: 
     movq     %rbp,%rdx               # reg,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     movq     %rax,(%rbx)             # reg,memBase :: 
     callq    Addr0x11020             # value ::  target: 0x11020 CodeAddr: 0x11020 CALLS 0x11020
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     je       Addr0x11490             # value ::  target: 0x11490 CodeAddr: 0x11490
     cmpq     %rax,%rbp               # reg,reg ::  modifies flags!!
     jbe      Addr0x11430             # value ::  target: 0x11430 CodeAddr: 0x11430
Addr0x11475:
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x11490:
     movq     %r12,%rdi               # reg,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     jmp      Addr0x11475             # value ::  target: 0x11475 CodeAddr: 0x11475
Addr0x1149d:
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     jmp      Addr0x11475             # value ::  target: 0x11475 CodeAddr: 0x11475

# ----------- Function 289 ------------ 
#
# startAddr  = 0x114b0
# startindex = 13350
# endAddr    = 0x116c7
# endindex   = 13487
# len        = 536 (0x218)
# len1       = 544 (0x220) to (0x116c8)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x114b0:
     endbr64 
     pushq    %r15                    # reg :: 
     movq     %rdi,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     leaq     (%rdi,%rsi,1),%rbp      # memBaseIndexScale,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movl     %edx,0xc(%rsp)          # reg,memOffsetBase :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x48b0              # value ::  target: 0x48b0 CodeAddr: 0x48b0 CALLS 0x48b0
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jbe      Addr0x11630             # value ::  target: 0x11630 CodeAddr: 0x11630
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     cmpq     %rbp,%r15               # reg,reg ::  modifies flags!!
     jae      Addr0x115f8             # value ::  target: 0x115f8 CodeAddr: 0x115f8
     leaq     0x20(%rsp),%r13         # memOffsetBase,reg :: 
     leaq     0x1c(%rsp),%r14         # memOffsetBase,reg :: 
Addr0x11508:
     movzbl   (%r15),%eax             # memBase,reg :: 
     cmpb     $0x5f,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x11620             # value ::  target: 0x11620 CodeAddr: 0x11620
     cmpb     $0x40,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x115e3             # value ::  target: 0x115e3 CodeAddr: 0x115e3
     cmpb     $0x23,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x115d8             # value ::  target: 0x115d8 CodeAddr: 0x115d8
     cmpb     $0x1f,%al               # imm,reg ::  modifies flags!!
     jg       Addr0x115e3             # value ::  target: 0x115e3 CodeAddr: 0x115e3
Addr0x1152c:
     movq     $0x0,0x0(%r13)          # imm,memOffsetBase :: 
     jmp      Addr0x11566             # value ::  target: 0x11566 CodeAddr: 0x11566
Addr0x11540:
     movl     $0x7fffffff,%edx        # imm,reg :: 
     subl     %r12d,%edx              # reg,reg ::  modifies flags!!
     cmpl     %eax,%edx               # reg,reg ::  modifies flags!!
     jl       Addr0x116b8             # value ::  target: 0x116b8 CodeAddr: 0x116b8
     addl     %eax,%r12d              # reg,reg ::  modifies flags!!
Addr0x11553:
     movq     %r13,%rdi               # reg,reg :: 
     addq     %rbx,%r15               # reg,reg ::  modifies flags!!
     callq    Addr0x4d40              # value ::  target: 0x4d40 CodeAddr: 0x4d40 CALLS 0x4d40
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x115eb             # value ::  target: 0x115eb CodeAddr: 0x115eb
Addr0x11566:
     movq     %rbp,%rdx               # reg,reg :: 
     movq     %r13,%rcx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     subq     %r15,%rdx               # reg,reg ::  modifies flags!!
     callq    Addr0x168d0             # value ::  target: 0x168d0 CodeAddr: 0x168d0 CALLS 0x168d0
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     je       Addr0x11680             # value ::  target: 0x11680 CodeAddr: 0x11680
     cmpq     $0xfffffffffffffffe,%rax# imm,reg ::  modifies flags!!
     je       Addr0x116a0             # value ::  target: 0x116a0 CodeAddr: 0x116a0
     movl     0x1c(%rsp),%edi         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movl     $0x1,%ebx               # imm,reg :: 
     cmovneq  %rax,%rbx               # reg,reg :: 
     callq    Addr0x4b60              # value ::  target: 0x4b60 CodeAddr: 0x4b60 CALLS 0x4b60
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jns      Addr0x11540             # value ::  target: 0x11540 CodeAddr: 0x11540
     testb    $0x2,0xc(%rsp)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x11690             # value ::  target: 0x11690 CodeAddr: 0x11690
     movl     0x1c(%rsp),%edi         # memOffsetBase,reg :: 
     callq    Addr0x47e0              # value ::  target: 0x47e0 CodeAddr: 0x47e0 CALLS 0x47e0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x11553             # value ::  target: 0x11553 CodeAddr: 0x11553
     cmpl     $0x7fffffff,%r12d       # imm,reg ::  modifies flags!!
     je       Addr0x116b8             # value ::  target: 0x116b8 CodeAddr: 0x116b8
     addl     $0x1,%r12d              # imm,reg ::  modifies flags!!
     jmp      Addr0x11553             # value ::  target: 0x11553 CodeAddr: 0x11553
Addr0x115d8:
     subl     $0x25,%eax              # imm,reg ::  modifies flags!!
     cmpb     $0x1a,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x1152c             # value ::  target: 0x1152c CodeAddr: 0x1152c
Addr0x115e3:
     addq     $0x1,%r15               # imm,reg ::  modifies flags!!
     addl     $0x1,%r12d              # imm,reg ::  modifies flags!!
Addr0x115eb:
     cmpq     %rbp,%r15               # reg,reg ::  modifies flags!!
     jb       Addr0x11508             # value ::  target: 0x11508 CodeAddr: 0x11508
Addr0x115f8:
     movq     0x28(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x116c3             # value ::  target: 0x116c3 CodeAddr: 0x116c3
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x11620:
     subl     $0x61,%eax              # imm,reg ::  modifies flags!!
     cmpb     $0x1d,%al               # imm,reg ::  modifies flags!!
     jbe      Addr0x115e3             # value ::  target: 0x115e3 CodeAddr: 0x115e3
     jmp      Addr0x1152c             # value ::  target: 0x1152c CodeAddr: 0x1152c
Addr0x11630:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     cmpq     %rbp,%r15               # reg,reg ::  modifies flags!!
     jae      Addr0x115f8             # value ::  target: 0x115f8 CodeAddr: 0x115f8
     callq    Addr0x4d80              # value ::  target: 0x4d80 CodeAddr: 0x4d80 CALLS 0x4d80
     movl     0xc(%rsp),%edx          # memOffsetBase,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movq     (%rax),%rcx             # memBase,reg :: 
     andl     $0x2,%edx               # imm,reg ::  modifies flags!!
Addr0x11650:
     movzbl   (%r15),%eax             # memBase,reg :: 
     addq     $0x1,%r15               # imm,reg ::  modifies flags!!
     movzwl   (%rcx,%rax,2),%eax      # memBaseIndexScale,reg :: 
     testb    $0x40,%ah               # imm,reg ::  modifies flags!!
     jne      Addr0x11669             # value ::  target: 0x11669 CodeAddr: 0x11669
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     jne      Addr0x11690             # value ::  target: 0x11690 CodeAddr: 0x11690
     testb    $0x2,%al                # imm,reg ::  modifies flags!!
     jne      Addr0x11676             # value ::  target: 0x11676 CodeAddr: 0x11676
Addr0x11669:
     cmpl     $0x7fffffff,%r12d       # imm,reg ::  modifies flags!!
     je       Addr0x115f8             # value ::  target: 0x115f8 CodeAddr: 0x115f8
     addl     $0x1,%r12d              # imm,reg ::  modifies flags!!
Addr0x11676:
     cmpq     %r15,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x11650             # value ::  target: 0x11650 CodeAddr: 0x11650
     jmp      Addr0x115f8             # value ::  target: 0x115f8 CodeAddr: 0x115f8
Addr0x11680:
     testb    $0x1,0xc(%rsp)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x115e3             # value ::  target: 0x115e3 CodeAddr: 0x115e3
Addr0x11690:
     movl     $0xffffffff,%r12d       # imm,reg :: 
     jmp      Addr0x115f8             # value ::  target: 0x115f8 CodeAddr: 0x115f8
Addr0x116a0:
     testb    $0x1,0xc(%rsp)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x11690             # value ::  target: 0x11690 CodeAddr: 0x11690
     addl     $0x1,%r12d              # imm,reg ::  modifies flags!!
     movq     %rbp,%r15               # reg,reg :: 
     jmp      Addr0x115eb             # value ::  target: 0x115eb CodeAddr: 0x115eb
Addr0x116b8:
     movl     $0x7fffffff,%r12d       # imm,reg :: 
     jmp      Addr0x115f8             # value ::  target: 0x115f8 CodeAddr: 0x115f8
Addr0x116c3:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 290 ------------ 
#
# startAddr  = 0x116d0
# startindex = 13489
# endAddr    = 0x116fa
# endindex   = 13502
# len        = 43 (0x2b)
# len1       = 48 (0x30) to (0x116fb)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x116d0:
     endbr64 
     pushq    %r12                    # reg :: 
     movl     %esi,%r12d              # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     %r12d,%edx              # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x114b0             # value ::  target: 0x114b0 CodeAddr: 0x114b0

# ----------- Function 291 ------------ 
#
# startAddr  = 0x11700
# startindex = 13504
# endAddr    = 0x1193e
# endindex   = 13670
# len        = 575 (0x23f)
# len1       = 576 (0x240) to (0x1193f)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x11700:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rcx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movq     %rsi,0x10(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     cmpq     $0x2,%rsi               # imm,reg ::  modifies flags!!
     ja       Addr0x11768             # value ::  target: 0x11768 CodeAddr: 0x11768
     je       Addr0x11738             # value ::  target: 0x11738 CodeAddr: 0x11738
Addr0x11726:
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x11738:
     movq     0x8(%rdi),%r13          # memOffsetBase,reg :: 
     movq     (%rdi),%r12             # memBase,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    *%rcx                   # reg :: "*%rcx" != "%rcx" no target? 
#{'addr': 71493, 'op': 'callq', 'args': [Arg(argText='%rcx', star='*', offset=None, imm=None, reg='%rcx', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 13531, 'size': 2}
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jle      Addr0x11726             # value ::  target: 0x11726 CodeAddr: 0x11726
     movq     %r13,(%rbx)             # reg,memBase :: 
     movq     %r12,0x8(%rbx)          # reg,memOffsetBase :: 
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x11768:
     movq     0x10(%rsp),%r15         # memOffsetBase,reg :: 
     movq     0x18(%rsp),%r14         # memOffsetBase,reg :: 
     movq     %r15,%rcx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r14,%rdx               # reg,reg :: 
     shrq     %rcx                    # reg ::  modifies flags!!
     leaq     (%rdi,%rcx,8),%rdi      # memBaseIndexScale,reg :: 
     subq     %rcx,%rsi               # reg,reg ::  modifies flags!!
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rbp,%rcx               # reg,reg :: 
     movq     %rdi,0x28(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x11700             # value ::  target: 0x11700 CodeAddr: 0x11700 CALLS 0x11700
     cmpq     $0x3,%r15               # imm,reg ::  modifies flags!!
     jne      Addr0x11820             # value ::  target: 0x11820 CodeAddr: 0x11820
     movq     (%rbx),%r15             # memBase,reg :: 
     movq     %r15,(%r14)             # reg,memBase :: 
Addr0x117a7:
     movq     0x28(%rsp),%rax         # memOffsetBase,reg :: 
     movq     $0x0,(%rsp)             # imm,memBase :: 
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
     movq     0x8(%rsp),%r13          # memOffsetBase,reg :: 
     movq     (%rax),%r12             # memBase,reg :: 
Addr0x117c0:
     movq     %r12,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     addq     $0x1,%r14               # imm,reg ::  modifies flags!!
     callq    *%rbp                   # reg :: "*%rbp" != "%rbp" no target? 
#{'addr': 71626, 'op': 'callq', 'args': [Arg(argText='%rbp', star='*', offset=None, imm=None, reg='%rbp', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 13570, 'size': 2}
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jle      Addr0x117f8             # value ::  target: 0x117f8 CodeAddr: 0x117f8
Addr0x117d0:
     movq     %r12,-0x8(%rbx,%r14,8)  # reg,memOffsetBaseIndexScale :: 
     addq     $0x1,%r13               # imm,reg ::  modifies flags!!
     cmpq     %r13,0x10(%rsp)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x118d0             # value ::  target: 0x118d0 CodeAddr: 0x118d0
     movq     (%rbx,%r13,8),%r12      # memBaseIndexScale,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     addq     $0x1,%r14               # imm,reg ::  modifies flags!!
     movq     %r12,%rsi               # reg,reg :: 
     callq    *%rbp                   # reg :: "*%rbp" != "%rbp" no target? 
#{'addr': 71666, 'op': 'callq', 'args': [Arg(argText='%rbp', star='*', offset=None, imm=None, reg='%rbp', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 13581, 'size': 2}
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jg       Addr0x117d0             # value ::  target: 0x117d0 CodeAddr: 0x117d0
Addr0x117f8:
     addq     $0x1,(%rsp)             # imm,memBase ::  modifies flags!!
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     %r15,-0x8(%rbx,%r14,8)  # reg,memOffsetBaseIndexScale :: 
     cmpq     %rax,0x8(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x11726             # value ::  target: 0x11726 CodeAddr: 0x11726
     movq     0x18(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     (%rdx,%rax,8),%r15      # memBaseIndexScale,reg :: 
     jmp      Addr0x117c0             # value ::  target: 0x117c0 CodeAddr: 0x117c0
Addr0x11820:
     movq     0x10(%rsp),%r15         # memOffsetBase,reg :: 
     movq     0x18(%rsp),%r14         # memOffsetBase,reg :: 
     movq     %rbp,%rcx               # reg,reg :: 
     movq     0x8(%rsp),%rsi          # memOffsetBase,reg :: 
     shrq     $0x2,%r15               # imm,reg ::  modifies flags!!
     movq     %r14,%rdx               # reg,reg :: 
     leaq     (%rbx,%r15,8),%r12      # memBaseIndexScale,reg :: 
     subq     %r15,%rsi               # reg,reg ::  modifies flags!!
     movq     %r15,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     %r15,%r13               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x11700             # value ::  target: 0x11700 CodeAddr: 0x11700 CALLS 0x11700
     movq     %r14,%rdx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %rbp,%rcx               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     movq     %r14,0x18(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x11700             # value ::  target: 0x11700 CodeAddr: 0x11700 CALLS 0x11700
     movq     $0x0,(%rsp)             # imm,memBase :: 
     movq     (%r12),%r14             # memBase,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     movq     (%rbx),%r15             # memBase,reg :: 
     movq     0x18(%rsp),%r13         # memOffsetBase,reg :: 
Addr0x11880:
     movq     %r14,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     addq     $0x8,%r13               # imm,reg ::  modifies flags!!
     callq    *%rbp                   # reg :: "*%rbp" != "%rbp" no target? 
#{'addr': 71818, 'op': 'callq', 'args': [Arg(argText='%rbp', star='*', offset=None, imm=None, reg='%rbp', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 13620, 'size': 2}
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jle      Addr0x118b3             # value ::  target: 0x118b3 CodeAddr: 0x118b3
Addr0x11890:
     movq     %r14,-0x8(%r13)         # reg,memOffsetBase :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     cmpq     %r12,0x8(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x11916             # value ::  target: 0x11916 CodeAddr: 0x11916
     movq     (%rbx,%r12,8),%r14      # memBaseIndexScale,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     addq     $0x8,%r13               # imm,reg ::  modifies flags!!
     movq     %r14,%rsi               # reg,reg :: 
     callq    *%rbp                   # reg :: "*%rbp" != "%rbp" no target? 
#{'addr': 71853, 'op': 'callq', 'args': [Arg(argText='%rbp', star='*', offset=None, imm=None, reg='%rbp', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 13631, 'size': 2}
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jg       Addr0x11890             # value ::  target: 0x11890 CodeAddr: 0x11890
Addr0x118b3:
     addq     $0x1,(%rsp)             # imm,memBase ::  modifies flags!!
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     %r15,-0x8(%r13)         # reg,memOffsetBase :: 
     cmpq     %rax,0x20(%rsp)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x11908             # value ::  target: 0x11908 CodeAddr: 0x11908
     movq     (%rbx,%rax,8),%r15      # memBaseIndexScale,reg :: 
     jmp      Addr0x11880             # value ::  target: 0x11880 CodeAddr: 0x11880
Addr0x118d0:
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     0x8(%rsp),%r13          # memOffsetBase,reg :: 
     leaq     (%rbx,%r14,8),%rdi      # memBaseIndexScale,reg :: 
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     subq     %rax,%r13               # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     leaq     0x0(,%r13,8),%rdx       # memOffsetIndexScale,reg :: 
     popq     %r12                    # reg :: 
     leaq     (%rcx,%rax,8),%rsi      # memBaseIndexScale,reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0
Addr0x11908:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movq     %r12,(%rsp)             # reg,memBase :: 
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
Addr0x11916:
     movq     (%rsp),%rax             # memBase,reg :: 
     movq     0x20(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     %r13,%rdi               # reg,reg :: 
     subq     %rax,%rdx               # reg,reg ::  modifies flags!!
     leaq     (%rbx,%rax,8),%rsi      # memBaseIndexScale,reg :: 
     shlq     $0x3,%rdx               # imm,reg ::  modifies flags!!
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     movq     (%rax),%r15             # memBase,reg :: 
     jmp      Addr0x117a7             # value ::  target: 0x117a7 CodeAddr: 0x117a7

# ----------- Function 292 ------------ 
#
# startAddr  = 0x11940
# startindex = 13672
# endAddr    = 0x1194f
# endindex   = 13675
# len        = 16 (0x10)
# secid      = 15
# sec name   = .text
# Falls through to next
#  jumps out!
#
# -------------------------------------------

Addr0x11940:
     endbr64 
     movq     %rdx,%rcx               # reg,reg :: 
     leaq     (%rdi,%rsi,8),%rdx      # memBaseIndexScale,reg :: 
     jmp      Addr0x11700             # value ::  target: 0x11700 CodeAddr: 0x11700

# ----------- Function 293 ------------ 
#
# startAddr  = 0x11950
# startindex = 13676
# endAddr    = 0x11990
# endindex   = 13697
# len        = 65 (0x41)
# len1       = 76 (0x4c) to (0x11991)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x11950:
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x11989             # value ::  target: 0x11989 CodeAddr: 0x11989
     movq     %rsi,%rbp               # reg,reg :: 
     leaq     -0x1(%rdx),%rbx         # memOffsetBase,reg :: 
     callq    Addr0x4d70              # value ::  target: 0x4d70 CodeAddr: 0x4d70 CALLS 0x4d70
Addr0x11970:
     movzbl   0x0(%rbp,%rbx,1),%ecx   # memOffsetBaseIndexScale,reg :: 
     movq     (%rax),%rdx             # memBase,reg :: 
     movl     (%rdx,%rcx,4),%edx      # memBaseIndexScale,reg :: 
     movb     %dl,(%r12,%rbx,1)       # reg,memBaseIndexScale :: 
     subq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     $0xffffffffffffffff,%rbx# imm,reg ::  modifies flags!!
     jne      Addr0x11970             # value ::  target: 0x11970 CodeAddr: 0x11970
Addr0x11989:
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 294 ------------ 
#
# startAddr  = 0x119a0
# startindex = 13700
# endAddr    = 0x119e0
# endindex   = 13721
# len        = 65 (0x41)
# len1       = 76 (0x4c) to (0x119e1)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x119a0:
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x119d9             # value ::  target: 0x119d9 CodeAddr: 0x119d9
     movq     %rsi,%rbp               # reg,reg :: 
     leaq     -0x1(%rdx),%rbx         # memOffsetBase,reg :: 
     callq    Addr0x4700              # value ::  target: 0x4700 CodeAddr: 0x4700 CALLS 0x4700
Addr0x119c0:
     movzbl   0x0(%rbp,%rbx,1),%ecx   # memOffsetBaseIndexScale,reg :: 
     movq     (%rax),%rdx             # memBase,reg :: 
     movl     (%rdx,%rcx,4),%edx      # memBaseIndexScale,reg :: 
     movb     %dl,(%r12,%rbx,1)       # reg,memBaseIndexScale :: 
     subq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     $0xffffffffffffffff,%rbx# imm,reg ::  modifies flags!!
     jne      Addr0x119c0             # value ::  target: 0x119c0 CodeAddr: 0x119c0
Addr0x119d9:
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 295 ------------ 
#
# startAddr  = 0x119f0
# startindex = 13724
# endAddr    = 0x13275
# endindex   = 15277
# len        = 6278 (0x1886)
# len1       = 6288 (0x1890) to (0x13276)
# secid      = 15
# sec name   = .text
#  Has True Return
#  has jump ptr!
#
# -------------------------------------------

Addr0x119f0:
     pushq    %r15                    # reg :: 
     movq     %rdi,%r10               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     %rcx,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdx,%rbx               # reg,reg :: 
     subq     $0x4c8,%rsp             # imm,reg ::  modifies flags!!
     movq     0x30(%rcx),%r15         # memOffsetBase,reg :: 
     movl     0x8(%rcx),%r13d         # memOffsetBase,reg :: 
     movq     0x500(%rsp),%rax        # memOffsetBase,reg :: 
     movq     %rsi,(%rsp)             # reg,memBase :: 
     movq     %r9,0x18(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,0x10(%rsp)         # reg,memOffsetBase :: 
     movb     %r8b,0x2b(%rsp)         # reg,memOffsetBase :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x4b8(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     leaq     Var0x197fe(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x197fe
     cmoveq   %rax,%r15               # reg,reg :: 
     cmpl     $0xc,%r13d              # imm,reg ::  modifies flags!!
     jle      Addr0x11b00             # value ::  target: 0x11b00 CodeAddr: 0x11b00
     subl     $0xc,%r13d              # imm,reg ::  modifies flags!!
Addr0x11a5c:
     movzbl   (%rbx),%eax             # memBase,reg :: 
     xorl     %r11d,%r11d             # reg,reg ::  modifies flags!!
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x11ab7             # value ::  target: 0x11ab7 CodeAddr: 0x11ab7
     movl     %r13d,0x2c(%rsp)        # reg,memOffsetBase :: 
     movq     %r11,%rbp               # reg,reg :: 
     movq     %r10,%r12               # reg,reg :: 
     movq     %r15,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     %r14,0x8(%rsp)          # reg,memOffsetBase :: 
Addr0x11a7b:
     cmpb     $0x25,%al               # imm,reg ::  modifies flags!!
     je       Addr0x11b18             # value ::  target: 0x11b18 CodeAddr: 0x11b18
     movq     (%rsp),%rdx             # memBase,reg :: 
     subq     %rbp,%rdx               # reg,reg ::  modifies flags!!
     cmpq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x11a9d             # value ::  target: 0x11a9d CodeAddr: 0x11a9d
     movb     %al,(%r12)              # reg,memBase :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
Addr0x11a9d:
     addq     $0x1,%rbp               # imm,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
Addr0x11aa4:
     movzbl   0x1(%r8),%eax           # memOffsetBase,reg :: 
     leaq     0x1(%r8),%rbx           # memOffsetBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x11a7b             # value ::  target: 0x11a7b CodeAddr: 0x11a7b
     movq     %rbp,%r11               # reg,reg :: 
     movq     %r12,%r10               # reg,reg :: 
Addr0x11ab7:
     testq    %r10,%r10               # reg,reg ::  modifies flags!!
     je       Addr0x11ad3             # value ::  target: 0x11ad3 CodeAddr: 0x11ad3
     cmpq     $0x0,(%rsp)             # imm,memBase ::  modifies flags!!
     je       Addr0x11ad3             # value ::  target: 0x11ad3 CodeAddr: 0x11ad3
     movb     $0x0,(%r10)             # imm,memBase :: 
     jmp      Addr0x11ad3             # value ::  target: 0x11ad3 CodeAddr: 0x11ad3
Addr0x11ad0:
     xorl     %r11d,%r11d             # reg,reg ::  modifies flags!!
Addr0x11ad3:
     movq     0x4b8(%rsp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x13256             # value ::  target: 0x13256 CodeAddr: 0x13256
     addq     $0x4c8,%rsp             # imm,reg ::  modifies flags!!
     movq     %r11,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x11b00:
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0xc,%eax               # imm,reg :: 
     cmovel   %eax,%r13d              # reg,reg :: 
     jmp      Addr0x11a5c             # value ::  target: 0x11a5c CodeAddr: 0x11a5c
Addr0x11b18:
     movzbl   0x2b(%rsp),%r10d        # memOffsetBase,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     xorl     %r14d,%r14d             # reg,reg ::  modifies flags!!
Addr0x11b28:
     movsbl   0x1(%rbx),%r9d          # memOffsetBase,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movl     %r9d,%ecx               # reg,reg :: 
     cmpb     $0x30,%r9b              # imm,reg ::  modifies flags!!
     je       Addr0x11cb0             # value ::  target: 0x11cb0 CodeAddr: 0x11cb0
     jg       Addr0x11b50             # value ::  target: 0x11b50 CodeAddr: 0x11b50
     cmpb     $0x23,%r9b              # imm,reg ::  modifies flags!!
     jne      Addr0x11b60             # value ::  target: 0x11b60 CodeAddr: 0x11b60
     movl     $0x1,%r8d               # imm,reg :: 
     jmp      Addr0x11b28             # value ::  target: 0x11b28 CodeAddr: 0x11b28
Addr0x11b50:
     cmpb     $0x5e,%r9b              # imm,reg ::  modifies flags!!
     jne      Addr0x11b70             # value ::  target: 0x11b70 CodeAddr: 0x11b70
     movl     $0x1,%r10d              # imm,reg :: 
     jmp      Addr0x11b28             # value ::  target: 0x11b28 CodeAddr: 0x11b28
Addr0x11b60:
     cmpb     $0x2d,%r9b              # imm,reg ::  modifies flags!!
     jne      Addr0x11b88             # value ::  target: 0x11b88 CodeAddr: 0x11b88
     movl     $0x2d,%r14d             # imm,reg :: 
     jmp      Addr0x11b28             # value ::  target: 0x11b28 CodeAddr: 0x11b28
Addr0x11b70:
     cmpb     $0x5f,%r9b              # imm,reg ::  modifies flags!!
     jne      Addr0x11cc0             # value ::  target: 0x11cc0 CodeAddr: 0x11cc0
     movl     $0x5f,%r14d             # imm,reg :: 
     jmp      Addr0x11b28             # value ::  target: 0x11b28 CodeAddr: 0x11b28
Addr0x11b88:
     movl     $0xffffffff,%r13d       # imm,reg :: 
Addr0x11b8e:
     cmpb     $0x4f,%cl               # imm,reg ::  modifies flags!!
     je       Addr0x11bbd             # value ::  target: 0x11bbd CodeAddr: 0x11bbd
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmpb     $0x7a,%cl               # imm,reg ::  modifies flags!!
     ja       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
Addr0x11b9b:
     leaq     Var0x1c01c(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1c01c
     movzbl   %cl,%eax                # reg,reg :: 
     movslq   (%rdi,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rdi,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 72620, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 13843, 'size': 3, 'jumpTable': 'unknown'}
Addr0x11baf:
     orl      $0xffffffff,%r13d       # imm,reg ::  modifies flags!!
Addr0x11bb8:
     cmpb     $0x45,%cl               # imm,reg ::  modifies flags!!
     jne      Addr0x11b8e             # value ::  target: 0x11b8e CodeAddr: 0x11b8e
Addr0x11bbd:
     movzbl   0x1(%rbx),%ecx          # memOffsetBase,reg :: 
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpb     $0x7a,%cl               # imm,reg ::  modifies flags!!
     jbe      Addr0x11b9b             # value ::  target: 0x11b9b CodeAddr: 0x11b9b
Addr0x11bd0:
     leaq     -0x1(%rbx),%rax         # memOffsetBase,reg :: 
     leal     0x1(%rbx),%edx          # memOffsetBase,reg :: 
Addr0x11bd7:
     movq     %rax,%r9                # reg,reg :: 
     movl     %edx,%ecx               # reg,reg :: 
     subl     %eax,%ecx               # reg,reg ::  modifies flags!!
     cmpb     $0x25,(%r9)             # imm,memBase ::  modifies flags!!
     leaq     -0x1(%rax),%rax         # memOffsetBase,reg :: 
     jne      Addr0x11bd7             # value ::  target: 0x11bd7 CodeAddr: 0x11bd7
     movq     (%rsp),%rdx             # memBase,reg :: 
     movl     $0x0,%eax               # imm,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     movq     %rbx,%r8                # reg,reg :: 
     movq     %rcx,%r15               # reg,reg :: 
     subq     %rbp,%rdx               # reg,reg ::  modifies flags!!
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     cmovnsl  %r13d,%eax              # reg,reg :: 
     cltq    
     cmpq     %rcx,%rax               # reg,reg ::  modifies flags!!
     cmovaeq  %rax,%r15               # reg,reg :: 
Addr0x11c0d:
     cmpq     %rdx,%r15               # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x11c9f             # value ::  target: 0x11c9f CodeAddr: 0x11c9f
     cmpq     %rax,%rcx               # reg,reg ::  modifies flags!!
     jae      Addr0x11c71             # value ::  target: 0x11c71 CodeAddr: 0x11c71
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %rcx,0x50(%rsp)         # reg,memOffsetBase :: 
     subq     %rcx,%rdx               # reg,reg ::  modifies flags!!
     movq     %r8,0x48(%rsp)          # reg,memOffsetBase :: 
     movq     %r9,0x40(%rsp)          # reg,memOffsetBase :: 
     leaq     (%r12,%rdx,1),%rbx      # memBaseIndexScale,reg :: 
     movb     %r10b,0x30(%rsp)        # reg,memOffsetBase :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12f0f             # value ::  target: 0x12f0f CodeAddr: 0x12f0f
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %rbx,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x50(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x48(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movzbl   0x30(%rsp),%r10d        # memOffsetBase,reg :: 
Addr0x11c71:
     movq     %r8,0x40(%rsp)          # reg,memOffsetBase :: 
     movq     %rcx,%rdx               # reg,reg :: 
     movq     %r9,%rsi                # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %rcx,0x30(%rsp)         # reg,memOffsetBase :: 
     testb    %r10b,%r10b             # reg,reg ::  modifies flags!!
     je       Addr0x12d0c             # value ::  target: 0x12d0c CodeAddr: 0x12d0c
     callq    Addr0x119a0             # value ::  target: 0x119a0 CodeAddr: 0x119a0 CALLS 0x119a0
     movq     0x30(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
Addr0x11c9c:
     addq     %rcx,%r12               # reg,reg ::  modifies flags!!
Addr0x11c9f:
     addq     %r15,%rbp               # reg,reg ::  modifies flags!!
     jmp      Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
Addr0x11cb0:
     movl     $0x30,%r14d             # imm,reg :: 
     jmp      Addr0x11b28             # value ::  target: 0x11b28 CodeAddr: 0x11b28
Addr0x11cc0:
     leal     -0x30(%r9),%eax         # memOffsetBase,reg :: 
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     ja       Addr0x11baf             # value ::  target: 0x11baf CodeAddr: 0x11baf
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
Addr0x11cd0:
     movsbl   0x1(%rbx),%r9d          # memOffsetBase,reg :: 
     leaq     0x1(%rbx),%rdx          # memOffsetBase,reg :: 
     movl     %r9d,%ecx               # reg,reg :: 
     leal     -0x30(%r9),%eax         # memOffsetBase,reg :: 
     cmpl     $0xccccccc,%r13d        # imm,reg ::  modifies flags!!
     jg       Addr0x11d0e             # value ::  target: 0x11d0e CodeAddr: 0x11d0e
     movsbl   (%rbx),%esi             # memBase,reg :: 
     je       Addr0x11d08             # value ::  target: 0x11d08 CodeAddr: 0x11d08
Addr0x11cee:
     leal     0x0(%r13,%r13,4),%edi   # memOffsetBaseIndexScale,reg :: 
     movq     %rdx,%rbx               # reg,reg :: 
     leal     -0x30(%rsi,%rdi,2),%r13d# memOffsetBaseIndexScale,reg :: 
Addr0x11cfb:
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     jbe      Addr0x11cd0             # value ::  target: 0x11cd0 CodeAddr: 0x11cd0
     jmp      Addr0x11bb8             # value ::  target: 0x11bb8 CodeAddr: 0x11bb8
Addr0x11d08:
     cmpb     $0x37,%sil              # imm,reg ::  modifies flags!!
     jle      Addr0x11cee             # value ::  target: 0x11cee CodeAddr: 0x11cee
Addr0x11d0e:
     cmpl     $0x9,%eax               # imm,reg ::  modifies flags!!
     ja       Addr0x11d30             # value ::  target: 0x11d30 CodeAddr: 0x11d30
     movsbl   0x2(%rbx),%r9d          # memOffsetBase,reg :: 
     movl     $0x7fffffff,%r13d       # imm,reg :: 
     addq     $0x2,%rbx               # imm,reg ::  modifies flags!!
     movl     %r9d,%ecx               # reg,reg :: 
     leal     -0x30(%r9),%eax         # memOffsetBase,reg :: 
     jmp      Addr0x11cfb             # value ::  target: 0x11cfb CodeAddr: 0x11cfb
Addr0x11d30:
     movq     %rdx,%rbx               # reg,reg :: 
     movl     $0x7fffffff,%r13d       # imm,reg :: 
     jmp      Addr0x11bb8             # value ::  target: 0x11bb8 CodeAddr: 0x11bb8
     cmpl     $0x4f,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
Addr0x11d48:
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
Addr0x11d4b:
     movl     $0x2520,%edi            # imm,reg :: 
     movw     %di,0xab(%rsp)          # reg,memOffsetBase :: 
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     jne      Addr0x1326f             # value ::  target: 0x1326f CodeAddr: 0x1326f
     movq     %rbx,%r8                # reg,reg :: 
     leaq     0xad(%rsp),%rax         # memOffsetBase,reg :: 
Addr0x11d6c:
     movb     %cl,(%rax)              # reg,memBase :: 
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     leaq     0xab(%rsp),%rdx         # memOffsetBase,reg :: 
     leaq     0xb0(%rsp),%rdi         # memOffsetBase,reg :: 
     movb     $0x0,0x1(%rax)          # imm,memOffsetBase :: 
     movl     $0x400,%esi             # imm,reg :: 
     movq     %r8,0x30(%rsp)          # reg,memOffsetBase :: 
     movl     %r9d,0x48(%rsp)         # reg,memOffsetBase :: 
     movb     %r10b,0x40(%rsp)        # reg,memOffsetBase :: 
     callq    Addr0x4c30              # value ::  target: 0x4c30 CodeAddr: 0x4c30 CALLS 0x4c30
     movq     0x30(%rsp),%r8          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
     leaq     -0x1(%rax),%rcx         # memOffsetBase,reg :: 
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%eax               # imm,reg :: 
     movq     (%rsp),%rdx             # memBase,reg :: 
     cmovnsl  %r13d,%eax              # reg,reg :: 
     cltq    
     cmpq     %rax,%rcx               # reg,reg ::  modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     cmovaeq  %rcx,%rbx               # reg,reg :: 
     subq     %rbp,%rdx               # reg,reg ::  modifies flags!!
     cmpq     %rbx,%rdx               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x11e77             # value ::  target: 0x11e77 CodeAddr: 0x11e77
     movl     0x48(%rsp),%r9d         # memOffsetBase,reg :: 
     movzbl   0x40(%rsp),%r10d        # memOffsetBase,reg :: 
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     jne      Addr0x11e3b             # value ::  target: 0x11e3b CodeAddr: 0x11e3b
     cmpq     %rax,%rcx               # reg,reg ::  modifies flags!!
     jae      Addr0x11e3b             # value ::  target: 0x11e3b CodeAddr: 0x11e3b
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %rcx,0x48(%rsp)         # reg,memOffsetBase :: 
     subq     %rcx,%rdx               # reg,reg ::  modifies flags!!
     movq     %r8,0x40(%rsp)          # reg,memOffsetBase :: 
     movb     %r10b,0x30(%rsp)        # reg,memOffsetBase :: 
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12d48             # value ::  target: 0x12d48 CodeAddr: 0x12d48
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x48(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movzbl   0x30(%rsp),%r10d        # memOffsetBase,reg :: 
Addr0x11e3b:
     movq     %r8,0x40(%rsp)          # reg,memOffsetBase :: 
     leaq     0xb1(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %rcx,%rdx               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %rcx,0x30(%rsp)         # reg,memOffsetBase :: 
     testb    %r15b,%r15b             # reg,reg ::  modifies flags!!
     jne      Addr0x12d34             # value ::  target: 0x12d34 CodeAddr: 0x12d34
     testb    %r10b,%r10b             # reg,reg ::  modifies flags!!
     je       Addr0x12d20             # value ::  target: 0x12d20 CodeAddr: 0x12d20
     callq    Addr0x119a0             # value ::  target: 0x119a0 CodeAddr: 0x119a0 CALLS 0x119a0
     movq     0x30(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
Addr0x11e74:
     addq     %rcx,%r12               # reg,reg ::  modifies flags!!
Addr0x11e77:
     addq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     jmp      Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rsi          # memOffsetBase,reg :: 
     movl     0x14(%rsi),%r8d         # memOffsetBase,reg :: 
     movl     0x1c(%rsi),%edi         # memOffsetBase,reg :: 
     movl     0x18(%rsi),%r15d        # memOffsetBase,reg :: 
     movl     %r8d,%eax               # reg,reg :: 
     movl     %edi,%edx               # reg,reg :: 
     sarl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     subl     %r15d,%edx              # reg,reg ::  modifies flags!!
     andl     $0x190,%eax             # imm,reg ::  modifies flags!!
     addl     $0x17e,%edx             # imm,reg ::  modifies flags!!
     leal     -0x64(%r8,%rax,1),%eax  # memOffsetBaseIndexScale,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     movl     %eax,0x30(%rsp)         # reg,memOffsetBase :: 
     movslq   %edx,%rax               # reg,reg :: 
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     imulq    $0xffffffff92492493,%rax,%rax# imm,reg,reg ::  modifies flags!!
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     addl     %edx,%eax               # reg,reg ::  modifies flags!!
     sarl     $0x2,%eax               # imm,reg ::  modifies flags!!
     subl     %esi,%eax               # reg,reg ::  modifies flags!!
     leal     0x0(,%rax,8),%esi       # memOffsetIndexScale,reg :: 
     subl     %eax,%esi               # reg,reg ::  modifies flags!!
     movl     %edi,%eax               # reg,reg :: 
     subl     %edx,%eax               # reg,reg ::  modifies flags!!
     leal     0x3(%rax,%rsi,1),%r11d  # memOffsetBaseIndexScale,reg :: 
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     js       Addr0x1300a             # value ::  target: 0x1300a CodeAddr: 0x1300a
     movl     0x30(%rsp),%eax         # memOffsetBase,reg :: 
     movl     $0x16d,%edx             # imm,reg :: 
     testb    $0x3,%al                # imm,reg ::  modifies flags!!
     jne      Addr0x11f2a             # value ::  target: 0x11f2a CodeAddr: 0x11f2a
     imull    $0xc28f5c29,%eax,%eax   # imm,reg,reg ::  modifies flags!!
     movl     $0x16e,%edx             # imm,reg :: 
     addl     $0x51eb850,%eax         # imm,reg ::  modifies flags!!
     movl     %eax,%esi               # reg,reg :: 
     rorl     $0x2,%esi               # imm,reg ::  modifies flags!!
     cmpl     $0x28f5c28,%esi         # imm,reg ::  modifies flags!!
     ja       Addr0x11f2a             # value ::  target: 0x11f2a CodeAddr: 0x11f2a
     rorl     $0x4,%eax               # imm,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpl     $0xa3d70b,%eax          # imm,reg ::  modifies flags!!
     setb     %dl                     # reg :: 
     addl     $0x16d,%edx             # imm,reg ::  modifies flags!!
Addr0x11f2a:
     movl     %edi,%esi               # reg,reg :: 
     subl     %edx,%esi               # reg,reg ::  modifies flags!!
     movl     %esi,%edx               # reg,reg :: 
     subl     %r15d,%edx              # reg,reg ::  modifies flags!!
     addl     $0x17e,%edx             # imm,reg ::  modifies flags!!
     movslq   %edx,%rax               # reg,reg :: 
     movl     %edx,%edi               # reg,reg :: 
     subl     %edx,%esi               # reg,reg ::  modifies flags!!
     imulq    $0xffffffff92492493,%rax,%rax# imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%edi              # imm,reg ::  modifies flags!!
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     addl     %edx,%eax               # reg,reg ::  modifies flags!!
     sarl     $0x2,%eax               # imm,reg ::  modifies flags!!
     subl     %edi,%eax               # reg,reg ::  modifies flags!!
     leal     0x0(,%rax,8),%edi       # memOffsetIndexScale,reg :: 
     subl     %eax,%edi               # reg,reg ::  modifies flags!!
     leal     0x3(%rsi,%rdi,1),%r15d  # memOffsetBaseIndexScale,reg :: 
     testl    %r15d,%r15d             # reg,reg ::  modifies flags!!
     cmovnsl  %r15d,%r11d             # reg,reg :: 
     sarl     $0x1f,%r15d             # imm,reg ::  modifies flags!!
     addl     $0x1,%r15d              # imm,reg ::  modifies flags!!
Addr0x11f72:
     cmpb     $0x47,%cl               # imm,reg ::  modifies flags!!
     je       Addr0x130fd             # value ::  target: 0x130fd CodeAddr: 0x130fd
     cmpb     $0x67,%cl               # imm,reg ::  modifies flags!!
     jne      Addr0x130d5             # value ::  target: 0x130d5 CodeAddr: 0x130d5
     movslq   %r8d,%rax               # reg,reg :: 
     movl     %r8d,%edx               # reg,reg :: 
     movl     %r8d,%esi               # reg,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     imulq    $0x51eb851f,%rax,%rax   # imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%edx              # imm,reg ::  modifies flags!!
     sarq     $0x25,%rax              # imm,reg ::  modifies flags!!
     subl     %edx,%eax               # reg,reg ::  modifies flags!!
     imull    $0x64,%eax,%eax         # imm,reg,reg ::  modifies flags!!
     subl     %eax,%esi               # reg,reg ::  modifies flags!!
     movl     %esi,%eax               # reg,reg :: 
     addl     %r15d,%eax              # reg,reg ::  modifies flags!!
     movslq   %eax,%rdx               # reg,reg :: 
     movl     %eax,%esi               # reg,reg :: 
     imulq    $0x51eb851f,%rdx,%rdx   # imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     sarq     $0x25,%rdx              # imm,reg ::  modifies flags!!
     subl     %esi,%edx               # reg,reg ::  modifies flags!!
     imull    $0x64,%edx,%edx         # imm,reg,reg ::  modifies flags!!
     subl     %edx,%eax               # reg,reg ::  modifies flags!!
     movl     %eax,%edx               # reg,reg :: 
     jns      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     movl     $0xfffff894,%eax        # imm,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     addl     $0x64,%edx              # imm,reg ::  modifies flags!!
     subl     %r15d,%eax              # reg,reg ::  modifies flags!!
     negl     %esi                    # reg ::  modifies flags!!
     cmpl     %eax,%r8d               # reg,reg ::  modifies flags!!
     cmovll   %esi,%edx               # reg,reg :: 
Addr0x11fe0:
     movl     %edx,%eax               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     shrl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     movl     %eax,0x30(%rsp)         # reg,memOffsetBase :: 
Addr0x11fee:
     cmpl     $0x4f,%r9d              # imm,reg ::  modifies flags!!
     jne      Addr0x120b0             # value ::  target: 0x120b0 CodeAddr: 0x120b0
     cmpb     $0x0,0x30(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x120b7             # value ::  target: 0x120b7 CodeAddr: 0x120b7
Addr0x12003:
     movl     $0x2520,%eax            # imm,reg :: 
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     movw     %ax,0xab(%rsp)          # reg,memOffsetBase :: 
Addr0x12013:
     movb     %r9b,0xad(%rsp)         # reg,memOffsetBase :: 
     movq     %rbx,%r8                # reg,reg :: 
     movl     %edi,%r9d               # reg,reg :: 
     leaq     0xae(%rsp),%rax         # memOffsetBase,reg :: 
     jmp      Addr0x11d6c             # value ::  target: 0x11d6c CodeAddr: 0x11d6c
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     jne      Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     movl     $0x2520,%edx            # imm,reg :: 
     leaq     0xad(%rsp),%rax         # memOffsetBase,reg :: 
     cmovnel  %r8d,%r10d              # reg,reg :: 
     movq     %rbx,%r8                # reg,reg :: 
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     movw     %dx,0xab(%rsp)          # reg,memOffsetBase :: 
     jmp      Addr0x11d6c             # value ::  target: 0x11d6c CodeAddr: 0x11d6c
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     cmovnel  %r8d,%r10d              # reg,reg :: 
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     jne      Addr0x11d48             # value ::  target: 0x11d48 CodeAddr: 0x11d48
     jmp      Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x12f08             # value ::  target: 0x12f08 CodeAddr: 0x12f08
     cmpl     $0x4f,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x4,%edi               # imm,reg :: 
     movl     0x14(%rax),%edx         # memOffsetBase,reg :: 
     cmpl     $0xfffff894,%edx        # imm,reg ::  modifies flags!!
     setl     0x30(%rsp)              # memOffsetBase :: 
     addl     $0x76c,%edx             # imm,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x120b0:
     cmpb     $0x0,0x30(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x120b9             # value ::  target: 0x120b9 CodeAddr: 0x120b9
Addr0x120b7:
     negl     %edx                    # reg ::  modifies flags!!
Addr0x120b9:
     leaq     0xc7(%rsp),%rax         # memOffsetBase,reg :: 
     movl     %edi,0x48(%rsp)         # reg,memOffsetBase :: 
     movl     $0xcccccccd,%r11d       # imm,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     movq     %rax,0x40(%rsp)         # reg,memOffsetBase :: 
     leaq     -0x1(%r15),%r9          # memOffsetBase,reg :: 
     testb    $0x1,%sil               # imm,reg ::  modifies flags!!
     je       Addr0x1211c             # value ::  target: 0x1211c CodeAddr: 0x1211c
Addr0x120e0:
     movb     $0x3a,-0x1(%r15)        # imm,memOffsetBase :: 
     subq     $0x2,%r15               # imm,reg ::  modifies flags!!
Addr0x120e9:
     movl     %edx,%eax               # reg,reg :: 
     movl     %edx,%edi               # reg,reg :: 
     sarl     %esi                    # reg ::  modifies flags!!
     imulq    %r11,%rax               # reg,reg ::  modifies flags!!
     shrq     $0x23,%rax              # imm,reg ::  modifies flags!!
     leal     (%rax,%rax,4),%ecx      # memBaseIndexScale,reg :: 
     addl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     subl     %ecx,%edi               # reg,reg ::  modifies flags!!
     movl     %edi,%ecx               # reg,reg :: 
     addl     $0x30,%ecx              # imm,reg ::  modifies flags!!
     movb     %cl,-0x1(%r9)           # reg,memOffsetBase :: 
     cmpl     $0x9,%edx               # imm,reg ::  modifies flags!!
     ja       Addr0x12110             # value ::  target: 0x12110 CodeAddr: 0x12110
     testl    %esi,%esi               # reg,reg ::  modifies flags!!
     je       Addr0x12130             # value ::  target: 0x12130 CodeAddr: 0x12130
Addr0x12110:
     movl     %eax,%edx               # reg,reg :: 
     leaq     -0x1(%r15),%r9          # memOffsetBase,reg :: 
     testb    $0x1,%sil               # imm,reg ::  modifies flags!!
     jne      Addr0x120e0             # value ::  target: 0x120e0 CodeAddr: 0x120e0
Addr0x1211c:
     movq     %r9,%rax                # reg,reg :: 
     movq     %r15,%r9                # reg,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     jmp      Addr0x120e9             # value ::  target: 0x120e9 CodeAddr: 0x120e9
Addr0x12130:
     endbr64 
     movl     0x48(%rsp),%edi         # memOffsetBase,reg :: 
     cmpl     %r13d,%edi              # reg,reg ::  modifies flags!!
     cmovll   %r13d,%edi              # reg,reg :: 
     cmpb     $0x0,0x30(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     %edi,%r11d              # reg,reg :: 
     jne      Addr0x12c30             # value ::  target: 0x12c30 CodeAddr: 0x12c30
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     je       Addr0x1252f             # value ::  target: 0x1252f CodeAddr: 0x1252f
     cmpl     $0x2d,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12f39             # value ::  target: 0x12f39 CodeAddr: 0x12f39
     movb     $0x2b,0x30(%rsp)        # imm,memOffsetBase :: 
Addr0x12165:
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     leal     -0x1(%r11),%ecx         # memOffsetBase,reg :: 
     subq     %r15,%r9                # reg,reg ::  modifies flags!!
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     subl     %r9d,%ecx               # reg,reg ::  modifies flags!!
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     jle      Addr0x12d6d             # value ::  target: 0x12d6d CodeAddr: 0x12d6d
Addr0x12183:
     cmpl     $0x5f,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12e21             # value ::  target: 0x12e21 CodeAddr: 0x12e21
     movslq   %r11d,%rdx              # reg,reg :: 
     cmpq     %rax,%rdx               # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     cmpb     $0x0,0x30(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x12e9d             # value ::  target: 0x12e9d CodeAddr: 0x12e9d
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%edx               # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     cmovnsl  %r13d,%edx              # reg,reg :: 
     movslq   %edx,%rdx               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     cmovneq  %rdx,%rsi               # reg,reg :: 
     cmpq     %rax,%rsi               # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     movslq   %ecx,%rcx               # reg,reg :: 
     addq     %rsi,%rbp               # reg,reg ::  modifies flags!!
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x12266             # value ::  target: 0x12266 CodeAddr: 0x12266
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     jne      Addr0x12226             # value ::  target: 0x12226 CodeAddr: 0x12226
     cmpq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     jbe      Addr0x12226             # value ::  target: 0x12226 CodeAddr: 0x12226
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %rcx,0x58(%rsp)         # reg,memOffsetBase :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movl     %r11d,0x50(%rsp)        # reg,memOffsetBase :: 
     movb     %r10b,0x48(%rsp)        # reg,memOffsetBase :: 
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x13219             # value ::  target: 0x13219 CodeAddr: 0x13219
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x58(%rsp),%rcx         # memOffsetBase,reg :: 
     movl     0x50(%rsp),%r11d        # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
Addr0x12226:
     movzbl   0x30(%rsp),%eax         # memOffsetBase,reg :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     movb     %al,-0x1(%r12)          # reg,memOffsetBase :: 
Addr0x12234:
     movq     %rcx,%rdx               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movl     %r11d,0x50(%rsp)        # reg,memOffsetBase :: 
     movb     %r10b,0x48(%rsp)        # reg,memOffsetBase :: 
     movq     %rcx,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x30(%rsp),%rcx         # memOffsetBase,reg :: 
     movl     0x50(%rsp),%r11d        # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     addq     %rcx,%r12               # reg,reg ::  modifies flags!!
Addr0x12266:
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     addq     %rcx,%rbp               # reg,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     subq     %r15,%r9                # reg,reg ::  modifies flags!!
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
Addr0x12280:
     cmpq     %rcx,%r9                # reg,reg ::  modifies flags!!
     movq     %rcx,%rbx               # reg,reg :: 
     cmovaeq  %r9,%rbx                # reg,reg :: 
     cmpq     %rax,%rbx               # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x11e77             # value ::  target: 0x11e77 CodeAddr: 0x11e77
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     jne      Addr0x122e9             # value ::  target: 0x122e9 CodeAddr: 0x122e9
     cmpq     %rcx,%r9                # reg,reg ::  modifies flags!!
     jae      Addr0x122e9             # value ::  target: 0x122e9 CodeAddr: 0x122e9
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %r9,0x48(%rsp)          # reg,memOffsetBase :: 
     subq     %r9,%rdx                # reg,reg ::  modifies flags!!
     movq     %r8,0x40(%rsp)          # reg,memOffsetBase :: 
     movb     %r10b,0x30(%rsp)        # reg,memOffsetBase :: 
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12eae             # value ::  target: 0x12eae CodeAddr: 0x12eae
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x48(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movzbl   0x30(%rsp),%r10d        # memOffsetBase,reg :: 
Addr0x122e9:
     movq     %r8,0x40(%rsp)          # reg,memOffsetBase :: 
     movq     %r9,%rdx                # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %r9,0x30(%rsp)          # reg,memOffsetBase :: 
     testb    %r10b,%r10b             # reg,reg ::  modifies flags!!
     je       Addr0x12cf8             # value ::  target: 0x12cf8 CodeAddr: 0x12cf8
     callq    Addr0x119a0             # value ::  target: 0x119a0 CodeAddr: 0x119a0 CALLS 0x119a0
     movq     0x30(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
Addr0x12314:
     addq     %r9,%r12                # reg,reg ::  modifies flags!!
     jmp      Addr0x11e77             # value ::  target: 0x11e77 CodeAddr: 0x11e77
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     cmpl     $0xffffffff,%r13d       # imm,reg ::  modifies flags!!
     jne      Addr0x13095             # value ::  target: 0x13095 CodeAddr: 0x13095
     movl     0x508(%rsp),%edx        # memOffsetBase,reg :: 
     movl     $0x9,%r13d              # imm,reg :: 
     movl     $0x9,%edi               # imm,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     movl     (%rax),%edx             # memBase,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%r15d              # imm,reg :: 
     movl     $0x1,%eax               # imm,reg :: 
     cmovnsl  %r13d,%r15d             # reg,reg :: 
     movslq   %r15d,%r15              # reg,reg :: 
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%r15               # reg,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     cmpq     %r15,%rax               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x123c7             # value ::  target: 0x123c7 CodeAddr: 0x123c7
     cmpl     $0x1,%r13d              # imm,reg ::  modifies flags!!
     jle      Addr0x123be             # value ::  target: 0x123be CodeAddr: 0x123be
     movslq   %r13d,%rdx              # reg,reg :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x131e3             # value ::  target: 0x131e3 CodeAddr: 0x131e3
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
Addr0x123be:
     movb     $0x9,(%r12)             # imm,memBase :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
Addr0x123c7:
     addq     %r15,%rbp               # reg,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     jmp      Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movl     0x18(%rax),%eax         # memOffsetBase,reg :: 
     leal     0x6(%rax),%edx          # memOffsetBase,reg :: 
     movl     %eax,0x30(%rsp)         # reg,memOffsetBase :: 
     movslq   %edx,%rax               # reg,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     imulq    $0xffffffff92492493,%rax,%rax# imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     addl     %edx,%eax               # reg,reg ::  modifies flags!!
     sarl     $0x2,%eax               # imm,reg ::  modifies flags!!
     subl     %esi,%eax               # reg,reg ::  modifies flags!!
     leal     0x0(,%rax,8),%esi       # memOffsetIndexScale,reg :: 
     subl     %eax,%esi               # reg,reg ::  modifies flags!!
     subl     %esi,%edx               # reg,reg ::  modifies flags!!
     addl     $0x1,%edx               # imm,reg ::  modifies flags!!
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movl     0x18(%rax),%edx         # memOffsetBase,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movl     0x10(%rax),%eax         # memOffsetBase,reg :: 
     cmpl     $0x4f,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x12003             # value ::  target: 0x12003 CodeAddr: 0x12003
     leal     (%rax,%rax,4),%edx      # memBaseIndexScale,reg :: 
     movb     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     leal     (%rax,%rdx,2),%edx      # memBaseIndexScale,reg :: 
     sarl     $0x5,%edx               # imm,reg ::  modifies flags!!
     addl     $0x1,%edx               # imm,reg ::  modifies flags!!
     jmp      Addr0x120b9             # value ::  target: 0x120b9 CodeAddr: 0x120b9
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movq     0x10(%rsp),%rdi         # memOffsetBase,reg :: 
     leaq     0x70(%rsp),%rsi         # memOffsetBase,reg :: 
     movb     %r10b,0x48(%rsp)        # reg,memOffsetBase :: 
     movdqu   0x20(%rax),%xmm4        # memOffsetBase,reg :: 
     movdqu   (%rax),%xmm0            # memBase,reg :: 
     movdqu   0x10(%rax),%xmm2        # memOffsetBase,reg :: 
     movq     0x30(%rax),%rax         # memOffsetBase,reg :: 
     movaps   %xmm0,0x70(%rsp)        # reg,memOffsetBase :: 
     movq     %rax,0xa0(%rsp)         # reg,memOffsetBase :: 
     movaps   %xmm2,0x80(%rsp)        # reg,memOffsetBase :: 
     movaps   %xmm4,0x30(%rsp)        # reg,memOffsetBase :: 
     movaps   %xmm4,0x90(%rsp)        # reg,memOffsetBase :: 
     callq    Addr0x170e0             # value ::  target: 0x170e0 CodeAddr: 0x170e0 CALLS 0x170e0
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     movl     $0x30,%edi              # imm,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     leaq     0xc7(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,%r15               # reg,reg :: 
Addr0x124d0:
     movabsq  $0x6666666666666667,%rax# imm,reg :: 
     imulq    %rcx                    # reg ::  modifies flags!!
     movq     %rcx,%rax               # reg,reg :: 
     sarq     $0x3f,%rax              # imm,reg ::  modifies flags!!
     sarq     $0x2,%rdx               # imm,reg ::  modifies flags!!
     subq     %rax,%rdx               # reg,reg ::  modifies flags!!
     movq     %rdx,%rax               # reg,reg :: 
     leaq     (%rdx,%rdx,4),%rdx      # memBaseIndexScale,reg :: 
     addq     %rdx,%rdx               # reg,reg ::  modifies flags!!
     subq     %rdx,%rcx               # reg,reg ::  modifies flags!!
     movq     %rcx,%rdx               # reg,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     movl     %edi,%eax               # reg,reg :: 
     subl     %edx,%eax               # reg,reg ::  modifies flags!!
     addl     $0x30,%edx              # imm,reg ::  modifies flags!!
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     cmovsl   %eax,%edx               # reg,reg :: 
     subq     $0x1,%r15               # imm,reg ::  modifies flags!!
     movb     %dl,(%r15)              # reg,memBase :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x124d0             # value ::  target: 0x124d0 CodeAddr: 0x124d0
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x1,%edi               # imm,reg :: 
     cmovgl   %r13d,%edi              # reg,reg :: 
     movl     %edi,%r11d              # reg,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     js       Addr0x12c30             # value ::  target: 0x12c30 CodeAddr: 0x12c30
Addr0x1252f:
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     subq     %r15,%r9                # reg,reg ::  modifies flags!!
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     cmpl     $0x2d,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12552             # value ::  target: 0x12552 CodeAddr: 0x12552
     movl     %r11d,%ecx              # reg,reg :: 
     subl     %r9d,%ecx               # reg,reg ::  modifies flags!!
     testl    %ecx,%ecx               # reg,reg ::  modifies flags!!
     jg       Addr0x13149             # value ::  target: 0x13149 CodeAddr: 0x13149
Addr0x12552:
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%ecx               # imm,reg :: 
     movq     %rbx,%r8                # reg,reg :: 
     cmovnsl  %r13d,%ecx              # reg,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x12280             # value ::  target: 0x12280 CodeAddr: 0x12280
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x12f08             # value ::  target: 0x12f08 CodeAddr: 0x12f08
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     movslq   0x14(%rax),%rdx         # memOffsetBase,reg :: 
     movq     %rdx,%rax               # reg,reg :: 
     imulq    $0x51eb851f,%rdx,%rdx   # imm,reg,reg ::  modifies flags!!
     movl     %eax,%esi               # reg,reg :: 
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     sarq     $0x25,%rdx              # imm,reg ::  modifies flags!!
     subl     %esi,%edx               # reg,reg ::  modifies flags!!
     movl     %eax,%esi               # reg,reg :: 
     imull    $0x64,%edx,%edx         # imm,reg,reg ::  modifies flags!!
     subl     %edx,%esi               # reg,reg ::  modifies flags!!
     movl     %esi,%edx               # reg,reg :: 
     jns      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     negl     %esi                    # reg ::  modifies flags!!
     addl     $0x64,%edx              # imm,reg ::  modifies flags!!
     cmpl     $0xfffff893,%eax        # imm,reg ::  modifies flags!!
     cmovlel  %esi,%edx               # reg,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rsi          # memOffsetBase,reg :: 
     movl     0x1c(%rsi),%eax         # memOffsetBase,reg :: 
     subl     0x18(%rsi),%eax         # memOffsetBase,reg ::  modifies flags!!
     addl     $0x7,%eax               # imm,reg ::  modifies flags!!
Addr0x125cf:
     movslq   %eax,%rdx               # reg,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     imulq    $0xffffffff92492493,%rdx,%rdx# imm,reg,reg ::  modifies flags!!
     shrq     $0x20,%rdx              # imm,reg ::  modifies flags!!
     addl     %eax,%edx               # reg,reg ::  modifies flags!!
     sarl     $0x1f,%eax              # imm,reg ::  modifies flags!!
     sarl     $0x2,%edx               # imm,reg ::  modifies flags!!
     subl     %eax,%edx               # reg,reg ::  modifies flags!!
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rdi          # memOffsetBase,reg :: 
     movl     0x18(%rdi),%eax         # memOffsetBase,reg :: 
     leal     0x6(%rax),%edx          # memOffsetBase,reg :: 
     movl     %eax,0x30(%rsp)         # reg,memOffsetBase :: 
     movslq   %edx,%rax               # reg,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     imulq    $0xffffffff92492493,%rax,%rax# imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     addl     %edx,%eax               # reg,reg ::  modifies flags!!
     sarl     $0x2,%eax               # imm,reg ::  modifies flags!!
     subl     %esi,%eax               # reg,reg ::  modifies flags!!
     leal     0x0(,%rax,8),%esi       # memOffsetIndexScale,reg :: 
     subl     %eax,%esi               # reg,reg ::  modifies flags!!
     movl     %esi,%eax               # reg,reg :: 
     movl     0x1c(%rdi),%esi         # memOffsetBase,reg :: 
     subl     %edx,%eax               # reg,reg ::  modifies flags!!
     leal     0x7(%rax,%rsi,1),%eax   # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x125cf             # value ::  target: 0x125cf CodeAddr: 0x125cf
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     movl     $0x0,%eax               # imm,reg :: 
     movq     0x20(%rsp),%rdi         # memOffsetBase,reg :: 
     movb     %r8b,0x48(%rsp)         # reg,memOffsetBase :: 
     cmovnel  %eax,%r10d              # reg,reg :: 
     movb     %r10b,0x40(%rsp)        # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movq     (%rsp),%rdx             # memBase,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     movl     $0x0,%eax               # imm,reg :: 
     cmovnsl  %r13d,%eax              # reg,reg :: 
     cltq    
     cmpq     %rax,%r15               # reg,reg ::  modifies flags!!
     movq     %rax,%rsi               # reg,reg :: 
     cmovaeq  %r15,%rsi               # reg,reg :: 
     subq     %rbp,%rdx               # reg,reg ::  modifies flags!!
     movq     %rsi,0x30(%rsp)         # reg,memOffsetBase :: 
     cmpq     %rsi,%rdx               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x126ff             # value ::  target: 0x126ff CodeAddr: 0x126ff
     cmpq     %rax,%r15               # reg,reg ::  modifies flags!!
     movzbl   0x40(%rsp),%r10d        # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r8d         # memOffsetBase,reg :: 
     jae      Addr0x126da             # value ::  target: 0x126da CodeAddr: 0x126da
     movslq   %r13d,%rdx              # reg,reg :: 
     subq     %r15,%rdx               # reg,reg ::  modifies flags!!
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x131f8             # value ::  target: 0x131f8 CodeAddr: 0x131f8
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movb     %r8b,0x48(%rsp)         # reg,memOffsetBase :: 
     movq     %r13,%r12               # reg,reg :: 
     movb     %r10b,0x40(%rsp)        # reg,memOffsetBase :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   0x48(%rsp),%r8d         # memOffsetBase,reg :: 
     movzbl   0x40(%rsp),%r10d        # memOffsetBase,reg :: 
Addr0x126da:
     movq     0x20(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %r15,%rdx               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     jne      Addr0x13153             # value ::  target: 0x13153 CodeAddr: 0x13153
     testb    %r10b,%r10b             # reg,reg ::  modifies flags!!
     je       Addr0x1315d             # value ::  target: 0x1315d CodeAddr: 0x1315d
     callq    Addr0x119a0             # value ::  target: 0x119a0 CodeAddr: 0x119a0 CALLS 0x119a0
Addr0x126fc:
     addq     %r15,%r12               # reg,reg ::  modifies flags!!
Addr0x126ff:
     addq     0x30(%rsp),%rbp         # memOffsetBase,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     jmp      Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movl     0x2c(%rsp),%edx         # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     movl     0x4(%rax),%edx          # memOffsetBase,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     cmovnel  %r8d,%r10d              # reg,reg :: 
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
     jmp      Addr0x11d4b             # value ::  target: 0x11d4b CodeAddr: 0x11d4b
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x12f08             # value ::  target: 0x12f08 CodeAddr: 0x12f08
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movslq   0x14(%rax),%rsi         # memOffsetBase,reg :: 
     movq     %rsi,%rax               # reg,reg :: 
     imulq    $0x51eb851f,%rsi,%rsi   # imm,reg,reg ::  modifies flags!!
     cltd    
     movl     %eax,%edi               # reg,reg :: 
     sarq     $0x25,%rsi              # imm,reg ::  modifies flags!!
     subl     %edx,%esi               # reg,reg ::  modifies flags!!
     leal     0x13(%rsi),%edx         # memOffsetBase,reg :: 
     imull    $0x64,%esi,%esi         # imm,reg,reg ::  modifies flags!!
     subl     %esi,%edi               # reg,reg ::  modifies flags!!
     movl     %edi,%esi               # reg,reg :: 
     shrl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     movl     %esi,%edi               # reg,reg :: 
     setg     %sil                    # reg :: 
     andl     %edi,%esi               # reg,reg ::  modifies flags!!
     cmpl     $0xfffff894,%eax        # imm,reg ::  modifies flags!!
     movl     $0x2,%edi               # imm,reg :: 
     setl     0x30(%rsp)              # memOffsetBase :: 
     subl     %esi,%edx               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     jne      Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     leaq     Var0x1c009(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c009
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
Addr0x127c6:
     movl     0x508(%rsp),%eax        # memOffsetBase,reg :: 
     movzbl   %r10b,%r8d              # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     $0xffffffffffffffff,%rsi# imm,reg :: 
     pushq    %rax                    # reg :: 
     pushq    0x18(%rsp)              # memOffsetBase :: 
     movq     0x28(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%rdx         # memOffsetBase,reg :: 
     movl     %r8d,0x50(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x119f0             # value ::  target: 0x119f0 CodeAddr: 0x119f0 CALLS 0x119f0
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     popq     %r10                    # reg :: 
     popq     %r11                    # reg :: 
     movq     %rax,%r15               # reg,reg :: 
     movl     $0x0,%eax               # imm,reg :: 
     movq     (%rsp),%r11             # memBase,reg :: 
     cmovnsl  %r13d,%eax              # reg,reg :: 
     cltq    
     cmpq     %rax,%r15               # reg,reg ::  modifies flags!!
     movq     %rax,%r10               # reg,reg :: 
     cmovaeq  %r15,%r10               # reg,reg :: 
     subq     %rbp,%r11               # reg,reg ::  modifies flags!!
     cmpq     %r10,%r11               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x128b3             # value ::  target: 0x128b3 CodeAddr: 0x128b3
     cmpq     %rax,%r15               # reg,reg ::  modifies flags!!
     movl     0x40(%rsp),%r8d         # memOffsetBase,reg :: 
     jae      Addr0x1287c             # value ::  target: 0x1287c CodeAddr: 0x1287c
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %r10,0x50(%rsp)         # reg,memOffsetBase :: 
     subq     %r15,%rdx               # reg,reg ::  modifies flags!!
     movq     %r11,0x48(%rsp)         # reg,memOffsetBase :: 
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x12fe6             # value ::  target: 0x12fe6 CodeAddr: 0x12fe6
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movl     %r8d,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x50(%rsp),%r10         # memOffsetBase,reg :: 
     movq     0x48(%rsp),%r11         # memOffsetBase,reg :: 
     movl     0x40(%rsp),%r8d         # memOffsetBase,reg :: 
Addr0x1287c:
     movl     0x508(%rsp),%eax        # memOffsetBase,reg :: 
     movq     %r10,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     %r12,%rdi               # reg,reg :: 
     movq     %r11,%rsi               # reg,reg :: 
     addq     %r15,%r12               # reg,reg ::  modifies flags!!
     pushq    %rax                    # reg :: 
     pushq    0x18(%rsp)              # memOffsetBase :: 
     movq     0x28(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%rdx         # memOffsetBase,reg :: 
     callq    Addr0x119f0             # value ::  target: 0x119f0 CodeAddr: 0x119f0 CALLS 0x119f0
     popq     %r8                     # reg :: 
     popq     %r9                     # reg :: 
     movq     0x40(%rsp),%r10         # memOffsetBase,reg :: 
Addr0x128b3:
     addq     %r10,%rbp               # reg,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     jmp      Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     jne      Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     leaq     Var0x1c012(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c012
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x127c6             # value ::  target: 0x127c6 CodeAddr: 0x127c6
     movzbl   -0x1(%rbx),%ecx         # memOffsetBase,reg :: 
     leaq     -0x1(%rbx),%r9          # memOffsetBase,reg :: 
Addr0x128e0:
     movq     (%rsp),%rdx             # memBase,reg :: 
     movl     $0x0,%eax               # imm,reg :: 
     subq     %rbp,%rdx               # reg,reg ::  modifies flags!!
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     cmovnsl  %r13d,%eax              # reg,reg :: 
     cltq    
     cmpb     $0x25,%cl               # imm,reg ::  modifies flags!!
     jne      Addr0x13267             # value ::  target: 0x13267 CodeAddr: 0x13267
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     movl     $0x1,%r15d              # imm,reg :: 
     movq     %r9,%r8                 # reg,reg :: 
     movl     $0x1,%ecx               # imm,reg :: 
     cmovneq  %rax,%r15               # reg,reg :: 
     jmp      Addr0x11c0d             # value ::  target: 0x11c0d CodeAddr: 0x11c0d
     movq     (%rsp),%rdx             # memBase,reg :: 
     movl     $0x0,%eax               # imm,reg :: 
     movl     $0x1,%r15d              # imm,reg :: 
     subq     %rbp,%rdx               # reg,reg ::  modifies flags!!
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     cmovnsl  %r13d,%eax              # reg,reg :: 
     cltq    
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     cmovneq  %rax,%r15               # reg,reg :: 
     testl    %r9d,%r9d               # reg,reg ::  modifies flags!!
     jne      Addr0x1318d             # value ::  target: 0x1318d CodeAddr: 0x1318d
     cmpq     %r15,%rdx               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x123c7             # value ::  target: 0x123c7 CodeAddr: 0x123c7
     cmpl     $0x1,%r13d              # imm,reg ::  modifies flags!!
     jle      Addr0x12983             # value ::  target: 0x12983 CodeAddr: 0x12983
     movslq   %r13d,%rdx              # reg,reg :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x1323e             # value ::  target: 0x1323e CodeAddr: 0x1323e
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   (%rbx),%ecx             # memBase,reg :: 
Addr0x12983:
     movb     %cl,(%r12)              # reg,memBase :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     jmp      Addr0x123c7             # value ::  target: 0x123c7 CodeAddr: 0x123c7
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     movl     0x8(%rax),%edx          # memOffsetBase,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     movl     0xc(%rax),%edx          # memOffsetBase,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     0xc(%rax),%edx          # memOffsetBase,reg :: 
Addr0x129da:
     movl     $0x2,%edi               # imm,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x2d,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     movl     $0x5f,%r14d             # imm,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x3,%edi               # imm,reg :: 
     movl     0x1c(%rax),%edx         # memOffsetBase,reg :: 
     cmpl     $0xffffffff,%edx        # imm,reg ::  modifies flags!!
     setl     0x30(%rsp)              # memOffsetBase :: 
     addl     $0x1,%edx               # imm,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     0x8(%rax),%edx          # memOffsetBase,reg :: 
     jmp      Addr0x129da             # value ::  target: 0x129da CodeAddr: 0x129da
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movl     0x2c(%rsp),%edx         # memOffsetBase,reg :: 
     jmp      Addr0x129da             # value ::  target: 0x129da CodeAddr: 0x129da
     cmpl     $0x45,%r9d              # imm,reg ::  modifies flags!!
     je       Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     movl     0x10(%rax),%edx         # memOffsetBase,reg :: 
     cmpl     $0xffffffff,%edx        # imm,reg ::  modifies flags!!
     setl     0x30(%rsp)              # memOffsetBase :: 
     addl     $0x1,%edx               # imm,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%r15d              # imm,reg :: 
     movl     $0x1,%eax               # imm,reg :: 
     cmovnsl  %r13d,%r15d             # reg,reg :: 
     movslq   %r15d,%r15              # reg,reg :: 
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%r15               # reg,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     cmpq     %r15,%rax               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x123c7             # value ::  target: 0x123c7 CodeAddr: 0x123c7
     cmpl     $0x1,%r13d              # imm,reg ::  modifies flags!!
     jle      Addr0x12ada             # value ::  target: 0x12ada CodeAddr: 0x12ada
     movslq   %r13d,%rdx              # reg,reg :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%r12,%rdx,1),%r13      # memBaseIndexScale,reg :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x1319d             # value ::  target: 0x1319d CodeAddr: 0x1319d
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
Addr0x12ada:
     movb     $0xa,(%r12)             # imm,memBase :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     jmp      Addr0x123c7             # value ::  target: 0x123c7 CodeAddr: 0x123c7
     movzbl   0x1(%rbx),%eax          # memOffsetBase,reg :: 
     leaq     0x1(%rbx),%r8           # memOffsetBase,reg :: 
     movl     $0x1,%r11d              # imm,reg :: 
     cmpb     $0x3a,%al               # imm,reg ::  modifies flags!!
     je       Addr0x12c11             # value ::  target: 0x12c11 CodeAddr: 0x12c11
Addr0x12afe:
     cmpb     $0x7a,%al               # imm,reg ::  modifies flags!!
     jne      Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
Addr0x12b06:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     movl     0x20(%rax),%esi         # memOffsetBase,reg :: 
     testl    %esi,%esi               # reg,reg ::  modifies flags!!
     js       Addr0x11aa4             # value ::  target: 0x11aa4 CodeAddr: 0x11aa4
     movq     0x28(%rax),%rdi         # memOffsetBase,reg :: 
     movb     $0x1,0x30(%rsp)         # imm,memOffsetBase :: 
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     js       Addr0x12b37             # value ::  target: 0x12b37 CodeAddr: 0x12b37
     movb     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     jne      Addr0x12b37             # value ::  target: 0x12b37 CodeAddr: 0x12b37
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     cmpb     $0x2d,(%rax)            # imm,memBase ::  modifies flags!!
     sete     0x30(%rsp)              # memOffsetBase :: 
Addr0x12b37:
     movslq   %edi,%rax               # reg,reg :: 
     movl     %edi,%esi               # reg,reg :: 
     imulq    $0xffffffff91a2b3c5,%rax,%rdx# imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     imulq    $0xffffffff88888889,%rax,%rax# imm,reg,reg ::  modifies flags!!
     shrq     $0x20,%rdx              # imm,reg ::  modifies flags!!
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     addl     %edi,%edx               # reg,reg ::  modifies flags!!
     addl     %edi,%eax               # reg,reg ::  modifies flags!!
     sarl     $0xb,%edx               # imm,reg ::  modifies flags!!
     sarl     $0x5,%eax               # imm,reg ::  modifies flags!!
     movl     %edx,%ebx               # reg,reg :: 
     subl     %esi,%eax               # reg,reg ::  modifies flags!!
     subl     %esi,%ebx               # reg,reg ::  modifies flags!!
     movslq   %eax,%rsi               # reg,reg :: 
     cltd    
     imulq    $0xffffffff88888889,%rsi,%rsi# imm,reg,reg ::  modifies flags!!
     shrq     $0x20,%rsi              # imm,reg ::  modifies flags!!
     addl     %eax,%esi               # reg,reg ::  modifies flags!!
     sarl     $0x5,%esi               # imm,reg ::  modifies flags!!
     subl     %edx,%esi               # reg,reg ::  modifies flags!!
     movl     %eax,%edx               # reg,reg :: 
     imull    $0x3c,%esi,%esi         # imm,reg,reg ::  modifies flags!!
     imull    $0x3c,%eax,%eax         # imm,reg,reg ::  modifies flags!!
     subl     %esi,%edx               # reg,reg ::  modifies flags!!
     movl     %edx,%esi               # reg,reg :: 
     subl     %eax,%edi               # reg,reg ::  modifies flags!!
     cmpq     $0x2,%r11               # imm,reg ::  modifies flags!!
     je       Addr0x13124             # value ::  target: 0x13124 CodeAddr: 0x13124
     ja       Addr0x12ed3             # value ::  target: 0x12ed3 CodeAddr: 0x12ed3
     testq    %r11,%r11               # reg,reg ::  modifies flags!!
     je       Addr0x13167             # value ::  target: 0x13167 CodeAddr: 0x13167
Addr0x12ba2:
     imull    $0x64,%ebx,%edx         # imm,reg,reg ::  modifies flags!!
     movl     $0x6,%edi               # imm,reg :: 
     movq     %r8,%rbx                # reg,reg :: 
     movl     $0x1,%r8d               # imm,reg :: 
     addl     %esi,%edx               # reg,reg ::  modifies flags!!
     movl     $0x4,%esi               # imm,reg :: 
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
     movq     %rbx,%r8                # reg,reg :: 
     xorl     %r11d,%r11d             # reg,reg ::  modifies flags!!
     jmp      Addr0x12b06             # value ::  target: 0x12b06 CodeAddr: 0x12b06
     xorl     %r15d,%r15d             # reg,reg ::  modifies flags!!
Addr0x12bcd:
     testb    %r8b,%r8b               # reg,reg ::  modifies flags!!
     movl     $0x0,%eax               # imm,reg :: 
     movl     $0x70,%ecx              # imm,reg :: 
     cmovnel  %r8d,%r15d              # reg,reg :: 
     cmovnel  %eax,%r10d              # reg,reg :: 
     jmp      Addr0x11d4b             # value ::  target: 0x11d4b CodeAddr: 0x11d4b
     leaq     Var0x19aa7(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x19aa7
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x127c6             # value ::  target: 0x127c6 CodeAddr: 0x127c6
     leaq     Var0x1c000(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c000
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x127c6             # value ::  target: 0x127c6 CodeAddr: 0x127c6
     movl     $0x1,%r15d              # imm,reg :: 
     jmp      Addr0x12bcd             # value ::  target: 0x12bcd CodeAddr: 0x12bcd
Addr0x12c11:
     addq     $0x1,%r11               # imm,reg ::  modifies flags!!
     movzbl   (%rbx,%r11,1),%eax      # memBaseIndexScale,reg :: 
     leaq     (%rbx,%r11,1),%r8       # memBaseIndexScale,reg :: 
     cmpb     $0x3a,%al               # imm,reg ::  modifies flags!!
     jne      Addr0x12afe             # value ::  target: 0x12afe CodeAddr: 0x12afe
     jmp      Addr0x12c11             # value ::  target: 0x12c11 CodeAddr: 0x12c11
Addr0x12c30:
     movb     $0x2d,0x30(%rsp)        # imm,memOffsetBase :: 
     movl     $0x2d,%r8d              # imm,reg :: 
     cmpl     $0x2d,%r14d             # imm,reg ::  modifies flags!!
     jne      Addr0x12165             # value ::  target: 0x12165 CodeAddr: 0x12165
Addr0x12c45:
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%ecx               # imm,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     movl     $0x1,%r14d              # imm,reg :: 
     cmovnsl  %r13d,%ecx              # reg,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     cmovneq  %rcx,%r14               # reg,reg :: 
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     cmpq     %r14,%rax               # reg,reg ::  modifies flags!!
     jbe      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x12cd4             # value ::  target: 0x12cd4 CodeAddr: 0x12cd4
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     jne      Addr0x12ccc             # value ::  target: 0x12ccc CodeAddr: 0x12ccc
     cmpq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     jbe      Addr0x12ccc             # value ::  target: 0x12ccc CodeAddr: 0x12ccc
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %rcx,0x60(%rsp)         # reg,memOffsetBase :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movb     %r8b,0x58(%rsp)         # reg,memOffsetBase :: 
     movl     %r11d,0x50(%rsp)        # reg,memOffsetBase :: 
     movb     %r10b,0x48(%rsp)        # reg,memOffsetBase :: 
     movq     %rdx,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x30(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     0x60(%rsp),%rcx         # memOffsetBase,reg :: 
     movzbl   0x58(%rsp),%r8d         # memOffsetBase,reg :: 
     movl     0x50(%rsp),%r11d        # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     addq     %rdx,%r12               # reg,reg ::  modifies flags!!
Addr0x12ccc:
     movb     %r8b,(%r12)             # reg,memBase :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
Addr0x12cd4:
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     addq     %r14,%rbp               # reg,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     movl     $0x2d,%r14d             # imm,reg :: 
     subq     %r15,%r9                # reg,reg ::  modifies flags!!
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     jmp      Addr0x12280             # value ::  target: 0x12280 CodeAddr: 0x12280
Addr0x12cf8:
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x30(%rsp),%r9          # memOffsetBase,reg :: 
     jmp      Addr0x12314             # value ::  target: 0x12314 CodeAddr: 0x12314
Addr0x12d0c:
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x30(%rsp),%rcx         # memOffsetBase,reg :: 
     jmp      Addr0x11c9c             # value ::  target: 0x11c9c CodeAddr: 0x11c9c
Addr0x12d20:
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x30(%rsp),%rcx         # memOffsetBase,reg :: 
     jmp      Addr0x11e74             # value ::  target: 0x11e74 CodeAddr: 0x11e74
Addr0x12d34:
     callq    Addr0x11950             # value ::  target: 0x11950 CodeAddr: 0x11950 CALLS 0x11950
     movq     0x30(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     jmp      Addr0x11e74             # value ::  target: 0x11e74 CodeAddr: 0x11e74
Addr0x12d48:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   0x30(%rsp),%r10d        # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x48(%rsp),%rcx         # memOffsetBase,reg :: 
     jmp      Addr0x11e3b             # value ::  target: 0x11e3b CodeAddr: 0x11e3b
Addr0x12d6d:
     testl    %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x0,%ecx               # imm,reg :: 
     movl     $0x1,%r8d               # imm,reg :: 
     cmovnsl  %r13d,%ecx              # reg,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     cmovneq  %rcx,%r8                # reg,reg :: 
     cmpq     %rax,%r8                # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x12e0f             # value ::  target: 0x12e0f CodeAddr: 0x12e0f
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     jne      Addr0x12e01             # value ::  target: 0x12e01 CodeAddr: 0x12e01
     cmpq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     jbe      Addr0x12e01             # value ::  target: 0x12e01 CodeAddr: 0x12e01
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %r9,0x68(%rsp)          # reg,memOffsetBase :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movq     %rcx,0x60(%rsp)         # reg,memOffsetBase :: 
     leaq     (%r12,%rdx,1),%rax      # memBaseIndexScale,reg :: 
     movq     %r8,0x58(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,0x40(%rsp)         # reg,memOffsetBase :: 
     movl     %r11d,0x50(%rsp)        # reg,memOffsetBase :: 
     movb     %r10b,0x48(%rsp)        # reg,memOffsetBase :: 
     cmpl     $0x30,%r14d             # imm,reg ::  modifies flags!!
     je       Addr0x131b2             # value ::  target: 0x131b2 CodeAddr: 0x131b2
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x40(%rsp),%r12         # memOffsetBase,reg :: 
     movq     0x68(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x60(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x58(%rsp),%r8          # memOffsetBase,reg :: 
     movl     0x50(%rsp),%r11d        # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
Addr0x12e01:
     movzbl   0x30(%rsp),%eax         # memOffsetBase,reg :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     movb     %al,-0x1(%r12)          # reg,memOffsetBase :: 
Addr0x12e0f:
     movq     (%rsp),%rax             # memBase,reg :: 
     addq     %r8,%rbp                # reg,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     jmp      Addr0x12280             # value ::  target: 0x12280 CodeAddr: 0x12280
Addr0x12e21:
     movslq   %ecx,%rdx               # reg,reg :: 
     cmpq     %rax,%rdx               # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x12e69             # value ::  target: 0x12e69 CodeAddr: 0x12e69
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movl     %ecx,0x60(%rsp)         # reg,memOffsetBase :: 
     movl     %r11d,0x58(%rsp)        # reg,memOffsetBase :: 
     movb     %r10b,0x50(%rsp)        # reg,memOffsetBase :: 
     movq     %rdx,0x48(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x48(%rsp),%rdx         # memOffsetBase,reg :: 
     movl     0x60(%rsp),%ecx         # memOffsetBase,reg :: 
     movl     0x58(%rsp),%r11d        # memOffsetBase,reg :: 
     movzbl   0x50(%rsp),%r10d        # memOffsetBase,reg :: 
     addq     %rdx,%r12               # reg,reg ::  modifies flags!!
Addr0x12e69:
     addq     %rdx,%rbp               # reg,reg ::  modifies flags!!
     cmpl     %ecx,%r13d              # reg,reg ::  modifies flags!!
     jle      Addr0x12fdc             # value ::  target: 0x12fdc CodeAddr: 0x12fdc
     subl     %ecx,%r13d              # reg,reg ::  modifies flags!!
     movslq   %r13d,%rcx              # reg,reg :: 
Addr0x12e7b:
     movq     (%rsp),%rax             # memBase,reg :: 
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x30(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x12f44             # value ::  target: 0x12f44 CodeAddr: 0x12f44
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     %rbx,%r8                # reg,reg :: 
     subq     %r15,%r9                # reg,reg ::  modifies flags!!
     jmp      Addr0x12280             # value ::  target: 0x12280 CodeAddr: 0x12280
Addr0x12e9d:
     movslq   %ecx,%rcx               # reg,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x12266             # value ::  target: 0x12266 CodeAddr: 0x12266
     jmp      Addr0x12234             # value ::  target: 0x12234 CodeAddr: 0x12234
Addr0x12eae:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   0x30(%rsp),%r10d        # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x48(%rsp),%r9          # memOffsetBase,reg :: 
     jmp      Addr0x122e9             # value ::  target: 0x122e9 CodeAddr: 0x122e9
Addr0x12ed3:
     cmpq     $0x3,%r11               # imm,reg ::  modifies flags!!
     jne      Addr0x13181             # value ::  target: 0x13181 CodeAddr: 0x13181
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     jne      Addr0x13124             # value ::  target: 0x13124 CodeAddr: 0x13124
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     jne      Addr0x12ba2             # value ::  target: 0x12ba2 CodeAddr: 0x12ba2
     movl     %ebx,%edx               # reg,reg :: 
     movl     $0x3,%edi               # imm,reg :: 
     movq     %r8,%rbx                # reg,reg :: 
     movl     $0x1,%r8d               # imm,reg :: 
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
Addr0x12f08:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x12003             # value ::  target: 0x12003 CodeAddr: 0x12003
Addr0x12f0f:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %rbx,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   0x30(%rsp),%r10d        # memOffsetBase,reg :: 
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     0x48(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x50(%rsp),%rcx         # memOffsetBase,reg :: 
     jmp      Addr0x11c71             # value ::  target: 0x11c71 CodeAddr: 0x11c71
Addr0x12f39:
     movl     $0x2b,%r8d              # imm,reg :: 
     jmp      Addr0x12c45             # value ::  target: 0x12c45 CodeAddr: 0x12c45
Addr0x12f44:
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     movl     $0x1,%r8d               # imm,reg :: 
     cmovneq  %rcx,%r8                # reg,reg :: 
     cmpq     %rax,%r8                # reg,reg ::  modifies flags!!
     jae      Addr0x11ad0             # value ::  target: 0x11ad0 CodeAddr: 0x11ad0
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x12fc2             # value ::  target: 0x12fc2 CodeAddr: 0x12fc2
     testl    %r11d,%r11d             # reg,reg ::  modifies flags!!
     jne      Addr0x12fb4             # value ::  target: 0x12fb4 CodeAddr: 0x12fb4
     cmpq     $0x1,%rcx               # imm,reg ::  modifies flags!!
     jbe      Addr0x12fb4             # value ::  target: 0x12fb4 CodeAddr: 0x12fb4
     movslq   %r13d,%rdx              # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x20,%esi              # imm,reg :: 
     movq     %rcx,0x68(%rsp)         # reg,memOffsetBase :: 
     subq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     movq     %r8,0x60(%rsp)          # reg,memOffsetBase :: 
     movl     %r11d,0x58(%rsp)        # reg,memOffsetBase :: 
     movb     %r10b,0x50(%rsp)        # reg,memOffsetBase :: 
     movq     %rdx,0x48(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x48(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     0x68(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x60(%rsp),%r8          # memOffsetBase,reg :: 
     movl     0x58(%rsp),%r11d        # memOffsetBase,reg :: 
     movzbl   0x50(%rsp),%r10d        # memOffsetBase,reg :: 
     addq     %rdx,%r12               # reg,reg ::  modifies flags!!
Addr0x12fb4:
     movzbl   0x30(%rsp),%eax         # memOffsetBase,reg :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     movb     %al,-0x1(%r12)          # reg,memOffsetBase :: 
Addr0x12fc2:
     movq     0x40(%rsp),%r9          # memOffsetBase,reg :: 
     movq     (%rsp),%rax             # memBase,reg :: 
     addq     %r8,%rbp                # reg,reg ::  modifies flags!!
     movq     %rbx,%r8                # reg,reg :: 
     subq     %r15,%r9                # reg,reg ::  modifies flags!!
     subq     %rbp,%rax               # reg,reg ::  modifies flags!!
     jmp      Addr0x12280             # value ::  target: 0x12280 CodeAddr: 0x12280
Addr0x12fdc:
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     jmp      Addr0x12e7b             # value ::  target: 0x12e7b CodeAddr: 0x12e7b
Addr0x12fe6:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movl     0x40(%rsp),%r8d         # memOffsetBase,reg :: 
     movq     0x48(%rsp),%r11         # memOffsetBase,reg :: 
     movq     0x50(%rsp),%r10         # memOffsetBase,reg :: 
     jmp      Addr0x1287c             # value ::  target: 0x1287c CodeAddr: 0x1287c
Addr0x1300a:
     movl     0x30(%rsp),%eax         # memOffsetBase,reg :: 
     subl     $0x1,%eax               # imm,reg ::  modifies flags!!
     movl     %eax,%r11d              # reg,reg :: 
     movl     $0x16d,%eax             # imm,reg :: 
     testb    $0x3,%r11b              # imm,reg ::  modifies flags!!
     jne      Addr0x13053             # value ::  target: 0x13053 CodeAddr: 0x13053
     imull    $0xc28f5c29,%r11d,%edx  # imm,reg,reg ::  modifies flags!!
     movl     $0x16e,%eax             # imm,reg :: 
     addl     $0x51eb850,%edx         # imm,reg ::  modifies flags!!
     rorl     $0x2,%edx               # imm,reg ::  modifies flags!!
     cmpl     $0x28f5c28,%edx         # imm,reg ::  modifies flags!!
     ja       Addr0x13053             # value ::  target: 0x13053 CodeAddr: 0x13053
     movl     %r11d,%eax              # reg,reg :: 
     movl     $0x190,%esi             # imm,reg :: 
     cltd    
     idivl    %esi                    # reg :: 
     cmpl     $0x1,%edx               # imm,reg ::  modifies flags!!
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     notl     %eax                    # reg :: 
     addl     $0x16e,%eax             # imm,reg ::  modifies flags!!
Addr0x13053:
     addl     %eax,%edi               # reg,reg ::  modifies flags!!
     movl     %edi,%edx               # reg,reg :: 
     subl     %r15d,%edx              # reg,reg ::  modifies flags!!
     movl     $0xffffffff,%r15d       # imm,reg :: 
     addl     $0x17e,%edx             # imm,reg ::  modifies flags!!
     movslq   %edx,%rax               # reg,reg :: 
     movl     %edx,%esi               # reg,reg :: 
     subl     %edx,%edi               # reg,reg ::  modifies flags!!
     imulq    $0xffffffff92492493,%rax,%rax# imm,reg,reg ::  modifies flags!!
     sarl     $0x1f,%esi              # imm,reg ::  modifies flags!!
     shrq     $0x20,%rax              # imm,reg ::  modifies flags!!
     addl     %edx,%eax               # reg,reg ::  modifies flags!!
     sarl     $0x2,%eax               # imm,reg ::  modifies flags!!
     subl     %esi,%eax               # reg,reg ::  modifies flags!!
     leal     0x0(,%rax,8),%esi       # memOffsetIndexScale,reg :: 
     subl     %eax,%esi               # reg,reg ::  modifies flags!!
     leal     0x3(%rdi,%rsi,1),%r11d  # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x11f72             # value ::  target: 0x11f72 CodeAddr: 0x11f72
Addr0x13095:
     cmpl     $0x8,%r13d              # imm,reg ::  modifies flags!!
     jg       Addr0x1325b             # value ::  target: 0x1325b CodeAddr: 0x1325b
     movl     0x508(%rsp),%edx        # memOffsetBase,reg :: 
     movl     %r13d,%esi              # reg,reg :: 
Addr0x130b0:
     movslq   %edx,%rax               # reg,reg :: 
     sarl     $0x1f,%edx              # imm,reg ::  modifies flags!!
     addl     $0x1,%esi               # imm,reg ::  modifies flags!!
     imulq    $0x66666667,%rax,%rax   # imm,reg,reg ::  modifies flags!!
     sarq     $0x22,%rax              # imm,reg ::  modifies flags!!
     subl     %edx,%eax               # reg,reg ::  modifies flags!!
     movl     %eax,%edx               # reg,reg :: 
     cmpl     $0x9,%esi               # imm,reg ::  modifies flags!!
     jne      Addr0x130b0             # value ::  target: 0x130b0 CodeAddr: 0x130b0
Addr0x130cd:
     movl     %r13d,%edi              # reg,reg :: 
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
Addr0x130d5:
     movslq   %r11d,%rdx              # reg,reg :: 
     movl     $0x2,%edi               # imm,reg :: 
     imulq    $0xffffffff92492493,%rdx,%rdx# imm,reg,reg ::  modifies flags!!
     shrq     $0x20,%rdx              # imm,reg ::  modifies flags!!
     addl     %r11d,%edx              # reg,reg ::  modifies flags!!
     sarl     $0x1f,%r11d             # imm,reg ::  modifies flags!!
     sarl     $0x2,%edx               # imm,reg ::  modifies flags!!
     subl     %r11d,%edx              # reg,reg ::  modifies flags!!
     addl     $0x1,%edx               # imm,reg ::  modifies flags!!
     jmp      Addr0x11fe0             # value ::  target: 0x11fe0 CodeAddr: 0x11fe0
Addr0x130fd:
     movl     $0xfffff894,%eax        # imm,reg :: 
     leal     0x76c(%r8,%r15,1),%edx  # memOffsetBaseIndexScale,reg :: 
     movl     $0x4,%edi               # imm,reg :: 
     subl     %r15d,%eax              # reg,reg ::  modifies flags!!
     cmpl     %eax,%r8d               # reg,reg ::  modifies flags!!
     setl     0x30(%rsp)              # memOffsetBase :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
Addr0x13124:
     imull    $0x2710,%ebx,%edx       # imm,reg,reg ::  modifies flags!!
     movq     %r8,%rbx                # reg,reg :: 
     movl     $0x1,%r8d               # imm,reg :: 
     imull    $0x64,%esi,%esi         # imm,reg,reg ::  modifies flags!!
     addl     %esi,%edx               # reg,reg ::  modifies flags!!
     movl     $0x14,%esi              # imm,reg :: 
     addl     %edi,%edx               # reg,reg ::  modifies flags!!
     movl     $0x9,%edi               # imm,reg :: 
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
Addr0x13149:
     movb     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x12183             # value ::  target: 0x12183 CodeAddr: 0x12183
Addr0x13153:
     callq    Addr0x11950             # value ::  target: 0x11950 CodeAddr: 0x11950 CALLS 0x11950
     jmp      Addr0x126fc             # value ::  target: 0x126fc CodeAddr: 0x126fc
Addr0x1315d:
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     jmp      Addr0x126fc             # value ::  target: 0x126fc CodeAddr: 0x126fc
Addr0x13167:
     imull    $0x64,%ebx,%edx         # imm,reg,reg ::  modifies flags!!
     movl     $0x5,%edi               # imm,reg :: 
     movq     %r8,%rbx                # reg,reg :: 
     movl     $0x1,%r8d               # imm,reg :: 
     addl     %esi,%edx               # reg,reg ::  modifies flags!!
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     jmp      Addr0x11fee             # value ::  target: 0x11fee CodeAddr: 0x11fee
Addr0x13181:
     movzbl   (%r8),%ecx              # memBase,reg :: 
     movq     %r8,%r9                 # reg,reg :: 
     jmp      Addr0x128e0             # value ::  target: 0x128e0 CodeAddr: 0x128e0
Addr0x1318d:
     movq     %rbx,%r8                # reg,reg :: 
     movq     %rbx,%r9                # reg,reg :: 
     movl     $0x1,%ecx               # imm,reg :: 
     jmp      Addr0x11c0d             # value ::  target: 0x11c0d CodeAddr: 0x11c0d
Addr0x1319d:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     jmp      Addr0x12ada             # value ::  target: 0x12ada CodeAddr: 0x12ada
Addr0x131b2:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movq     0x40(%rsp),%r12         # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     movl     0x50(%rsp),%r11d        # memOffsetBase,reg :: 
     movq     0x58(%rsp),%r8          # memOffsetBase,reg :: 
     movq     0x60(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x68(%rsp),%r9          # memOffsetBase,reg :: 
     jmp      Addr0x12e01             # value ::  target: 0x12e01 CodeAddr: 0x12e01
Addr0x131e3:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     jmp      Addr0x123be             # value ::  target: 0x123be CodeAddr: 0x123be
Addr0x131f8:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   0x40(%rsp),%r10d        # memOffsetBase,reg :: 
     movzbl   0x48(%rsp),%r8d         # memOffsetBase,reg :: 
     jmp      Addr0x126da             # value ::  target: 0x126da CodeAddr: 0x126da
Addr0x13219:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     movl     0x50(%rsp),%r11d        # memOffsetBase,reg :: 
     movq     0x58(%rsp),%rcx         # memOffsetBase,reg :: 
     jmp      Addr0x12226             # value ::  target: 0x12226 CodeAddr: 0x12226
Addr0x1323e:
     movq     %r12,%rdi               # reg,reg :: 
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r13,%r12               # reg,reg :: 
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movzbl   (%rbx),%ecx             # memBase,reg :: 
     jmp      Addr0x12983             # value ::  target: 0x12983 CodeAddr: 0x12983
Addr0x13256:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x1325b:
     movl     0x508(%rsp),%edx        # memOffsetBase,reg :: 
     jmp      Addr0x130cd             # value ::  target: 0x130cd CodeAddr: 0x130cd
Addr0x13267:
     movq     %r9,%rbx                # reg,reg :: 
     jmp      Addr0x11bd0             # value ::  target: 0x11bd0 CodeAddr: 0x11bd0
Addr0x1326f:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x12013             # value ::  target: 0x12013 CodeAddr: 0x12013

# ----------- Function 296 ------------ 
#
# startAddr  = 0x13280
# startindex = 15279
# endAddr    = 0x132c9
# endindex   = 15297
# len        = 74 (0x4a)
# len1       = 80 (0x50) to (0x132ca)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x13280:
     endbr64 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movb     $0x0,0x7(%rsp)          # imm,memOffsetBase :: 
     pushq    %r9                     # reg :: 
     pushq    %r8                     # reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     leaq     0x17(%rsp),%r9          # memOffsetBase,reg :: 
     callq    Addr0x119f0             # value ::  target: 0x119f0 CodeAddr: 0x119f0 CALLS 0x119f0
     popq     %rdx                    # reg :: 
     popq     %rcx                    # reg :: 
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     xorq     0x28,%rdx               # value,reg ::  modifies flags!!
     jne      Addr0x132c5             # value ::  target: 0x132c5 CodeAddr: 0x132c5
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x132c5:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 297 ------------ 
#
# startAddr  = 0x132d0
# startindex = 15299
# endAddr    = 0x13384
# endindex   = 15344
# len        = 181 (0xb5)
# len1       = 191 (0xbf) to (0x13385)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x132d0:
     endbr64 
     pushq    %rbx                    # reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x13363             # value ::  target: 0x13363 CodeAddr: 0x13363
     movl     $0x2f,%esi              # imm,reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     callq    Addr0x4960              # value ::  target: 0x4960 CodeAddr: 0x4960 CALLS 0x4960
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1333b             # value ::  target: 0x1333b CodeAddr: 0x1333b
     leaq     0x1(%rax),%r8           # memOffsetBase,reg :: 
     movq     %r8,%rdx                # reg,reg :: 
     subq     %rbx,%rdx               # reg,reg ::  modifies flags!!
     cmpq     $0x6,%rdx               # imm,reg ::  modifies flags!!
     jle      Addr0x1333b             # value ::  target: 0x1333b CodeAddr: 0x1333b
     leaq     -0x6(%rax),%rsi         # memOffsetBase,reg :: 
     movl     $0x7,%ecx               # imm,reg :: 
     leaq     Var0x1c240(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1c240
     repz cmpsb %es:(%rdi),%ds:(%rsi)   # memBase,memBase :: "%es:(%rdi),%ds:(%rsi)" != "(%rdi),(%rsi)" modifies flags!!
#{'addr': 78608, 'op': 'cmpsb', 'prefix': 'repz', 'args': [Arg(argText='(%rdi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rdi', calcAddr=None, segReg='%es:', round=None), Arg(argText='(%rsi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rsi', calcAddr=None, segReg='%ds:', round=None)], 'idx': 15316, 'size': 2}
     seta     %dl                     # reg :: 
     sbbb     $0x0,%dl                # imm,reg ::  modifies flags!!
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x1333b             # value ::  target: 0x1333b CodeAddr: 0x1333b
     cmpb     $0x6c,0x1(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13350             # value ::  target: 0x13350 CodeAddr: 0x13350
     cmpb     $0x74,0x1(%r8)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13350             # value ::  target: 0x13350 CodeAddr: 0x13350
     cmpb     $0x2d,0x2(%r8)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13350             # value ::  target: 0x13350 CodeAddr: 0x13350
     leaq     0x4(%rax),%rbx          # memOffsetBase,reg :: 
     movq     %rbx,Var0x23280(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23280
Addr0x1333b:
     movq     %rbx,Var0x24400(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24400
     movq     %rbx,Var0x232a0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x232a0
     popq     %rbx                    # reg :: 
     retq    
Addr0x13350:
     movq     %r8,%rbx                # reg,reg :: 
     movq     %rbx,Var0x24400(%rip)   # reg,memOffsetBase ::  DataAddr: 0x24400
     movq     %rbx,Var0x232a0(%rip)   # reg,memOffsetBase ::  DataAddr: 0x232a0
     popq     %rbx                    # reg :: 
     retq    
Addr0x13363:
     movq     Var0x232c0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movl     $0x37,%edx              # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x1c208(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1c208
     callq    Addr0x4d10              # value ::  target: 0x4d10 CodeAddr: 0x4d10 CALLS 0x4d10
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 298 ------------ 
#
# startAddr  = 0x13390
# startindex = 15347
# endAddr    = 0x1346c
# endindex   = 15414
# len        = 221 (0xdd)
# len1       = 224 (0xe0) to (0x1346d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x13390:
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movl     %esi,%ebx               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x17340             # value ::  target: 0x17340 CodeAddr: 0x17340 CALLS 0x17340
     movzbl   (%rax),%edx             # memBase,reg :: 
     andl     $0xffffffdf,%edx        # imm,reg ::  modifies flags!!
     cmpb     $0x55,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0x133f8             # value ::  target: 0x133f8 CodeAddr: 0x133f8
     movzbl   0x1(%rax),%edx          # memOffsetBase,reg :: 
     andl     $0xffffffdf,%edx        # imm,reg ::  modifies flags!!
     cmpb     $0x54,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     movzbl   0x2(%rax),%edx          # memOffsetBase,reg :: 
     andl     $0xffffffdf,%edx        # imm,reg ::  modifies flags!!
     cmpb     $0x46,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x2d,0x3(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x38,0x4(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x0,0x5(%rax)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x60,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     leaq     Var0x1c255(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c255
     leaq     Var0x1c24a(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c24a
     cmovneq  %rdx,%rax               # reg,reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x133f8:
     cmpb     $0x47,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     movzbl   0x1(%rax),%edx          # memOffsetBase,reg :: 
     andl     $0xffffffdf,%edx        # imm,reg ::  modifies flags!!
     cmpb     $0x42,%dl               # imm,reg ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x31,0x2(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x38,0x3(%rax)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x13438             # value ::  target: 0x13438 CodeAddr: 0x13438
Addr0x13415:
     cmpl     $0x9,%ebx               # imm,reg ::  modifies flags!!
     leaq     Var0x1c248(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c248
     leaq     Var0x1cfdb(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1cfdb
     cmovneq  %rdx,%rax               # reg,reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    
Addr0x13438:
     cmpb     $0x30,0x4(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x33,0x5(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x30,0x6(%rax)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x0,0x7(%rax)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13415             # value ::  target: 0x13415 CodeAddr: 0x13415
     cmpb     $0x60,0x0(%rbp)         # imm,memOffsetBase ::  modifies flags!!
     leaq     Var0x1c24e(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c24e
     leaq     Var0x1c252(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c252
     cmovneq  %rdx,%rax               # reg,reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     retq    

# ----------- Function 299 ------------ 
#
# startAddr  = 0x13470
# startindex = 15416
# endAddr    = 0x146bd
# endindex   = 16481
# len        = 4686 (0x124e)
# len1       = 4688 (0x1250) to (0x146be)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#  has jump ptr!
#
# -------------------------------------------

Addr0x13470:
     pushq    %r15                    # reg :: 
     movq     %rdi,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     %rsi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movl     %r9d,%ebx               # reg,reg :: 
     subq     $0xb8,%rsp              # imm,reg ::  modifies flags!!
     movq     0xf0(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rdx,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %rcx,0x10(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     0xf8(%rsp),%rax         # memOffsetBase,reg :: 
     movl     %r8d,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     %rax,0x78(%rsp)         # reg,memOffsetBase :: 
     movq     0x100(%rsp),%rax        # memOffsetBase,reg :: 
     movl     %r9d,0x64(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,0x70(%rsp)         # reg,memOffsetBase :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0xa8(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x48b0              # value ::  target: 0x48b0 CodeAddr: 0x48b0 CALLS 0x48b0
     movl     0x8(%rsp),%r10d         # memOffsetBase,reg :: 
     andl     $0x2,%ebx               # imm,reg ::  modifies flags!!
     movq     %rax,0x68(%rsp)         # reg,memOffsetBase :: 
     setne    0x63(%rsp)              # memOffsetBase :: 
     cmpl     $0xa,%r10d              # imm,reg ::  modifies flags!!
     ja       Addr0x4dbe              # value ::  target: 0x4dbe CodeAddr: 0x4dbe
     leaq     Var0x1c2a0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1c2a0
     movl     %r10d,%edx              # reg,reg :: 
     movq     0x10(%rsp),%r11         # memOffsetBase,reg :: 
     movslq   (%rcx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 79119, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 15451, 'size': 3, 'jumpTable': 'unknown'}
     cmpl     $0xa,%r10d              # imm,reg ::  modifies flags!!
     je       Addr0x1359c             # value ::  target: 0x1359c CodeAddr: 0x1359c
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     movl     %r10d,0x10(%rsp)        # reg,memOffsetBase :: 
     leaq     Var0x1c259(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c259
     movq     %r11,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     0x8(%rsp),%r11          # memOffsetBase,reg :: 
     movl     0x10(%rsp),%r10d        # memOffsetBase,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,0x78(%rsp)         # reg,memOffsetBase :: 
     leaq     Var0x1c259(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c259
     cmpq     %rax,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x145cc             # value ::  target: 0x145cc CodeAddr: 0x145cc
Addr0x1355d:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     movl     %r10d,0x10(%rsp)        # reg,memOffsetBase :: 
     leaq     Var0x1cfdb(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cfdb
     movq     %r11,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     0x8(%rsp),%r11          # memOffsetBase,reg :: 
     movl     0x10(%rsp),%r10d        # memOffsetBase,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,0x70(%rsp)         # reg,memOffsetBase :: 
     leaq     Var0x1cfdb(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1cfdb
     cmpq     %rax,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x145a6             # value ::  target: 0x145a6 CodeAddr: 0x145a6
Addr0x1359c:
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     je       Addr0x143ca             # value ::  target: 0x143ca CodeAddr: 0x143ca
Addr0x135a7:
     movq     0x70(%rsp),%rbx         # memOffsetBase,reg :: 
     movl     %r10d,0x38(%rsp)        # reg,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movq     %r11,0x30(%rsp)         # reg,memOffsetBase :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rbx,0x50(%rsp)         # reg,memOffsetBase :: 
     movq     0x30(%rsp),%r11         # memOffsetBase,reg :: 
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
     movl     0x38(%rsp),%r10d        # memOffsetBase,reg :: 
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
Addr0x135f0:
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
     movl     %r13d,%r8d              # reg,reg :: 
Addr0x135f8:
     cmpq     %rbx,%r11               # reg,reg ::  modifies flags!!
     setne    %r13b                   # reg :: 
     cmpq     $0xffffffffffffffff,%r11# imm,reg ::  modifies flags!!
     jne      Addr0x13612             # value ::  target: 0x13612 CodeAddr: 0x13612
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     cmpb     $0x0,(%rax,%rbx,1)      # imm,memBaseIndexScale ::  modifies flags!!
     setne    %r13b                   # reg :: 
Addr0x13612:
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     je       Addr0x13e98             # value ::  target: 0x13e98 CodeAddr: 0x13e98
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     setne    %al                     # reg :: 
     andb     0x10(%rsp),%al          # memOffsetBase,reg ::  modifies flags!!
     leaq     (%rdi,%rbx,1),%rbp      # memBaseIndexScale,reg :: 
     movl     %eax,%r9d               # reg,reg :: 
     je       Addr0x13cf0             # value ::  target: 0x13cf0 CodeAddr: 0x13cf0
     movq     0x20(%rsp),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x13e40             # value ::  target: 0x13e40 CodeAddr: 0x13e40
     leaq     (%rbx,%rax,1),%rdx      # memBaseIndexScale,reg :: 
     cmpq     $0xffffffffffffffff,%r11# imm,reg ::  modifies flags!!
     jne      Addr0x13688             # value ::  target: 0x13688 CodeAddr: 0x13688
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     jbe      Addr0x13688             # value ::  target: 0x13688 CodeAddr: 0x13688
     movl     %r10d,0x48(%rsp)        # reg,memOffsetBase :: 
     movb     %r8b,0x40(%rsp)         # reg,memOffsetBase :: 
     movb     %r9b,0x38(%rsp)         # reg,memOffsetBase :: 
     movq     %rdx,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movl     0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     movzbl   0x40(%rsp),%r8d         # memOffsetBase,reg :: 
     movzbl   0x38(%rsp),%r9d         # memOffsetBase,reg :: 
     movq     0x30(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     %rax,%r11               # reg,reg :: 
Addr0x13688:
     cmpq     %r11,%rdx               # reg,reg ::  modifies flags!!
     ja       Addr0x13e40             # value ::  target: 0x13e40 CodeAddr: 0x13e40
     movq     0x20(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     0x50(%rsp),%rsi         # memOffsetBase,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     %r10d,0x48(%rsp)        # reg,memOffsetBase :: 
     movq     %r11,0x40(%rsp)         # reg,memOffsetBase :: 
     movb     %r8b,0x38(%rsp)         # reg,memOffsetBase :: 
     movb     %r9b,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x4a30              # value ::  target: 0x4a30 CodeAddr: 0x4a30 CALLS 0x4a30
     movzbl   0x30(%rsp),%r9d         # memOffsetBase,reg :: 
     movzbl   0x38(%rsp),%r8d         # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     movq     0x40(%rsp),%r11         # memOffsetBase,reg :: 
     movl     0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     jne      Addr0x13e40             # value ::  target: 0x13e40 CodeAddr: 0x13e40
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13ade             # value ::  target: 0x13ade CodeAddr: 0x13ade
     movzbl   0x0(%rbp),%ebp          # memOffsetBase,reg :: 
     cmpb     $0x7e,%bpl              # imm,reg ::  modifies flags!!
     ja       Addr0x13813             # value ::  target: 0x13813 CodeAddr: 0x13813
     leaq     Var0x1c2cc(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1c2cc
     movzbl   %bpl,%edx               # reg,reg :: 
     movslq   (%rcx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 79616, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 15560, 'size': 3, 'jumpTable': 'unknown'}
     movl     %r9d,%eax               # reg,reg :: 
Addr0x13710:
     movl     %r9d,%r13d              # reg,reg :: 
     movl     %eax,%r9d               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x13720:
     movq     0x28(%rsp),%rsi         # memOffsetBase,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x1373e             # value ::  target: 0x1373e CodeAddr: 0x1373e
     movl     %ebp,%edx               # reg,reg :: 
     movl     %ebp,%ecx               # reg,reg :: 
     shrb     $0x5,%dl                # imm,reg ::  modifies flags!!
     movzbl   %dl,%edx                # reg,reg :: 
     movl     (%rsi,%rdx,4),%edx      # memBaseIndexScale,reg :: 
     shrl     %cl,%edx                # reg,reg ::  modifies flags!!
     andl     $0x1,%edx               # imm,reg ::  modifies flags!!
     jne      Addr0x13747             # value ::  target: 0x13747 CodeAddr: 0x13747
Addr0x1373e:
     testb    %r9b,%r9b               # reg,reg ::  modifies flags!!
     je       Addr0x13801             # value ::  target: 0x13801 CodeAddr: 0x13801
Addr0x13747:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     %edx,%eax               # reg,reg :: 
     jne      Addr0x13c40             # value ::  target: 0x13c40 CodeAddr: 0x13c40
Addr0x1375b:
     movl     %r8d,%eax               # reg,reg :: 
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     andb     %dl,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x13796             # value ::  target: 0x13796 CodeAddr: 0x13796
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x1376f             # value ::  target: 0x1376f CodeAddr: 0x1376f
     movb     $0x27,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x1376f:
     leaq     0x1(%r12),%rdx          # memOffsetBase,reg :: 
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x1377f             # value ::  target: 0x1377f CodeAddr: 0x1377f
     movb     $0x24,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x1377f:
     leaq     0x2(%r12),%rdx          # memOffsetBase,reg :: 
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x1378f             # value ::  target: 0x1378f CodeAddr: 0x1378f
     movb     $0x27,0x2(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x1378f:
     addq     $0x3,%r12               # imm,reg ::  modifies flags!!
     movl     %eax,%r8d               # reg,reg :: 
Addr0x13796:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x137a0             # value ::  target: 0x137a0 CodeAddr: 0x137a0
     movb     $0x5c,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x137a0:
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
Addr0x137a8:
     cmpq     %r14,%r12               # reg,reg ::  modifies flags!!
     jae      Addr0x137b1             # value ::  target: 0x137b1 CodeAddr: 0x137b1
     movb     %bpl,(%r15,%r12,1)      # reg,memBaseIndexScale :: 
Addr0x137b1:
     movzbl   0x8(%rsp),%edi          # memOffsetBase,reg :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     movl     $0x0,%eax               # imm,reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     cmovel   %eax,%edi               # reg,reg :: 
     movb     %dil,0x8(%rsp)          # reg,memOffsetBase :: 
     jmp      Addr0x135f8             # value ::  target: 0x135f8 CodeAddr: 0x135f8
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x137d5:
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
Addr0x137d8:
     movzbl   0x10(%rsp),%edx         # memOffsetBase,reg :: 
     xorl     $0x1,%edx               # imm,reg ::  modifies flags!!
     orb      %dl,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x13720             # value ::  target: 0x13720 CodeAddr: 0x13720
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13720             # value ::  target: 0x13720 CodeAddr: 0x13720
Addr0x137f8:
     testb    %r9b,%r9b               # reg,reg ::  modifies flags!!
     jne      Addr0x13747             # value ::  target: 0x13747 CodeAddr: 0x13747
Addr0x13801:
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     andl     %r8d,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x13d60             # value ::  target: 0x13d60 CodeAddr: 0x13d60
Addr0x13810:
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
Addr0x13813:
     cmpq     $0x1,0x68(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13f78             # value ::  target: 0x13f78 CodeAddr: 0x13f78
     movl     %r10d,0x48(%rsp)        # reg,memOffsetBase :: 
     movq     %r11,0x40(%rsp)         # reg,memOffsetBase :: 
     movb     %r8b,0x38(%rsp)         # reg,memOffsetBase :: 
     movb     %r9b,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x4d80              # value ::  target: 0x4d80 CodeAddr: 0x4d80 CALLS 0x4d80
     movzbl   0x30(%rsp),%r9d         # memOffsetBase,reg :: 
     movzbl   0x38(%rsp),%r8d         # memOffsetBase,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %rax,%r13               # reg,reg :: 
     movzbl   %bpl,%eax               # reg,reg :: 
     movq     0x40(%rsp),%r11         # memOffsetBase,reg :: 
     movl     0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     movq     0x0(%r13),%rdx          # memOffsetBase,reg :: 
     movzwl   (%rdx,%rax,2),%eax      # memBaseIndexScale,reg :: 
     andw     $0x4000,%ax             # imm,reg ::  modifies flags!!
     setne    %r13b                   # reg :: 
     sete     %dl                     # reg :: 
     andb     0x10(%rsp),%dl          # memOffsetBase,reg ::  modifies flags!!
Addr0x13871:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x14331             # value ::  target: 0x14331 CodeAddr: 0x14331
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     jmp      Addr0x137d8             # value ::  target: 0x137d8 CodeAddr: 0x137d8
Addr0x1388c:
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
Addr0x138af:
     leaq     Var0x1cfdb(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1cfdb
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movl     $0x2,%r10d              # imm,reg :: 
     movq     $0x1,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x50(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     jne      Addr0x14523             # value ::  target: 0x14523 CodeAddr: 0x14523
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0x14365             # value ::  target: 0x14365 CodeAddr: 0x14365
     movb     $0x22,(%r15)            # imm,memBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
Addr0x13900:
     leaq     Var0x1c248(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c248
     movb     $0x0,0x63(%rsp)         # imm,memOffsetBase :: 
     movl     $0x1,%r12d              # imm,reg :: 
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x1,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x50(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     jne      Addr0x1388c             # value ::  target: 0x1388c CodeAddr: 0x1388c
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
Addr0x13937:
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     jne      Addr0x14661             # value ::  target: 0x14661 CodeAddr: 0x14661
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
Addr0x13959:
     leaq     Var0x1cfdb(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1cfdb
     movb     $0x0,0x63(%rsp)         # imm,memOffsetBase :: 
     movl     $0x1,%r12d              # imm,reg :: 
     movl     $0x2,%r10d              # imm,reg :: 
     movq     $0x1,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x50(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
     leaq     Var0x1c248(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c248
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movl     $0x5,%r10d              # imm,reg :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x1,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x50(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x0,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x50(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x0,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x50(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x138af             # value ::  target: 0x138af CodeAddr: 0x138af
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     jne      Addr0x1467e             # value ::  target: 0x1467e CodeAddr: 0x1467e
     movb     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x13937             # value ::  target: 0x13937 CodeAddr: 0x13937
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmpq     $0x1,%r11               # imm,reg ::  modifies flags!!
     setne    %dl                     # reg :: 
     cmpq     $0xffffffffffffffff,%r11# imm,reg ::  modifies flags!!
     jne      Addr0x13a9c             # value ::  target: 0x13a9c CodeAddr: 0x13a9c
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     cmpb     $0x0,0x1(%rax)          # imm,memOffsetBase ::  modifies flags!!
     setne    %dl                     # reg :: 
Addr0x13a9c:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x137d5             # value ::  target: 0x137d5 CodeAddr: 0x137d5
Addr0x13aab:
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x137d5             # value ::  target: 0x137d5 CodeAddr: 0x137d5
Addr0x13ab4:
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x137d8             # value ::  target: 0x137d8 CodeAddr: 0x137d8
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x137d8             # value ::  target: 0x137d8 CodeAddr: 0x137d8
Addr0x13ac7:
     movl     $0x2,%r10d              # imm,reg :: 
Addr0x13ad0:
     cmpb     $0x0,0x10(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0x4,%eax               # imm,reg :: 
     cmovnel  %eax,%r10d              # reg,reg :: 
Addr0x13ade:
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     %r10d,%r8d              # reg,reg :: 
     movq     %r11,%rcx               # reg,reg :: 
     pushq    0x78(%rsp)              # memOffsetBase :: 
     movq     %r14,%rsi               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     pushq    0x88(%rsp)              # memOffsetBase :: 
     pushq    $0x0                    # imm :: 
     movl     0x84(%rsp),%r9d         # memOffsetBase,reg :: 
     movq     0x38(%rsp),%rdx         # memOffsetBase,reg :: 
     andl     $0xfffffffd,%r9d        # imm,reg ::  modifies flags!!
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     movq     %rax,%r12               # reg,reg :: 
Addr0x13b18:
     movq     0xa8(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x1465c             # value ::  target: 0x1465c CodeAddr: 0x1465c
     addq     $0xb8,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     je       Addr0x13f58             # value ::  target: 0x13f58 CodeAddr: 0x13f58
     cmpl     $0x5,%r10d              # imm,reg ::  modifies flags!!
     jne      Addr0x13b80             # value ::  target: 0x13b80 CodeAddr: 0x13b80
     testb    $0x4,0x64(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x13b80             # value ::  target: 0x13b80 CodeAddr: 0x13b80
     leaq     0x2(%rbx),%rax          # memOffsetBase,reg :: 
     cmpq     %r11,%rax               # reg,reg ::  modifies flags!!
     jae      Addr0x13b80             # value ::  target: 0x13b80 CodeAddr: 0x13b80
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     cmpb     $0x3f,0x1(%rdi,%rbx,1)  # imm,memOffsetBaseIndexScale ::  modifies flags!!
     je       Addr0x1443d             # value ::  target: 0x1443d CodeAddr: 0x1443d
Addr0x13b80:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x3f,%ebp              # imm,reg :: 
     jmp      Addr0x137d8             # value ::  target: 0x137d8 CodeAddr: 0x137d8
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     je       Addr0x13f10             # value ::  target: 0x13f10 CodeAddr: 0x13f10
     movb     %r13b,0x84(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x27,%ebp              # imm,reg :: 
     jmp      Addr0x137d8             # value ::  target: 0x137d8 CodeAddr: 0x137d8
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
Addr0x13bb8:
     movzbl   0x63(%rsp),%ecx         # memOffsetBase,reg :: 
     testb    %cl,0x10(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x13bcf             # value ::  target: 0x13bcf CodeAddr: 0x13bcf
     cmpq     $0x0,0x20(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13d48             # value ::  target: 0x13d48 CodeAddr: 0x13d48
Addr0x13bcf:
     movl     $0x5c,%ebp              # imm,reg :: 
     movl     $0x5c,%edx              # imm,reg :: 
Addr0x13be0:
     cmpb     $0x0,0x10(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x14677             # value ::  target: 0x14677 CodeAddr: 0x14677
Addr0x13beb:
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13720             # value ::  target: 0x13720 CodeAddr: 0x13720
     jmp      Addr0x137f8             # value ::  target: 0x137f8 CodeAddr: 0x137f8
     movl     $0x61,%ebp              # imm,reg :: 
Addr0x13c05:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13c40             # value ::  target: 0x13c40 CodeAddr: 0x13c40
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     jmp      Addr0x13796             # value ::  target: 0x13796 CodeAddr: 0x13796
     movl     $0x72,%ebp              # imm,reg :: 
Addr0x13c20:
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %dl                     # reg :: 
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     movl     %edx,%eax               # reg,reg :: 
     je       Addr0x1375b             # value ::  target: 0x1375b CodeAddr: 0x1375b
Addr0x13c40:
     andb     %al,0x10(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     jmp      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
     movl     $0x66,%ebp              # imm,reg :: 
     jmp      Addr0x13c05             # value ::  target: 0x13c05 CodeAddr: 0x13c05
     movl     $0x6e,%ebp              # imm,reg :: 
     jmp      Addr0x13c20             # value ::  target: 0x13c20 CodeAddr: 0x13c20
     movl     $0x62,%ebp              # imm,reg :: 
     jmp      Addr0x13c05             # value ::  target: 0x13c05 CodeAddr: 0x13c05
Addr0x13c5e:
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x145f2             # value ::  target: 0x145f2 CodeAddr: 0x145f2
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     movl     %r8d,%eax               # reg,reg :: 
     sete     %dl                     # reg :: 
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     andb     %dl,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x14290             # value ::  target: 0x14290 CodeAddr: 0x14290
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x13c8b             # value ::  target: 0x13c8b CodeAddr: 0x13c8b
     movb     $0x27,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x13c8b:
     leaq     0x1(%r12),%rcx          # memOffsetBase,reg :: 
     cmpq     %rcx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x13c9b             # value ::  target: 0x13c9b CodeAddr: 0x13c9b
     movb     $0x24,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x13c9b:
     leaq     0x2(%r12),%rcx          # memOffsetBase,reg :: 
     cmpq     %rcx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x13cab             # value ::  target: 0x13cab CodeAddr: 0x13cab
     movb     $0x27,0x2(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x13cab:
     leaq     0x3(%r12),%rcx          # memOffsetBase,reg :: 
     cmpq     %rcx,%r14               # reg,reg ::  modifies flags!!
     ja       Addr0x1429b             # value ::  target: 0x1429b CodeAddr: 0x1429b
     addq     $0x4,%r12               # imm,reg ::  modifies flags!!
     movl     %eax,%r8d               # reg,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x30,%ebp              # imm,reg :: 
     jmp      Addr0x1373e             # value ::  target: 0x1373e CodeAddr: 0x1373e
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     movl     $0x9,%ebp               # imm,reg :: 
     movl     $0x74,%edx              # imm,reg :: 
     jmp      Addr0x13be0             # value ::  target: 0x13be0 CodeAddr: 0x13be0
     movl     $0x76,%ebp              # imm,reg :: 
     jmp      Addr0x13c20             # value ::  target: 0x13c20 CodeAddr: 0x13c20
Addr0x13cf0:
     movzbl   0x0(%rbp),%ebp          # memOffsetBase,reg :: 
     cmpb     $0x7e,%bpl              # imm,reg ::  modifies flags!!
     ja       Addr0x13813             # value ::  target: 0x13813 CodeAddr: 0x13813
     leaq     Var0x1c4c8(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1c4c8
     movzbl   %bpl,%edx               # reg,reg :: 
     movslq   (%rcx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 81168, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 15907, 'size': 3, 'jumpTable': 'unknown'}
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     jmp      Addr0x13ab4             # value ::  target: 0x13ab4 CodeAddr: 0x13ab4
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     jmp      Addr0x13aab             # value ::  target: 0x13aab CodeAddr: 0x13aab
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     jne      Addr0x13bb8             # value ::  target: 0x13bb8 CodeAddr: 0x13bb8
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
Addr0x13d48:
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     movl     %r8d,%eax               # reg,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movl     $0x5c,%ebp              # imm,reg :: 
Addr0x13d60:
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x137a8             # value ::  target: 0x137a8 CodeAddr: 0x137a8
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x13d72             # value ::  target: 0x13d72 CodeAddr: 0x13d72
     movb     $0x27,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x13d72:
     leaq     0x1(%r12),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x13d82             # value ::  target: 0x13d82 CodeAddr: 0x13d82
     movb     $0x27,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x13d82:
     addq     $0x2,%r12               # imm,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x137a8             # value ::  target: 0x137a8 CodeAddr: 0x137a8
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     movl     $0x20,%ebp              # imm,reg :: 
     sete     %al                     # reg :: 
     jmp      Addr0x13ab4             # value ::  target: 0x13ab4 CodeAddr: 0x13ab4
     movl     $0xc,%ebp               # imm,reg :: 
     movl     $0x66,%edx              # imm,reg :: 
     jmp      Addr0x13be0             # value ::  target: 0x13be0 CodeAddr: 0x13be0
     movl     $0x9,%ebp               # imm,reg :: 
     movl     $0x74,%edx              # imm,reg :: 
Addr0x13db8:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     andb     0x63(%rsp),%al          # memOffsetBase,reg ::  modifies flags!!
     movl     %eax,%r9d               # reg,reg :: 
     je       Addr0x13be0             # value ::  target: 0x13be0 CodeAddr: 0x13be0
     jmp      Addr0x13ac7             # value ::  target: 0x13ac7 CodeAddr: 0x13ac7
     movl     $0x8,%ebp               # imm,reg :: 
     movl     $0x62,%edx              # imm,reg :: 
     jmp      Addr0x13be0             # value ::  target: 0x13be0 CodeAddr: 0x13be0
     cmpb     $0x0,0x10(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13c5e             # value ::  target: 0x13c5e CodeAddr: 0x13c5e
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     testb    $0x1,0x64(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x13beb             # value ::  target: 0x13beb CodeAddr: 0x13beb
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     jmp      Addr0x135f8             # value ::  target: 0x135f8 CodeAddr: 0x135f8
     movl     $0xd,%ebp               # imm,reg :: 
     movl     $0x72,%edx              # imm,reg :: 
     jmp      Addr0x13db8             # value ::  target: 0x13db8 CodeAddr: 0x13db8
     movl     $0xb,%ebp               # imm,reg :: 
     movl     $0x76,%edx              # imm,reg :: 
     jmp      Addr0x13be0             # value ::  target: 0x13be0 CodeAddr: 0x13be0
     movl     $0xa,%ebp               # imm,reg :: 
     movl     $0x6e,%edx              # imm,reg :: 
     jmp      Addr0x13db8             # value ::  target: 0x13db8 CodeAddr: 0x13db8
     movl     $0x7,%ebp               # imm,reg :: 
     movl     $0x61,%edx              # imm,reg :: 
     jmp      Addr0x13be0             # value ::  target: 0x13be0 CodeAddr: 0x13be0
Addr0x13e40:
     movzbl   0x0(%rbp),%ebp          # memOffsetBase,reg :: 
     cmpb     $0x7e,%bpl              # imm,reg ::  modifies flags!!
     ja       Addr0x13810             # value ::  target: 0x13810 CodeAddr: 0x13810
     leaq     Var0x1c6c4(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1c6c4
     movzbl   %bpl,%edx               # reg,reg :: 
     movslq   (%rcx,%rdx,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 81504, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 15983, 'size': 3, 'jumpTable': 'unknown'}
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x13710             # value ::  target: 0x13710 CodeAddr: 0x13710
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x13e71:
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x14280             # value ::  target: 0x14280 CodeAddr: 0x14280
     movl     %r9d,%r13d              # reg,reg :: 
     movl     %eax,%r9d               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x137d8             # value ::  target: 0x137d8 CodeAddr: 0x137d8
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x13e89:
     movl     $0x20,%ebp              # imm,reg :: 
     jmp      Addr0x13710             # value ::  target: 0x13710 CodeAddr: 0x13710
Addr0x13e98:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     movl     %r8d,%r13d              # reg,reg :: 
     sete     %dl                     # reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     jne      Addr0x13eb1             # value ::  target: 0x13eb1 CodeAddr: 0x13eb1
     testb    %dl,0x63(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x13ac7             # value ::  target: 0x13ac7 CodeAddr: 0x13ac7
Addr0x13eb1:
     movzbl   0x63(%rsp),%eax         # memOffsetBase,reg :: 
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     andb     %al,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x14563             # value ::  target: 0x14563 CodeAddr: 0x14563
     cmpb     $0x0,0x84(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x14565             # value ::  target: 0x14565 CodeAddr: 0x14565
     cmpb     $0x0,0x8(%rsp)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x1460d             # value ::  target: 0x1460d CodeAddr: 0x1460d
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     cmpq     $0x0,0x58(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     setne    %dl                     # reg :: 
     andb     %dl,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x14600             # value ::  target: 0x14600 CodeAddr: 0x14600
     movq     0x58(%rsp),%rdx         # memOffsetBase,reg :: 
Addr0x13ef6:
     movq     0x58(%rsp),%r14         # memOffsetBase,reg :: 
     movb     $0x27,(%r15)            # imm,memBase :: 
     movb     %al,0x84(%rsp)          # reg,memOffsetBase :: 
     movq     %rdx,0x58(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x13959             # value ::  target: 0x13959 CodeAddr: 0x13959
Addr0x13f10:
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
     testq    %r14,%r14               # reg,reg ::  modifies flags!!
     je       Addr0x142f6             # value ::  target: 0x142f6 CodeAddr: 0x142f6
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     cmpq     $0x0,0x58(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x142f6             # value ::  target: 0x142f6 CodeAddr: 0x142f6
Addr0x13f32:
     movq     %r14,0x58(%rsp)         # reg,memOffsetBase :: 
     addq     $0x3,%r12               # imm,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     movb     %r13b,0x84(%rsp)        # reg,memOffsetBase :: 
     movq     %rdx,%r14               # reg,reg :: 
     movl     $0x27,%ebp              # imm,reg :: 
     jmp      Addr0x1373e             # value ::  target: 0x1373e CodeAddr: 0x1373e
Addr0x13f58:
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x3f,%ebp              # imm,reg :: 
     jmp      Addr0x1373e             # value ::  target: 0x1373e CodeAddr: 0x1373e
Addr0x13f78:
     leaq     0xa0(%rsp),%rax         # memOffsetBase,reg :: 
     movq     $0x0,0xa0(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     cmpq     $0xffffffffffffffff,%r11# imm,reg ::  modifies flags!!
     jne      Addr0x13fc4             # value ::  target: 0x13fc4 CodeAddr: 0x13fc4
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     movl     %r10d,0x48(%rsp)        # reg,memOffsetBase :: 
     movb     %r8b,0x40(%rsp)         # reg,memOffsetBase :: 
     movb     %r9b,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movl     0x48(%rsp),%r10d        # memOffsetBase,reg :: 
     movzbl   0x40(%rsp),%r8d         # memOffsetBase,reg :: 
     movzbl   0x30(%rsp),%r9d         # memOffsetBase,reg :: 
     movq     %rax,%r11               # reg,reg :: 
Addr0x13fc4:
     leaq     0x9c(%rsp),%rax         # memOffsetBase,reg :: 
     movb     %r13b,0x30(%rsp)        # reg,memOffsetBase :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     %rax,0x48(%rsp)         # reg,memOffsetBase :: 
     movb     %r8b,0x85(%rsp)         # reg,memOffsetBase :: 
     movb     %r9b,0x87(%rsp)         # reg,memOffsetBase :: 
     movl     %r10d,0x80(%rsp)        # reg,memOffsetBase :: 
     movq     %r12,0x88(%rsp)         # reg,memOffsetBase :: 
     movq     0x38(%rsp),%r12         # memOffsetBase,reg :: 
     movq     %rbx,0x40(%rsp)         # reg,memOffsetBase :: 
     movq     %r11,%rbx               # reg,reg :: 
     movb     %bpl,0x86(%rsp)         # reg,memOffsetBase :: 
     movq     %rdi,%rbp               # reg,reg :: 
Addr0x14010:
     movq     0x40(%rsp),%rax         # memOffsetBase,reg :: 
     movq     0x48(%rsp),%rdi         # memOffsetBase,reg :: 
     movq     %rbx,%rdx               # reg,reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     leaq     (%rax,%rbp,1),%r13      # memBaseIndexScale,reg :: 
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     subq     %r13,%rdx               # reg,reg ::  modifies flags!!
     leaq     (%rax,%r13,1),%rsi      # memBaseIndexScale,reg :: 
     callq    Addr0x168d0             # value ::  target: 0x168d0 CodeAddr: 0x168d0 CALLS 0x168d0
     movq     %rax,%rdx               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x140a3             # value ::  target: 0x140a3 CodeAddr: 0x140a3
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     je       Addr0x143fb             # value ::  target: 0x143fb CodeAddr: 0x143fb
     cmpq     $0xfffffffffffffffe,%rax# imm,reg ::  modifies flags!!
     je       Addr0x144b7             # value ::  target: 0x144b7 CodeAddr: 0x144b7
     cmpl     $0x2,0x80(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x14066             # value ::  target: 0x14066 CodeAddr: 0x14066
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x14220             # value ::  target: 0x14220 CodeAddr: 0x14220
Addr0x14066:
     movl     0x9c(%rsp),%edi         # memOffsetBase,reg :: 
     movq     %rdx,0x38(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x4d50              # value ::  target: 0x4d50 CodeAddr: 0x4d50 CALLS 0x4d50
     movzbl   0x30(%rsp),%edi         # memOffsetBase,reg :: 
     movq     0x38(%rsp),%rdx         # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     movl     $0x0,%eax               # imm,reg :: 
     cmovel   %eax,%edi               # reg,reg :: 
     addq     %rdx,%rbp               # reg,reg ::  modifies flags!!
     movb     %dil,0x30(%rsp)         # reg,memOffsetBase :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4d40              # value ::  target: 0x4d40 CodeAddr: 0x4d40 CALLS 0x4d40
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x14010             # value ::  target: 0x14010 CodeAddr: 0x14010
Addr0x140a3:
     movzbl   0x30(%rsp),%r13d        # memOffsetBase,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rbx,%r11               # reg,reg :: 
     movzbl   0x85(%rsp),%r8d         # memOffsetBase,reg :: 
     movzbl   0x86(%rsp),%ebp         # memOffsetBase,reg :: 
     movq     0x88(%rsp),%r12         # memOffsetBase,reg :: 
     movl     %r13d,%edx              # reg,reg :: 
     movq     0x40(%rsp),%rbx         # memOffsetBase,reg :: 
     movzbl   0x87(%rsp),%r9d         # memOffsetBase,reg :: 
     movl     0x80(%rsp),%r10d        # memOffsetBase,reg :: 
     xorl     $0x1,%edx               # imm,reg ::  modifies flags!!
     andb     0x10(%rsp),%dl          # memOffsetBase,reg ::  modifies flags!!
Addr0x140e8:
     cmpq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     jbe      Addr0x13871             # value ::  target: 0x13871 CodeAddr: 0x13871
Addr0x140f2:
     movq     %rdi,%rcx               # reg,reg :: 
     movb     %r13b,0x30(%rsp)        # reg,memOffsetBase :: 
     movq     0x18(%rsp),%rdi         # memOffsetBase,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movzbl   0x63(%rsp),%r13d        # memOffsetBase,reg :: 
     addq     %rbx,%rcx               # reg,reg ::  modifies flags!!
     jmp      Addr0x141c1             # value ::  target: 0x141c1 CodeAddr: 0x141c1
Addr0x14110:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     %al                     # reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     jne      Addr0x14349             # value ::  target: 0x14349 CodeAddr: 0x14349
     movl     %r8d,%esi               # reg,reg :: 
     xorl     $0x1,%esi               # imm,reg ::  modifies flags!!
     andb     %sil,%al                # reg,reg ::  modifies flags!!
     je       Addr0x1415c             # value ::  target: 0x1415c CodeAddr: 0x1415c
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14135             # value ::  target: 0x14135 CodeAddr: 0x14135
     movb     $0x27,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x14135:
     leaq     0x1(%r12),%rsi          # memOffsetBase,reg :: 
     cmpq     %rsi,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14145             # value ::  target: 0x14145 CodeAddr: 0x14145
     movb     $0x24,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x14145:
     leaq     0x2(%r12),%rsi          # memOffsetBase,reg :: 
     cmpq     %rsi,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14155             # value ::  target: 0x14155 CodeAddr: 0x14155
     movb     $0x27,0x2(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x14155:
     addq     $0x3,%r12               # imm,reg ::  modifies flags!!
     movl     %eax,%r8d               # reg,reg :: 
Addr0x1415c:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14166             # value ::  target: 0x14166 CodeAddr: 0x14166
     movb     $0x5c,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x14166:
     leaq     0x1(%r12),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x1417d             # value ::  target: 0x1417d CodeAddr: 0x1417d
     movl     %ebp,%eax               # reg,reg :: 
     shrb     $0x6,%al                # imm,reg ::  modifies flags!!
     addl     $0x30,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x1(%r15,%r12,1)    # reg,memOffsetBaseIndexScale :: 
Addr0x1417d:
     leaq     0x2(%r12),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14197             # value ::  target: 0x14197 CodeAddr: 0x14197
     movl     %ebp,%eax               # reg,reg :: 
     shrb     $0x3,%al                # imm,reg ::  modifies flags!!
     andl     $0x7,%eax               # imm,reg ::  modifies flags!!
     addl     $0x30,%eax              # imm,reg ::  modifies flags!!
     movb     %al,0x2(%r15,%r12,1)    # reg,memOffsetBaseIndexScale :: 
Addr0x14197:
     andl     $0x7,%ebp               # imm,reg ::  modifies flags!!
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     addq     $0x3,%r12               # imm,reg ::  modifies flags!!
     addl     $0x30,%ebp              # imm,reg ::  modifies flags!!
     cmpq     %rcx,%rbx               # reg,reg ::  modifies flags!!
     jae      Addr0x14352             # value ::  target: 0x14352 CodeAddr: 0x14352
     movl     %edx,%esi               # reg,reg :: 
Addr0x141b0:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x141b9             # value ::  target: 0x141b9 CodeAddr: 0x141b9
     movb     %bpl,(%r15,%r12,1)      # reg,memBaseIndexScale :: 
Addr0x141b9:
     movzbl   (%rdi,%rbx,1),%ebp      # memBaseIndexScale,reg :: 
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
Addr0x141c1:
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x14110             # value ::  target: 0x14110 CodeAddr: 0x14110
     movl     %esi,%eax               # reg,reg :: 
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     andl     %r8d,%eax               # reg,reg ::  modifies flags!!
     testb    %r9b,%r9b               # reg,reg ::  modifies flags!!
     je       Addr0x141e4             # value ::  target: 0x141e4 CodeAddr: 0x141e4
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x141e0             # value ::  target: 0x141e0 CodeAddr: 0x141e0
     movb     $0x5c,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x141e0:
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
Addr0x141e4:
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     %rcx,%rbx               # reg,reg ::  modifies flags!!
     jae      Addr0x1433e             # value ::  target: 0x1433e CodeAddr: 0x1433e
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x1435d             # value ::  target: 0x1435d CodeAddr: 0x1435d
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14203             # value ::  target: 0x14203 CodeAddr: 0x14203
     movb     $0x27,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x14203:
     leaq     0x1(%r12),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14213             # value ::  target: 0x14213 CodeAddr: 0x14213
     movb     $0x27,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x14213:
     addq     $0x2,%r12               # imm,reg ::  modifies flags!!
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     jmp      Addr0x141b0             # value ::  target: 0x141b0 CodeAddr: 0x141b0
Addr0x14220:
     cmpq     $0x1,%rax               # imm,reg ::  modifies flags!!
     je       Addr0x14066             # value ::  target: 0x14066 CodeAddr: 0x14066
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     leaq     0x1(%rax,%r13,1),%rsi   # memOffsetBaseIndexScale,reg :: 
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     leaq     (%rax,%r13,1),%r8       # memBaseIndexScale,reg :: 
     jmp      Addr0x1424a             # value ::  target: 0x1424a CodeAddr: 0x1424a
Addr0x1423d:
     addq     $0x1,%rsi               # imm,reg ::  modifies flags!!
     cmpq     %rsi,%r8                # reg,reg ::  modifies flags!!
     je       Addr0x14066             # value ::  target: 0x14066 CodeAddr: 0x14066
Addr0x1424a:
     movzbl   (%rsi),%eax             # memBase,reg :: 
     leal     -0x5b(%rax),%ecx        # memOffsetBase,reg :: 
     cmpb     $0x21,%cl               # imm,reg ::  modifies flags!!
     ja       Addr0x1423d             # value ::  target: 0x1423d CodeAddr: 0x1423d
     movl     $0x1,%eax               # imm,reg :: 
     shlq     %cl,%rax                # reg,reg ::  modifies flags!!
     movabsq  $0x20000002b,%rcx       # imm,reg :: 
     testq    %rcx,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1423d             # value ::  target: 0x1423d CodeAddr: 0x1423d
     movq     %rbx,%r11               # reg,reg :: 
     movl     $0x2,%r10d              # imm,reg :: 
     jmp      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
Addr0x14280:
     movl     %eax,%r9d               # reg,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x13720             # value ::  target: 0x13720 CodeAddr: 0x13720
Addr0x14290:
     movq     %r12,%rcx               # reg,reg :: 
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x142a3             # value ::  target: 0x142a3 CodeAddr: 0x142a3
     movl     %r8d,%eax               # reg,reg :: 
Addr0x1429b:
     movb     $0x5c,(%r15,%rcx,1)     # imm,memBaseIndexScale :: 
     movl     %eax,%r8d               # reg,reg :: 
Addr0x142a3:
     leaq     0x1(%rcx),%r12          # memOffsetBase,reg :: 
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     je       Addr0x14383             # value ::  target: 0x14383 CodeAddr: 0x14383
     leaq     0x1(%rbx),%rax          # memOffsetBase,reg :: 
     movl     $0x30,%ebp              # imm,reg :: 
     cmpq     %r11,%rax               # reg,reg ::  modifies flags!!
     jae      Addr0x142d8             # value ::  target: 0x142d8 CodeAddr: 0x142d8
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     movzbl   0x1(%rax,%rbx,1),%eax   # memOffsetBaseIndexScale,reg :: 
     movb     %al,0x30(%rsp)          # reg,memOffsetBase :: 
     subl     $0x30,%eax              # imm,reg ::  modifies flags!!
     cmpb     $0x9,%al                # imm,reg ::  modifies flags!!
     jbe      Addr0x14393             # value ::  target: 0x14393 CodeAddr: 0x14393
Addr0x142d8:
     movzbl   0x10(%rsp),%eax         # memOffsetBase,reg :: 
     xorl     $0x1,%eax               # imm,reg ::  modifies flags!!
     orb      %dl,%al                 # reg,reg ::  modifies flags!!
     movl     %r13d,%eax              # reg,reg :: 
     movl     $0x0,%r13d              # imm,reg :: 
     je       Addr0x13720             # value ::  target: 0x13720 CodeAddr: 0x13720
     jmp      Addr0x1373e             # value ::  target: 0x1373e CodeAddr: 0x1373e
Addr0x142f6:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14300             # value ::  target: 0x14300 CodeAddr: 0x14300
     movb     $0x27,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x14300:
     leaq     0x1(%r12),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14310             # value ::  target: 0x14310 CodeAddr: 0x14310
     movb     $0x5c,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x14310:
     leaq     0x2(%r12),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x1464f             # value ::  target: 0x1464f CodeAddr: 0x1464f
     movq     %r14,%rdx               # reg,reg :: 
     movb     $0x27,0x2(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
     movq     0x58(%rsp),%r14         # memOffsetBase,reg :: 
     jmp      Addr0x13f32             # value ::  target: 0x13f32 CodeAddr: 0x13f32
Addr0x14331:
     movzbl   0x10(%rsp),%edx         # memOffsetBase,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     jmp      Addr0x140f2             # value ::  target: 0x140f2 CodeAddr: 0x140f2
Addr0x1433e:
     movzbl   0x30(%rsp),%r13d        # memOffsetBase,reg :: 
     jmp      Addr0x13d60             # value ::  target: 0x13d60 CodeAddr: 0x13d60
Addr0x14349:
     movb     %al,0x10(%rsp)          # reg,memOffsetBase :: 
     jmp      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
Addr0x14352:
     movzbl   0x30(%rsp),%r13d        # memOffsetBase,reg :: 
     jmp      Addr0x137a8             # value ::  target: 0x137a8 CodeAddr: 0x137a8
Addr0x1435d:
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     jmp      Addr0x141b0             # value ::  target: 0x141b0 CodeAddr: 0x141b0
Addr0x14365:
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     jmp      Addr0x13900             # value ::  target: 0x13900 CodeAddr: 0x13900
Addr0x14383:
     movl     %r13d,%eax              # reg,reg :: 
     movl     $0x30,%ebp              # imm,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     jmp      Addr0x1373e             # value ::  target: 0x1373e CodeAddr: 0x1373e
Addr0x14393:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x1439d             # value ::  target: 0x1439d CodeAddr: 0x1439d
     movb     $0x30,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x1439d:
     leaq     0x2(%rcx),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x143ac             # value ::  target: 0x143ac CodeAddr: 0x143ac
     movb     $0x30,0x2(%r15,%rcx,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x143ac:
     leaq     0x3(%rcx),%r12          # memOffsetBase,reg :: 
     movl     $0x30,%ebp              # imm,reg :: 
     jmp      Addr0x142d8             # value ::  target: 0x142d8 CodeAddr: 0x142d8
     movl     %r9d,%eax               # reg,reg :: 
     jmp      Addr0x13e71             # value ::  target: 0x13e71 CodeAddr: 0x13e71
     movl     %r9d,%eax               # reg,reg :: 
     jmp      Addr0x13e89             # value ::  target: 0x13e89 CodeAddr: 0x13e89
Addr0x143ca:
     movq     0x78(%rsp),%rdx         # memOffsetBase,reg :: 
     movzbl   (%rdx),%eax             # memBase,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x135a7             # value ::  target: 0x135a7 CodeAddr: 0x135a7
Addr0x143e0:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x143e9             # value ::  target: 0x143e9 CodeAddr: 0x143e9
     movb     %al,(%r15,%r12,1)       # reg,memBaseIndexScale :: 
Addr0x143e9:
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     movzbl   (%rdx,%r12,1),%eax      # memBaseIndexScale,reg :: 
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x143e0             # value ::  target: 0x143e0 CodeAddr: 0x143e0
     jmp      Addr0x135a7             # value ::  target: 0x135a7 CodeAddr: 0x135a7
Addr0x143fb:
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rbx,%r11               # reg,reg :: 
     movzbl   0x10(%rsp),%edx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%rbx         # memOffsetBase,reg :: 
     movzbl   0x85(%rsp),%r8d         # memOffsetBase,reg :: 
     movzbl   0x86(%rsp),%ebp         # memOffsetBase,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movq     0x88(%rsp),%r12         # memOffsetBase,reg :: 
     movl     0x80(%rsp),%r10d        # memOffsetBase,reg :: 
     movzbl   0x87(%rsp),%r9d         # memOffsetBase,reg :: 
     jmp      Addr0x140e8             # value ::  target: 0x140e8 CodeAddr: 0x140e8
Addr0x1443d:
     movzbl   (%rdi,%rax,1),%ebp      # memBaseIndexScale,reg :: 
     leal     -0x21(%rbp),%edx        # memOffsetBase,reg :: 
     cmpb     $0x1d,%dl               # imm,reg ::  modifies flags!!
     ja       Addr0x13b80             # value ::  target: 0x13b80 CodeAddr: 0x13b80
     leaq     Var0x1c8c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1c8c0
     movzbl   %dl,%edx                # reg,reg :: 
     movslq   (%rdi,%rdx,4),%rdx      # memBaseIndexScale,reg :: 
     addq     %rdi,%rdx               # reg,reg ::  modifies flags!!
     notrack jmp *%rdx                   # reg :: "*%rdx" != "%rdx"
#    JUMP TABLE 
#  0x   1c8c0,  0x   1c8c1,  0x   1c8c2,  0x   1c8c3,  0x   1c8c4,  
#  0x   1c8c5,  0x   1c8c6,  0x   1c8c7,  0x   1c8c8,  0x   1c8c9,  
#  0x   1c8ca,  0x   1c8cb,  0x   1c8cc,  0x   1c8cd,  0x   1c8ce,  
#  0x   1c8cf,  0x   1c8d0,  0x   1c8d1,  0x   1c8d2,  0x   1c8d3,  
#  0x   1c8d4,  0x   1c8d5,  0x   1c8d6,  0x   1c8d7,  0x   1c8d8,  
#  0x   1c8d9,  0x   1c8da,  0x   1c8db,  0x   1c8dc,  0x   1c8dd,  
#  
#{'addr': 83038, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rdx', star='*', offset=None, imm=None, reg='%rdx', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 16344, 'size': 3, 'jumpTable': [116928, 116929, 116930, 116931, 116932, 116933, 116934, 116935, 116936, 116937, 116938, 116939, 116940, 116941, 116942, 116943, 116944, 116945, 116946, 116947, 116948, 116949, 116950, 116951, 116952, 116953, 116954, 116955, 116956, 116957]}
     cmpb     $0x0,0x63(%rsp)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x13ade             # value ::  target: 0x13ade CodeAddr: 0x13ade
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14476             # value ::  target: 0x14476 CodeAddr: 0x14476
     movb     $0x3f,(%r15,%r12,1)     # imm,memBaseIndexScale :: 
Addr0x14476:
     leaq     0x1(%r12),%rdx          # memOffsetBase,reg :: 
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14486             # value ::  target: 0x14486 CodeAddr: 0x14486
     movb     $0x22,0x1(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x14486:
     leaq     0x2(%r12),%rdx          # memOffsetBase,reg :: 
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14496             # value ::  target: 0x14496 CodeAddr: 0x14496
     movb     $0x22,0x2(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x14496:
     leaq     0x3(%r12),%rdx          # memOffsetBase,reg :: 
     cmpq     %rdx,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x144a6             # value ::  target: 0x144a6 CodeAddr: 0x144a6
     movb     $0x3f,0x3(%r15,%r12,1)  # imm,memOffsetBaseIndexScale :: 
Addr0x144a6:
     addq     $0x4,%r12               # imm,reg ::  modifies flags!!
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     movq     %rax,%rbx               # reg,reg :: 
     jmp      Addr0x142d8             # value ::  target: 0x142d8 CodeAddr: 0x142d8
Addr0x144b7:
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rbx,%r11               # reg,reg :: 
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     0x40(%rsp),%rbx         # memOffsetBase,reg :: 
     movzbl   0x85(%rsp),%r8d         # memOffsetBase,reg :: 
     movq     %r13,%rax               # reg,reg :: 
     movq     %rdi,%rdx               # reg,reg :: 
     movzbl   0x86(%rsp),%ebp         # memOffsetBase,reg :: 
     movq     0x88(%rsp),%r12         # memOffsetBase,reg :: 
     movl     0x80(%rsp),%r10d        # memOffsetBase,reg :: 
     movzbl   0x87(%rsp),%r9d         # memOffsetBase,reg :: 
     cmpq     %r11,%r13               # reg,reg ::  modifies flags!!
     jb       Addr0x1450d             # value ::  target: 0x1450d CodeAddr: 0x1450d
     jmp      Addr0x14516             # value ::  target: 0x14516 CodeAddr: 0x14516
Addr0x14500:
     addq     $0x1,%rdx               # imm,reg ::  modifies flags!!
     leaq     (%rbx,%rdx,1),%rax      # memBaseIndexScale,reg :: 
     cmpq     %rax,%r11               # reg,reg ::  modifies flags!!
     jbe      Addr0x14513             # value ::  target: 0x14513 CodeAddr: 0x14513
Addr0x1450d:
     cmpb     $0x0,(%rcx,%rax,1)      # imm,memBaseIndexScale ::  modifies flags!!
     jne      Addr0x14500             # value ::  target: 0x14500 CodeAddr: 0x14500
Addr0x14513:
     movq     %rdx,%rdi               # reg,reg :: 
Addr0x14516:
     movzbl   0x10(%rsp),%edx         # memOffsetBase,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     jmp      Addr0x140e8             # value ::  target: 0x140e8 CodeAddr: 0x140e8
Addr0x14523:
     leaq     Var0x1c248(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1c248
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x1,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x50(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0
Addr0x14563:
     movl     %eax,%edx               # reg,reg :: 
Addr0x14565:
     movq     0x50(%rsp),%rax         # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x14593             # value ::  target: 0x14593 CodeAddr: 0x14593
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x14593             # value ::  target: 0x14593 CodeAddr: 0x14593
     movzbl   (%rax),%edx             # memBase,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     je       Addr0x14593             # value ::  target: 0x14593 CodeAddr: 0x14593
     subq     %r12,%rax               # reg,reg ::  modifies flags!!
Addr0x1457d:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x14586             # value ::  target: 0x14586 CodeAddr: 0x14586
     movb     %dl,(%r15,%r12,1)       # reg,memBaseIndexScale :: 
Addr0x14586:
     addq     $0x1,%r12               # imm,reg ::  modifies flags!!
     movzbl   (%rax,%r12,1),%edx      # memBaseIndexScale,reg :: 
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x1457d             # value ::  target: 0x1457d CodeAddr: 0x1457d
Addr0x14593:
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     jbe      Addr0x13b18             # value ::  target: 0x13b18 CodeAddr: 0x13b18
     movb     $0x0,(%r15,%r12,1)      # imm,memBaseIndexScale :: 
     jmp      Addr0x13b18             # value ::  target: 0x13b18 CodeAddr: 0x13b18
Addr0x145a6:
     movl     %r10d,%esi              # reg,reg :: 
     movq     %r11,0x10(%rsp)         # reg,memOffsetBase :: 
     movl     %r10d,0x8(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x13390             # value ::  target: 0x13390 CodeAddr: 0x13390 CALLS 0x13390
     movq     0x10(%rsp),%r11         # memOffsetBase,reg :: 
     movl     0x8(%rsp),%r10d         # memOffsetBase,reg :: 
     movq     %rax,0x70(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x1359c             # value ::  target: 0x1359c CodeAddr: 0x1359c
Addr0x145cc:
     movl     %r10d,%esi              # reg,reg :: 
     movq     %r11,0x10(%rsp)         # reg,memOffsetBase :: 
     movl     %r10d,0x8(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x13390             # value ::  target: 0x13390 CodeAddr: 0x13390 CALLS 0x13390
     movq     0x10(%rsp),%r11         # memOffsetBase,reg :: 
     movl     0x8(%rsp),%r10d         # memOffsetBase,reg :: 
     movq     %rax,0x78(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x1355d             # value ::  target: 0x1355d CodeAddr: 0x1355d
Addr0x145f2:
     cmpl     $0x2,%r10d              # imm,reg ::  modifies flags!!
     sete     0x10(%rsp)              # memOffsetBase :: 
     jmp      Addr0x13ad0             # value ::  target: 0x13ad0 CodeAddr: 0x13ad0
Addr0x14600:
     movzbl   0x84(%rsp),%edx         # memOffsetBase,reg :: 
     jmp      Addr0x14565             # value ::  target: 0x14565 CodeAddr: 0x14565
Addr0x1460d:
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0x5,%r8d               # imm,reg :: 
     movq     %r11,%rcx               # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     pushq    0x78(%rsp)              # memOffsetBase :: 
     pushq    0x88(%rsp)              # memOffsetBase :: 
     pushq    0x40(%rsp)              # memOffsetBase :: 
     movl     0x84(%rsp),%r9d         # memOffsetBase,reg :: 
     movq     0x38(%rsp),%rdx         # memOffsetBase,reg :: 
     movq     0x78(%rsp),%rsi         # memOffsetBase,reg :: 
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     movq     %rax,%r12               # reg,reg :: 
     jmp      Addr0x13b18             # value ::  target: 0x13b18 CodeAddr: 0x13b18
Addr0x1464f:
     movq     %r14,%rdx               # reg,reg :: 
     movq     0x58(%rsp),%r14         # memOffsetBase,reg :: 
     jmp      Addr0x13f32             # value ::  target: 0x13f32 CodeAddr: 0x13f32
Addr0x1465c:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x14661:
     movq     %r14,0x58(%rsp)         # reg,memOffsetBase :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     jmp      Addr0x13ef6             # value ::  target: 0x13ef6 CodeAddr: 0x13ef6
Addr0x14677:
     movl     %edx,%ebp               # reg,reg :: 
     jmp      Addr0x13c20             # value ::  target: 0x13c20 CodeAddr: 0x13c20
Addr0x1467e:
     leaq     Var0x1cfdb(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1cfdb
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     movb     $0x1,0x8(%rsp)          # imm,memOffsetBase :: 
     movb     $0x0,0x84(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x58(%rsp)         # imm,memOffsetBase :: 
     movb     $0x1,0x63(%rsp)         # imm,memOffsetBase :: 
     movb     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x1,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x50(%rsp)         # reg,memOffsetBase :: 
     jmp      Addr0x135f0             # value ::  target: 0x135f0 CodeAddr: 0x135f0

# ----------- Function 300 ------------ 
#
# startAddr  = 0x146c0
# startindex = 16483
# endAddr    = 0x1485d
# endindex   = 16594
# len        = 414 (0x19e)
# len1       = 416 (0x1a0) to (0x1485e)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x146c0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rcx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movslq   %edi,%rbx               # reg,reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     Var0x23240(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x23240
     movq     %rax,(%rsp)             # reg,memBase :: 
     movl     (%rax),%eax             # memBase,reg :: 
     movl     %eax,0xc(%rsp)          # reg,memOffsetBase :: 
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     js       Addr0x4dc3              # value ::  target: 0x4dc3 CodeAddr: 0x4dc3
     cmpl     %ebx,Var0x23238(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23238 modifies flags!!
     jg       Addr0x14761             # value ::  target: 0x14761 CodeAddr: 0x14761
     cmpl     $0x7fffffff,%ebx        # imm,reg ::  modifies flags!!
     je       Addr0x14859             # value ::  target: 0x14859 CodeAddr: 0x14859
     leal     0x1(%rbx),%r14d         # memOffsetBase,reg :: 
     leaq     Var0x23250(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x23250
     movslq   %r14d,%rsi              # reg,reg :: 
     shlq     $0x4,%rsi               # imm,reg ::  modifies flags!!
     cmpq     %rax,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x14838             # value ::  target: 0x14838 CodeAddr: 0x14838
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movq     %rax,Var0x23240(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23240
     movq     %rax,%r15               # reg,reg :: 
Addr0x14739:
     movslq   Var0x23238(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x23238
     movl     %r14d,%edx              # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     subl     %edi,%edx               # reg,reg ::  modifies flags!!
     shlq     $0x4,%rdi               # imm,reg ::  modifies flags!!
     movslq   %edx,%rdx               # reg,reg :: 
     addq     %r15,%rdi               # reg,reg ::  modifies flags!!
     shlq     $0x4,%rdx               # imm,reg ::  modifies flags!!
     callq    Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0 CALLS 0x49e0
     movl     %r14d,Var0x23238(%rip)  # reg,memOffsetBase ::  DataAddr: 0x23238
Addr0x14761:
     leaq     0x8(%rbp),%rax          # memOffsetBase,reg :: 
     shlq     $0x4,%rbx               # imm,reg ::  modifies flags!!
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     0x4(%rbp),%r14d         # memOffsetBase,reg :: 
     addq     %r15,%rbx               # reg,reg ::  modifies flags!!
     movq     %rax,0x20(%rsp)         # reg,memOffsetBase :: 
     movl     0x0(%rbp),%r8d          # memOffsetBase,reg :: 
     movq     %r13,%rcx               # reg,reg :: 
     movq     (%rbx),%rsi             # memBase,reg :: 
     movq     0x8(%rbx),%r15          # memOffsetBase,reg :: 
     pushq    0x30(%rbp)              # memOffsetBase :: 
     orl      $0x1,%r14d              # imm,reg ::  modifies flags!!
     pushq    0x28(%rbp)              # memOffsetBase :: 
     movl     %r14d,%r9d              # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     pushq    %rax                    # reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rsi,0x30(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     movq     0x30(%rsp),%rsi         # memOffsetBase,reg :: 
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     cmpq     %rax,%rsi               # reg,reg ::  modifies flags!!
     ja       Addr0x14818             # value ::  target: 0x14818 CodeAddr: 0x14818
     leaq     0x1(%rax),%rsi          # memOffsetBase,reg :: 
     leaq     Var0x24420(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24420
     movq     %rsi,(%rbx)             # reg,memBase :: 
     cmpq     %rax,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x147d8             # value ::  target: 0x147d8 CodeAddr: 0x147d8
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rsi,0x10(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x10(%rsp),%rsi         # memOffsetBase,reg :: 
Addr0x147d8:
     movq     %rsi,%rdi               # reg,reg :: 
     movq     %rsi,0x10(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     0x0(%rbp),%r8d          # memOffsetBase,reg :: 
     movl     %r14d,%r9d              # reg,reg :: 
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     %r13,%rcx               # reg,reg :: 
     movq     %r12,%rdx               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     pushq    0x30(%rbp)              # memOffsetBase :: 
     movq     %rax,%r15               # reg,reg :: 
     pushq    0x28(%rbp)              # memOffsetBase :: 
     pushq    0x30(%rsp)              # memOffsetBase :: 
     movq     0x30(%rsp),%rsi         # memOffsetBase,reg :: 
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
Addr0x14818:
     movq     (%rsp),%rax             # memBase,reg :: 
     movl     0xc(%rsp),%ecx          # memOffsetBase,reg :: 
     movl     %ecx,(%rax)             # reg,memBase :: 
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     %r15,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x14838:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920 CALLS 0x15920
     movdqa   Var0x23250(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x23250
     movq     %rax,Var0x23240(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23240
     movq     %rax,%r15               # reg,reg :: 
     movups   %xmm0,(%rax)            # reg,memBase :: 
     jmp      Addr0x14739             # value ::  target: 0x14739 CodeAddr: 0x14739
Addr0x14859:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 301 ------------ 
#
# startAddr  = 0x14860
# startindex = 16596
# endAddr    = 0x14898
# endindex   = 16614
# len        = 57 (0x39)
# len1       = 64 (0x40) to (0x14899)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x14860:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     movl     $0x38,%esi              # imm,reg :: 
     movl     (%rax),%r12d            # memBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     cmoveq   %rax,%rbp               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x15ae0             # value ::  target: 0x15ae0 CodeAddr: 0x15ae0 CALLS 0x15ae0
     movl     %r12d,(%rbx)            # reg,memBase :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 302 ------------ 
#
# startAddr  = 0x148a0
# startindex = 16616
# endAddr    = 0x148b4
# endindex   = 16621
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x148b5)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x148a0:
     endbr64 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     cmoveq   %rax,%rdi               # reg,reg :: 
     movl     (%rdi),%eax             # memBase,reg :: 
     retq    

# ----------- Function 303 ------------ 
#
# startAddr  = 0x148c0
# startindex = 16623
# endAddr    = 0x148d4
# endindex   = 16628
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x148d5)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x148c0:
     endbr64 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     cmoveq   %rax,%rdi               # reg,reg :: 
     movl     %esi,(%rdi)             # reg,memBase :: 
     retq    

# ----------- Function 304 ------------ 
#
# startAddr  = 0x148e0
# startindex = 16630
# endAddr    = 0x14918
# endindex   = 16649
# len        = 57 (0x39)
# len1       = 64 (0x40) to (0x14919)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x148e0:
     endbr64 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     movl     %esi,%ecx               # reg,reg :: 
     cmoveq   %rax,%rdi               # reg,reg :: 
     movl     %esi,%eax               # reg,reg :: 
     andl     $0x1f,%ecx              # imm,reg ::  modifies flags!!
     shrb     $0x5,%al                # imm,reg ::  modifies flags!!
     movzbl   %al,%eax                # reg,reg :: 
     leaq     0x8(%rdi,%rax,4),%rsi   # memOffsetBaseIndexScale,reg :: 
     movl     (%rsi),%edi             # memBase,reg :: 
     movl     %edi,%eax               # reg,reg :: 
     shrl     %cl,%eax                # reg,reg ::  modifies flags!!
     xorl     %eax,%edx               # reg,reg ::  modifies flags!!
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     andl     $0x1,%edx               # imm,reg ::  modifies flags!!
     shll     %cl,%edx                # reg,reg ::  modifies flags!!
     xorl     %edi,%edx               # reg,reg ::  modifies flags!!
     movl     %edx,(%rsi)             # reg,memBase :: 
     retq    

# ----------- Function 305 ------------ 
#
# startAddr  = 0x14920
# startindex = 16651
# endAddr    = 0x14938
# endindex   = 16657
# len        = 25 (0x19)
# len1       = 32 (0x20) to (0x14939)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x14920:
     endbr64 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     cmoveq   %rax,%rdi               # reg,reg :: 
     movl     0x4(%rdi),%eax          # memOffsetBase,reg :: 
     movl     %esi,0x4(%rdi)          # reg,memOffsetBase :: 
     retq    

# ----------- Function 306 ------------ 
#
# startAddr  = 0x14940
# startindex = 16659
# endAddr    = 0x1497a
# endindex   = 16672
# len        = 59 (0x3b)
# len1       = 64 (0x40) to (0x1497b)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x14940:
     endbr64 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rdi               # reg,reg :: 
     movl     $0xa,(%rdi)             # imm,memBase :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x4dc8              # value ::  target: 0x4dc8 CodeAddr: 0x4dc8
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x4dc8              # value ::  target: 0x4dc8 CodeAddr: 0x4dc8
     movq     %rsi,0x28(%rdi)         # reg,memOffsetBase :: 
     movq     %rdx,0x30(%rdi)         # reg,memOffsetBase :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    

# ----------- Function 307 ------------ 
#
# startAddr  = 0x14980
# startindex = 16674
# endAddr    = 0x149f7
# endindex   = 16713
# len        = 120 (0x78)
# len1       = 128 (0x80) to (0x149f8)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x14980:
     endbr64 
     pushq    %r15                    # reg :: 
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     pushq    %r14                    # reg :: 
     movq     %rdx,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %r8,%rbx                # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     testq    %r8,%r8                 # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rbx               # reg,reg :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r14,%rdx               # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movl     (%rax),%r15d            # memBase,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     leaq     0x8(%rbx),%rax          # memOffsetBase,reg :: 
     movl     0x4(%rbx),%r9d          # memOffsetBase,reg :: 
     pushq    0x30(%rbx)              # memOffsetBase :: 
     movl     (%rbx),%r8d             # memBase,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     pushq    0x28(%rbx)              # memOffsetBase :: 
     pushq    %rax                    # reg :: 
     movq     0x28(%rsp),%rcx         # memOffsetBase,reg :: 
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     movl     %r15d,0x0(%rbp)         # reg,memOffsetBase :: 
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    

# ----------- Function 308 ------------ 
#
# startAddr  = 0x14a00
# startindex = 16715
# endAddr    = 0x14ae8
# endindex   = 16785
# len        = 233 (0xe9)
# len1       = 240 (0xf0) to (0x14ae9)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x14a00:
     endbr64 
     pushq    %r15                    # reg :: 
     leaq     Var0x24520(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24520
     pushq    %r14                    # reg :: 
     movq     %rsi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rcx,%rbx               # reg,reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     cmoveq   %rax,%rbx               # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     movq     %r14,%rcx               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     movl     (%rax),%eax             # memBase,reg :: 
     sete     %r9b                    # reg :: 
     leaq     0x8(%rbx),%r10          # memOffsetBase,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     orl      0x4(%rbx),%r9d          # memOffsetBase,reg ::  modifies flags!!
     movl     (%rbx),%r8d             # memBase,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movl     %eax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     pushq    0x30(%rbx)              # memOffsetBase :: 
     pushq    0x28(%rbx)              # memOffsetBase :: 
     pushq    %r10                    # reg :: 
     movq     %r10,0x38(%rsp)         # reg,memOffsetBase :: 
     movl     %r9d,0x34(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     leaq     0x1(%rax),%rsi          # memOffsetBase,reg :: 
     movq     %rax,%r15               # reg,reg :: 
     movq     %rsi,%rdi               # reg,reg :: 
     movq     %rsi,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     pushq    0x30(%rbx)              # memOffsetBase :: 
     movl     (%rbx),%r8d             # memBase,reg :: 
     pushq    0x28(%rbx)              # memOffsetBase :: 
     movq     %r14,%rcx               # reg,reg :: 
     movq     %r13,%rdx               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     0x30(%rsp),%r10         # memOffsetBase,reg :: 
     pushq    %r10                    # reg :: 
     movq     0x28(%rsp),%rsi         # memOffsetBase,reg :: 
     movl     0x34(%rsp),%r9d         # memOffsetBase,reg :: 
     movq     %rax,0x28(%rsp)         # reg,memOffsetBase :: 
     callq    Addr0x13470             # value ::  target: 0x13470 CodeAddr: 0x13470 CALLS 0x13470
     movl     0x30(%rsp),%eax         # memOffsetBase,reg :: 
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     movq     0x8(%rsp),%r11          # memOffsetBase,reg :: 
     movl     %eax,(%r12)             # reg,memBase :: 
     je       Addr0x14ad7             # value ::  target: 0x14ad7 CodeAddr: 0x14ad7
     movq     %r15,0x0(%rbp)          # reg,memOffsetBase :: 
Addr0x14ad7:
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     %r11,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    

# ----------- Function 309 ------------ 
#
# startAddr  = 0x14af0
# startindex = 16787
# endAddr    = 0x14afd
# endindex   = 16790
# len        = 14 (0xe)
# len1       = 16 (0x10) to (0x14afe)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14af0:
     endbr64 
     movq     %rdx,%rcx               # reg,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     jmp      Addr0x14a00             # value ::  target: 0x14a00 CodeAddr: 0x14a00

# ----------- Function 310 ------------ 
#
# startAddr  = 0x14b00
# startindex = 16792
# endAddr    = 0x14b92
# endindex   = 16827
# len        = 147 (0x93)
# len1       = 158 (0x9e) to (0x14b93)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x14b00:
     endbr64 
     movl     Var0x23238(%rip),%eax   # memOffsetBase,reg ::  DataAddr: 0x23238
     pushq    %r12                    # reg :: 
     movq     Var0x23240(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x23240
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     cmpl     $0x1,%eax               # imm,reg ::  modifies flags!!
     jle      Addr0x14b41             # value ::  target: 0x14b41 CodeAddr: 0x14b41
     subl     $0x2,%eax               # imm,reg ::  modifies flags!!
     leaq     0x18(%r12),%rbx         # memOffsetBase,reg :: 
     shlq     $0x4,%rax               # imm,reg ::  modifies flags!!
     leaq     0x28(%r12,%rax,1),%rbp  # memOffsetBaseIndexScale,reg :: 
Addr0x14b30:
     movq     (%rbx),%rdi             # memBase,reg :: 
     addq     $0x10,%rbx              # imm,reg ::  modifies flags!!
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     cmpq     %rbp,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x14b30             # value ::  target: 0x14b30 CodeAddr: 0x14b30
Addr0x14b41:
     movq     0x8(%r12),%rdi          # memOffsetBase,reg :: 
     leaq     Var0x24420(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x24420
     cmpq     %rbx,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x14b69             # value ::  target: 0x14b69 CodeAddr: 0x14b69
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %rbx,Var0x23258(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23258
     movq     $0x100,Var0x23250(%rip) # imm,memOffsetBase ::  DataAddr: 0x23250
Addr0x14b69:
     leaq     Var0x23250(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x23250
     cmpq     %rbx,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x14b84             # value ::  target: 0x14b84 CodeAddr: 0x14b84
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %rbx,Var0x23240(%rip)   # reg,memOffsetBase ::  DataAddr: 0x23240
Addr0x14b84:
     movl     $0x1,Var0x23238(%rip)   # imm,memOffsetBase ::  DataAddr: 0x23238
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 311 ------------ 
#
# startAddr  = 0x14ba0
# startindex = 16830
# endAddr    = 0x14bb6
# endindex   = 16833
# len        = 23 (0x17)
# len1       = 32 (0x20) to (0x14bb7)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14ba0:
     endbr64 
     leaq     Var0x24520(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x24520
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 312 ------------ 
#
# startAddr  = 0x14bc0
# startindex = 16835
# endAddr    = 0x14bcf
# endindex   = 16837
# len        = 16 (0x10)
# secid      = 15
# sec name   = .text
# Falls through to next
#  jumps out!
#
# -------------------------------------------

Addr0x14bc0:
     endbr64 
     leaq     Var0x24520(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x24520
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 313 ------------ 
#
# startAddr  = 0x14bd0
# startindex = 16838
# endAddr    = 0x14beb
# endindex   = 16843
# len        = 28 (0x1c)
# len1       = 32 (0x20) to (0x14bec)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14bd0:
     endbr64 
     movq     %rdi,%rsi               # reg,reg :: 
     leaq     Var0x24520(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x24520
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 314 ------------ 
#
# startAddr  = 0x14bf0
# startindex = 16845
# endAddr    = 0x14c07
# endindex   = 16850
# len        = 24 (0x18)
# len1       = 32 (0x20) to (0x14c08)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14bf0:
     endbr64 
     movq     %rsi,%rdx               # reg,reg :: 
     leaq     Var0x24520(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x24520
     movq     %rdi,%rsi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 315 ------------ 
#
# startAddr  = 0x14c10
# startindex = 16852
# endAddr    = 0x14ca0
# endindex   = 16877
# len        = 145 (0x91)
# len1       = 156 (0x9c) to (0x14ca1)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x14c10:
     endbr64 
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0xa,%esi               # imm,reg ::  modifies flags!!
     je       Addr0x4dcd              # value ::  target: 0x4dcd CodeAddr: 0x4dcd
     movq     %rdx,%r8                # reg,reg :: 
     movl     %esi,(%rsp)             # reg,memBase :: 
     movq     %rsp,%rcx               # reg,reg :: 
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movq     %r8,%rsi                # reg,reg :: 
     movl     $0x0,0x4(%rsp)          # imm,memOffsetBase :: 
     movq     $0x0,0x8(%rsp)          # imm,memOffsetBase :: 
     movq     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x28(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     callq    Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0 CALLS 0x146c0
     movq     0x38(%rsp),%rcx         # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0x14c9c             # value ::  target: 0x14c9c CodeAddr: 0x14c9c
     addq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x14c9c:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 316 ------------ 
#
# startAddr  = 0x14cb0
# startindex = 16880
# endAddr    = 0x14d3c
# endindex   = 16905
# len        = 141 (0x8d)
# len1       = 144 (0x90) to (0x14d3d)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x14cb0:
     endbr64 
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0xa,%esi               # imm,reg ::  modifies flags!!
     je       Addr0x4dd2              # value ::  target: 0x4dd2 CodeAddr: 0x4dd2
     movq     %rdx,%r8                # reg,reg :: 
     movl     %esi,(%rsp)             # reg,memBase :: 
     movq     %rcx,%rdx               # reg,reg :: 
     movq     %rsp,%rcx               # reg,reg :: 
     movq     %r8,%rsi                # reg,reg :: 
     movl     $0x0,0x4(%rsp)          # imm,memOffsetBase :: 
     movq     $0x0,0x8(%rsp)          # imm,memOffsetBase :: 
     movq     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x28(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     callq    Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0 CALLS 0x146c0
     movq     0x38(%rsp),%rdx         # memOffsetBase,reg :: 
     xorq     0x28,%rdx               # value,reg ::  modifies flags!!
     jne      Addr0x14d38             # value ::  target: 0x14d38 CodeAddr: 0x14d38
     addq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x14d38:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 317 ------------ 
#
# startAddr  = 0x14d40
# startindex = 16907
# endAddr    = 0x14d4f
# endindex   = 16911
# len        = 16 (0x10)
# secid      = 15
# sec name   = .text
# Falls through to next
#  jumps out!
#
# -------------------------------------------

Addr0x14d40:
     endbr64 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     %edi,%esi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x14c10             # value ::  target: 0x14c10 CodeAddr: 0x14c10

# ----------- Function 318 ------------ 
#
# startAddr  = 0x14d50
# startindex = 16912
# endAddr    = 0x14d62
# endindex   = 16917
# len        = 19 (0x13)
# len1       = 30 (0x1e) to (0x14d63)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14d50:
     endbr64 
     movq     %rdx,%rcx               # reg,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     %edi,%esi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x14cb0             # value ::  target: 0x14cb0 CodeAddr: 0x14cb0

# ----------- Function 319 ------------ 
#
# startAddr  = 0x14d70
# startindex = 16920
# endAddr    = 0x14e0c
# endindex   = 16959
# len        = 157 (0x9d)
# len1       = 160 (0xa0) to (0x14e0d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x14d70:
     endbr64 
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movdqa   Var0x24520(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x24520
     movdqa   Var0x24530(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x24530
     movl     %edx,%ecx               # reg,reg :: 
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     Var0x24550(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24550
     movq     %rsi,%r9                # reg,reg :: 
     andl     $0x1f,%ecx              # imm,reg ::  modifies flags!!
     movdqa   Var0x24540(%rip),%xmm2  # memOffsetBase,reg ::  DataAddr: 0x24540
     movaps   %xmm0,(%rsp)            # reg,memBase :: 
     movq     %rsp,%r10               # reg,reg :: 
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     movl     %edx,%eax               # reg,reg :: 
     shrb     $0x5,%al                # imm,reg ::  modifies flags!!
     movaps   %xmm1,0x10(%rsp)        # reg,memOffsetBase :: 
     movzbl   %al,%eax                # reg,reg :: 
     movaps   %xmm2,0x20(%rsp)        # reg,memOffsetBase :: 
     leaq     0x8(%rsp,%rax,4),%rdx   # memOffsetBaseIndexScale,reg :: 
     movl     (%rdx),%esi             # memBase,reg :: 
     movl     %esi,%eax               # reg,reg :: 
     shrl     %cl,%eax                # reg,reg ::  modifies flags!!
     notl     %eax                    # reg :: 
     andl     $0x1,%eax               # imm,reg ::  modifies flags!!
     shll     %cl,%eax                # reg,reg ::  modifies flags!!
     movq     %r10,%rcx               # reg,reg :: 
     xorl     %esi,%eax               # reg,reg ::  modifies flags!!
     movq     %rdi,%rsi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     %eax,(%rdx)             # reg,memBase :: 
     movq     %r9,%rdx                # reg,reg :: 
     callq    Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0 CALLS 0x146c0
     movq     0x38(%rsp),%rdi         # memOffsetBase,reg :: 
     xorq     0x28,%rdi               # value,reg ::  modifies flags!!
     jne      Addr0x14e08             # value ::  target: 0x14e08 CodeAddr: 0x14e08
     addq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x14e08:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 320 ------------ 
#
# startAddr  = 0x14e10
# startindex = 16961
# endAddr    = 0x14e23
# endindex   = 16964
# len        = 20 (0x14)
# len1       = 31 (0x1f) to (0x14e24)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14e10:
     endbr64 
     movsbl   %sil,%edx               # reg,reg :: 
     movq     $0xffffffffffffffff,%rsi# imm,reg :: 
     jmp      Addr0x14d70             # value ::  target: 0x14d70 CodeAddr: 0x14d70

# ----------- Function 321 ------------ 
#
# startAddr  = 0x14e30
# startindex = 16967
# endAddr    = 0x14e44
# endindex   = 16970
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x14e45)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14e30:
     endbr64 
     movl     $0x3a,%edx              # imm,reg :: 
     movq     $0xffffffffffffffff,%rsi# imm,reg :: 
     jmp      Addr0x14d70             # value ::  target: 0x14d70 CodeAddr: 0x14d70

# ----------- Function 322 ------------ 
#
# startAddr  = 0x14e50
# startindex = 16972
# endAddr    = 0x14e5d
# endindex   = 16974
# len        = 14 (0xe)
# len1       = 16 (0x10) to (0x14e5e)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14e50:
     endbr64 
     movl     $0x3a,%edx              # imm,reg :: 
     jmp      Addr0x14d70             # value ::  target: 0x14d70 CodeAddr: 0x14d70

# ----------- Function 323 ------------ 
#
# startAddr  = 0x14e60
# startindex = 16976
# endAddr    = 0x14ef6
# endindex   = 17002
# len        = 151 (0x97)
# len1       = 160 (0xa0) to (0x14ef7)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x14e60:
     endbr64 
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0xa,%esi               # imm,reg ::  modifies flags!!
     je       Addr0x4dd7              # value ::  target: 0x4dd7 CodeAddr: 0x4dd7
     movq     %rdx,%r8                # reg,reg :: 
     movl     %esi,(%rsp)             # reg,memBase :: 
     movq     %rsp,%rcx               # reg,reg :: 
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     movabsq  $0x400000000000000,%rax # imm,reg :: 
     movq     %r8,%rsi                # reg,reg :: 
     movl     $0x0,0x4(%rsp)          # imm,memOffsetBase :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     $0x0,0x10(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x18(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x20(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x28(%rsp)         # imm,memOffsetBase :: 
     movq     $0x0,0x30(%rsp)         # imm,memOffsetBase :: 
     callq    Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0 CALLS 0x146c0
     movq     0x38(%rsp),%rcx         # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0x14ef2             # value ::  target: 0x14ef2 CodeAddr: 0x14ef2
     addq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x14ef2:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 324 ------------ 
#
# startAddr  = 0x14f00
# startindex = 17004
# endAddr    = 0x14f97
# endindex   = 17034
# len        = 152 (0x98)
# len1       = 160 (0xa0) to (0x14f98)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x14f00:
     endbr64 
     subq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     movdqa   Var0x24520(%rip),%xmm0  # memOffsetBase,reg ::  DataAddr: 0x24520
     movdqa   Var0x24530(%rip),%xmm1  # memOffsetBase,reg ::  DataAddr: 0x24530
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x38(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movdqa   Var0x24540(%rip),%xmm2  # memOffsetBase,reg ::  DataAddr: 0x24540
     movq     Var0x24550(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x24550
     movaps   %xmm0,(%rsp)            # reg,memBase :: 
     movq     %rax,0x30(%rsp)         # reg,memOffsetBase :: 
     movl     $0xa,(%rsp)             # imm,memBase :: 
     movaps   %xmm1,0x10(%rsp)        # reg,memOffsetBase :: 
     movaps   %xmm2,0x20(%rsp)        # reg,memOffsetBase :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x4ddc              # value ::  target: 0x4ddc CodeAddr: 0x4ddc
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x4ddc              # value ::  target: 0x4ddc CodeAddr: 0x4ddc
     movq     %rcx,%r9                # reg,reg :: 
     movq     %rsi,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     %rsp,%rcx               # reg,reg :: 
     movq     %rdx,0x30(%rsp)         # reg,memOffsetBase :: 
     movq     %r9,%rsi                # reg,reg :: 
     movq     %r8,%rdx                # reg,reg :: 
     callq    Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0 CALLS 0x146c0
     movq     0x38(%rsp),%rcx         # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0x14f93             # value ::  target: 0x14f93 CodeAddr: 0x14f93
     addq     $0x48,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x14f93:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 325 ------------ 
#
# startAddr  = 0x14fa0
# startindex = 17036
# endAddr    = 0x14faf
# endindex   = 17038
# len        = 16 (0x10)
# secid      = 15
# sec name   = .text
# Falls through to next
#  jumps out!
#
# -------------------------------------------

Addr0x14fa0:
     endbr64 
     movq     $0xffffffffffffffff,%r8 # imm,reg :: 
     jmp      Addr0x14f00             # value ::  target: 0x14f00 CodeAddr: 0x14f00

# ----------- Function 326 ------------ 
#
# startAddr  = 0x14fb0
# startindex = 17039
# endAddr    = 0x14fca
# endindex   = 17045
# len        = 27 (0x1b)
# len1       = 32 (0x20) to (0x14fcb)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14fb0:
     endbr64 
     movq     %rdx,%rcx               # reg,reg :: 
     movq     $0xffffffffffffffff,%r8 # imm,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movq     %rdi,%rsi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x14f00             # value ::  target: 0x14f00 CodeAddr: 0x14f00

# ----------- Function 327 ------------ 
#
# startAddr  = 0x14fd0
# startindex = 17047
# endAddr    = 0x14fe6
# endindex   = 17053
# len        = 23 (0x17)
# len1       = 32 (0x20) to (0x14fe7)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x14fd0:
     endbr64 
     movq     %rcx,%r8                # reg,reg :: 
     movq     %rdx,%rcx               # reg,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movq     %rdi,%rsi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x14f00             # value ::  target: 0x14f00 CodeAddr: 0x14f00

# ----------- Function 328 ------------ 
#
# startAddr  = 0x14ff0
# startindex = 17055
# endAddr    = 0x14fff
# endindex   = 17057
# len        = 16 (0x10)
# secid      = 15
# sec name   = .text
# Falls through to next
#  jumps out!
#
# -------------------------------------------

Addr0x14ff0:
     endbr64 
     leaq     Var0x23200(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23200
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 329 ------------ 
#
# startAddr  = 0x15000
# startindex = 17058
# endAddr    = 0x15017
# endindex   = 17063
# len        = 24 (0x18)
# len1       = 32 (0x20) to (0x15018)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15000:
     endbr64 
     movq     %rsi,%rdx               # reg,reg :: 
     leaq     Var0x23200(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23200
     movq     %rdi,%rsi               # reg,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 330 ------------ 
#
# startAddr  = 0x15020
# startindex = 17065
# endAddr    = 0x15036
# endindex   = 17068
# len        = 23 (0x17)
# len1       = 32 (0x20) to (0x15037)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15020:
     endbr64 
     leaq     Var0x23200(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23200
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 331 ------------ 
#
# startAddr  = 0x15040
# startindex = 17070
# endAddr    = 0x1505b
# endindex   = 17075
# len        = 28 (0x1c)
# len1       = 32 (0x20) to (0x1505c)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15040:
     endbr64 
     movq     %rdi,%rsi               # reg,reg :: 
     leaq     Var0x23200(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x23200
     movq     $0xffffffffffffffff,%rdx# imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     jmp      Addr0x146c0             # value ::  target: 0x146c0 CodeAddr: 0x146c0

# ----------- Function 332 ------------ 
#
# startAddr  = 0x15060
# startindex = 17077
# endAddr    = 0x15186
# endindex   = 17149
# len        = 295 (0x127)
# len1       = 304 (0x130) to (0x15187)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15060:
     pushq    %r14                    # reg :: 
     movl     %edi,%r14d              # reg,reg :: 
     movq     %rsi,%rdi               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rcx,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movl     %edx,%r12d              # reg,reg :: 
     pushq    %rbp                    # reg :: 
     subq     $0x138,%rsp             # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x128(%rsp)        # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x172e0             # value ::  target: 0x172e0 CodeAddr: 0x172e0 CALLS 0x172e0
     movq     %rsp,%rcx               # reg,reg :: 
     movl     %r14d,%esi              # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movl     $0x100,%r8d             # imm,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0x4930              # value ::  target: 0x4930 CodeAddr: 0x4930 CALLS 0x4930
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x15160             # value ::  target: 0x15160 CodeAddr: 0x15160
Addr0x150b6:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x172e0             # value ::  target: 0x172e0 CodeAddr: 0x172e0 CALLS 0x172e0
     leaq     0x90(%rsp),%rcx         # memOffsetBase,reg :: 
     movl     $0x100,%r8d             # imm,reg :: 
     movl     %r12d,%esi              # reg,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0x4930              # value ::  target: 0x4930 CodeAddr: 0x4930 CALLS 0x4930
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x15140             # value ::  target: 0x15140 CodeAddr: 0x15140
Addr0x150eb:
     movq     0x98(%rsp),%rax         # memOffsetBase,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     cmpq     %rax,0x8(%rsp)          # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x1510d             # value ::  target: 0x1510d CodeAddr: 0x1510d
     movq     0x90(%rsp),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,(%rsp)             # reg,memBase ::  modifies flags!!
     sete     %r12b                   # reg :: 
Addr0x1510d:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movq     0x128(%rsp),%rax        # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x15182             # value ::  target: 0x15182 CodeAddr: 0x15182
     addq     $0x138,%rsp             # imm,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x15140:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %rbp,%rcx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1be9c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9c
     movl     (%rax),%esi             # memBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0x150eb             # value ::  target: 0x150eb CodeAddr: 0x150eb
Addr0x15160:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %rbp,%rcx               # reg,reg :: 
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1be9c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9c
     movl     (%rax),%esi             # memBase,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     jmp      Addr0x150b6             # value ::  target: 0x150b6 CodeAddr: 0x150b6
Addr0x15182:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 333 ------------ 
#
# startAddr  = 0x15190
# startindex = 17151
# endAddr    = 0x15220
# endindex   = 17203
# len        = 145 (0x91)
# len1       = 156 (0x9c) to (0x15221)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x15190:
     endbr64 
     pushq    %r15                    # reg :: 
     movq     %rsi,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     %rcx,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movl     %edx,%ebx               # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movl     %edi,0xc(%rsp)          # reg,memOffsetBase :: 
     movq     %rsi,%rdi               # reg,reg :: 
     callq    Addr0xe140              # value ::  target: 0xe140 CodeAddr: 0xe140 CALLS 0xe140
     movq     %r14,%rdi               # reg,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     callq    Addr0xe140              # value ::  target: 0xe140 CodeAddr: 0xe140 CALLS 0xe140
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     callq    Addr0xe1a0              # value ::  target: 0xe1a0 CodeAddr: 0xe1a0 CALLS 0xe1a0
     movq     %r12,%rdi               # reg,reg :: 
     movq     %rax,%r13               # reg,reg :: 
     callq    Addr0xe1a0              # value ::  target: 0xe1a0 CodeAddr: 0xe1a0 CALLS 0xe1a0
     cmpq     %rax,%r13               # reg,reg ::  modifies flags!!
     je       Addr0x151f0             # value ::  target: 0x151f0 CodeAddr: 0x151f0
Addr0x151dc:
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x151f0:
     movq     %r13,%rdx               # reg,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4a30              # value ::  target: 0x4a30 CodeAddr: 0x4a30 CALLS 0x4a30
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x151dc             # value ::  target: 0x151dc CodeAddr: 0x151dc
     movl     0xc(%rsp),%edi          # memOffsetBase,reg :: 
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %r14,%rcx               # reg,reg :: 
     movl     %ebx,%edx               # reg,reg :: 
     movq     %r15,%rsi               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x15060             # value ::  target: 0x15060 CodeAddr: 0x15060

# ----------- Function 334 ------------ 
#
# startAddr  = 0x15230
# startindex = 17206
# endAddr    = 0x15248
# endindex   = 17211
# len        = 25 (0x19)
# len1       = 32 (0x20) to (0x15249)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15230:
     endbr64 
     movq     %rsi,%rcx               # reg,reg :: 
     movl     $0xffffff9c,%edx        # imm,reg :: 
     movq     %rdi,%rsi               # reg,reg :: 
     movl     $0xffffff9c,%edi        # imm,reg :: 
     jmp      Addr0x15190             # value ::  target: 0x15190 CodeAddr: 0x15190

# ----------- Function 335 ------------ 
#
# startAddr  = 0x15250
# startindex = 17213
# endAddr    = 0x15690
# endindex   = 17509
# len        = 1089 (0x441)
# len1       = 1100 (0x44c) to (0x15691)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#  has jump ptr!
#
# -------------------------------------------

Addr0x15250:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     movq     %r9,%r12                # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %r8,%rbx                # reg,reg :: 
     subq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x15300             # value ::  target: 0x15300 CodeAddr: 0x15300
     movq     %rcx,%r9                # reg,reg :: 
     movq     %rdx,%r8                # reg,reg :: 
     movq     %rsi,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x1c968(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c968
     movl     $0x1,%esi               # imm,reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
Addr0x15290:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1c97b(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c97b
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movl     $0x7e2,%r8d             # imm,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%rcx               # reg,reg :: 
     leaq     Var0x1cca0(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1cca0
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1ca08(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1ca08
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     callq    Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50 CALLS 0x4a50
     cmpq     $0x9,%r12               # imm,reg ::  modifies flags!!
     ja       Addr0x15644             # value ::  target: 0x15644 CodeAddr: 0x15644
     leaq     Var0x1cc64(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1cc64
     movslq   (%rdx,%r12,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 86776, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 17256, 'size': 3, 'jumpTable': 'unknown'}
Addr0x15300:
     movq     %rcx,%r8                # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     movq     %rdx,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     Var0x1c974(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c974
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     jmp      Addr0x15290             # value ::  target: 0x15290 CodeAddr: 0x15290
     movq     0x38(%rbx),%r10         # memOffsetBase,reg :: 
     movq     0x30(%rbx),%r9          # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     0x28(%rbx),%r8          # memOffsetBase,reg :: 
     movq     0x20(%rbx),%rcx         # memOffsetBase,reg :: 
     leaq     Var0x1cb78(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cb78
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     %r10,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     movq     %r9,0x18(%rsp)          # reg,memOffsetBase :: 
     movq     %r8,0x10(%rsp)          # reg,memOffsetBase :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1536d:
     movq     0x28(%rsp),%r10         # memOffsetBase,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     pushq    %r10                    # reg :: 
     movq     0x28(%rsp),%r9          # memOffsetBase,reg :: 
     pushq    %r9                     # reg :: 
     movq     0x28(%rsp),%r8          # memOffsetBase,reg :: 
     movq     %r14,%r9                # reg,reg :: 
     pushq    %r8                     # reg :: 
     movq     0x28(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     %r13,%r8                # reg,reg :: 
     pushq    %rcx                    # reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     pushq    %r15                    # reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     addq     $0x30,%rsp              # imm,reg ::  modifies flags!!
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
     movq     0x40(%rbx),%r11         # memOffsetBase,reg :: 
     movq     0x38(%rbx),%r10         # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1cba8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cba8
     movq     0x30(%rbx),%r9          # memOffsetBase,reg :: 
     movq     0x28(%rbx),%r8          # memOffsetBase,reg :: 
     movq     0x20(%rbx),%rcx         # memOffsetBase,reg :: 
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     %r11,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     %r10,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     %r9,0x18(%rsp)          # reg,memOffsetBase :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     movq     %r8,0x10(%rsp)          # reg,memOffsetBase :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
Addr0x15400:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     0x28(%rsp),%r11         # memOffsetBase,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     pushq    %r11                    # reg :: 
     jmp      Addr0x1536d             # value ::  target: 0x1536d CodeAddr: 0x1536d
     movq     (%rbx),%r12             # memBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1c97f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c97f
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     popq     %rbx                    # reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     popq     %rbp                    # reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1c98f(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c98f
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movq     %r13,%r8                # reg,reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     popq     %rbx                    # reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     popq     %rbp                    # reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     (%rbx),%r12             # memBase,reg :: 
     leaq     Var0x1c9a6(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c9a6
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     movq     %r14,%r9                # reg,reg :: 
     movq     %r13,%r8                # reg,reg :: 
     popq     %rbx                    # reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     popq     %rbp                    # reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     jmp      Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     leaq     Var0x1cad8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cad8
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
Addr0x15519:
     pushq    %r15                    # reg :: 
     movq     %r14,%r9                # reg,reg :: 
     movq     %r13,%r8                # reg,reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     popq     %rax                    # reg :: 
     popq     %rdx                    # reg :: 
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
     movq     0x20(%rbx),%rcx         # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     leaq     Var0x1caf8(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1caf8
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     0x8(%rsp),%rcx          # memOffsetBase,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     pushq    %rcx                    # reg :: 
     jmp      Addr0x15519             # value ::  target: 0x15519 CodeAddr: 0x15519
     movq     0x28(%rbx),%r8          # memOffsetBase,reg :: 
     movq     0x20(%rbx),%rcx         # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1cb20(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cb20
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     movq     %r8,0x10(%rsp)          # reg,memOffsetBase :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rax,%rdx               # reg,reg :: 
Addr0x155bb:
     movq     0x18(%rsp),%r8          # memOffsetBase,reg :: 
     movq     %r14,%r9                # reg,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%esi               # imm,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     pushq    %r8                     # reg :: 
     movq     0x18(%rsp),%rcx         # memOffsetBase,reg :: 
     movq     %r13,%r8                # reg,reg :: 
     pushq    %rcx                    # reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     pushq    %r15                    # reg :: 
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     addq     $0x20,%rsp              # imm,reg ::  modifies flags!!
     addq     $0x38,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
     movq     0x30(%rbx),%r9          # memOffsetBase,reg :: 
     movq     0x28(%rbx),%r8          # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     movq     0x20(%rbx),%rcx         # memOffsetBase,reg :: 
     leaq     Var0x1cb48(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cb48
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     %r9,0x18(%rsp)          # reg,memOffsetBase :: 
     movq     %r8,0x10(%rsp)          # reg,memOffsetBase :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     0x18(%rsp),%r9          # memOffsetBase,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     pushq    %r9                     # reg :: 
     jmp      Addr0x155bb             # value ::  target: 0x155bb CodeAddr: 0x155bb
Addr0x15644:
     movq     0x40(%rbx),%r11         # memOffsetBase,reg :: 
     movq     0x38(%rbx),%r10         # memOffsetBase,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1cbe0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cbe0
     movq     0x30(%rbx),%r9          # memOffsetBase,reg :: 
     movq     0x28(%rbx),%r8          # memOffsetBase,reg :: 
     movq     0x20(%rbx),%rcx         # memOffsetBase,reg :: 
     movq     0x18(%rbx),%r15         # memOffsetBase,reg :: 
     movq     %r11,0x28(%rsp)         # reg,memOffsetBase :: 
     movq     0x10(%rbx),%r14         # memOffsetBase,reg :: 
     movq     0x8(%rbx),%r13          # memOffsetBase,reg :: 
     movq     %r10,0x20(%rsp)         # reg,memOffsetBase :: 
     movq     %r9,0x18(%rsp)          # reg,memOffsetBase :: 
     movq     (%rbx),%r12             # memBase,reg :: 
     movq     %r8,0x10(%rsp)          # reg,memOffsetBase :: 
     movq     %rcx,0x8(%rsp)          # reg,memOffsetBase :: 
     jmp      Addr0x15400             # value ::  target: 0x15400 CodeAddr: 0x15400

# ----------- Function 336 ------------ 
#
# startAddr  = 0x156a0
# startindex = 17512
# endAddr    = 0x156bf
# endindex   = 17520
# len        = 32 (0x20)
# secid      = 15
# sec name   = .text
# Falls through to next
#  jumps out!
#
# -------------------------------------------

Addr0x156a0:
     endbr64 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     cmpq     $0x0,(%r8)              # imm,memBase ::  modifies flags!!
     je       Addr0x156bb             # value ::  target: 0x156bb CodeAddr: 0x156bb
Addr0x156b0:
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     cmpq     $0x0,(%r8,%r9,8)        # imm,memBaseIndexScale ::  modifies flags!!
     jne      Addr0x156b0             # value ::  target: 0x156b0 CodeAddr: 0x156b0
Addr0x156bb:
     jmp      Addr0x15250             # value ::  target: 0x15250 CodeAddr: 0x15250

# ----------- Function 337 ------------ 
#
# startAddr  = 0x156c0
# startindex = 17521
# endAddr    = 0x1574e
# endindex   = 17559
# len        = 143 (0x8f)
# len1       = 144 (0x90) to (0x1574f)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x156c0:
     endbr64 
     subq     $0x68,%rsp              # imm,reg ::  modifies flags!!
     movq     %r8,%r11                # reg,reg :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x58(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsp,%r8                # reg,reg :: 
     jmp      Addr0x1570b             # value ::  target: 0x1570b CodeAddr: 0x1570b
Addr0x156e8:
     movl     %eax,%r10d              # reg,reg :: 
     addl     $0x8,%eax               # imm,reg ::  modifies flags!!
     addq     0x10(%r11),%r10         # memOffsetBase,reg ::  modifies flags!!
     movl     %eax,(%r11)             # reg,memBase :: 
     movq     (%r10),%rax             # memBase,reg :: 
     movq     %rax,(%r8,%r9,8)        # reg,memBaseIndexScale :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x15730             # value ::  target: 0x15730 CodeAddr: 0x15730
Addr0x15701:
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     cmpq     $0xa,%r9                # imm,reg ::  modifies flags!!
     je       Addr0x15730             # value ::  target: 0x15730 CodeAddr: 0x15730
Addr0x1570b:
     movl     (%r11),%eax             # memBase,reg :: 
     cmpl     $0x2f,%eax              # imm,reg ::  modifies flags!!
     jbe      Addr0x156e8             # value ::  target: 0x156e8 CodeAddr: 0x156e8
     movq     0x8(%r11),%r10          # memOffsetBase,reg :: 
     leaq     0x8(%r10),%rax          # memOffsetBase,reg :: 
     movq     %rax,0x8(%r11)          # reg,memOffsetBase :: 
     movq     (%r10),%rax             # memBase,reg :: 
     movq     %rax,(%r8,%r9,8)        # reg,memBaseIndexScale :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x15701             # value ::  target: 0x15701 CodeAddr: 0x15701
Addr0x15730:
     callq    Addr0x15250             # value ::  target: 0x15250 CodeAddr: 0x15250 CALLS 0x15250
     movq     0x58(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x1574a             # value ::  target: 0x1574a CodeAddr: 0x1574a
     addq     $0x68,%rsp              # imm,reg ::  modifies flags!!
     retq    
Addr0x1574a:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 338 ------------ 
#
# startAddr  = 0x15750
# startindex = 17561
# endAddr    = 0x15822
# endindex   = 17607
# len        = 211 (0xd3)
# len1       = 222 (0xde) to (0x15823)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15750:
     endbr64 
     pushq    %rbx                    # reg :: 
     movl     $0x20,%r10d             # imm,reg :: 
     subq     $0xb0,%rsp              # imm,reg ::  modifies flags!!
     movq     %r8,0xa0(%rsp)          # reg,memOffsetBase :: 
     leaq     0xc0(%rsp),%r11         # memOffsetBase,reg :: 
     leaq     0x20(%rsp),%r8          # memOffsetBase,reg :: 
     movq     %r9,0xa8(%rsp)          # reg,memOffsetBase :: 
     xorl     %r9d,%r9d               # reg,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x78(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     leaq     0xc0(%rsp),%rax         # memOffsetBase,reg :: 
     movl     $0x20,0x8(%rsp)         # imm,memOffsetBase :: 
     movq     %rax,0x10(%rsp)         # reg,memOffsetBase :: 
     leaq     0x80(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     movq     %rax,%rbx               # reg,reg :: 
     jmp      Addr0x157e0             # value ::  target: 0x157e0 CodeAddr: 0x157e0
Addr0x157c0:
     movl     %r10d,%eax              # reg,reg :: 
     addl     $0x8,%r10d              # imm,reg ::  modifies flags!!
     addq     %rbx,%rax               # reg,reg ::  modifies flags!!
     movq     (%rax),%rax             # memBase,reg :: 
     movq     %rax,(%r8,%r9,8)        # reg,memBaseIndexScale :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x15800             # value ::  target: 0x15800 CodeAddr: 0x15800
Addr0x157d6:
     addq     $0x1,%r9                # imm,reg ::  modifies flags!!
     cmpq     $0xa,%r9                # imm,reg ::  modifies flags!!
     je       Addr0x15800             # value ::  target: 0x15800 CodeAddr: 0x15800
Addr0x157e0:
     cmpl     $0x2f,%r10d             # imm,reg ::  modifies flags!!
     jbe      Addr0x157c0             # value ::  target: 0x157c0 CodeAddr: 0x157c0
     movq     %r11,%rax               # reg,reg :: 
     addq     $0x8,%r11               # imm,reg ::  modifies flags!!
     movq     (%rax),%rax             # memBase,reg :: 
     movq     %rax,(%r8,%r9,8)        # reg,memBaseIndexScale :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x157d6             # value ::  target: 0x157d6 CodeAddr: 0x157d6
Addr0x15800:
     callq    Addr0x15250             # value ::  target: 0x15250 CodeAddr: 0x15250 CALLS 0x15250
     movq     0x78(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x1581e             # value ::  target: 0x1581e CodeAddr: 0x1581e
     addq     $0xb0,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     retq    
Addr0x1581e:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 339 ------------ 
#
# startAddr  = 0x15830
# startindex = 17610
# endAddr    = 0x158b3
# endindex   = 17639
# len        = 132 (0x84)
# len1       = 142 (0x8e) to (0x158b4)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15830:
     endbr64 
     pushq    %rbp                    # reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1c9c2(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c9c2
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     leaq     Var0x1c9d7(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c9d7
     movl     $0x1,%edi               # imm,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1c9ed(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1c9ed
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     leaq     Var0x1bb58(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1bb58
     movl     $0x1,%edi               # imm,reg :: 
     leaq     Var0x1992b(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1992b
     movq     %rax,%rsi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c10              # value ::  target: 0x4c10 CodeAddr: 0x4c10 CALLS 0x4c10
     movq     Var0x23288(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x23288
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     leaq     Var0x1cc20(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cc20
     movl     $0x5,%edx               # imm,reg :: 
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rbp,%rsi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     jmp      Addr0x4a50              # value ::  target: 0x4a50 CodeAddr: 0x4a50

# ----------- Function 340 ------------ 
#
# startAddr  = 0x158c0
# startindex = 17642
# endAddr    = 0x158dd
# endindex   = 17652
# len        = 30 (0x1e)
# len1       = 32 (0x20) to (0x158de)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x158c0:
     endbr64 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x158d7             # value ::  target: 0x158d7 CodeAddr: 0x158d7
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x158d9             # value ::  target: 0x158d9 CodeAddr: 0x158d9
Addr0x158d7:
     popq     %rbx                    # reg :: 
     retq    
Addr0x158d9:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 341 ------------ 
#
# startAddr  = 0x158e0
# startindex = 17654
# endAddr    = 0x15904
# endindex   = 17666
# len        = 37 (0x25)
# len1       = 48 (0x30) to (0x15905)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x158e0:
     endbr64 
     movq     %rdi,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     movq     %rax,%rdi               # reg,reg :: 
     seto     %al                     # reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     js       Addr0x158ff             # value ::  target: 0x158ff CodeAddr: 0x158ff
     movzbl   %al,%eax                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x158ff             # value ::  target: 0x158ff CodeAddr: 0x158ff
     jmp      Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0
Addr0x158ff:
     pushq    %rax                    # reg :: 
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 342 ------------ 
#
# startAddr  = 0x15910
# startindex = 17668
# endAddr    = 0x15915
# endindex   = 17669
# len        = 6 (0x6)
# len1       = 16 (0x10) to (0x15916)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15910:
     endbr64 
     jmp      Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0

# ----------- Function 343 ------------ 
#
# startAddr  = 0x15920
# startindex = 17671
# endAddr    = 0x1595d
# endindex   = 17691
# len        = 62 (0x3e)
# len1       = 64 (0x40) to (0x1595e)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15920:
     endbr64 
     pushq    %rbx                    # reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     jne      Addr0x15932             # value ::  target: 0x15932 CodeAddr: 0x15932
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     jne      Addr0x15950             # value ::  target: 0x15950 CodeAddr: 0x15950
Addr0x15932:
     movq     %rbx,%rsi               # reg,reg :: 
     callq    Addr0x4be0              # value ::  target: 0x4be0 CodeAddr: 0x4be0 CALLS 0x4be0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x15944             # value ::  target: 0x15944 CodeAddr: 0x15944
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x15959             # value ::  target: 0x15959 CodeAddr: 0x15959
Addr0x15944:
     popq     %rbx                    # reg :: 
     retq    
Addr0x15950:
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     retq    
Addr0x15959:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 344 ------------ 
#
# startAddr  = 0x15960
# startindex = 17693
# endAddr    = 0x15984
# endindex   = 17705
# len        = 37 (0x25)
# len1       = 48 (0x30) to (0x15985)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15960:
     endbr64 
     movq     %rsi,%rax               # reg,reg :: 
     mulq     %rdx                    # reg ::  modifies flags!!
     movq     %rax,%rsi               # reg,reg :: 
     seto     %al                     # reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     js       Addr0x1597f             # value ::  target: 0x1597f CodeAddr: 0x1597f
     movzbl   %al,%eax                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x1597f             # value ::  target: 0x1597f CodeAddr: 0x1597f
     jmp      Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920
Addr0x1597f:
     pushq    %rax                    # reg :: 
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 345 ------------ 
#
# startAddr  = 0x15990
# startindex = 17707
# endAddr    = 0x15a13
# endindex   = 17745
# len        = 132 (0x84)
# len1       = 143 (0x8f) to (0x15a14)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15990:
     endbr64 
     movq     %rsi,%r9                # reg,reg :: 
     movq     %rdx,%r8                # reg,reg :: 
     movq     (%rsi),%rsi             # memBase,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x159d0             # value ::  target: 0x159d0 CodeAddr: 0x159d0
     movabsq  $0x5555555555555554,%rax# imm,reg :: 
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %r8                     # reg :: 
     cmpq     %rsi,%rax               # reg,reg ::  modifies flags!!
     jbe      Addr0x159eb             # value ::  target: 0x159eb CodeAddr: 0x159eb
     movq     %rsi,%rax               # reg,reg :: 
     shrq     %rax                    # reg ::  modifies flags!!
     leaq     0x1(%rax,%rsi,1),%rsi   # memOffsetBaseIndexScale,reg :: 
Addr0x159c1:
     movq     %rsi,(%r9)              # reg,memBase :: 
     imulq    %r8,%rsi                # reg,reg ::  modifies flags!!
     jmp      Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920
Addr0x159d0:
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     je       Addr0x159f8             # value ::  target: 0x159f8 CodeAddr: 0x159f8
Addr0x159d5:
     movq     %rsi,%rax               # reg,reg :: 
     mulq     %r8                     # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     movzbl   %dl,%edx                # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x159eb             # value ::  target: 0x159eb CodeAddr: 0x159eb
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x159c1             # value ::  target: 0x159c1 CodeAddr: 0x159c1
Addr0x159eb:
     pushq    %rax                    # reg :: 
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30
Addr0x159f8:
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movl     $0x80,%eax              # imm,reg :: 
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     divq     %r8                     # reg :: 
     cmpq     $0x80,%r8               # imm,reg ::  modifies flags!!
     seta     %cl                     # reg :: 
     leaq     (%rcx,%rax,1),%rsi      # memBaseIndexScale,reg :: 
     jmp      Addr0x159d5             # value ::  target: 0x159d5 CodeAddr: 0x159d5

# ----------- Function 346 ------------ 
#
# startAddr  = 0x15a20
# startindex = 17748
# endAddr    = 0x15a77
# endindex   = 17770
# len        = 88 (0x58)
# len1       = 96 (0x60) to (0x15a78)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15a20:
     endbr64 
     movq     %rsi,%rax               # reg,reg :: 
     movq     (%rsi),%rsi             # memBase,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x15a58             # value ::  target: 0x15a58 CodeAddr: 0x15a58
     movabsq  $0x5555555555555553,%rdx# imm,reg :: 
     cmpq     %rdx,%rsi               # reg,reg ::  modifies flags!!
     ja       Addr0x15a72             # value ::  target: 0x15a72 CodeAddr: 0x15a72
     movq     %rsi,%rdx               # reg,reg :: 
     shrq     %rdx                    # reg ::  modifies flags!!
     leaq     0x1(%rdx,%rsi,1),%rsi   # memOffsetBaseIndexScale,reg :: 
Addr0x15a49:
     movq     %rsi,(%rax)             # reg,memBase :: 
     jmp      Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920
Addr0x15a58:
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     jne      Addr0x15a70             # value ::  target: 0x15a70 CodeAddr: 0x15a70
     movl     $0x80,%esi              # imm,reg :: 
     movq     %rsi,(%rax)             # reg,memBase :: 
     jmp      Addr0x15920             # value ::  target: 0x15920 CodeAddr: 0x15920
Addr0x15a70:
     jns      Addr0x15a49             # value ::  target: 0x15a49 CodeAddr: 0x15a49
Addr0x15a72:
     pushq    %rax                    # reg :: 
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 347 ------------ 
#
# startAddr  = 0x15a80
# startindex = 17772
# endAddr    = 0x15a9c
# endindex   = 17780
# len        = 29 (0x1d)
# len1       = 32 (0x20) to (0x15a9d)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15a80:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     movq     %r12,%rdx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     popq     %r12                    # reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     jmp      Addr0x49e0              # value ::  target: 0x49e0 CodeAddr: 0x49e0

# ----------- Function 348 ------------ 
#
# startAddr  = 0x15aa0
# startindex = 17782
# endAddr    = 0x15ad1
# endindex   = 17797
# len        = 50 (0x32)
# len1       = 61 (0x3d) to (0x15ad2)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15aa0:
     endbr64 
     movq     %rdi,%rax               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     mulq     %rsi                    # reg ::  modifies flags!!
     seto     %dl                     # reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     js       Addr0x15acd             # value ::  target: 0x15acd CodeAddr: 0x15acd
     movzbl   %dl,%edx                # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     jne      Addr0x15acd             # value ::  target: 0x15acd CodeAddr: 0x15acd
     callq    Addr0x4a60              # value ::  target: 0x4a60 CodeAddr: 0x4a60 CALLS 0x4a60
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x15acd             # value ::  target: 0x15acd CodeAddr: 0x15acd
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0x15acd:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 349 ------------ 
#
# startAddr  = 0x15ae0
# startindex = 17800
# endAddr    = 0x15b0d
# endindex   = 17814
# len        = 46 (0x2e)
# len1       = 48 (0x30) to (0x15b0e)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15ae0:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     movq     %rsi,%rdi               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x158c0             # value ::  target: 0x158c0 CodeAddr: 0x158c0 CALLS 0x158c0
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r12,%rdx               # reg,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0

# ----------- Function 350 ------------ 
#
# startAddr  = 0x15b10
# startindex = 17816
# endAddr    = 0x15b26
# endindex   = 17823
# len        = 23 (0x17)
# len1       = 32 (0x20) to (0x15b27)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x15b10:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     leaq     0x1(%rax),%rsi          # memOffsetBase,reg :: 
     jmp      Addr0x15ae0             # value ::  target: 0x15ae0 CodeAddr: 0x15ae0

# ----------- Function 351 ------------ 
#
# startAddr  = 0x15b30
# startindex = 17825
# endAddr    = 0x15b6a
# endindex   = 17839
# len        = 59 (0x3b)
# len1       = 64 (0x40) to (0x15b6b)
# secid      = 15
# sec name   = .text
#
# -------------------------------------------

Addr0x15b30:
     endbr64 
     pushq    %rax                    # reg :: 
     popq     %rax                    # reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1cccf(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cccf
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movl     Var0x231f8(%rip),%edi   # memOffsetBase,reg ::  DataAddr: 0x231f8
     leaq     Var0x1be9c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1be9c
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movq     %rax,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750

# ----------- Function 352 ------------ 
#
# startAddr  = 0x15b70
# startindex = 17841
# endAddr    = 0x15c6f
# endindex   = 17916
# len        = 256 (0x100)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0x15b70:
     endbr64 
     pushq    %r15                    # reg :: 
     movq     %rdi,%r15               # reg,reg :: 
     pushq    %r14                    # reg :: 
     movq     %rcx,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rdx,%r13               # reg,reg :: 
     movl     %esi,%edx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     pushq    %r12                    # reg :: 
     movq     %r9,%r12                # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     %rsp,%rcx               # reg,reg :: 
     movl     0x50(%rsp),%ebp         # memOffsetBase,reg :: 
     callq    Addr0x16340             # value ::  target: 0x16340 CodeAddr: 0x16340 CALLS 0x16340
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x15c40             # value ::  target: 0x15c40 CodeAddr: 0x15c40
     movq     (%rsp),%rbx             # memBase,reg :: 
     cmpq     %r13,%rbx               # reg,reg ::  modifies flags!!
     jb       Addr0x15bc4             # value ::  target: 0x15bc4 CodeAddr: 0x15bc4
     cmpq     %r14,%rbx               # reg,reg ::  modifies flags!!
     jbe      Addr0x15c1a             # value ::  target: 0x15c1a CodeAddr: 0x15c1a
Addr0x15bc4:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpq     $0x40000000,%rbx        # imm,reg ::  modifies flags!!
     movq     %rax,%r13               # reg,reg :: 
     sbbl     %eax,%eax               # reg,reg ::  modifies flags!!
     andl     $0xffffffd7,%eax        # imm,reg ::  modifies flags!!
     addl     $0x4b,%eax              # imm,reg ::  modifies flags!!
     movl     %eax,0x0(%r13)          # reg,memOffsetBase :: 
Addr0x15bdf:
     movq     %r15,%rdi               # reg,reg :: 
     callq    Addr0x15040             # value ::  target: 0x15040 CodeAddr: 0x15040 CALLS 0x15040
     movl     0x0(%r13),%esi          # memOffsetBase,reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     leaq     Var0x1998c(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1998c
     movq     %rax,%r8                # reg,reg :: 
     movl     $0x0,%eax               # imm,reg :: 
     cmpl     $0x16,%esi              # imm,reg ::  modifies flags!!
     cmovel   %eax,%esi               # reg,reg :: 
     testl    %ebp,%ebp               # reg,reg ::  modifies flags!!
     movl     $0x1,%eax               # imm,reg :: 
     cmovel   %eax,%ebp               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     %ebp,%edi               # reg,reg :: 
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     movq     (%rsp),%rbx             # memBase,reg :: 
Addr0x15c1a:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x15c6b             # value ::  target: 0x15c6b CodeAddr: 0x15c6b
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %rbx,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x15c40:
     movl     %eax,%ebx               # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %rax,%r13               # reg,reg :: 
     cmpl     $0x1,%ebx               # imm,reg ::  modifies flags!!
     je       Addr0x15c60             # value ::  target: 0x15c60 CodeAddr: 0x15c60
     cmpl     $0x3,%ebx               # imm,reg ::  modifies flags!!
     jne      Addr0x15bdf             # value ::  target: 0x15bdf CodeAddr: 0x15bdf
     movl     $0x0,(%rax)             # imm,memBase :: 
     jmp      Addr0x15bdf             # value ::  target: 0x15bdf CodeAddr: 0x15bdf
Addr0x15c60:
     movl     $0x4b,(%rax)            # imm,memBase :: 
     jmp      Addr0x15bdf             # value ::  target: 0x15bdf CodeAddr: 0x15bdf
Addr0x15c6b:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 353 ------------ 
#
# startAddr  = 0x15c70
# startindex = 17917
# endAddr    = 0x15c94
# endindex   = 17927
# len        = 37 (0x25)
# len1       = 47 (0x2f) to (0x15c95)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15c70:
     endbr64 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     pushq    %r9                     # reg :: 
     movq     %r8,%r9                 # reg,reg :: 
     movq     %rcx,%r8                # reg,reg :: 
     movq     %rdx,%rcx               # reg,reg :: 
     movq     %rsi,%rdx               # reg,reg :: 
     movl     $0xa,%esi               # imm,reg :: 
     callq    Addr0x15b70             # value ::  target: 0x15b70 CodeAddr: 0x15b70 CALLS 0x15b70
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     retq    

# ----------- Function 354 ------------ 
#
# startAddr  = 0x15ca0
# startindex = 17930
# endAddr    = 0x15cce
# endindex   = 17945
# len        = 47 (0x2f)
# len1       = 48 (0x30) to (0x15ccf)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15ca0:
     endbr64 
     pushq    %r12                    # reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x4a00              # value ::  target: 0x4a00 CodeAddr: 0x4a00 CALLS 0x4a00
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x15cc0             # value ::  target: 0x15cc0 CodeAddr: 0x15cc0
Addr0x15cb7:
     movq     %r12,%rax               # reg,reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x15cc0:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpl     $0xc,(%rax)             # imm,memBase ::  modifies flags!!
     jne      Addr0x15cb7             # value ::  target: 0x15cb7 CodeAddr: 0x15cb7
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 355 ------------ 
#
# startAddr  = 0x15cd0
# startindex = 17947
# endAddr    = 0x15da0
# endindex   = 18003
# len        = 209 (0xd1)
# len1       = 219 (0xdb) to (0x15da1)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x15cd0:
     endbr64 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     movabsq  $0x1000401001,%r13      # imm,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     pushq    %rbx                    # reg :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movq     $0x22,(%rsp)            # imm,memBase :: 
     movq     %rsp,%r12               # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %rax,%rbx               # reg,reg :: 
Addr0x15d10:
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     callq    Addr0x15a20             # value ::  target: 0x15a20 CodeAddr: 0x15a20 CALLS 0x15a20
     movq     (%rsp),%rsi             # memBase,reg :: 
     movq     %rax,%rdi               # reg,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     leaq     -0x2(%rax,%rsi,1),%r14  # memOffsetBaseIndexScale,reg :: 
     subq     $0x1,%rsi               # imm,reg ::  modifies flags!!
     movb     $0x0,(%r14)             # imm,memBase :: 
     movl     $0x0,(%rbx)             # imm,memBase :: 
     callq    Addr0x4ce0              # value ::  target: 0x4ce0 CodeAddr: 0x4ce0 CALLS 0x4ce0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x15d70             # value ::  target: 0x15d70 CodeAddr: 0x15d70
     cmpb     $0x0,(%r14)             # imm,memBase ::  modifies flags!!
     jne      Addr0x15d10             # value ::  target: 0x15d10 CodeAddr: 0x15d10
Addr0x15d47:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x15d9c             # value ::  target: 0x15d9c CodeAddr: 0x15d9c
     addq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     %rbp,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x15d70:
     movl     (%rbx),%r14d            # memBase,reg :: 
     cmpl     $0x24,%r14d             # imm,reg ::  modifies flags!!
     jbe      Addr0x15d90             # value ::  target: 0x15d90 CodeAddr: 0x15d90
Addr0x15d79:
     movq     %rbp,%rdi               # reg,reg :: 
     xorl     %ebp,%ebp               # reg,reg ::  modifies flags!!
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     movl     %r14d,(%rbx)            # reg,memBase :: 
     jmp      Addr0x15d47             # value ::  target: 0x15d47 CodeAddr: 0x15d47
Addr0x15d90:
     btq      %r14,%r13               # reg,reg ::  modifies flags!!
     jb       Addr0x15d10             # value ::  target: 0x15d10 CodeAddr: 0x15d10
     jmp      Addr0x15d79             # value ::  target: 0x15d79 CodeAddr: 0x15d79
Addr0x15d9c:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 356 ------------ 
#
# startAddr  = 0x15db0
# startindex = 18006
# endAddr    = 0x16264
# endindex   = 18309
# len        = 1205 (0x4b5)
# len1       = 1215 (0x4bf) to (0x16265)
# secid      = 15
# sec name   = .text
#  Has True Return
#  has jump ptr!
#
# -------------------------------------------

Addr0x15db0:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x24,%edx              # imm,reg ::  modifies flags!!
     ja       Addr0x161e8             # value ::  target: 0x161e8 CodeAddr: 0x161e8
     movq     %rsi,%rbp               # reg,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     leaq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     movl     %edx,0x8(%rsp)          # reg,memOffsetBase :: 
     cmoveq   %rax,%rbp               # reg,reg :: 
     movq     %rcx,%rbx               # reg,reg :: 
     movq     %r8,%r15                # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x0,(%rax)             # imm,memBase :: 
     movq     %rax,%r13               # reg,reg :: 
     movzbl   (%r12),%r14d            # memBase,reg :: 
     callq    Addr0x4d80              # value ::  target: 0x4d80 CodeAddr: 0x4d80 CALLS 0x4d80
     movl     0x8(%rsp),%edx          # memOffsetBase,reg :: 
     movq     (%rax),%rsi             # memBase,reg :: 
     movq     %r12,%rax               # reg,reg :: 
     jmp      Addr0x15e29             # value ::  target: 0x15e29 CodeAddr: 0x15e29
Addr0x15e20:
     movzbl   0x1(%rax),%r14d         # memOffsetBase,reg :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
Addr0x15e29:
     movzbl   %r14b,%ecx              # reg,reg :: 
     testb    $0x20,0x1(%rsi,%rcx,2)  # imm,memOffsetBaseIndexScale ::  modifies flags!!
     jne      Addr0x15e20             # value ::  target: 0x15e20 CodeAddr: 0x15e20
     cmpb     $0x2d,%r14b             # imm,reg ::  modifies flags!!
     je       Addr0x15eab             # value ::  target: 0x15eab CodeAddr: 0x15eab
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4c90              # value ::  target: 0x4c90 CodeAddr: 0x4c90 CALLS 0x4c90
     movq     0x0(%rbp),%r14          # memOffsetBase,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     je       Addr0x15eb8             # value ::  target: 0x15eb8 CodeAddr: 0x15eb8
     movl     0x0(%r13),%eax          # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x15ea0             # value ::  target: 0x15ea0 CodeAddr: 0x15ea0
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
Addr0x15e5c:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x15e6e             # value ::  target: 0x15e6e CodeAddr: 0x15e6e
     movzbl   (%r14),%r13d            # memBase,reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     jne      Addr0x15f80             # value ::  target: 0x15f80 CodeAddr: 0x15f80
Addr0x15e6e:
     movq     %rdx,(%rbx)             # reg,memBase :: 
Addr0x15e71:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x16207             # value ::  target: 0x16207 CodeAddr: 0x16207
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x15ea0:
     movl     $0x1,%r12d              # imm,reg :: 
     cmpl     $0x22,%eax              # imm,reg ::  modifies flags!!
     je       Addr0x15e5c             # value ::  target: 0x15e5c CodeAddr: 0x15e5c
Addr0x15eab:
     movl     $0x4,%r12d              # imm,reg :: 
     jmp      Addr0x15e71             # value ::  target: 0x15e71 CodeAddr: 0x15e71
Addr0x15eb8:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x15eab             # value ::  target: 0x15eab CodeAddr: 0x15eab
     movzbl   (%r12),%r13d            # memBase,reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     je       Addr0x15eab             # value ::  target: 0x15eab CodeAddr: 0x15eab
     movsbl   %r13b,%esi              # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movl     $0x1,%edx               # imm,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x15eab             # value ::  target: 0x15eab CodeAddr: 0x15eab
Addr0x15ee0:
     leal     -0x45(%r13),%eax        # memOffsetBase,reg :: 
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x15efc             # value ::  target: 0x15efc CodeAddr: 0x15efc
     leaq     Var0x1cd18(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1cd18
     movzbl   %al,%eax                # reg,reg :: 
     movslq   (%rcx,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 89849, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18099, 'size': 3, 'jumpTable': 'unknown'}
Addr0x15efc:
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x15f06:
     leal     -0x42(%r13),%eax        # memOffsetBase,reg :: 
     cmpb     $0x35,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x15f9f             # value ::  target: 0x15f9f CodeAddr: 0x15f9f
     leaq     Var0x1cdd8(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1cdd8
     movzbl   %al,%eax                # reg,reg :: 
     movslq   (%rdi,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rdi,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 89891, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18109, 'size': 3, 'jumpTable': 'unknown'}
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x15efc             # value ::  target: 0x15efc CodeAddr: 0x15efc
     movzbl   0x1(%r14),%eax          # memOffsetBase,reg :: 
     cmpb     $0x44,%al               # imm,reg ::  modifies flags!!
     je       Addr0x161d9             # value ::  target: 0x161d9 CodeAddr: 0x161d9
     cmpb     $0x69,%al               # imm,reg ::  modifies flags!!
     je       Addr0x16147             # value ::  target: 0x16147 CodeAddr: 0x16147
     cmpb     $0x42,%al               # imm,reg ::  modifies flags!!
     je       Addr0x161d9             # value ::  target: 0x161d9 CodeAddr: 0x161d9
     leal     -0x45(%r13),%eax        # memOffsetBase,reg :: 
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x15f9f             # value ::  target: 0x15f9f CodeAddr: 0x15f9f
     leaq     Var0x1ceb0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1ceb0
     movzbl   %al,%eax                # reg,reg :: 
     movslq   (%rcx,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 89976, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18131, 'size': 3, 'jumpTable': 'unknown'}
Addr0x15f80:
     movsbl   %r13b,%esi              # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x15ee0             # value ::  target: 0x15ee0 CodeAddr: 0x15ee0
Addr0x15f9f:
     movq     %rdx,(%rbx)             # reg,memBase :: 
     orl      $0x2,%r12d              # imm,reg ::  modifies flags!!
     jmp      Addr0x15e71             # value ::  target: 0x15e71 CodeAddr: 0x15e71
     movl     $0x1,%ecx               # imm,reg :: 
Addr0x15fb0:
     movq     %rdx,%rax               # reg,reg :: 
     shrq     $0x37,%rax              # imm,reg ::  modifies flags!!
     jne      Addr0x1609f             # value ::  target: 0x1609f CodeAddr: 0x1609f
     shlq     $0x9,%rdx               # imm,reg ::  modifies flags!!
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x15fd0:
     movl     $0x7,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x15fe0:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1620c             # value ::  target: 0x1620c CodeAddr: 0x1620c
     movq     %rax,%rdx               # reg,reg :: 
Addr0x15fef:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x15fe0             # value ::  target: 0x15fe0 CodeAddr: 0x15fe0
Addr0x15ff4:
     orl      %r8d,%r12d              # reg,reg ::  modifies flags!!
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16006:
     movl     $0x8,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x16010:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x16256             # value ::  target: 0x16256 CodeAddr: 0x16256
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1601f:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x16010             # value ::  target: 0x16010 CodeAddr: 0x16010
     jmp      Addr0x15ff4             # value ::  target: 0x15ff4 CodeAddr: 0x15ff4
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16030:
     movl     $0x4,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x16040:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x16247             # value ::  target: 0x16247 CodeAddr: 0x16247
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1604f:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x16040             # value ::  target: 0x16040 CodeAddr: 0x16040
     jmp      Addr0x15ff4             # value ::  target: 0x15ff4 CodeAddr: 0x15ff4
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16060:
     movl     $0x5,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x16070:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x16238             # value ::  target: 0x16238 CodeAddr: 0x16238
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1607f:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x16070             # value ::  target: 0x16070 CodeAddr: 0x16070
     jmp      Addr0x15ff4             # value ::  target: 0x15ff4 CodeAddr: 0x15ff4
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16093:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jno      Addr0x16136             # value ::  target: 0x16136 CodeAddr: 0x16136
Addr0x1609f:
     movl     $0x1,%r12d              # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movl     $0x1,%ecx               # imm,reg :: 
Addr0x160b0:
     addq     %r14,%rcx               # reg,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     orl      $0x2,%eax               # imm,reg ::  modifies flags!!
     movq     %rcx,0x0(%rbp)          # reg,memOffsetBase :: 
     cmpb     $0x0,(%rcx)             # imm,memBase ::  modifies flags!!
     cmovnel  %eax,%r12d              # reg,reg :: 
     jmp      Addr0x15e6e             # value ::  target: 0x15e6e CodeAddr: 0x15e6e
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x160d3:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1621b             # value ::  target: 0x1621b CodeAddr: 0x1621b
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1621b             # value ::  target: 0x1621b CodeAddr: 0x1621b
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1621b             # value ::  target: 0x1621b CodeAddr: 0x1621b
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x160f6:
     orl      %eax,%r12d              # reg,reg ::  modifies flags!!
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16105:
     movl     $0x6,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x16110:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x16229             # value ::  target: 0x16229 CodeAddr: 0x16229
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1611f:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x16110             # value ::  target: 0x16110 CodeAddr: 0x16110
     jmp      Addr0x15ff4             # value ::  target: 0x15ff4 CodeAddr: 0x15ff4
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16133:
     movq     %rdx,%rax               # reg,reg :: 
Addr0x16136:
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1609f             # value ::  target: 0x1609f CodeAddr: 0x1609f
     movq     %rax,%rdx               # reg,reg :: 
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
Addr0x16147:
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     cmpb     $0x42,0x2(%r14)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0x400,%esi             # imm,reg :: 
     sete     %cl                     # reg :: 
     leal     0x1(%rcx,%rcx,1),%ecx   # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x15f06             # value ::  target: 0x15f06 CodeAddr: 0x15f06
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16030             # value ::  target: 0x16030 CodeAddr: 0x16030
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16093             # value ::  target: 0x16093 CodeAddr: 0x16093
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16133             # value ::  target: 0x16133 CodeAddr: 0x16133
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x160d3             # value ::  target: 0x160d3 CodeAddr: 0x160d3
     movq     %rdx,%rax               # reg,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     shrq     $0x36,%rax              # imm,reg ::  modifies flags!!
     jne      Addr0x1609f             # value ::  target: 0x1609f CodeAddr: 0x1609f
     shlq     $0xa,%rdx               # imm,reg ::  modifies flags!!
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movslq   %ecx,%rcx               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     js       Addr0x1609f             # value ::  target: 0x1609f CodeAddr: 0x1609f
     addq     %rdx,%rdx               # reg,reg ::  modifies flags!!
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x160b0             # value ::  target: 0x160b0 CodeAddr: 0x160b0
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x15fb0             # value ::  target: 0x15fb0 CodeAddr: 0x15fb0
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x15fd0             # value ::  target: 0x15fd0 CodeAddr: 0x15fd0
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16006             # value ::  target: 0x16006 CodeAddr: 0x16006
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16060             # value ::  target: 0x16060 CodeAddr: 0x16060
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16105             # value ::  target: 0x16105 CodeAddr: 0x16105
Addr0x161d9:
     movl     $0x2,%ecx               # imm,reg :: 
     movl     $0x3e8,%esi             # imm,reg :: 
     jmp      Addr0x15f06             # value ::  target: 0x15f06 CodeAddr: 0x15f06
Addr0x161e8:
     leaq     Var0x1cf70(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1cf70
     movl     $0x60,%edx              # imm,reg :: 
     leaq     Var0x1cce0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cce0
     leaq     Var0x1ccf0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1ccf0
     callq    Addr0x49b0              # value ::  target: 0x49b0 CodeAddr: 0x49b0 CALLS 0x49b0
Addr0x16207:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x1620c:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x15fef             # value ::  target: 0x15fef CodeAddr: 0x15fef
Addr0x1621b:
     movl     $0x1,%eax               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x160f6             # value ::  target: 0x160f6 CodeAddr: 0x160f6
Addr0x16229:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x1611f             # value ::  target: 0x1611f CodeAddr: 0x1611f
Addr0x16238:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x1607f             # value ::  target: 0x1607f CodeAddr: 0x1607f
Addr0x16247:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x1604f             # value ::  target: 0x1604f CodeAddr: 0x1604f
Addr0x16256:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x1601f             # value ::  target: 0x1601f CodeAddr: 0x1601f

# ----------- Function 357 ------------ 
#
# startAddr  = 0x16270
# startindex = 18312
# endAddr    = 0x16336
# endindex   = 18363
# len        = 199 (0xc7)
# len1       = 208 (0xd0) to (0x16337)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x16270:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %r8,%rbx                # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     movl     Var0x231f8(%rip),%ebp   # memOffsetBase,reg ::  DataAddr: 0x231f8
     cmpl     $0x3,%edi               # imm,reg ::  modifies flags!!
     ja       Addr0x162f8             # value ::  target: 0x162f8 CodeAddr: 0x162f8
     cmpl     $0x1,%edi               # imm,reg ::  modifies flags!!
     ja       Addr0x16329             # value ::  target: 0x16329 CodeAddr: 0x16329
     jne      Addr0x16332             # value ::  target: 0x16332 CodeAddr: 0x16332
     leaq     Var0x1cfa5(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x1cfa5
Addr0x162b2:
     movslq   %esi,%rax               # reg,reg :: 
     testl    %esi,%esi               # reg,reg ::  modifies flags!!
     js       Addr0x1630f             # value ::  target: 0x1630f CodeAddr: 0x1630f
Addr0x162b9:
     shlq     $0x5,%rax               # imm,reg ::  modifies flags!!
     leaq     Var0x1cfdd(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x1cfdd
     movq     (%rcx,%rax,1),%r13      # memBaseIndexScale,reg :: 
Addr0x162c8:
     movq     %r9,%rsi                # reg,reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     %rbx,%r9                # reg,reg :: 
     movq     %r13,%r8                # reg,reg :: 
     movq     %r12,%rcx               # reg,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     %ebp,%edi               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4c60              # value ::  target: 0x4c60 CodeAddr: 0x4c60 CALLS 0x4c60
     callq    Addr0x4750              # value ::  target: 0x4750 CodeAddr: 0x4750 CALLS 0x4750
Addr0x162f8:
     cmpl     $0x4,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x4de6              # value ::  target: 0x4de6 CodeAddr: 0x4de6
     leaq     Var0x1cfc2(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x1cfc2
     movslq   %esi,%rax               # reg,reg :: 
     testl    %esi,%esi               # reg,reg ::  modifies flags!!
     jns      Addr0x162b9             # value ::  target: 0x162b9 CodeAddr: 0x162b9
Addr0x1630f:
     leaq     Var0x1cfdd(%rip),%r12   # memOffsetBase,reg ::  DataAddr: 0x1cfdd
     movb     %dl,0x6(%rsp)           # reg,memOffsetBase :: 
     leaq     0x6(%rsp),%r13          # memOffsetBase,reg :: 
     movb     $0x0,0x7(%rsp)          # imm,memOffsetBase :: 
     subq     %rax,%r12               # reg,reg ::  modifies flags!!
     jmp      Addr0x162c8             # value ::  target: 0x162c8 CodeAddr: 0x162c8
Addr0x16329:
     leaq     Var0x1cf80(%rip),%r9    # memOffsetBase,reg ::  DataAddr: 0x1cf80
     jmp      Addr0x162b2             # value ::  target: 0x162b2 CodeAddr: 0x162b2
Addr0x16332:
     jmp      Addr0x4de6              # value ::  target: 0x4de6 CodeAddr: 0x4de6

# ----------- Function 358 ------------ 
#
# startAddr  = 0x16340
# startindex = 18365
# endAddr    = 0x167f4
# endindex   = 18669
# len        = 1205 (0x4b5)
# len1       = 1215 (0x4bf) to (0x167f5)
# secid      = 15
# sec name   = .text
#  Has True Return
#  has jump ptr!
#
# -------------------------------------------

Addr0x16340:
     endbr64 
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x18(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x24,%edx              # imm,reg ::  modifies flags!!
     ja       Addr0x16778             # value ::  target: 0x16778 CodeAddr: 0x16778
     movq     %rsi,%rbp               # reg,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     leaq     0x10(%rsp),%rax         # memOffsetBase,reg :: 
     movq     %rdi,%r12               # reg,reg :: 
     movl     %edx,0x8(%rsp)          # reg,memOffsetBase :: 
     cmoveq   %rax,%rbp               # reg,reg :: 
     movq     %rcx,%rbx               # reg,reg :: 
     movq     %r8,%r15                # reg,reg :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x0,(%rax)             # imm,memBase :: 
     movq     %rax,%r13               # reg,reg :: 
     movzbl   (%r12),%r14d            # memBase,reg :: 
     callq    Addr0x4d80              # value ::  target: 0x4d80 CodeAddr: 0x4d80 CALLS 0x4d80
     movl     0x8(%rsp),%edx          # memOffsetBase,reg :: 
     movq     (%rax),%rsi             # memBase,reg :: 
     movq     %r12,%rax               # reg,reg :: 
     jmp      Addr0x163b9             # value ::  target: 0x163b9 CodeAddr: 0x163b9
Addr0x163b0:
     movzbl   0x1(%rax),%r14d         # memOffsetBase,reg :: 
     addq     $0x1,%rax               # imm,reg ::  modifies flags!!
Addr0x163b9:
     movzbl   %r14b,%ecx              # reg,reg :: 
     testb    $0x20,0x1(%rsi,%rcx,2)  # imm,memOffsetBaseIndexScale ::  modifies flags!!
     jne      Addr0x163b0             # value ::  target: 0x163b0 CodeAddr: 0x163b0
     cmpb     $0x2d,%r14b             # imm,reg ::  modifies flags!!
     je       Addr0x1643b             # value ::  target: 0x1643b CodeAddr: 0x1643b
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x49c0              # value ::  target: 0x49c0 CodeAddr: 0x49c0 CALLS 0x49c0
     movq     0x0(%rbp),%r14          # memOffsetBase,reg :: 
     movq     %rax,%rdx               # reg,reg :: 
     cmpq     %r12,%r14               # reg,reg ::  modifies flags!!
     je       Addr0x16448             # value ::  target: 0x16448 CodeAddr: 0x16448
     movl     0x0(%r13),%eax          # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x16430             # value ::  target: 0x16430 CodeAddr: 0x16430
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
Addr0x163ee:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x16400             # value ::  target: 0x16400 CodeAddr: 0x16400
     movzbl   (%r14),%r13d            # memBase,reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     jne      Addr0x16510             # value ::  target: 0x16510 CodeAddr: 0x16510
Addr0x16400:
     movq     %rdx,(%rbx)             # reg,memBase :: 
Addr0x16403:
     movq     0x18(%rsp),%rax         # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x16797             # value ::  target: 0x16797 CodeAddr: 0x16797
     addq     $0x28,%rsp              # imm,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x16430:
     movl     $0x1,%r12d              # imm,reg :: 
     cmpl     $0x22,%eax              # imm,reg ::  modifies flags!!
     je       Addr0x163ee             # value ::  target: 0x163ee CodeAddr: 0x163ee
Addr0x1643b:
     movl     $0x4,%r12d              # imm,reg :: 
     jmp      Addr0x16403             # value ::  target: 0x16403 CodeAddr: 0x16403
Addr0x16448:
     testq    %r15,%r15               # reg,reg ::  modifies flags!!
     je       Addr0x1643b             # value ::  target: 0x1643b CodeAddr: 0x1643b
     movzbl   (%r12),%r13d            # memBase,reg :: 
     testb    %r13b,%r13b             # reg,reg ::  modifies flags!!
     je       Addr0x1643b             # value ::  target: 0x1643b CodeAddr: 0x1643b
     movsbl   %r13b,%esi              # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movl     $0x1,%edx               # imm,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1643b             # value ::  target: 0x1643b CodeAddr: 0x1643b
Addr0x16470:
     leal     -0x45(%r13),%eax        # memOffsetBase,reg :: 
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x1648c             # value ::  target: 0x1648c CodeAddr: 0x1648c
     leaq     Var0x1cfe0(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1cfe0
     movzbl   %al,%eax                # reg,reg :: 
     movslq   (%rcx,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 91273, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18459, 'size': 3, 'jumpTable': 'unknown'}
Addr0x1648c:
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16496:
     leal     -0x42(%r13),%eax        # memOffsetBase,reg :: 
     cmpb     $0x35,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x1652f             # value ::  target: 0x1652f CodeAddr: 0x1652f
     leaq     Var0x1d0a0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1d0a0
     movzbl   %al,%eax                # reg,reg :: 
     movslq   (%rdi,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rdi,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 91315, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18469, 'size': 3, 'jumpTable': 'unknown'}
     movl     $0x30,%esi              # imm,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1648c             # value ::  target: 0x1648c CodeAddr: 0x1648c
     movzbl   0x1(%r14),%eax          # memOffsetBase,reg :: 
     cmpb     $0x44,%al               # imm,reg ::  modifies flags!!
     je       Addr0x16769             # value ::  target: 0x16769 CodeAddr: 0x16769
     cmpb     $0x69,%al               # imm,reg ::  modifies flags!!
     je       Addr0x166d7             # value ::  target: 0x166d7 CodeAddr: 0x166d7
     cmpb     $0x42,%al               # imm,reg ::  modifies flags!!
     je       Addr0x16769             # value ::  target: 0x16769 CodeAddr: 0x16769
     leal     -0x45(%r13),%eax        # memOffsetBase,reg :: 
     cmpb     $0x2f,%al               # imm,reg ::  modifies flags!!
     ja       Addr0x1652f             # value ::  target: 0x1652f CodeAddr: 0x1652f
     leaq     Var0x1d178(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1d178
     movzbl   %al,%eax                # reg,reg :: 
     movslq   (%rcx,%rax,4),%rax      # memBaseIndexScale,reg :: 
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     notrack jmp *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 91400, 'op': 'jmpq', 'prefix': 'notrack', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18491, 'size': 3, 'jumpTable': 'unknown'}
Addr0x16510:
     movsbl   %r13b,%esi              # reg,reg :: 
     movq     %r15,%rdi               # reg,reg :: 
     movq     %rdx,0x8(%rsp)          # reg,memOffsetBase :: 
     callq    Addr0x4910              # value ::  target: 0x4910 CodeAddr: 0x4910 CALLS 0x4910
     movq     0x8(%rsp),%rdx          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x16470             # value ::  target: 0x16470 CodeAddr: 0x16470
Addr0x1652f:
     movq     %rdx,(%rbx)             # reg,memBase :: 
     orl      $0x2,%r12d              # imm,reg ::  modifies flags!!
     jmp      Addr0x16403             # value ::  target: 0x16403 CodeAddr: 0x16403
     movl     $0x1,%ecx               # imm,reg :: 
Addr0x16540:
     movq     %rdx,%rax               # reg,reg :: 
     shrq     $0x37,%rax              # imm,reg ::  modifies flags!!
     jne      Addr0x1662f             # value ::  target: 0x1662f CodeAddr: 0x1662f
     shlq     $0x9,%rdx               # imm,reg ::  modifies flags!!
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16560:
     movl     $0x7,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x16570:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1679c             # value ::  target: 0x1679c CodeAddr: 0x1679c
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1657f:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x16570             # value ::  target: 0x16570 CodeAddr: 0x16570
Addr0x16584:
     orl      %r8d,%r12d              # reg,reg ::  modifies flags!!
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16596:
     movl     $0x8,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x165a0:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167e6             # value ::  target: 0x167e6 CodeAddr: 0x167e6
     movq     %rax,%rdx               # reg,reg :: 
Addr0x165af:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x165a0             # value ::  target: 0x165a0 CodeAddr: 0x165a0
     jmp      Addr0x16584             # value ::  target: 0x16584 CodeAddr: 0x16584
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x165c0:
     movl     $0x4,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x165d0:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167d7             # value ::  target: 0x167d7 CodeAddr: 0x167d7
     movq     %rax,%rdx               # reg,reg :: 
Addr0x165df:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x165d0             # value ::  target: 0x165d0 CodeAddr: 0x165d0
     jmp      Addr0x16584             # value ::  target: 0x16584 CodeAddr: 0x16584
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x165f0:
     movl     $0x5,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x16600:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167c8             # value ::  target: 0x167c8 CodeAddr: 0x167c8
     movq     %rax,%rdx               # reg,reg :: 
Addr0x1660f:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x16600             # value ::  target: 0x16600 CodeAddr: 0x16600
     jmp      Addr0x16584             # value ::  target: 0x16584 CodeAddr: 0x16584
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16623:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jno      Addr0x166c6             # value ::  target: 0x166c6 CodeAddr: 0x166c6
Addr0x1662f:
     movl     $0x1,%r12d              # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movl     $0x1,%ecx               # imm,reg :: 
Addr0x16640:
     addq     %r14,%rcx               # reg,reg ::  modifies flags!!
     movl     %r12d,%eax              # reg,reg :: 
     orl      $0x2,%eax               # imm,reg ::  modifies flags!!
     movq     %rcx,0x0(%rbp)          # reg,memOffsetBase :: 
     cmpb     $0x0,(%rcx)             # imm,memBase ::  modifies flags!!
     cmovnel  %eax,%r12d              # reg,reg :: 
     jmp      Addr0x16400             # value ::  target: 0x16400 CodeAddr: 0x16400
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16663:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167ab             # value ::  target: 0x167ab CodeAddr: 0x167ab
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167ab             # value ::  target: 0x167ab CodeAddr: 0x167ab
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167ab             # value ::  target: 0x167ab CodeAddr: 0x167ab
     movq     %rax,%rdx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x16686:
     orl      %eax,%r12d              # reg,reg ::  modifies flags!!
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x16695:
     movl     $0x6,%edi               # imm,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
Addr0x166a0:
     movq     %rdx,%rax               # reg,reg :: 
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x167b9             # value ::  target: 0x167b9 CodeAddr: 0x167b9
     movq     %rax,%rdx               # reg,reg :: 
Addr0x166af:
     subl     $0x1,%edi               # imm,reg ::  modifies flags!!
     jne      Addr0x166a0             # value ::  target: 0x166a0 CodeAddr: 0x166a0
     jmp      Addr0x16584             # value ::  target: 0x16584 CodeAddr: 0x16584
     movl     $0x1,%ecx               # imm,reg :: 
     movl     $0x400,%esi             # imm,reg :: 
Addr0x166c3:
     movq     %rdx,%rax               # reg,reg :: 
Addr0x166c6:
     mulq     %rsi                    # reg ::  modifies flags!!
     jo       Addr0x1662f             # value ::  target: 0x1662f CodeAddr: 0x1662f
     movq     %rax,%rdx               # reg,reg :: 
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
Addr0x166d7:
     xorl     %ecx,%ecx               # reg,reg ::  modifies flags!!
     cmpb     $0x42,0x2(%r14)         # imm,memOffsetBase ::  modifies flags!!
     movl     $0x400,%esi             # imm,reg :: 
     sete     %cl                     # reg :: 
     leal     0x1(%rcx,%rcx,1),%ecx   # memOffsetBaseIndexScale,reg :: 
     jmp      Addr0x16496             # value ::  target: 0x16496 CodeAddr: 0x16496
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x165c0             # value ::  target: 0x165c0 CodeAddr: 0x165c0
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16623             # value ::  target: 0x16623 CodeAddr: 0x16623
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x166c3             # value ::  target: 0x166c3 CodeAddr: 0x166c3
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16663             # value ::  target: 0x16663 CodeAddr: 0x16663
     movq     %rdx,%rax               # reg,reg :: 
     movslq   %ecx,%rcx               # reg,reg :: 
     shrq     $0x36,%rax              # imm,reg ::  modifies flags!!
     jne      Addr0x1662f             # value ::  target: 0x1662f CodeAddr: 0x1662f
     shlq     $0xa,%rdx               # imm,reg ::  modifies flags!!
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movslq   %ecx,%rcx               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     js       Addr0x1662f             # value ::  target: 0x1662f CodeAddr: 0x1662f
     addq     %rdx,%rdx               # reg,reg ::  modifies flags!!
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16640             # value ::  target: 0x16640 CodeAddr: 0x16640
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16540             # value ::  target: 0x16540 CodeAddr: 0x16540
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16560             # value ::  target: 0x16560 CodeAddr: 0x16560
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16596             # value ::  target: 0x16596 CodeAddr: 0x16596
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x165f0             # value ::  target: 0x165f0 CodeAddr: 0x165f0
     movslq   %ecx,%rcx               # reg,reg :: 
     jmp      Addr0x16695             # value ::  target: 0x16695 CodeAddr: 0x16695
Addr0x16769:
     movl     $0x2,%ecx               # imm,reg :: 
     movl     $0x3e8,%esi             # imm,reg :: 
     jmp      Addr0x16496             # value ::  target: 0x16496 CodeAddr: 0x16496
Addr0x16778:
     leaq     Var0x1d238(%rip),%rcx   # memOffsetBase,reg ::  DataAddr: 0x1d238
     movl     $0x60,%edx              # imm,reg :: 
     leaq     Var0x1cce0(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cce0
     leaq     Var0x1ccf0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1ccf0
     callq    Addr0x49b0              # value ::  target: 0x49b0 CodeAddr: 0x49b0 CALLS 0x49b0
Addr0x16797:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0
Addr0x1679c:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x1657f             # value ::  target: 0x1657f CodeAddr: 0x1657f
Addr0x167ab:
     movl     $0x1,%eax               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x16686             # value ::  target: 0x16686 CodeAddr: 0x16686
Addr0x167b9:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x166af             # value ::  target: 0x166af CodeAddr: 0x166af
Addr0x167c8:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x1660f             # value ::  target: 0x1660f CodeAddr: 0x1660f
Addr0x167d7:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x165df             # value ::  target: 0x165df CodeAddr: 0x165df
Addr0x167e6:
     movl     $0x1,%r8d               # imm,reg :: 
     orq      $0xffffffffffffffff,%rdx# imm,reg ::  modifies flags!!
     jmp      Addr0x165af             # value ::  target: 0x165af CodeAddr: 0x165af

# ----------- Function 359 ------------ 
#
# startAddr  = 0x16800
# startindex = 18672
# endAddr    = 0x16869
# endindex   = 18704
# len        = 106 (0x6a)
# len1       = 112 (0x70) to (0x1686a)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16800:
     pushq    %rbx                    # reg :: 
     testl    %edi,%edi               # reg,reg ::  modifies flags!!
     je       Addr0x16858             # value ::  target: 0x16858 CodeAddr: 0x16858
     movl     %edi,%eax               # reg,reg :: 
     cmpl     $0xa,%edi               # imm,reg ::  modifies flags!!
     je       Addr0x16810             # value ::  target: 0x16810 CodeAddr: 0x16810
Addr0x1680c:
     popq     %rbx                    # reg :: 
     retq    
Addr0x16810:
     movq     (%rsi),%r8              # memBase,reg :: 
     movq     %rsi,%rbx               # reg,reg :: 
     movl     $0xa,%ecx               # imm,reg :: 
     leaq     Var0x1985f(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x1985f
     movq     %r8,%rsi                # reg,reg :: 
     repz cmpsb %es:(%rdi),%ds:(%rsi)   # memBase,memBase :: "%es:(%rdi),%ds:(%rsi)" != "(%rdi),(%rsi)" modifies flags!!
#{'addr': 92197, 'op': 'cmpsb', 'prefix': 'repz', 'args': [Arg(argText='(%rdi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rdi', calcAddr=None, segReg='%es:', round=None), Arg(argText='(%rsi)', star=None, offset=None, imm=None, reg=None, type='memBase', index=None, scale=None, value=None, base='%rsi', calcAddr=None, segReg='%ds:', round=None)], 'idx': 18686, 'size': 2}
     seta     %dl                     # reg :: 
     sbbb     $0x0,%dl                # imm,reg ::  modifies flags!!
     testb    %dl,%dl                 # reg,reg ::  modifies flags!!
     jne      Addr0x1680c             # value ::  target: 0x1680c CodeAddr: 0x1680c
     movq     %r8,%rdi                # reg,reg :: 
     callq    Addr0x4cd0              # value ::  target: 0x4cd0 CodeAddr: 0x4cd0 CALLS 0x4cd0
     movq     $0x0,(%rbx)             # imm,memBase :: 
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x3d,(%rax)            # imm,memBase :: 
     movl     $0xffffffff,%eax        # imm,reg :: 
     popq     %rbx                    # reg :: 
     retq    
Addr0x16858:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x5f,(%rax)            # imm,memBase :: 
     movl     $0xffffffff,%eax        # imm,reg :: 
     popq     %rbx                    # reg :: 
     retq    

# ----------- Function 360 ------------ 
#
# startAddr  = 0x16870
# startindex = 18706
# endAddr    = 0x16887
# endindex   = 18713
# len        = 24 (0x18)
# len1       = 32 (0x20) to (0x16888)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x16870:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     callq    Addr0x4b00              # value ::  target: 0x4b00 CodeAddr: 0x4b00 CALLS 0x4b00
     movq     %rbp,%rsi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     movl     %eax,%edi               # reg,reg :: 
     jmp      Addr0x16800             # value ::  target: 0x16800 CodeAddr: 0x16800

# ----------- Function 361 ------------ 
#
# startAddr  = 0x16890
# startindex = 18715
# endAddr    = 0x168a7
# endindex   = 18722
# len        = 24 (0x18)
# len1       = 32 (0x20) to (0x168a8)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x16890:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     callq    Addr0x4a70              # value ::  target: 0x4a70 CodeAddr: 0x4a70 CALLS 0x4a70
     movq     %rbp,%rsi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     movl     %eax,%edi               # reg,reg :: 
     jmp      Addr0x16800             # value ::  target: 0x16800 CodeAddr: 0x16800

# ----------- Function 362 ------------ 
#
# startAddr  = 0x168b0
# startindex = 18724
# endAddr    = 0x168c7
# endindex   = 18731
# len        = 24 (0x18)
# len1       = 32 (0x20) to (0x168c8)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x168b0:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     callq    Addr0x4970              # value ::  target: 0x4970 CodeAddr: 0x4970 CALLS 0x4970
     movq     %rbp,%rsi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     movl     %eax,%edi               # reg,reg :: 
     jmp      Addr0x16800             # value ::  target: 0x16800 CodeAddr: 0x16800

# ----------- Function 363 ------------ 
#
# startAddr  = 0x168d0
# startindex = 18733
# endAddr    = 0x1695e
# endindex   = 18774
# len        = 143 (0x8f)
# len1       = 144 (0x90) to (0x1695f)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x168d0:
     endbr64 
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     subq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     leaq     0x4(%rsp),%rax          # memOffsetBase,reg :: 
     cmoveq   %rax,%rbx               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x4900              # value ::  target: 0x4900 CodeAddr: 0x4900 CALLS 0x4900
     movq     %rax,%r12               # reg,reg :: 
     cmpq     $0xfffffffffffffffd,%rax# imm,reg ::  modifies flags!!
     jbe      Addr0x16919             # value ::  target: 0x16919 CodeAddr: 0x16919
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x16940             # value ::  target: 0x16940 CodeAddr: 0x16940
Addr0x16919:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
     xorq     0x28,%rax               # value,reg ::  modifies flags!!
     jne      Addr0x1695a             # value ::  target: 0x1695a CodeAddr: 0x1695a
     addq     $0x18,%rsp              # imm,reg ::  modifies flags!!
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x16940:
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     callq    Addr0xeb50              # value ::  target: 0xeb50 CodeAddr: 0xeb50 CALLS 0xeb50
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x16919             # value ::  target: 0x16919 CodeAddr: 0x16919
     movzbl   0x0(%r13),%eax          # memOffsetBase,reg :: 
     movl     $0x1,%r12d              # imm,reg :: 
     movl     %eax,(%rbx)             # reg,memBase :: 
     jmp      Addr0x16919             # value ::  target: 0x16919 CodeAddr: 0x16919
Addr0x1695a:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 364 ------------ 
#
# startAddr  = 0x16960
# startindex = 18776
# endAddr    = 0x169a4
# endindex   = 18791
# len        = 69 (0x45)
# len1       = 80 (0x50) to (0x169a5)
# secid      = 15
# sec name   = .text
#
# -------------------------------------------

Addr0x16960:
     endbr64 
     pushq    %rax                    # reg :: 
     popq     %rax                    # reg :: 
     movl     $0x5,%edx               # imm,reg :: 
     leaq     Var0x1cccf(%rip),%rsi   # memOffsetBase,reg ::  DataAddr: 0x1cccf
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x48a0              # value ::  target: 0x48a0 CodeAddr: 0x48a0 CALLS 0x48a0
     movq     Var0x232c0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x232c0
     movl     $0x1,%esi               # imm,reg :: 
     leaq     Var0x1c970(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1c970
     movq     %rax,%rcx               # reg,reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     callq    Addr0x4d20              # value ::  target: 0x4d20 CodeAddr: 0x4d20 CALLS 0x4d20
     movl     Var0x231f8(%rip),%edi   # memOffsetBase,reg ::  DataAddr: 0x231f8
     callq    Addr0x4d00              # value ::  target: 0x4d00 CodeAddr: 0x4d00 CALLS 0x4d00

# ----------- Function 365 ------------ 
#
# startAddr  = 0x169b0
# startindex = 18793
# endAddr    = 0x169c4
# endindex   = 18799
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x169c5)
# secid      = 15
# sec name   = .text
#  has jump ptr!
#
# -------------------------------------------

Addr0x169b0:
     movq     0x38(%rdi),%rax         # memOffsetBase,reg :: 
     testb    $0x1,0x50(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x169c0             # value ::  target: 0x169c0 CodeAddr: 0x169c0
     movq     0x48(%rdi),%rdi         # memOffsetBase,reg :: 
     jmp      *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 92606, 'op': 'jmpq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18797, 'size': 2, 'jumpTable': 'unknown'}
Addr0x169c0:
     movq     %rsi,%rdi               # reg,reg :: 
     jmp      *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 92611, 'op': 'jmpq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18799, 'size': 2, 'jumpTable': 'unknown'}

# ----------- Function 366 ------------ 
#
# startAddr  = 0x169d0
# startindex = 18801
# endAddr    = 0x169e4
# endindex   = 18807
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x169e5)
# secid      = 15
# sec name   = .text
#  has jump ptr!
#
# -------------------------------------------

Addr0x169d0:
     movq     0x40(%rdi),%rax         # memOffsetBase,reg :: 
     testb    $0x1,0x50(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x169e0             # value ::  target: 0x169e0 CodeAddr: 0x169e0
     movq     0x48(%rdi),%rdi         # memOffsetBase,reg :: 
     jmp      *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 92638, 'op': 'jmpq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18805, 'size': 2, 'jumpTable': 'unknown'}
Addr0x169e0:
     movq     %rsi,%rdi               # reg,reg :: 
     jmp      *%rax                   # reg :: "*%rax" != "%rax"
#    JUMP TABLE 
#  #{'addr': 92643, 'op': 'jmpq', 'args': [Arg(argText='%rax', star='*', offset=None, imm=None, reg='%rax', type='reg', index=None, scale=None, value=None, base=None, calcAddr=None, segReg=None, round=None)], 'idx': 18807, 'size': 2, 'jumpTable': 'unknown'}

# ----------- Function 367 ------------ 
#
# startAddr  = 0x169f0
# startindex = 18809
# endAddr    = 0x16a72
# endindex   = 18847
# len        = 131 (0x83)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x169f0:
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     testq    %rdx,%rdx               # reg,reg ::  modifies flags!!
     je       Addr0x16a60             # value ::  target: 0x16a60 CodeAddr: 0x16a60
     movq     %rdx,%rbp               # reg,reg :: 
     leaq     -0x1(%rdx),%r12         # memOffsetBase,reg :: 
Addr0x16a03:
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     movl     $0xfe0,%eax             # imm,reg :: 
     movq     %r12,0x30(%rbx)         # reg,memOffsetBase :: 
     movq     %rbx,%rdi               # reg,reg :: 
     cmoveq   %rax,%rsi               # reg,reg :: 
     movq     %rsi,(%rbx)             # reg,memBase :: 
     callq    Addr0x169b0             # value ::  target: 0x169b0 CodeAddr: 0x169b0 CALLS 0x169b0
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16a6d             # value ::  target: 0x16a6d CodeAddr: 0x16a6d
     leaq     0x10(%rax,%r12,1),%rdx  # memOffsetBaseIndexScale,reg :: 
     negq     %rbp                    # reg ::  modifies flags!!
     andq     %rdx,%rbp               # reg,reg ::  modifies flags!!
     movq     (%rbx),%rdx             # memBase,reg :: 
     movq     %rbp,0x10(%rbx)         # reg,memOffsetBase :: 
     addq     %rax,%rdx               # reg,reg ::  modifies flags!!
     movq     %rbp,0x18(%rbx)         # reg,memOffsetBase :: 
     movq     %rdx,(%rax)             # reg,memBase :: 
     movq     %rdx,0x20(%rbx)         # reg,memOffsetBase :: 
     movq     $0x0,0x8(%rax)          # imm,memOffsetBase :: 
     movl     $0x1,%eax               # imm,reg :: 
     andb     $0xf9,0x50(%rbx)        # imm,memOffsetBase ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x16a60:
     movl     $0xf,%r12d              # imm,reg :: 
     movl     $0x10,%ebp              # imm,reg :: 
     jmp      Addr0x16a03             # value ::  target: 0x16a03 CodeAddr: 0x16a03
Addr0x16a6d:
     callq    *Var0x23260(%rip)       # memOffsetBase ::  DataAddr: 0x23260 no target? 

# ----------- Function 368 ------------ 
#
# startAddr  = 0x16a80
# startindex = 18850
# endAddr    = 0x16a94
# endindex   = 18854
# len        = 21 (0x15)
# len1       = 32 (0x20) to (0x16a95)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x16a80:
     endbr64 
     andb     $0xfe,0x50(%rdi)        # imm,memOffsetBase ::  modifies flags!!
     movq     %rcx,0x38(%rdi)         # reg,memOffsetBase :: 
     movq     %r8,0x40(%rdi)          # reg,memOffsetBase :: 
     jmp      Addr0x169f0             # value ::  target: 0x169f0 CodeAddr: 0x169f0

# ----------- Function 369 ------------ 
#
# startAddr  = 0x16aa0
# startindex = 18856
# endAddr    = 0x16ab8
# endindex   = 18861
# len        = 25 (0x19)
# len1       = 32 (0x20) to (0x16ab9)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x16aa0:
     endbr64 
     orb      $0x1,0x50(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     movq     %rcx,0x38(%rdi)         # reg,memOffsetBase :: 
     movq     %r8,0x40(%rdi)          # reg,memOffsetBase :: 
     movq     %r9,0x48(%rdi)          # reg,memOffsetBase :: 
     jmp      Addr0x169f0             # value ::  target: 0x169f0 CodeAddr: 0x169f0

# ----------- Function 370 ------------ 
#
# startAddr  = 0x16ac0
# startindex = 18863
# endAddr    = 0x16baa
# endindex   = 18933
# len        = 235 (0xeb)
# secid      = 15
# sec name   = .text
# Falls through to next
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x16ac0:
     endbr64 
     pushq    %r14                    # reg :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     0x18(%rdi),%r14         # memOffsetBase,reg :: 
     subq     0x10(%rdi),%r14         # memOffsetBase,reg ::  modifies flags!!
     movq     0x8(%rdi),%rbp          # memOffsetBase,reg :: 
     addq     %r14,%rsi               # reg,reg ::  modifies flags!!
     movq     %r14,%rdx               # reg,reg :: 
     setb     %al                     # reg :: 
     addq     0x30(%rdi),%rsi         # memOffsetBase,reg ::  modifies flags!!
     setb     %cl                     # reg :: 
     shrq     $0x3,%rdx               # imm,reg ::  modifies flags!!
     cmpq     %rsi,(%rdi)             # reg,memBase ::  modifies flags!!
     leaq     0x64(%rsi,%rdx,1),%r12  # memOffsetBaseIndexScale,reg :: 
     cmovaeq  (%rdi),%rsi             # memBase,reg :: 
     cmpq     %r12,%rsi               # reg,reg ::  modifies flags!!
     cmovaeq  %rsi,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x16ba5             # value ::  target: 0x16ba5 CodeAddr: 0x16ba5
     movzbl   %cl,%ecx                # reg,reg :: 
     testq    %rcx,%rcx               # reg,reg ::  modifies flags!!
     jne      Addr0x16ba5             # value ::  target: 0x16ba5 CodeAddr: 0x16ba5
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     callq    Addr0x169b0             # value ::  target: 0x169b0 CodeAddr: 0x169b0 CALLS 0x169b0
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16ba5             # value ::  target: 0x16ba5 CodeAddr: 0x16ba5
     leaq     (%rax,%r12,1),%rsi      # memBaseIndexScale,reg :: 
     movq     %rax,0x8(%rbx)          # reg,memOffsetBase :: 
     movq     %r14,%rdx               # reg,reg :: 
     movq     %rbp,0x8(%rax)          # reg,memOffsetBase :: 
     movq     %rsi,0x20(%rbx)         # reg,memOffsetBase :: 
     movq     %rsi,(%rax)             # reg,memBase :: 
     movq     0x30(%rbx),%rax         # memOffsetBase,reg :: 
     movq     0x10(%rbx),%rsi         # memOffsetBase,reg :: 
     leaq     0x10(%r13,%rax,1),%r12  # memOffsetBaseIndexScale,reg :: 
     notq     %rax                    # reg :: 
     andq     %rax,%r12               # reg,reg ::  modifies flags!!
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     testb    $0x2,0x50(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x16b75             # value ::  target: 0x16b75 CodeAddr: 0x16b75
     movq     0x30(%rbx),%rax         # memOffsetBase,reg :: 
     leaq     0x10(%rbp,%rax,1),%rdx  # memOffsetBaseIndexScale,reg :: 
     notq     %rax                    # reg :: 
     andq     %rdx,%rax               # reg,reg ::  modifies flags!!
     cmpq     %rax,0x10(%rbx)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x16b90             # value ::  target: 0x16b90 CodeAddr: 0x16b90
Addr0x16b75:
     addq     %r12,%r14               # reg,reg ::  modifies flags!!
     andb     $0xfd,0x50(%rbx)        # imm,memOffsetBase ::  modifies flags!!
     movq     %r12,0x10(%rbx)         # reg,memOffsetBase :: 
     movq     %r14,0x18(%rbx)         # reg,memOffsetBase :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x16b90:
     movq     0x8(%rbp),%rax          # memOffsetBase,reg :: 
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     movq     %rax,0x8(%r13)          # reg,memOffsetBase :: 
     callq    Addr0x169d0             # value ::  target: 0x169d0 CodeAddr: 0x169d0 CALLS 0x169d0
     jmp      Addr0x16b75             # value ::  target: 0x16b75 CodeAddr: 0x16b75
Addr0x16ba5:
     callq    *Var0x23260(%rip)       # memOffsetBase ::  DataAddr: 0x23260 no target? 

# ----------- Function 371 ------------ 
#
# startAddr  = 0x16bb0
# startindex = 18935
# endAddr    = 0x16be6
# endindex   = 18952
# len        = 55 (0x37)
# len1       = 64 (0x40) to (0x16be7)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16bb0:
     endbr64 
     movq     0x8(%rdi),%rax          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16be6             # value ::  target: 0x16be6 CodeAddr: 0x16be6
Addr0x16bc0:
     cmpq     %rax,%rsi               # reg,reg ::  modifies flags!!
     jbe      Addr0x16bca             # value ::  target: 0x16bca CodeAddr: 0x16bca
     cmpq     %rsi,(%rax)             # reg,memBase ::  modifies flags!!
     jae      Addr0x16be0             # value ::  target: 0x16be0 CodeAddr: 0x16be0
Addr0x16bca:
     movq     0x8(%rax),%rax          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x16bc0             # value ::  target: 0x16bc0 CodeAddr: 0x16bc0
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     retq    
Addr0x16be0:
     movl     $0x1,%eax               # imm,reg :: 
     retq    
Addr0x16be6:
     retq    

# ----------- Function 372 ------------ 
#
# startAddr  = 0x16bf0
# startindex = 18954
# endAddr    = 0x16c5c
# endindex   = 18991
# len        = 109 (0x6d)
# len1       = 112 (0x70) to (0x16c5d)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x16bf0:
     endbr64 
     pushq    %r12                    # reg :: 
     movq     %rsi,%r12               # reg,reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     0x8(%rdi),%rsi          # memOffsetBase,reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     testq    %rsi,%rsi               # reg,reg ::  modifies flags!!
     jne      Addr0x16c13             # value ::  target: 0x16c13 CodeAddr: 0x16c13
     jmp      Addr0x16c35             # value ::  target: 0x16c35 CodeAddr: 0x16c35
Addr0x16c10:
     movq     %rbp,%rsi               # reg,reg :: 
Addr0x16c13:
     cmpq     %r12,%rsi               # reg,reg ::  modifies flags!!
     jae      Addr0x16c20             # value ::  target: 0x16c20 CodeAddr: 0x16c20
     movq     (%rsi),%rax             # memBase,reg :: 
     cmpq     %r12,%rax               # reg,reg ::  modifies flags!!
     jae      Addr0x16c48             # value ::  target: 0x16c48 CodeAddr: 0x16c48
Addr0x16c20:
     movq     0x8(%rsi),%rbp          # memOffsetBase,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x169d0             # value ::  target: 0x169d0 CodeAddr: 0x169d0 CALLS 0x169d0
     orb      $0x2,0x50(%rbx)         # imm,memOffsetBase ::  modifies flags!!
     testq    %rbp,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x16c10             # value ::  target: 0x16c10 CodeAddr: 0x16c10
Addr0x16c35:
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     jne      Addr0x4deb              # value ::  target: 0x4deb CodeAddr: 0x4deb
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x16c48:
     movq     %r12,0x18(%rbx)         # reg,memOffsetBase :: 
     movq     %r12,0x10(%rbx)         # reg,memOffsetBase :: 
     movq     %rax,0x20(%rbx)         # reg,memOffsetBase :: 
     movq     %rsi,0x8(%rbx)          # reg,memOffsetBase :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 373 ------------ 
#
# startAddr  = 0x16c60
# startindex = 18993
# endAddr    = 0x16c85
# endindex   = 19005
# len        = 38 (0x26)
# len1       = 48 (0x30) to (0x16c86)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16c60:
     endbr64 
     movq     0x8(%rdi),%rax          # memOffsetBase,reg :: 
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16c82             # value ::  target: 0x16c82 CodeAddr: 0x16c82
Addr0x16c70:
     movq     (%rax),%rdx             # memBase,reg :: 
     subq     %rax,%rdx               # reg,reg ::  modifies flags!!
     movq     0x8(%rax),%rax          # memOffsetBase,reg :: 
     addq     %rdx,%r8                # reg,reg ::  modifies flags!!
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     jne      Addr0x16c70             # value ::  target: 0x16c70 CodeAddr: 0x16c70
Addr0x16c82:
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 374 ------------ 
#
# startAddr  = 0x16c90
# startindex = 19007
# endAddr    = 0x16cbb
# endindex   = 19015
# len        = 44 (0x2c)
# len1       = 48 (0x30) to (0x16cbc)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x16c90:
     movq     %rdi,%rsi               # reg,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x16cb0             # value ::  target: 0x16cb0 CodeAddr: 0x16cb0
     movl     $0x1,%edx               # imm,reg :: 
     leaq     Var0x19af0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af0
     jmp      Addr0x4840              # value ::  target: 0x4840 CodeAddr: 0x4840
Addr0x16cb0:
     leaq     Var0x19af0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af0
     jmp      Addr0x4c80              # value ::  target: 0x4c80 CodeAddr: 0x4c80

# ----------- Function 375 ------------ 
#
# startAddr  = 0x16cc0
# startindex = 19017
# endAddr    = 0x16ce8
# endindex   = 19030
# len        = 41 (0x29)
# len1       = 48 (0x30) to (0x16ce9)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16cc0:
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x16ce8             # value ::  target: 0x16ce8 CodeAddr: 0x16ce8
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
Addr0x16cd0:
     movq     %rbx,%rdi               # reg,reg :: 
     movq     (%rbx),%rbx             # memBase,reg :: 
     callq    Addr0x46d0              # value ::  target: 0x46d0 CodeAddr: 0x46d0 CALLS 0x46d0
     testq    %rbx,%rbx               # reg,reg ::  modifies flags!!
     jne      Addr0x16cd0             # value ::  target: 0x16cd0 CodeAddr: 0x16cd0
     popq     %rbx                    # reg :: 
     retq    
Addr0x16ce8:
     retq    

# ----------- Function 376 ------------ 
#
# startAddr  = 0x16cf0
# startindex = 19032
# endAddr    = 0x16d4c
# endindex   = 19063
# len        = 93 (0x5d)
# len1       = 96 (0x60) to (0x16d4d)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16cf0:
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpb     $0x0,0x8(%rbp)          # imm,memOffsetBase ::  modifies flags!!
     leaq     0x9(%rbp),%rdi          # memOffsetBase,reg :: 
     movl     (%rax),%r12d            # memBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     jne      Addr0x16d14             # value ::  target: 0x16d14 CodeAddr: 0x16d14
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
Addr0x16d14:
     callq    Addr0x16c90             # value ::  target: 0x16c90 CodeAddr: 0x16c90 CALLS 0x16c90
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x16d40             # value ::  target: 0x16d40 CodeAddr: 0x16d40
     movl     (%rbx),%r12d            # memBase,reg :: 
     xorl     %r13d,%r13d             # reg,reg ::  modifies flags!!
Addr0x16d23:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x16cc0             # value ::  target: 0x16cc0 CodeAddr: 0x16cc0 CALLS 0x16cc0
     movl     %r12d,(%rbx)            # reg,memBase :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     %r13d,%eax              # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x16d40:
     callq    Addr0x4b10              # value ::  target: 0x4b10 CodeAddr: 0x4b10 CALLS 0x4b10
     movl     $0x1,%r13d              # imm,reg :: 
     jmp      Addr0x16d23             # value ::  target: 0x16d23 CodeAddr: 0x16d23

# ----------- Function 377 ------------ 
#
# startAddr  = 0x16d50
# startindex = 19065
# endAddr    = 0x16de9
# endindex   = 19109
# len        = 154 (0x9a)
# len1       = 160 (0xa0) to (0x16dea)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16d50:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x16dc0             # value ::  target: 0x16dc0 CodeAddr: 0x16dc0
     movq     %rdi,%rbp               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movl     $0x76,%edi              # imm,reg :: 
     leaq     0x1(%rax),%rbx          # memOffsetBase,reg :: 
     cmpq     $0x76,%rbx              # imm,reg ::  modifies flags!!
     cmovaeq  %rbx,%rdi               # reg,reg :: 
     addq     $0x11,%rdi              # imm,reg ::  modifies flags!!
     andq     $0xfffffffffffffff8,%rdi# imm,reg ::  modifies flags!!
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16db3             # value ::  target: 0x16db3 CodeAddr: 0x16db3
     movq     $0x0,(%rax)             # imm,memBase :: 
     movl     $0x1,%eax               # imm,reg :: 
     leaq     0x9(%r12),%rdi          # memOffsetBase,reg :: 
     movq     %rbx,%rdx               # reg,reg :: 
     movw     %ax,0x8(%r12)           # reg,memOffsetBase :: 
     movq     %rbp,%rsi               # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movb     $0x0,0x9(%r12,%rbx,1)   # imm,memOffsetBaseIndexScale :: 
Addr0x16db3:
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x16dc0:
     movl     $0x80,%edi              # imm,reg :: 
     callq    Addr0x46e0              # value ::  target: 0x46e0 CodeAddr: 0x46e0 CALLS 0x46e0
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16db3             # value ::  target: 0x16db3 CodeAddr: 0x16db3
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     movq     $0x0,(%r12)             # imm,memBase :: 
     movq     %r12,%rax               # reg,reg :: 
     movw     %dx,0x8(%r12)           # reg,memOffsetBase :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 378 ------------ 
#
# startAddr  = 0x16df0
# startindex = 19111
# endAddr    = 0x16f44
# endindex   = 19217
# len        = 341 (0x155)
# len1       = 352 (0x160) to (0x16f45)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16df0:
     pushq    %r15                    # reg :: 
     pushq    %r14                    # reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     0x30(%rsi),%r12         # memOffsetBase,reg :: 
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     je       Addr0x16eb0             # value ::  target: 0x16eb0 CodeAddr: 0x16eb0
     movq     %rdi,%rbp               # reg,reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     cmpq     %r12,%rsi               # reg,reg ::  modifies flags!!
     ja       Addr0x16e24             # value ::  target: 0x16e24 CodeAddr: 0x16e24
     leaq     0x38(%rsi),%rdx         # memOffsetBase,reg :: 
     movl     $0x1,%eax               # imm,reg :: 
     cmpq     %rdx,%r12               # reg,reg ::  modifies flags!!
     jb       Addr0x16e91             # value ::  target: 0x16e91 CodeAddr: 0x16e91
Addr0x16e24:
     cmpb     $0x0,(%r12)             # imm,memBase ::  modifies flags!!
     leaq     0x9(%rbp),%rbx          # memOffsetBase,reg :: 
     je       Addr0x16ea0             # value ::  target: 0x16ea0 CodeAddr: 0x16ea0
Addr0x16e30:
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x16e88             # value ::  target: 0x16e88 CodeAddr: 0x16e88
Addr0x16e3f:
     cmpb     $0x0,(%rbx)             # imm,memBase ::  modifies flags!!
     jne      Addr0x16e53             # value ::  target: 0x16e53 CodeAddr: 0x16e53
     leaq     0x9(%rbp),%r14          # memOffsetBase,reg :: 
     cmpq     %rbx,%r14               # reg,reg ::  modifies flags!!
     jne      Addr0x16ec8             # value ::  target: 0x16ec8 CodeAddr: 0x16ec8
     cmpb     $0x0,0x8(%rbp)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x16ec8             # value ::  target: 0x16ec8 CodeAddr: 0x16ec8
Addr0x16e53:
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     leaq     0x1(%rbx,%rax,1),%rbx   # memOffsetBaseIndexScale,reg :: 
     cmpb     $0x0,(%rbx)             # imm,memBase ::  modifies flags!!
     jne      Addr0x16e30             # value ::  target: 0x16e30 CodeAddr: 0x16e30
     movq     0x0(%rbp),%rax          # memOffsetBase,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16e30             # value ::  target: 0x16e30 CodeAddr: 0x16e30
     leaq     0x9(%rax),%rbx          # memOffsetBase,reg :: 
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rax,%rbp               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x16e3f             # value ::  target: 0x16e3f CodeAddr: 0x16e3f
Addr0x16e88:
     movq     %rbx,0x30(%r13)         # reg,memOffsetBase :: 
     movl     $0x1,%eax               # imm,reg :: 
Addr0x16e91:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x16ea0:
     leaq     Var0x197fe(%rip),%rbx   # memOffsetBase,reg ::  DataAddr: 0x197fe
     jmp      Addr0x16e88             # value ::  target: 0x16e88 CodeAddr: 0x16e88
Addr0x16eb0:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0x1,%eax               # imm,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    
Addr0x16ec8:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x48c0              # value ::  target: 0x48c0 CodeAddr: 0x48c0 CALLS 0x48c0
     movq     %rax,%r15               # reg,reg :: 
     leaq     0x1(%rax),%rdx          # memOffsetBase,reg :: 
     movq     %rbx,%rax               # reg,reg :: 
     subq     %r14,%rax               # reg,reg ::  modifies flags!!
     movq     %rax,%rcx               # reg,reg :: 
     notq     %rcx                    # reg :: 
     cmpq     %rdx,%rcx               # reg,reg ::  modifies flags!!
     jb       Addr0x16f08             # value ::  target: 0x16f08 CodeAddr: 0x16f08
     addq     %rdx,%rax               # reg,reg ::  modifies flags!!
     cmpq     $0x76,%rax              # imm,reg ::  modifies flags!!
     ja       Addr0x16f20             # value ::  target: 0x16f20 CodeAddr: 0x16f20
     movq     %r12,%rsi               # reg,reg :: 
     movq     %rbx,%rdi               # reg,reg :: 
     callq    Addr0x4ae0              # value ::  target: 0x4ae0 CodeAddr: 0x4ae0 CALLS 0x4ae0
     movb     $0x0,0x1(%rbx,%r15,1)   # imm,memOffsetBaseIndexScale :: 
     jmp      Addr0x16e88             # value ::  target: 0x16e88 CodeAddr: 0x16e88
Addr0x16f08:
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0xc,(%rax)             # imm,memBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x16e91             # value ::  target: 0x16e91 CodeAddr: 0x16e91
Addr0x16f20:
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x16d50             # value ::  target: 0x16d50 CodeAddr: 0x16d50 CALLS 0x16d50
     movq     %rax,0x0(%rbp)          # reg,memOffsetBase :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16f3e             # value ::  target: 0x16f3e CodeAddr: 0x16f3e
     movb     $0x0,0x8(%rax)          # imm,memOffsetBase :: 
     leaq     0x9(%rax),%rbx          # memOffsetBase,reg :: 
     jmp      Addr0x16e88             # value ::  target: 0x16e88 CodeAddr: 0x16e88
Addr0x16f3e:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     jmp      Addr0x16e91             # value ::  target: 0x16e91 CodeAddr: 0x16e91

# ----------- Function 379 ------------ 
#
# startAddr  = 0x16f50
# startindex = 19219
# endAddr    = 0x17004
# endindex   = 19283
# len        = 181 (0xb5)
# len1       = 192 (0xc0) to (0x17005)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x16f50:
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     pushq    %rbx                    # reg :: 
     movq     %rdi,%rbx               # reg,reg :: 
     leaq     Var0x19af0(%rip),%rdi   # memOffsetBase,reg ::  DataAddr: 0x19af0
     callq    Addr0x4710              # value ::  target: 0x4710 CodeAddr: 0x4710 CALLS 0x4710
     movq     %rax,%rbp               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16fe0             # value ::  target: 0x16fe0 CodeAddr: 0x16fe0
     cmpb     $0x0,0x8(%rbx)          # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x16fc0             # value ::  target: 0x16fc0 CodeAddr: 0x16fc0
Addr0x16f71:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x16d50             # value ::  target: 0x16d50 CodeAddr: 0x16d50 CALLS 0x16d50
     movq     %rax,%r12               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x16fb3             # value ::  target: 0x16fb3 CodeAddr: 0x16fb3
     xorl     %edi,%edi               # reg,reg ::  modifies flags!!
     cmpb     $0x0,0x8(%rbx)          # imm,memOffsetBase ::  modifies flags!!
     je       Addr0x16f8d             # value ::  target: 0x16f8d CodeAddr: 0x16f8d
     leaq     0x9(%rbx),%rdi          # memOffsetBase,reg :: 
Addr0x16f8d:
     callq    Addr0x16c90             # value ::  target: 0x16c90 CodeAddr: 0x16c90 CALLS 0x16c90
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x16ff8             # value ::  target: 0x16ff8 CodeAddr: 0x16ff8
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     (%rax),%ebp             # memBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     cmpq     $0x1,%r12               # imm,reg ::  modifies flags!!
     je       Addr0x16fae             # value ::  target: 0x16fae CodeAddr: 0x16fae
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x16cc0             # value ::  target: 0x16cc0 CodeAddr: 0x16cc0 CALLS 0x16cc0
Addr0x16fae:
     movl     %ebp,(%rbx)             # reg,memBase :: 
     xorl     %r12d,%r12d             # reg,reg ::  modifies flags!!
Addr0x16fb3:
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x16fc0:
     leaq     0x9(%rbx),%rdi          # memOffsetBase,reg :: 
     movq     %rax,%rsi               # reg,reg :: 
     movl     $0x1,%r12d              # imm,reg :: 
     callq    Addr0x4a80              # value ::  target: 0x4a80 CodeAddr: 0x4a80 CALLS 0x4a80
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x16f71             # value ::  target: 0x16f71 CodeAddr: 0x16f71
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x16fe0:
     cmpb     $0x0,0x8(%rbx)          # imm,memOffsetBase ::  modifies flags!!
     movl     $0x1,%r12d              # imm,reg :: 
     jne      Addr0x16f71             # value ::  target: 0x16f71 CodeAddr: 0x16f71
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x16ff8:
     callq    Addr0x4b10              # value ::  target: 0x4b10 CodeAddr: 0x4b10 CALLS 0x4b10
     movq     %r12,%rax               # reg,reg :: 
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    

# ----------- Function 380 ------------ 
#
# startAddr  = 0x17010
# startindex = 19285
# endAddr    = 0x17020
# endindex   = 19290
# len        = 17 (0x11)
# len1       = 28 (0x1c) to (0x17021)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x17010:
     endbr64 
     cmpq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     je       Addr0x17020             # value ::  target: 0x17020 CodeAddr: 0x17020
     jmp      Addr0x16cc0             # value ::  target: 0x16cc0 CodeAddr: 0x16cc0
Addr0x17020:
     retq    

# ----------- Function 381 ------------ 
#
# startAddr  = 0x17030
# startindex = 19293
# endAddr    = 0x170d5
# endindex   = 19353
# len        = 166 (0xa6)
# len1       = 176 (0xb0) to (0x170d6)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x17030:
     endbr64 
     pushq    %r14                    # reg :: 
     movq     %rsi,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdx,%rbp               # reg,reg :: 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x170c0             # value ::  target: 0x170c0 CodeAddr: 0x170c0
     movq     %rdi,%r12               # reg,reg :: 
     callq    Addr0x16f50             # value ::  target: 0x16f50 CodeAddr: 0x16f50 CALLS 0x16f50
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x1709e             # value ::  target: 0x1709e CodeAddr: 0x1709e
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r14,%rdi               # reg,reg :: 
     callq    Addr0x4780              # value ::  target: 0x4780 CodeAddr: 0x4780 CALLS 0x4780
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x17090             # value ::  target: 0x17090 CodeAddr: 0x17090
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x16df0             # value ::  target: 0x16df0 CodeAddr: 0x16df0 CALLS 0x16df0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x17090             # value ::  target: 0x17090 CodeAddr: 0x17090
     cmpq     $0x1,%r13               # imm,reg ::  modifies flags!!
     jne      Addr0x170b0             # value ::  target: 0x170b0 CodeAddr: 0x170b0
Addr0x1707f:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %rbp,%rax               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x17090:
     cmpq     $0x1,%r13               # imm,reg ::  modifies flags!!
     je       Addr0x1709e             # value ::  target: 0x1709e CodeAddr: 0x1709e
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x16cf0             # value ::  target: 0x16cf0 CodeAddr: 0x16cf0 CALLS 0x16cf0
Addr0x1709e:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     retq    
Addr0x170b0:
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x16cf0             # value ::  target: 0x16cf0 CodeAddr: 0x16cf0 CALLS 0x16cf0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x1707f             # value ::  target: 0x1707f CodeAddr: 0x1707f
     jmp      Addr0x1709e             # value ::  target: 0x1709e CodeAddr: 0x1709e
Addr0x170c0:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movq     %r14,%rdi               # reg,reg :: 
     movq     %rdx,%rsi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     jmp      Addr0x4980              # value ::  target: 0x4980 CodeAddr: 0x4980

# ----------- Function 382 ------------ 
#
# startAddr  = 0x170e0
# startindex = 19355
# endAddr    = 0x17220
# endindex   = 19441
# len        = 321 (0x141)
# len1       = 331 (0x14b) to (0x17221)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x170e0:
     endbr64 
     pushq    %r13                    # reg :: 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rsi,%rbp               # reg,reg :: 
     subq     $0x50,%rsp              # imm,reg ::  modifies flags!!
     movq     0x28,%rax               # value,reg :: 
     movq     %rax,0x48(%rsp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x17200             # value ::  target: 0x17200 CodeAddr: 0x17200
     movq     %rdi,%r12               # reg,reg :: 
     callq    Addr0x16f50             # value ::  target: 0x16f50 CodeAddr: 0x16f50 CALLS 0x16f50
     movq     %rax,%r13               # reg,reg :: 
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x17210             # value ::  target: 0x17210 CodeAddr: 0x17210
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4bb0              # value ::  target: 0x4bb0 CodeAddr: 0x4bb0 CALLS 0x4bb0
     movq     %rax,0x8(%rsp)          # reg,memOffsetBase :: 
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     je       Addr0x17188             # value ::  target: 0x17188 CodeAddr: 0x17188
Addr0x17130:
     movq     %rbp,%rsi               # reg,reg :: 
     movq     %r12,%rdi               # reg,reg :: 
     callq    Addr0x16df0             # value ::  target: 0x16df0 CodeAddr: 0x16df0 CALLS 0x16df0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     jne      Addr0x17148             # value ::  target: 0x17148 CodeAddr: 0x17148
     movq     $0xffffffffffffffff,0x8(%rsp)# imm,memOffsetBase :: 
Addr0x17148:
     cmpq     $0x1,%r13               # imm,reg ::  modifies flags!!
     je       Addr0x1715e             # value ::  target: 0x1715e CodeAddr: 0x1715e
     movq     %r13,%rdi               # reg,reg :: 
     callq    Addr0x16cf0             # value ::  target: 0x16cf0 CodeAddr: 0x16cf0 CALLS 0x16cf0
     testb    %al,%al                 # reg,reg ::  modifies flags!!
     je       Addr0x17210             # value ::  target: 0x17210 CodeAddr: 0x17210
Addr0x1715e:
     movq     0x8(%rsp),%rax          # memOffsetBase,reg :: 
Addr0x17163:
     movq     0x48(%rsp),%rcx         # memOffsetBase,reg :: 
     xorq     0x28,%rcx               # value,reg ::  modifies flags!!
     jne      Addr0x1721c             # value ::  target: 0x1721c CodeAddr: 0x1721c
     addq     $0x50,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     retq    
Addr0x17188:
     leaq     0x10(%rsp),%rsi         # memOffsetBase,reg :: 
     leaq     0x8(%rsp),%rdi          # memOffsetBase,reg :: 
     callq    Addr0x4780              # value ::  target: 0x4780 CodeAddr: 0x4780 CALLS 0x4780
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x17148             # value ::  target: 0x17148 CodeAddr: 0x17148
     movl     0x20(%rbp),%eax         # memOffsetBase,reg :: 
     movl     0x30(%rsp),%edx         # memOffsetBase,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     sete     %sil                    # reg :: 
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     sete     %cl                     # reg :: 
     cmpb     %cl,%sil                # reg,reg ::  modifies flags!!
     je       Addr0x171bb             # value ::  target: 0x171bb CodeAddr: 0x171bb
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0x171bb             # value ::  target: 0x171bb CodeAddr: 0x171bb
     testl    %edx,%edx               # reg,reg ::  modifies flags!!
     jns      Addr0x17148             # value ::  target: 0x17148 CodeAddr: 0x17148
Addr0x171bb:
     movl     0x10(%rbp),%eax         # memOffsetBase,reg :: 
     movl     0x14(%rbp),%edx         # memOffsetBase,reg :: 
     xorl     0x20(%rsp),%eax         # memOffsetBase,reg ::  modifies flags!!
     xorl     0x24(%rsp),%edx         # memOffsetBase,reg ::  modifies flags!!
     orl      %edx,%eax               # reg,reg ::  modifies flags!!
     movl     0xc(%rbp),%edx          # memOffsetBase,reg :: 
     xorl     0x1c(%rsp),%edx         # memOffsetBase,reg ::  modifies flags!!
     orl      %edx,%eax               # reg,reg ::  modifies flags!!
     movl     0x8(%rbp),%edx          # memOffsetBase,reg :: 
     xorl     0x18(%rsp),%edx         # memOffsetBase,reg ::  modifies flags!!
     orl      %edx,%eax               # reg,reg ::  modifies flags!!
     movl     0x4(%rbp),%edx          # memOffsetBase,reg :: 
     xorl     0x14(%rsp),%edx         # memOffsetBase,reg ::  modifies flags!!
     orl      %edx,%eax               # reg,reg ::  modifies flags!!
     movl     0x0(%rbp),%edx          # memOffsetBase,reg :: 
     xorl     0x10(%rsp),%edx         # memOffsetBase,reg ::  modifies flags!!
     orl      %edx,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x17130             # value ::  target: 0x17130 CodeAddr: 0x17130
     jmp      Addr0x17148             # value ::  target: 0x17148 CodeAddr: 0x17148
Addr0x17200:
     movq     %rsi,%rdi               # reg,reg :: 
     callq    Addr0x4c20              # value ::  target: 0x4c20 CodeAddr: 0x4c20 CALLS 0x4c20
     jmp      Addr0x17163             # value ::  target: 0x17163 CodeAddr: 0x17163
Addr0x17210:
     movq     $0xffffffffffffffff,%rax# imm,reg :: 
     jmp      Addr0x17163             # value ::  target: 0x17163 CodeAddr: 0x17163
Addr0x1721c:
     callq    Addr0x48e0              # value ::  target: 0x48e0 CodeAddr: 0x48e0 CALLS 0x48e0

# ----------- Function 383 ------------ 
#
# startAddr  = 0x17230
# startindex = 19444
# endAddr    = 0x17262
# endindex   = 19460
# len        = 51 (0x33)
# len1       = 61 (0x3d) to (0x17263)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x17230:
     endbr64 
     cmpl     $0x26,%edi              # imm,reg ::  modifies flags!!
     je       Addr0x17260             # value ::  target: 0x17260 CodeAddr: 0x17260
     jg       Addr0x17250             # value ::  target: 0x17250 CodeAddr: 0x17250
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
     cmpl     $0x10,%edi              # imm,reg ::  modifies flags!!
     je       Addr0x17262             # value ::  target: 0x17262 CodeAddr: 0x17262
     cmpl     $0x16,%edi              # imm,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     retq    
Addr0x17250:
     cmpl     $0x5f,%edi              # imm,reg ::  modifies flags!!
     setne    %al                     # reg :: 
     retq    
Addr0x17260:
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x17262:
     retq    

# ----------- Function 384 ------------ 
#
# startAddr  = 0x17270
# startindex = 19463
# endAddr    = 0x172d4
# endindex   = 19497
# len        = 101 (0x65)
# len1       = 111 (0x6f) to (0x172d5)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x17270:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     callq    Addr0x47b0              # value ::  target: 0x47b0 CodeAddr: 0x47b0 CALLS 0x47b0
     movl     0x0(%rbp),%ebx          # memOffsetBase,reg :: 
     movq     %rbp,%rdi               # reg,reg :: 
     movq     %rax,%r12               # reg,reg :: 
     andl     $0x20,%ebx              # imm,reg ::  modifies flags!!
     callq    Addr0x17380             # value ::  target: 0x17380 CodeAddr: 0x17380 CALLS 0x17380
     testl    %ebx,%ebx               # reg,reg ::  modifies flags!!
     jne      Addr0x172b8             # value ::  target: 0x172b8 CodeAddr: 0x172b8
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x172ae             # value ::  target: 0x172ae CodeAddr: 0x172ae
     testq    %r12,%r12               # reg,reg ::  modifies flags!!
     jne      Addr0x172ce             # value ::  target: 0x172ce CodeAddr: 0x172ce
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     cmpl     $0x9,(%rax)             # imm,memBase ::  modifies flags!!
     setne    %al                     # reg :: 
     movzbl   %al,%eax                # reg,reg :: 
     negl     %eax                    # reg ::  modifies flags!!
Addr0x172ae:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x172b8:
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x172ce             # value ::  target: 0x172ce CodeAddr: 0x172ce
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movl     $0x0,(%rax)             # imm,memBase :: 
     movl     $0xffffffff,%eax        # imm,reg :: 
     jmp      Addr0x172ae             # value ::  target: 0x172ae CodeAddr: 0x172ae
Addr0x172ce:
     movl     $0xffffffff,%eax        # imm,reg :: 
     jmp      Addr0x172ae             # value ::  target: 0x172ae CodeAddr: 0x172ae

# ----------- Function 385 ------------ 
#
# startAddr  = 0x172e0
# startindex = 19500
# endAddr    = 0x172fb
# endindex   = 19507
# len        = 28 (0x1c)
# len1       = 32 (0x20) to (0x172fc)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x172e0:
     endbr64 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0xe0d0              # value ::  target: 0xe0d0 CodeAddr: 0xe0d0 CALLS 0xe0d0
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x172f7             # value ::  target: 0x172f7 CodeAddr: 0x172f7
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0x172f7:
     callq    Addr0x15b30             # value ::  target: 0x15b30 CodeAddr: 0x15b30 CALLS 0x15b30

# ----------- Function 386 ------------ 
#
# startAddr  = 0x17300
# startindex = 19509
# endAddr    = 0x17336
# endindex   = 19529
# len        = 55 (0x37)
# len1       = 64 (0x40) to (0x17337)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x17300:
     endbr64 
     movsbq   (%rdi),%rcx             # memBase,reg :: 
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     je       Addr0x17330             # value ::  target: 0x17330 CodeAddr: 0x17330
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x17310:
     rolq     $0x9,%rax               # imm,reg ::  modifies flags!!
     addq     $0x1,%rdi               # imm,reg ::  modifies flags!!
     addq     %rcx,%rax               # reg,reg ::  modifies flags!!
     movsbq   (%rdi),%rcx             # memBase,reg :: 
     testb    %cl,%cl                 # reg,reg ::  modifies flags!!
     jne      Addr0x17310             # value ::  target: 0x17310 CodeAddr: 0x17310
     xorl     %edx,%edx               # reg,reg ::  modifies flags!!
     divq     %rsi                    # reg :: 
     movq     %rdx,%r8                # reg,reg :: 
     movq     %r8,%rax                # reg,reg :: 
     retq    
Addr0x17330:
     xorl     %r8d,%r8d               # reg,reg ::  modifies flags!!
     movq     %r8,%rax                # reg,reg :: 
     retq    

# ----------- Function 387 ------------ 
#
# startAddr  = 0x17340
# startindex = 19531
# endAddr    = 0x1737b
# endindex   = 19545
# len        = 60 (0x3c)
# len1       = 64 (0x40) to (0x1737c)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x17340:
     endbr64 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     movl     $0xe,%edi               # imm,reg :: 
     callq    Addr0x4b80              # value ::  target: 0x4b80 CodeAddr: 0x4b80 CALLS 0x4b80
     testq    %rax,%rax               # reg,reg ::  modifies flags!!
     je       Addr0x17370             # value ::  target: 0x17370 CodeAddr: 0x17370
     cmpb     $0x0,(%rax)             # imm,memBase ::  modifies flags!!
     leaq     Var0x1d243(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x1d243
     cmoveq   %rdx,%rax               # reg,reg :: 
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
Addr0x17370:
     leaq     Var0x1d243(%rip),%rax   # memOffsetBase,reg ::  DataAddr: 0x1d243
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    

# ----------- Function 388 ------------ 
#
# startAddr  = 0x17380
# startindex = 19547
# endAddr    = 0x17409
# endindex   = 19591
# len        = 138 (0x8a)
# len1       = 144 (0x90) to (0x1740a)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x17380:
     endbr64 
     pushq    %r12                    # reg :: 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     pushq    %rbx                    # reg :: 
     callq    Addr0x4b20              # value ::  target: 0x4b20 CodeAddr: 0x4b20 CALLS 0x4b20
     movq     %rbp,%rdi               # reg,reg :: 
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     js       Addr0x173ef             # value ::  target: 0x173ef CodeAddr: 0x173ef
     callq    Addr0x4bc0              # value ::  target: 0x4bc0 CodeAddr: 0x4bc0 CALLS 0x4bc0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     jne      Addr0x173d0             # value ::  target: 0x173d0 CodeAddr: 0x173d0
Addr0x173a0:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x17410             # value ::  target: 0x17410 CodeAddr: 0x17410 CALLS 0x17410
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x173ec             # value ::  target: 0x173ec CodeAddr: 0x173ec
     callq    Addr0x4760              # value ::  target: 0x4760 CodeAddr: 0x4760 CALLS 0x4760
     movq     %rbp,%rdi               # reg,reg :: 
     movl     (%rax),%r12d            # memBase,reg :: 
     movq     %rax,%rbx               # reg,reg :: 
     callq    Addr0x4860              # value ::  target: 0x4860 CodeAddr: 0x4860 CALLS 0x4860
     testl    %r12d,%r12d             # reg,reg ::  modifies flags!!
     jne      Addr0x17400             # value ::  target: 0x17400 CodeAddr: 0x17400
Addr0x173c4:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     retq    
Addr0x173d0:
     movq     %rbp,%rdi               # reg,reg :: 
     callq    Addr0x4b20              # value ::  target: 0x4b20 CodeAddr: 0x4b20 CALLS 0x4b20
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     movl     $0x1,%edx               # imm,reg :: 
     movl     %eax,%edi               # reg,reg :: 
     callq    Addr0x4990              # value ::  target: 0x4990 CodeAddr: 0x4990 CALLS 0x4990
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     jne      Addr0x173a0             # value ::  target: 0x173a0 CodeAddr: 0x173a0
Addr0x173ec:
     movq     %rbp,%rdi               # reg,reg :: 
Addr0x173ef:
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     jmp      Addr0x4860              # value ::  target: 0x4860 CodeAddr: 0x4860
Addr0x17400:
     movl     %r12d,(%rbx)            # reg,memBase :: 
     movl     $0xffffffff,%eax        # imm,reg :: 
     jmp      Addr0x173c4             # value ::  target: 0x173c4 CodeAddr: 0x173c4

# ----------- Function 389 ------------ 
#
# startAddr  = 0x17410
# startindex = 19593
# endAddr    = 0x17457
# endindex   = 19613
# len        = 72 (0x48)
# len1       = 80 (0x50) to (0x17458)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x17410:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     testq    %rdi,%rdi               # reg,reg ::  modifies flags!!
     je       Addr0x1742f             # value ::  target: 0x1742f CodeAddr: 0x1742f
     callq    Addr0x4bc0              # value ::  target: 0x4bc0 CodeAddr: 0x4bc0 CALLS 0x4bc0
     testl    %eax,%eax               # reg,reg ::  modifies flags!!
     je       Addr0x1742f             # value ::  target: 0x1742f CodeAddr: 0x1742f
     testl    $0x100,0x0(%rbp)        # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x17440             # value ::  target: 0x17440 CodeAddr: 0x17440
Addr0x1742f:
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     jmp      Addr0x4b70              # value ::  target: 0x4b70 CodeAddr: 0x4b70
Addr0x17440:
     movq     %rbp,%rdi               # reg,reg :: 
     movl     $0x1,%edx               # imm,reg :: 
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     callq    Addr0x17460             # value ::  target: 0x17460 CodeAddr: 0x17460 CALLS 0x17460
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     jmp      Addr0x4b70              # value ::  target: 0x4b70 CodeAddr: 0x4b70

# ----------- Function 390 ------------ 
#
# startAddr  = 0x17460
# startindex = 19615
# endAddr    = 0x174d2
# endindex   = 19648
# len        = 115 (0x73)
# len1       = 125 (0x7d) to (0x174d3)
# secid      = 15
# sec name   = .text
#  Has True Return
#  jumps out!
#
# -------------------------------------------

Addr0x17460:
     endbr64 
     pushq    %rbp                    # reg :: 
     movq     %rdi,%rbp               # reg,reg :: 
     subq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     0x8(%rdi),%rax          # memOffsetBase,reg :: 
     cmpq     %rax,0x10(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     je       Addr0x17488             # value ::  target: 0x17488 CodeAddr: 0x17488
Addr0x17476:
     addq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     movq     %rbp,%rdi               # reg,reg :: 
     popq     %rbp                    # reg :: 
     jmp      Addr0x4c70              # value ::  target: 0x4c70 CodeAddr: 0x4c70
Addr0x17488:
     movq     0x20(%rdi),%rax         # memOffsetBase,reg :: 
     cmpq     %rax,0x28(%rdi)         # reg,memOffsetBase ::  modifies flags!!
     jne      Addr0x17476             # value ::  target: 0x17476 CodeAddr: 0x17476
     cmpq     $0x0,0x48(%rdi)         # imm,memOffsetBase ::  modifies flags!!
     jne      Addr0x17476             # value ::  target: 0x17476 CodeAddr: 0x17476
     movl     %edx,0xc(%rsp)          # reg,memOffsetBase :: 
     movq     %rsi,(%rsp)             # reg,memBase :: 
     callq    Addr0x4b20              # value ::  target: 0x4b20 CodeAddr: 0x4b20 CALLS 0x4b20
     movl     0xc(%rsp),%edx          # memOffsetBase,reg :: 
     movq     (%rsp),%rsi             # memBase,reg :: 
     movl     %eax,%edi               # reg,reg :: 
     callq    Addr0x4990              # value ::  target: 0x4990 CodeAddr: 0x4990 CALLS 0x4990
     cmpq     $0xffffffffffffffff,%rax# imm,reg ::  modifies flags!!
     je       Addr0x174ce             # value ::  target: 0x174ce CodeAddr: 0x174ce
     andl     $0xffffffef,0x0(%rbp)   # imm,memOffsetBase ::  modifies flags!!
     movq     %rax,0x90(%rbp)         # reg,memOffsetBase :: 
     xorl     %eax,%eax               # reg,reg ::  modifies flags!!
Addr0x174c8:
     addq     $0x10,%rsp              # imm,reg ::  modifies flags!!
     popq     %rbp                    # reg :: 
     retq    
Addr0x174ce:
     orl      $0xffffffff,%eax        # imm,reg ::  modifies flags!!
     jmp      Addr0x174c8             # value ::  target: 0x174c8 CodeAddr: 0x174c8

# ----------- Function 391 ------------ 
#
# startAddr  = 0x174e0
# startindex = 19651
# endAddr    = 0x17544
# endindex   = 19684
# len        = 101 (0x65)
# len1       = 112 (0x70) to (0x17545)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x174e0:
     endbr64 
     pushq    %r15                    # reg :: 
     leaq     Var0x22010(%rip),%r15   # memOffsetBase,reg ::  DataAddr: 0x22010
     pushq    %r14                    # reg :: 
     movq     %rdx,%r14               # reg,reg :: 
     pushq    %r13                    # reg :: 
     movq     %rsi,%r13               # reg,reg :: 
     pushq    %r12                    # reg :: 
     movl     %edi,%r12d              # reg,reg :: 
     pushq    %rbp                    # reg :: 
     leaq     Var0x22018(%rip),%rbp   # memOffsetBase,reg ::  DataAddr: 0x22018
     pushq    %rbx                    # reg :: 
     subq     %r15,%rbp               # reg,reg ::  modifies flags!!
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     callq    Addr0x4000              # value ::  target: 0x4000 CodeAddr: 0x4000 CALLS 0x4000
     sarq     $0x3,%rbp               # imm,reg ::  modifies flags!!
     je       Addr0x17536             # value ::  target: 0x17536 CodeAddr: 0x17536
     xorl     %ebx,%ebx               # reg,reg ::  modifies flags!!
Addr0x17520:
     movq     %r14,%rdx               # reg,reg :: 
     movq     %r13,%rsi               # reg,reg :: 
     movl     %r12d,%edi              # reg,reg :: 
     callq    *(%r15,%rbx,8)          # memBaseIndexScale :: "*(%r15,%rbx,8)" != "(%r15,%rbx,8)" no target? 
#{'addr': 95529, 'op': 'callq', 'args': [Arg(argText='(%r15,%rbx,8)', star='*', offset=None, imm=None, reg=None, type='memBaseIndexScale', index='%rbx', scale=8, value=None, base='%r15', calcAddr=None, segReg=None, round=None)], 'idx': 19673, 'size': 4}
     addq     $0x1,%rbx               # imm,reg ::  modifies flags!!
     cmpq     %rbx,%rbp               # reg,reg ::  modifies flags!!
     jne      Addr0x17520             # value ::  target: 0x17520 CodeAddr: 0x17520
Addr0x17536:
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     popq     %rbx                    # reg :: 
     popq     %rbp                    # reg :: 
     popq     %r12                    # reg :: 
     popq     %r13                    # reg :: 
     popq     %r14                    # reg :: 
     popq     %r15                    # reg :: 
     retq    

# ----------- Function 392 ------------ 
#
# startAddr  = 0x17550
# startindex = 19686
# endAddr    = 0x17554
# endindex   = 19687
# len        = 5 (0x5)
# len1       = 15 (0xf) to (0x17555)
# secid      = 15
# sec name   = .text
#  Has True Return
#
# -------------------------------------------

Addr0x17550:
     endbr64 
     retq    

# ----------- Function 393 ------------ 
#
# startAddr  = 0x17560
# startindex = 19690
# endAddr    = 0x17571
# endindex   = 19693
# len        = 18 (0x12)
# secid      = 15
# sec name   = .text
#  jumps out!
#
# -------------------------------------------

Addr0x17560:
     endbr64 
     movq     Var0x23008(%rip),%rdx   # memOffsetBase,reg ::  DataAddr: 0x23008
     xorl     %esi,%esi               # reg,reg ::  modifies flags!!
     jmp      Addr0x4ca0              # value ::  target: 0x4ca0 CodeAddr: 0x4ca0

# Disassembly of section .fini

.section .fini,"ax",@progbits

# ----------- Function 402 ------------ 
#
# startAddr  = 0x17574
# startindex = 19694
# endAddr    = 0x17580
# endindex   = 19697
# len        = 13 (0xd)
# secid      = 16
# sec name   = .fini
# Falls through to next
#  Has True Return
#
# -------------------------------------------

Addr0x17574:
     endbr64 
     subq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     addq     $0x8,%rsp               # imm,reg ::  modifies flags!!
     retq    
.p2align 0

# Data section .interp (size 28)  0x00000318 - 0x00000333

.section .interp
Var0x318:       # next=0x18020, start=0x318, end=0x333
.long     0x62696c2f    # at addr 0x318  "/lib"
.long     0x6c2f3436    # at addr 0x31c  "64/l"
.long     0x696c2d64    # at addr 0x320  "d-li"
.long     0x2d78756e    # at addr 0x324  "nux-"
.long     0x2d363878    # at addr 0x328  "x86-"
.long     0x732e3436    # at addr 0x32c  "64.s"
.long     0x00322e6f    # at addr 0x330  "o.2."

.p2align 3

# Data section .note.gnu.property (size 32)  0x00000338 - 0x00000357

.section .note.gnu.property
Var0x338:       # next=0x18020, start=0x338, end=0x357
.long     0x00000004    # at addr 0x338  "...."
.long     0x00000010    # at addr 0x33c  "...."
.long     0x00000005    # at addr 0x340  "...."
.long     0x00554e47    # at addr 0x344  "GNU."
.long     0xc0000002    # at addr 0x348  "...."
.long     0x00000004    # at addr 0x34c  "...."
.long     0x00000003    # at addr 0x350  "...."
.long     0x00000000    # at addr 0x354  "...."

.p2align 2

# Data section .note.gnu.build-id (size 36)  0x00000358 - 0x0000037b

.section .note.gnu.build-id
Var0x358:       # next=0x18020, start=0x358, end=0x37b
.long     0x00000004    # at addr 0x358  "...."
.long     0x00000014    # at addr 0x35c  "...."
.long     0x00000003    # at addr 0x360  "...."
.long     0x00554e47    # at addr 0x364  "GNU."
.long     0x83ad152f    # at addr 0x368  "/..."
.long     0x9d33e36b    # at addr 0x36c  "k.3."
.long     0x6a2e0eec    # at addr 0x370  "...j"
.long     0x087e633c    # at addr 0x374  "<c~."
.long     0xbdac8ae4    # at addr 0x378  "...."

.p2align 2

# Data section .note.ABI-tag (size 32)  0x0000037c - 0x0000039b

.section .note.ABI-tag
Var0x37c:       # next=0x18020, start=0x37c, end=0x39b
.long     0x00000004    # at addr 0x37c  "...."
.long     0x00000010    # at addr 0x380  "...."
.long     0x00000001    # at addr 0x384  "...."
.long     0x00554e47    # at addr 0x388  "GNU."
.long     0x00000000    # at addr 0x38c  "...."
.long     0x00000003    # at addr 0x390  "...."
.long     0x00000002    # at addr 0x394  "...."
.long     0x00000000    # at addr 0x398  "...."

.p2align 3

# Data section .gnu.hash (size 228)  0x000003a0 - 0x00000483

.section .gnu.hash
Var0x3a0:       # next=0x18020, start=0x3a0, end=0x483
.long     0x00000011    # at addr 0x3a0  "...."
.long     0x0000006f    # at addr 0x3a4  "o..."
.long     0x00000004    # at addr 0x3a8  "...."
.long     0x00000008    # at addr 0x3ac  "...."
.long     0x20120c14    # at addr 0x3b0  "... "
.long     0x620c2900    # at addr 0x3b4  ".).b"
.long     0x0000d040    # at addr 0x3b8  "@..."
.long     0xc0002400    # at addr 0x3bc  ".$.."
.long     0x21492a80    # at addr 0x3c0  ".*I!"
.long     0x14852005    # at addr 0x3c4  ". .."
.long     0x00016102    # at addr 0x3c8  ".a.."
.long     0x00001024    # at addr 0x3cc  "$..."
.long     0x0000006f    # at addr 0x3d0  "o..."
.long     0x00000000    # at addr 0x3d4  "...."
.long     0x00000071    # at addr 0x3d8  "q..."
.long     0x00000072    # at addr 0x3dc  "r..."
.long     0x00000075    # at addr 0x3e0  "u..."
.long     0x0000007a    # at addr 0x3e4  "z..."
.long     0x0000007d    # at addr 0x3e8  "}..."
.long     0x0000007f    # at addr 0x3ec  "..."
.long     0x00000080    # at addr 0x3f0  "...."
.long     0x00000000    # at addr 0x3f4  "...."
.long     0x00000082    # at addr 0x3f8  "...."
.long     0x00000084    # at addr 0x3fc  "...."
.long     0x00000085    # at addr 0x400  "...."
.long     0x00000000    # at addr 0x404  "...."
.long     0x00000087    # at addr 0x408  "...."
.long     0x00000088    # at addr 0x40c  "...."
.long     0x00000089    # at addr 0x410  "...."
.long     0x9e7650bc    # at addr 0x414  ".Pv."
.long     0x908741c9    # at addr 0x418  ".A.."
.long     0x12f7c433    # at addr 0x41c  "3..."
.long     0x7c96f086    # at addr 0x420  "...|"
.long     0x9789a096    # at addr 0x424  "...."
.long     0x864b043f    # at addr 0x428  "?.K."
.long     0xd3b8d42a    # at addr 0x42c  "*..."
.long     0xc0e34bac    # at addr 0x430  ".K.."
.long     0x23424dc8    # at addr 0x434  ".MB#"
.long     0xdee42d46    # at addr 0x438  "F-.."
.long     0x72632ccf    # at addr 0x43c  ".,cr"
.long     0xa4268b04    # at addr 0x440  "..&."
.long     0xd632099c    # at addr 0x444  "..2."
.long     0xad3c9893    # at addr 0x448  "..<."
.long     0xeb01fab6    # at addr 0x44c  "...."
.long     0x7ffd8e4f    # at addr 0x450  "O.."
.long     0x1c8bf239    # at addr 0x454  "9..."
.long     0x0ba53e4c    # at addr 0x458  "L>.."
.long     0xf54162e5    # at addr 0x45c  ".bA."
.long     0x5b7f3e02    # at addr 0x460  ".>["
.long     0x12f7a2b3    # at addr 0x464  "...."
.long     0x759a6a7f    # at addr 0x468  "j.u"
.long     0x234d8a10    # at addr 0x46c  "..M#"
.long     0x6dce65d1    # at addr 0x470  ".e.m"
.long     0x60e0c78d    # at addr 0x474  "...`"
.long     0x0d39ad3d    # at addr 0x478  "=.9."
.long     0x1c8c1d28    # at addr 0x47c  "(..."
.long     0x2a63ed1d    # at addr 0x480  "..c*"

.p2align 3

# Data section .dynsym (size 3336)  0x00000488 - 0x0000118f

.section .dynsym
Var0x488:       # next=0x18020, start=0x488, end=0x118f
.long     0x00000000    # at addr 0x488  "...."
.long     0x00000000    # at addr 0x48c  "...."
.long     0x00000000    # at addr 0x490  "...."
.long     0x00000000    # at addr 0x494  "...."
.long     0x00000000    # at addr 0x498  "...."
.long     0x00000000    # at addr 0x49c  "...."
.long     0x0000041a    # at addr 0x4a0  "...."
.long     0x00000012    # at addr 0x4a4  "...."
.long     0x00000000    # at addr 0x4a8  "...."
.long     0x00000000    # at addr 0x4ac  "...."
.long     0x00000000    # at addr 0x4b0  "...."
.long     0x00000000    # at addr 0x4b4  "...."
.long     0x000002ca    # at addr 0x4b8  "...."
.long     0x00000012    # at addr 0x4bc  "...."
.long     0x00000000    # at addr 0x4c0  "...."
.long     0x00000000    # at addr 0x4c4  "...."
.long     0x00000000    # at addr 0x4c8  "...."
.long     0x00000000    # at addr 0x4cc  "...."
.long     0x00000130    # at addr 0x4d0  "0..."
.long     0x00000012    # at addr 0x4d4  "...."
.long     0x00000000    # at addr 0x4d8  "...."
.long     0x00000000    # at addr 0x4dc  "...."
.long     0x00000000    # at addr 0x4e0  "...."
.long     0x00000000    # at addr 0x4e4  "...."
.long     0x00000330    # at addr 0x4e8  "0..."
.long     0x00000012    # at addr 0x4ec  "...."
.long     0x00000000    # at addr 0x4f0  "...."
.long     0x00000000    # at addr 0x4f4  "...."
.long     0x00000000    # at addr 0x4f8  "...."
.long     0x00000000    # at addr 0x4fc  "...."
.long     0x00000294    # at addr 0x500  "...."
.long     0x00000012    # at addr 0x504  "...."
.long     0x00000000    # at addr 0x508  "...."
.long     0x00000000    # at addr 0x50c  "...."
.long     0x00000000    # at addr 0x510  "...."
.long     0x00000000    # at addr 0x514  "...."
.long     0x00000167    # at addr 0x518  "g..."
.long     0x00000012    # at addr 0x51c  "...."
.long     0x00000000    # at addr 0x520  "...."
.long     0x00000000    # at addr 0x524  "...."
.long     0x00000000    # at addr 0x528  "...."
.long     0x00000000    # at addr 0x52c  "...."
.long     0x00000208    # at addr 0x530  "...."
.long     0x00000012    # at addr 0x534  "...."
.long     0x00000000    # at addr 0x538  "...."
.long     0x00000000    # at addr 0x53c  "...."
.long     0x00000000    # at addr 0x540  "...."
.long     0x00000000    # at addr 0x544  "...."
.long     0x000000c6    # at addr 0x548  "...."
.long     0x00000012    # at addr 0x54c  "...."
.long     0x00000000    # at addr 0x550  "...."
.long     0x00000000    # at addr 0x554  "...."
.long     0x00000000    # at addr 0x558  "...."
.long     0x00000000    # at addr 0x55c  "...."
.long     0x00000011    # at addr 0x560  "...."
.long     0x00000020    # at addr 0x564  " ..."
.long     0x00000000    # at addr 0x568  "...."
.long     0x00000000    # at addr 0x56c  "...."
.long     0x00000000    # at addr 0x570  "...."
.long     0x00000000    # at addr 0x574  "...."
.long     0x000001a9    # at addr 0x578  "...."
.long     0x00000012    # at addr 0x57c  "...."
.long     0x00000000    # at addr 0x580  "...."
.long     0x00000000    # at addr 0x584  "...."
.long     0x00000000    # at addr 0x588  "...."
.long     0x00000000    # at addr 0x58c  "...."
.long     0x0000016d    # at addr 0x590  "m..."
.long     0x00000012    # at addr 0x594  "...."
.long     0x00000000    # at addr 0x598  "...."
.long     0x00000000    # at addr 0x59c  "...."
.long     0x00000000    # at addr 0x5a0  "...."
.long     0x00000000    # at addr 0x5a4  "...."
.long     0x00000087    # at addr 0x5a8  "...."
.long     0x00000012    # at addr 0x5ac  "...."
.long     0x00000000    # at addr 0x5b0  "...."
.long     0x00000000    # at addr 0x5b4  "...."
.long     0x00000000    # at addr 0x5b8  "...."
.long     0x00000000    # at addr 0x5bc  "...."
.long     0x000003d1    # at addr 0x5c0  "...."
.long     0x00000012    # at addr 0x5c4  "...."
.long     0x00000000    # at addr 0x5c8  "...."
.long     0x00000000    # at addr 0x5cc  "...."
.long     0x00000000    # at addr 0x5d0  "...."
.long     0x00000000    # at addr 0x5d4  "...."
.long     0x000001cc    # at addr 0x5d8  "...."
.long     0x00000012    # at addr 0x5dc  "...."
.long     0x00000000    # at addr 0x5e0  "...."
.long     0x00000000    # at addr 0x5e4  "...."
.long     0x00000000    # at addr 0x5e8  "...."
.long     0x00000000    # at addr 0x5ec  "...."
.long     0x000003a0    # at addr 0x5f0  "...."
.long     0x00000012    # at addr 0x5f4  "...."
.long     0x00000000    # at addr 0x5f8  "...."
.long     0x00000000    # at addr 0x5fc  "...."
.long     0x00000000    # at addr 0x600  "...."
.long     0x00000000    # at addr 0x604  "...."
.long     0x000003e3    # at addr 0x608  "...."
.long     0x00000012    # at addr 0x60c  "...."
.long     0x00000000    # at addr 0x610  "...."
.long     0x00000000    # at addr 0x614  "...."
.long     0x00000000    # at addr 0x618  "...."
.long     0x00000000    # at addr 0x61c  "...."
.long     0x0000025a    # at addr 0x620  "Z..."
.long     0x00000012    # at addr 0x624  "...."
.long     0x00000000    # at addr 0x628  "...."
.long     0x00000000    # at addr 0x62c  "...."
.long     0x00000000    # at addr 0x630  "...."
.long     0x00000000    # at addr 0x634  "...."
.long     0x000001fd    # at addr 0x638  "...."
.long     0x00000012    # at addr 0x63c  "...."
.long     0x00000000    # at addr 0x640  "...."
.long     0x00000000    # at addr 0x644  "...."
.long     0x00000000    # at addr 0x648  "...."
.long     0x00000000    # at addr 0x64c  "...."
.long     0x00000127    # at addr 0x650  "'..."
.long     0x00000012    # at addr 0x654  "...."
.long     0x00000000    # at addr 0x658  "...."
.long     0x00000000    # at addr 0x65c  "...."
.long     0x00000000    # at addr 0x660  "...."
.long     0x00000000    # at addr 0x664  "...."
.long     0x0000033f    # at addr 0x668  "?..."
.long     0x00000012    # at addr 0x66c  "...."
.long     0x00000000    # at addr 0x670  "...."
.long     0x00000000    # at addr 0x674  "...."
.long     0x00000000    # at addr 0x678  "...."
.long     0x00000000    # at addr 0x67c  "...."
.long     0x000003c3    # at addr 0x680  "...."
.long     0x00000012    # at addr 0x684  "...."
.long     0x00000000    # at addr 0x688  "...."
.long     0x00000000    # at addr 0x68c  "...."
.long     0x00000000    # at addr 0x690  "...."
.long     0x00000000    # at addr 0x694  "...."
.long     0x0000022a    # at addr 0x698  "*..."
.long     0x00000012    # at addr 0x69c  "...."
.long     0x00000000    # at addr 0x6a0  "...."
.long     0x00000000    # at addr 0x6a4  "...."
.long     0x00000000    # at addr 0x6a8  "...."
.long     0x00000000    # at addr 0x6ac  "...."
.long     0x000004a8    # at addr 0x6b0  "...."
.long     0x00000012    # at addr 0x6b4  "...."
.long     0x00000000    # at addr 0x6b8  "...."
.long     0x00000000    # at addr 0x6bc  "...."
.long     0x00000000    # at addr 0x6c0  "...."
.long     0x00000000    # at addr 0x6c4  "...."
.long     0x00000277    # at addr 0x6c8  "w..."
.long     0x00000012    # at addr 0x6cc  "...."
.long     0x00000000    # at addr 0x6d0  "...."
.long     0x00000000    # at addr 0x6d4  "...."
.long     0x00000000    # at addr 0x6d8  "...."
.long     0x00000000    # at addr 0x6dc  "...."
.long     0x000002b4    # at addr 0x6e0  "...."
.long     0x00000012    # at addr 0x6e4  "...."
.long     0x00000000    # at addr 0x6e8  "...."
.long     0x00000000    # at addr 0x6ec  "...."
.long     0x00000000    # at addr 0x6f0  "...."
.long     0x00000000    # at addr 0x6f4  "...."
.long     0x000000ff    # at addr 0x6f8  "...."
.long     0x00000012    # at addr 0x6fc  "...."
.long     0x00000000    # at addr 0x700  "...."
.long     0x00000000    # at addr 0x704  "...."
.long     0x00000000    # at addr 0x708  "...."
.long     0x00000000    # at addr 0x70c  "...."
.long     0x000004a4    # at addr 0x710  "...."
.long     0x00000012    # at addr 0x714  "...."
.long     0x00000000    # at addr 0x718  "...."
.long     0x00000000    # at addr 0x71c  "...."
.long     0x00000000    # at addr 0x720  "...."
.long     0x00000000    # at addr 0x724  "...."
.long     0x000000ed    # at addr 0x728  "...."
.long     0x00000012    # at addr 0x72c  "...."
.long     0x00000000    # at addr 0x730  "...."
.long     0x00000000    # at addr 0x734  "...."
.long     0x00000000    # at addr 0x738  "...."
.long     0x00000000    # at addr 0x73c  "...."
.long     0x000001b5    # at addr 0x740  "...."
.long     0x00000012    # at addr 0x744  "...."
.long     0x00000000    # at addr 0x748  "...."
.long     0x00000000    # at addr 0x74c  "...."
.long     0x00000000    # at addr 0x750  "...."
.long     0x00000000    # at addr 0x754  "...."
.long     0x000001e3    # at addr 0x758  "...."
.long     0x00000012    # at addr 0x75c  "...."
.long     0x00000000    # at addr 0x760  "...."
.long     0x00000000    # at addr 0x764  "...."
.long     0x00000000    # at addr 0x768  "...."
.long     0x00000000    # at addr 0x76c  "...."
.long     0x0000014d    # at addr 0x770  "M..."
.long     0x00000012    # at addr 0x774  "...."
.long     0x00000000    # at addr 0x778  "...."
.long     0x00000000    # at addr 0x77c  "...."
.long     0x00000000    # at addr 0x780  "...."
.long     0x00000000    # at addr 0x784  "...."
.long     0x0000013c    # at addr 0x788  "<..."
.long     0x00000012    # at addr 0x78c  "...."
.long     0x00000000    # at addr 0x790  "...."
.long     0x00000000    # at addr 0x794  "...."
.long     0x00000000    # at addr 0x798  "...."
.long     0x00000000    # at addr 0x79c  "...."
.long     0x00000348    # at addr 0x7a0  "H..."
.long     0x00000012    # at addr 0x7a4  "...."
.long     0x00000000    # at addr 0x7a8  "...."
.long     0x00000000    # at addr 0x7ac  "...."
.long     0x00000000    # at addr 0x7b0  "...."
.long     0x00000000    # at addr 0x7b4  "...."
.long     0x000000be    # at addr 0x7b8  "...."
.long     0x00000012    # at addr 0x7bc  "...."
.long     0x00000000    # at addr 0x7c0  "...."
.long     0x00000000    # at addr 0x7c4  "...."
.long     0x00000000    # at addr 0x7c8  "...."
.long     0x00000000    # at addr 0x7cc  "...."
.long     0x000003dc    # at addr 0x7d0  "...."
.long     0x00000012    # at addr 0x7d4  "...."
.long     0x00000000    # at addr 0x7d8  "...."
.long     0x00000000    # at addr 0x7dc  "...."
.long     0x00000000    # at addr 0x7e0  "...."
.long     0x00000000    # at addr 0x7e4  "...."
.long     0x00000111    # at addr 0x7e8  "...."
.long     0x00000012    # at addr 0x7ec  "...."
.long     0x00000000    # at addr 0x7f0  "...."
.long     0x00000000    # at addr 0x7f4  "...."
.long     0x00000000    # at addr 0x7f8  "...."
.long     0x00000000    # at addr 0x7fc  "...."
.long     0x000004b3    # at addr 0x800  "...."
.long     0x00000012    # at addr 0x804  "...."
.long     0x00000000    # at addr 0x808  "...."
.long     0x00000000    # at addr 0x80c  "...."
.long     0x00000000    # at addr 0x810  "...."
.long     0x00000000    # at addr 0x814  "...."
.long     0x00000506    # at addr 0x818  "...."
.long     0x00000012    # at addr 0x81c  "...."
.long     0x00000000    # at addr 0x820  "...."
.long     0x00000000    # at addr 0x824  "...."
.long     0x00000000    # at addr 0x828  "...."
.long     0x00000000    # at addr 0x82c  "...."
.long     0x0000050f    # at addr 0x830  "...."
.long     0x00000012    # at addr 0x834  "...."
.long     0x00000000    # at addr 0x838  "...."
.long     0x00000000    # at addr 0x83c  "...."
.long     0x00000000    # at addr 0x840  "...."
.long     0x00000000    # at addr 0x844  "...."
.long     0x000000d5    # at addr 0x848  "...."
.long     0x00000012    # at addr 0x84c  "...."
.long     0x00000000    # at addr 0x850  "...."
.long     0x00000000    # at addr 0x854  "...."
.long     0x00000000    # at addr 0x858  "...."
.long     0x00000000    # at addr 0x85c  "...."
.long     0x00000056    # at addr 0x860  "V..."
.long     0x00000012    # at addr 0x864  "...."
.long     0x00000000    # at addr 0x868  "...."
.long     0x00000000    # at addr 0x86c  "...."
.long     0x00000000    # at addr 0x870  "...."
.long     0x00000000    # at addr 0x874  "...."
.long     0x0000008e    # at addr 0x878  "...."
.long     0x00000012    # at addr 0x87c  "...."
.long     0x00000000    # at addr 0x880  "...."
.long     0x00000000    # at addr 0x884  "...."
.long     0x00000000    # at addr 0x888  "...."
.long     0x00000000    # at addr 0x88c  "...."
.long     0x0000026a    # at addr 0x890  "j..."
.long     0x00000012    # at addr 0x894  "...."
.long     0x00000000    # at addr 0x898  "...."
.long     0x00000000    # at addr 0x89c  "...."
.long     0x00000000    # at addr 0x8a0  "...."
.long     0x00000000    # at addr 0x8a4  "...."
.long     0x00000393    # at addr 0x8a8  "...."
.long     0x00000012    # at addr 0x8ac  "...."
.long     0x00000000    # at addr 0x8b0  "...."
.long     0x00000000    # at addr 0x8b4  "...."
.long     0x00000000    # at addr 0x8b8  "...."
.long     0x00000000    # at addr 0x8bc  "...."
.long     0x0000019b    # at addr 0x8c0  "...."
.long     0x00000012    # at addr 0x8c4  "...."
.long     0x00000000    # at addr 0x8c8  "...."
.long     0x00000000    # at addr 0x8cc  "...."
.long     0x00000000    # at addr 0x8d0  "...."
.long     0x00000000    # at addr 0x8d4  "...."
.long     0x0000051a    # at addr 0x8d8  "...."
.long     0x00000012    # at addr 0x8dc  "...."
.long     0x00000000    # at addr 0x8e0  "...."
.long     0x00000000    # at addr 0x8e4  "...."
.long     0x00000000    # at addr 0x8e8  "...."
.long     0x00000000    # at addr 0x8ec  "...."
.long     0x000000a4    # at addr 0x8f0  "...."
.long     0x00000012    # at addr 0x8f4  "...."
.long     0x00000000    # at addr 0x8f8  "...."
.long     0x00000000    # at addr 0x8fc  "...."
.long     0x00000000    # at addr 0x900  "...."
.long     0x00000000    # at addr 0x904  "...."
.long     0x000001f6    # at addr 0x908  "...."
.long     0x00000012    # at addr 0x90c  "...."
.long     0x00000000    # at addr 0x910  "...."
.long     0x00000000    # at addr 0x914  "...."
.long     0x00000000    # at addr 0x918  "...."
.long     0x00000000    # at addr 0x91c  "...."
.long     0x00000307    # at addr 0x920  "...."
.long     0x00000012    # at addr 0x924  "...."
.long     0x00000000    # at addr 0x928  "...."
.long     0x00000000    # at addr 0x92c  "...."
.long     0x00000000    # at addr 0x930  "...."
.long     0x00000000    # at addr 0x934  "...."
.long     0x00000385    # at addr 0x938  "...."
.long     0x00000012    # at addr 0x93c  "...."
.long     0x00000000    # at addr 0x940  "...."
.long     0x00000000    # at addr 0x944  "...."
.long     0x00000000    # at addr 0x948  "...."
.long     0x00000000    # at addr 0x94c  "...."
.long     0x00000173    # at addr 0x950  "s..."
.long     0x00000012    # at addr 0x954  "...."
.long     0x00000000    # at addr 0x958  "...."
.long     0x00000000    # at addr 0x95c  "...."
.long     0x00000000    # at addr 0x960  "...."
.long     0x00000000    # at addr 0x964  "...."
.long     0x00000108    # at addr 0x968  "...."
.long     0x00000012    # at addr 0x96c  "...."
.long     0x00000000    # at addr 0x970  "...."
.long     0x00000000    # at addr 0x974  "...."
.long     0x00000000    # at addr 0x978  "...."
.long     0x00000000    # at addr 0x97c  "...."
.long     0x000004df    # at addr 0x980  "...."
.long     0x00000012    # at addr 0x984  "...."
.long     0x00000000    # at addr 0x988  "...."
.long     0x00000000    # at addr 0x98c  "...."
.long     0x00000000    # at addr 0x990  "...."
.long     0x00000000    # at addr 0x994  "...."
.long     0x00000219    # at addr 0x998  "...."
.long     0x00000012    # at addr 0x99c  "...."
.long     0x00000000    # at addr 0x9a0  "...."
.long     0x00000000    # at addr 0x9a4  "...."
.long     0x00000000    # at addr 0x9a8  "...."
.long     0x00000000    # at addr 0x9ac  "...."
.long     0x00000231    # at addr 0x9b0  "1..."
.long     0x00000012    # at addr 0x9b4  "...."
.long     0x00000000    # at addr 0x9b8  "...."
.long     0x00000000    # at addr 0x9bc  "...."
.long     0x00000000    # at addr 0x9c0  "...."
.long     0x00000000    # at addr 0x9c4  "...."
.long     0x0000053b    # at addr 0x9c8  ";..."
.long     0x00000012    # at addr 0x9cc  "...."
.long     0x00000000    # at addr 0x9d0  "...."
.long     0x00000000    # at addr 0x9d4  "...."
.long     0x00000000    # at addr 0x9d8  "...."
.long     0x00000000    # at addr 0x9dc  "...."
.long     0x000001dc    # at addr 0x9e0  "...."
.long     0x00000012    # at addr 0x9e4  "...."
.long     0x00000000    # at addr 0x9e8  "...."
.long     0x00000000    # at addr 0x9ec  "...."
.long     0x00000000    # at addr 0x9f0  "...."
.long     0x00000000    # at addr 0x9f4  "...."
.long     0x0000006a    # at addr 0x9f8  "j..."
.long     0x00000012    # at addr 0x9fc  "...."
.long     0x00000000    # at addr 0xa00  "...."
.long     0x00000000    # at addr 0xa04  "...."
.long     0x00000000    # at addr 0xa08  "...."
.long     0x00000000    # at addr 0xa0c  "...."
.long     0x000004ce    # at addr 0xa10  "...."
.long     0x00000012    # at addr 0xa14  "...."
.long     0x00000000    # at addr 0xa18  "...."
.long     0x00000000    # at addr 0xa1c  "...."
.long     0x00000000    # at addr 0xa20  "...."
.long     0x00000000    # at addr 0xa24  "...."
.long     0x00000120    # at addr 0xa28  " ..."
.long     0x00000012    # at addr 0xa2c  "...."
.long     0x00000000    # at addr 0xa30  "...."
.long     0x00000000    # at addr 0xa34  "...."
.long     0x00000000    # at addr 0xa38  "...."
.long     0x00000000    # at addr 0xa3c  "...."
.long     0x000004f1    # at addr 0xa40  "...."
.long     0x00000012    # at addr 0xa44  "...."
.long     0x00000000    # at addr 0xa48  "...."
.long     0x00000000    # at addr 0xa4c  "...."
.long     0x00000000    # at addr 0xa50  "...."
.long     0x00000000    # at addr 0xa54  "...."
.long     0x000001d3    # at addr 0xa58  "...."
.long     0x00000012    # at addr 0xa5c  "...."
.long     0x00000000    # at addr 0xa60  "...."
.long     0x00000000    # at addr 0xa64  "...."
.long     0x00000000    # at addr 0xa68  "...."
.long     0x00000000    # at addr 0xa6c  "...."
.long     0x000003aa    # at addr 0xa70  "...."
.long     0x00000012    # at addr 0xa74  "...."
.long     0x00000000    # at addr 0xa78  "...."
.long     0x00000000    # at addr 0xa7c  "...."
.long     0x00000000    # at addr 0xa80  "...."
.long     0x00000000    # at addr 0xa84  "...."
.long     0x000001ea    # at addr 0xa88  "...."
.long     0x00000012    # at addr 0xa8c  "...."
.long     0x00000000    # at addr 0xa90  "...."
.long     0x00000000    # at addr 0xa94  "...."
.long     0x00000000    # at addr 0xa98  "...."
.long     0x00000000    # at addr 0xa9c  "...."
.long     0x0000002d    # at addr 0xaa0  "-..."
.long     0x00000020    # at addr 0xaa4  " ..."
.long     0x00000000    # at addr 0xaa8  "...."
.long     0x00000000    # at addr 0xaac  "...."
.long     0x00000000    # at addr 0xab0  "...."
.long     0x00000000    # at addr 0xab4  "...."
.long     0x00000270    # at addr 0xab8  "p..."
.long     0x00000012    # at addr 0xabc  "...."
.long     0x00000000    # at addr 0xac0  "...."
.long     0x00000000    # at addr 0xac4  "...."
.long     0x00000000    # at addr 0xac8  "...."
.long     0x00000000    # at addr 0xacc  "...."
.long     0x00000251    # at addr 0xad0  "Q..."
.long     0x00000012    # at addr 0xad4  "...."
.long     0x00000000    # at addr 0xad8  "...."
.long     0x00000000    # at addr 0xadc  "...."
.long     0x00000000    # at addr 0xae0  "...."
.long     0x00000000    # at addr 0xae4  "...."
.long     0x00000057    # at addr 0xae8  "W..."
.long     0x00000012    # at addr 0xaec  "...."
.long     0x00000000    # at addr 0xaf0  "...."
.long     0x00000000    # at addr 0xaf4  "...."
.long     0x00000000    # at addr 0xaf8  "...."
.long     0x00000000    # at addr 0xafc  "...."
.long     0x000002a2    # at addr 0xb00  "...."
.long     0x00000012    # at addr 0xb04  "...."
.long     0x00000000    # at addr 0xb08  "...."
.long     0x00000000    # at addr 0xb0c  "...."
.long     0x00000000    # at addr 0xb10  "...."
.long     0x00000000    # at addr 0xb14  "...."
.long     0x0000035d    # at addr 0xb18  "]..."
.long     0x00000012    # at addr 0xb1c  "...."
.long     0x00000000    # at addr 0xb20  "...."
.long     0x00000000    # at addr 0xb24  "...."
.long     0x00000000    # at addr 0xb28  "...."
.long     0x00000000    # at addr 0xb2c  "...."
.long     0x000004d5    # at addr 0xb30  "...."
.long     0x00000012    # at addr 0xb34  "...."
.long     0x00000000    # at addr 0xb38  "...."
.long     0x00000000    # at addr 0xb3c  "...."
.long     0x00000000    # at addr 0xb40  "...."
.long     0x00000000    # at addr 0xb44  "...."
.long     0x0000047c    # at addr 0xb48  "|..."
.long     0x00000012    # at addr 0xb4c  "...."
.long     0x00000000    # at addr 0xb50  "...."
.long     0x00000000    # at addr 0xb54  "...."
.long     0x00000000    # at addr 0xb58  "...."
.long     0x00000000    # at addr 0xb5c  "...."
.long     0x000000ac    # at addr 0xb60  "...."
.long     0x00000012    # at addr 0xb64  "...."
.long     0x00000000    # at addr 0xb68  "...."
.long     0x00000000    # at addr 0xb6c  "...."
.long     0x00000000    # at addr 0xb70  "...."
.long     0x00000000    # at addr 0xb74  "...."
.long     0x000002ff    # at addr 0xb78  "...."
.long     0x00000012    # at addr 0xb7c  "...."
.long     0x00000000    # at addr 0xb80  "...."
.long     0x00000000    # at addr 0xb84  "...."
.long     0x00000000    # at addr 0xb88  "...."
.long     0x00000000    # at addr 0xb8c  "...."
.long     0x00000080    # at addr 0xb90  "...."
.long     0x00000012    # at addr 0xb94  "...."
.long     0x00000000    # at addr 0xb98  "...."
.long     0x00000000    # at addr 0xb9c  "...."
.long     0x00000000    # at addr 0xba0  "...."
.long     0x00000000    # at addr 0xba4  "...."
.long     0x000002a8    # at addr 0xba8  "...."
.long     0x00000012    # at addr 0xbac  "...."
.long     0x00000000    # at addr 0xbb0  "...."
.long     0x00000000    # at addr 0xbb4  "...."
.long     0x00000000    # at addr 0xbb8  "...."
.long     0x00000000    # at addr 0xbbc  "...."
.long     0x00000354    # at addr 0xbc0  "T..."
.long     0x00000012    # at addr 0xbc4  "...."
.long     0x00000000    # at addr 0xbc8  "...."
.long     0x00000000    # at addr 0xbcc  "...."
.long     0x00000000    # at addr 0xbd0  "...."
.long     0x00000000    # at addr 0xbd4  "...."
.long     0x000004fe    # at addr 0xbd8  "...."
.long     0x00000012    # at addr 0xbdc  "...."
.long     0x00000000    # at addr 0xbe0  "...."
.long     0x00000000    # at addr 0xbe4  "...."
.long     0x00000000    # at addr 0xbe8  "...."
.long     0x00000000    # at addr 0xbec  "...."
.long     0x000003ec    # at addr 0xbf0  "...."
.long     0x00000012    # at addr 0xbf4  "...."
.long     0x00000000    # at addr 0xbf8  "...."
.long     0x00000000    # at addr 0xbfc  "...."
.long     0x00000000    # at addr 0xc00  "...."
.long     0x00000000    # at addr 0xc04  "...."
.long     0x000002ed    # at addr 0xc08  "...."
.long     0x00000012    # at addr 0xc0c  "...."
.long     0x00000000    # at addr 0xc10  "...."
.long     0x00000000    # at addr 0xc14  "...."
.long     0x00000000    # at addr 0xc18  "...."
.long     0x00000000    # at addr 0xc1c  "...."
.long     0x000004be    # at addr 0xc20  "...."
.long     0x00000012    # at addr 0xc24  "...."
.long     0x00000000    # at addr 0xc28  "...."
.long     0x00000000    # at addr 0xc2c  "...."
.long     0x00000000    # at addr 0xc30  "...."
.long     0x00000000    # at addr 0xc34  "...."
.long     0x0000015f    # at addr 0xc38  "_..."
.long     0x00000012    # at addr 0xc3c  "...."
.long     0x00000000    # at addr 0xc40  "...."
.long     0x00000000    # at addr 0xc44  "...."
.long     0x00000000    # at addr 0xc48  "...."
.long     0x00000000    # at addr 0xc4c  "...."
.long     0x000000f7    # at addr 0xc50  "...."
.long     0x00000012    # at addr 0xc54  "...."
.long     0x00000000    # at addr 0xc58  "...."
.long     0x00000000    # at addr 0xc5c  "...."
.long     0x00000000    # at addr 0xc60  "...."
.long     0x00000000    # at addr 0xc64  "...."
.long     0x000000b4    # at addr 0xc68  "...."
.long     0x00000012    # at addr 0xc6c  "...."
.long     0x00000000    # at addr 0xc70  "...."
.long     0x00000000    # at addr 0xc74  "...."
.long     0x00000000    # at addr 0xc78  "...."
.long     0x00000000    # at addr 0xc7c  "...."
.long     0x00000097    # at addr 0xc80  "...."
.long     0x00000012    # at addr 0xc84  "...."
.long     0x00000000    # at addr 0xc88  "...."
.long     0x00000000    # at addr 0xc8c  "...."
.long     0x00000000    # at addr 0xc90  "...."
.long     0x00000000    # at addr 0xc94  "...."
.long     0x0000028d    # at addr 0xc98  "...."
.long     0x00000012    # at addr 0xc9c  "...."
.long     0x00000000    # at addr 0xca0  "...."
.long     0x00000000    # at addr 0xca4  "...."
.long     0x00000000    # at addr 0xca8  "...."
.long     0x00000000    # at addr 0xcac  "...."
.long     0x00000192    # at addr 0xcb0  "...."
.long     0x00000012    # at addr 0xcb4  "...."
.long     0x00000000    # at addr 0xcb8  "...."
.long     0x00000000    # at addr 0xcbc  "...."
.long     0x00000000    # at addr 0xcc0  "...."
.long     0x00000000    # at addr 0xcc4  "...."
.long     0x00000220    # at addr 0xcc8  " ..."
.long     0x00000012    # at addr 0xccc  "...."
.long     0x00000000    # at addr 0xcd0  "...."
.long     0x00000000    # at addr 0xcd4  "...."
.long     0x00000000    # at addr 0xcd8  "...."
.long     0x00000000    # at addr 0xcdc  "...."
.long     0x0000048d    # at addr 0xce0  "...."
.long     0x00000012    # at addr 0xce4  "...."
.long     0x00000000    # at addr 0xce8  "...."
.long     0x00000000    # at addr 0xcec  "...."
.long     0x00000000    # at addr 0xcf0  "...."
.long     0x00000000    # at addr 0xcf4  "...."
.long     0x0000011a    # at addr 0xcf8  "...."
.long     0x00000012    # at addr 0xcfc  "...."
.long     0x00000000    # at addr 0xd00  "...."
.long     0x00000000    # at addr 0xd04  "...."
.long     0x00000000    # at addr 0xd08  "...."
.long     0x00000000    # at addr 0xd0c  "...."
.long     0x000004f7    # at addr 0xd10  "...."
.long     0x00000012    # at addr 0xd14  "...."
.long     0x00000000    # at addr 0xd18  "...."
.long     0x00000000    # at addr 0xd1c  "...."
.long     0x00000000    # at addr 0xd20  "...."
.long     0x00000000    # at addr 0xd24  "...."
.long     0x00000228    # at addr 0xd28  "(..."
.long     0x00000012    # at addr 0xd2c  "...."
.long     0x00000000    # at addr 0xd30  "...."
.long     0x00000000    # at addr 0xd34  "...."
.long     0x00000000    # at addr 0xd38  "...."
.long     0x00000000    # at addr 0xd3c  "...."
.long     0x0000027e    # at addr 0xd40  "~..."
.long     0x00000012    # at addr 0xd44  "...."
.long     0x00000000    # at addr 0xd48  "...."
.long     0x00000000    # at addr 0xd4c  "...."
.long     0x00000000    # at addr 0xd50  "...."
.long     0x00000000    # at addr 0xd54  "...."
.long     0x00000565    # at addr 0xd58  "e..."
.long     0x00000012    # at addr 0xd5c  "...."
.long     0x00000000    # at addr 0xd60  "...."
.long     0x00000000    # at addr 0xd64  "...."
.long     0x00000000    # at addr 0xd68  "...."
.long     0x00000000    # at addr 0xd6c  "...."
.long     0x00000411    # at addr 0xd70  "...."
.long     0x00000012    # at addr 0xd74  "...."
.long     0x00000000    # at addr 0xd78  "...."
.long     0x00000000    # at addr 0xd7c  "...."
.long     0x00000000    # at addr 0xd80  "...."
.long     0x00000000    # at addr 0xd84  "...."
.long     0x00000484    # at addr 0xd88  "...."
.long     0x00000012    # at addr 0xd8c  "...."
.long     0x00000000    # at addr 0xd90  "...."
.long     0x00000000    # at addr 0xd94  "...."
.long     0x00000000    # at addr 0xd98  "...."
.long     0x00000000    # at addr 0xd9c  "...."
.long     0x00000062    # at addr 0xda0  "b..."
.long     0x00000012    # at addr 0xda4  "...."
.long     0x00000000    # at addr 0xda8  "...."
.long     0x00000000    # at addr 0xdac  "...."
.long     0x00000000    # at addr 0xdb0  "...."
.long     0x00000000    # at addr 0xdb4  "...."
.long     0x00000364    # at addr 0xdb8  "d..."
.long     0x00000012    # at addr 0xdbc  "...."
.long     0x00000000    # at addr 0xdc0  "...."
.long     0x00000000    # at addr 0xdc4  "...."
.long     0x00000000    # at addr 0xdc8  "...."
.long     0x00000000    # at addr 0xdcc  "...."
.long     0x000003b7    # at addr 0xdd0  "...."
.long     0x00000012    # at addr 0xdd4  "...."
.long     0x00000000    # at addr 0xdd8  "...."
.long     0x00000000    # at addr 0xddc  "...."
.long     0x00000000    # at addr 0xde0  "...."
.long     0x00000000    # at addr 0xde4  "...."
.long     0x0000016e    # at addr 0xde8  "n..."
.long     0x00000012    # at addr 0xdec  "...."
.long     0x00000000    # at addr 0xdf0  "...."
.long     0x00000000    # at addr 0xdf4  "...."
.long     0x00000000    # at addr 0xdf8  "...."
.long     0x00000000    # at addr 0xdfc  "...."
.long     0x0000038c    # at addr 0xe00  "...."
.long     0x00000012    # at addr 0xe04  "...."
.long     0x00000000    # at addr 0xe08  "...."
.long     0x00000000    # at addr 0xe0c  "...."
.long     0x00000000    # at addr 0xe10  "...."
.long     0x00000000    # at addr 0xe14  "...."
.long     0x00000239    # at addr 0xe18  "9..."
.long     0x00000012    # at addr 0xe1c  "...."
.long     0x00000000    # at addr 0xe20  "...."
.long     0x00000000    # at addr 0xe24  "...."
.long     0x00000000    # at addr 0xe28  "...."
.long     0x00000000    # at addr 0xe2c  "...."
.long     0x0000003c    # at addr 0xe30  "<..."
.long     0x00000020    # at addr 0xe34  " ..."
.long     0x00000000    # at addr 0xe38  "...."
.long     0x00000000    # at addr 0xe3c  "...."
.long     0x00000000    # at addr 0xe40  "...."
.long     0x00000000    # at addr 0xe44  "...."
.long     0x000000dd    # at addr 0xe48  "...."
.long     0x00000012    # at addr 0xe4c  "...."
.long     0x00000000    # at addr 0xe50  "...."
.long     0x00000000    # at addr 0xe54  "...."
.long     0x00000000    # at addr 0xe58  "...."
.long     0x00000000    # at addr 0xe5c  "...."
.long     0x0000029a    # at addr 0xe60  "...."
.long     0x00000012    # at addr 0xe64  "...."
.long     0x00000000    # at addr 0xe68  "...."
.long     0x00000000    # at addr 0xe6c  "...."
.long     0x00000000    # at addr 0xe70  "...."
.long     0x00000000    # at addr 0xe74  "...."
.long     0x00000156    # at addr 0xe78  "V..."
.long     0x00000012    # at addr 0xe7c  "...."
.long     0x00000000    # at addr 0xe80  "...."
.long     0x00000000    # at addr 0xe84  "...."
.long     0x00000000    # at addr 0xe88  "...."
.long     0x00000000    # at addr 0xe8c  "...."
.long     0x00000247    # at addr 0xe90  "G..."
.long     0x00000012    # at addr 0xe94  "...."
.long     0x00000000    # at addr 0xe98  "...."
.long     0x00000000    # at addr 0xe9c  "...."
.long     0x00000000    # at addr 0xea0  "...."
.long     0x00000000    # at addr 0xea4  "...."
.long     0x0000042e    # at addr 0xea8  "...."
.long     0x00000012    # at addr 0xeac  "...."
.long     0x00000000    # at addr 0xeb0  "...."
.long     0x00000000    # at addr 0xeb4  "...."
.long     0x00000000    # at addr 0xeb8  "...."
.long     0x00000000    # at addr 0xebc  "...."
.long     0x000002bc    # at addr 0xec0  "...."
.long     0x00000012    # at addr 0xec4  "...."
.long     0x00000000    # at addr 0xec8  "...."
.long     0x00000000    # at addr 0xecc  "...."
.long     0x00000000    # at addr 0xed0  "...."
.long     0x00000000    # at addr 0xed4  "...."
.long     0x0000046e    # at addr 0xed8  "n..."
.long     0x00000012    # at addr 0xedc  "...."
.long     0x00000000    # at addr 0xee0  "...."
.long     0x00000000    # at addr 0xee4  "...."
.long     0x00000000    # at addr 0xee8  "...."
.long     0x00000000    # at addr 0xeec  "...."
.long     0x0000054a    # at addr 0xef0  "J..."
.long     0x001b0011    # at addr 0xef4  "...."
.long     0x00023280    # at addr 0xef8  ".2.."
.long     0x00000000    # at addr 0xefc  "...."
.long     0x00000008    # at addr 0xf00  "...."
.long     0x00000000    # at addr 0xf04  "...."
.long     0x0000059d    # at addr 0xf08  "...."
.long     0x001a0011    # at addr 0xf0c  "...."
.long     0x000231e0    # at addr 0xf10  ".1.."
.long     0x00000000    # at addr 0xf14  "...."
.long     0x00000004    # at addr 0xf18  "...."
.long     0x00000000    # at addr 0xf1c  "...."
.long     0x000000ce    # at addr 0xf20  "...."
.long     0x001b0011    # at addr 0xf24  "...."
.long     0x00023290    # at addr 0xf28  ".2.."
.long     0x00000000    # at addr 0xf2c  "...."
.long     0x00000004    # at addr 0xf30  "...."
.long     0x00000000    # at addr 0xf34  "...."
.long     0x00000536    # at addr 0xf38  "6..."
.long     0x00000012    # at addr 0xf3c  "...."
.long     0x00000000    # at addr 0xf40  "...."
.long     0x00000000    # at addr 0xf44  "...."
.long     0x00000000    # at addr 0xf48  "...."
.long     0x00000000    # at addr 0xf4c  "...."
.long     0x0000017a    # at addr 0xf50  "z..."
.long     0x001b0021    # at addr 0xf54  "!..."
.long     0x000232a0    # at addr 0xf58  ".2.."
.long     0x00000000    # at addr 0xf5c  "...."
.long     0x00000008    # at addr 0xf60  "...."
.long     0x00000000    # at addr 0xf64  "...."
.long     0x000005f4    # at addr 0xf68  "...."
.long     0x00120011    # at addr 0xf6c  "...."
.long     0x0001cca0    # at addr 0xf70  "...."
.long     0x00000000    # at addr 0xf74  "...."
.long     0x0000002f    # at addr 0xf78  "/..."
.long     0x00000000    # at addr 0xf7c  "...."
.long     0x00000588    # at addr 0xf80  "...."
.long     0x001a0011    # at addr 0xf84  "...."
.long     0x000231e8    # at addr 0xf88  ".1.."
.long     0x00000000    # at addr 0xf8c  "...."
.long     0x00000008    # at addr 0xf90  "...."
.long     0x00000000    # at addr 0xf94  "...."
.long     0x000005a5    # at addr 0xf98  "...."
.long     0x00120011    # at addr 0xf9c  "...."
.long     0x00018000    # at addr 0xfa0  "...."
.long     0x00000000    # at addr 0xfa4  "...."
.long     0x00000004    # at addr 0xfa8  "...."
.long     0x00000000    # at addr 0xfac  "...."
.long     0x000005c7    # at addr 0xfb0  "...."
.long     0x00170011    # at addr 0xfb4  "...."
.long     0x00022a00    # at addr 0xfb8  ".*.."
.long     0x00000000    # at addr 0xfbc  "...."
.long     0x00000058    # at addr 0xfc0  "X..."
.long     0x00000000    # at addr 0xfc4  "...."
.long     0x000005da    # at addr 0xfc8  "...."
.long     0x001a0011    # at addr 0xfcc  "...."
.long     0x000231f8    # at addr 0xfd0  ".1.."
.long     0x00000000    # at addr 0xfd4  "...."
.long     0x00000004    # at addr 0xfd8  "...."
.long     0x00000000    # at addr 0xfdc  "...."
.long     0x00000555    # at addr 0xfe0  "U..."
.long     0x001b0011    # at addr 0xfe4  "...."
.long     0x000232a0    # at addr 0xfe8  ".2.."
.long     0x00000000    # at addr 0xfec  "...."
.long     0x00000008    # at addr 0xff0  "...."
.long     0x00000000    # at addr 0xff4  "...."
.long     0x00000572    # at addr 0xff8  "r..."
.long     0x001a0011    # at addr 0xffc  "...."
.long     0x00023200    # at addr 0x1000  ".2.."
.long     0x00000000    # at addr 0x1004  "...."
.long     0x00000038    # at addr 0x1008  "8..."
.long     0x00000000    # at addr 0x100c  "...."
.long     0x00000590    # at addr 0x1010  "...."
.long     0x001a0011    # at addr 0x1014  "...."
.long     0x000231f0    # at addr 0x1018  ".1.."
.long     0x00000000    # at addr 0x101c  "...."
.long     0x00000008    # at addr 0x1020  "...."
.long     0x00000000    # at addr 0x1024  "...."
.long     0x00000370    # at addr 0x1028  "p..."
.long     0x00100012    # at addr 0x102c  "...."
.long     0x00016c60    # at addr 0x1030  "`l.."
.long     0x00000000    # at addr 0x1034  "...."
.long     0x00000026    # at addr 0x1038  "&..."
.long     0x00000000    # at addr 0x103c  "...."
.long     0x00000442    # at addr 0x1040  "B..."
.long     0x001a0011    # at addr 0x1044  "...."
.long     0x00023260    # at addr 0x1048  "`2.."
.long     0x00000000    # at addr 0x104c  "...."
.long     0x00000008    # at addr 0x1050  "...."
.long     0x00000000    # at addr 0x1054  "...."
.long     0x00000495    # at addr 0x1058  "...."
.long     0x00100012    # at addr 0x105c  "...."
.long     0x00016a80    # at addr 0x1060  ".j.."
.long     0x00000000    # at addr 0x1064  "...."
.long     0x00000015    # at addr 0x1068  "...."
.long     0x00000000    # at addr 0x106c  "...."
.long     0x000002f8    # at addr 0x1070  "...."
.long     0x001b0011    # at addr 0x1074  "...."
.long     0x000232c0    # at addr 0x1078  ".2.."
.long     0x00000000    # at addr 0x107c  "...."
.long     0x00000008    # at addr 0x1080  "...."
.long     0x00000000    # at addr 0x1084  "...."
.long     0x0000052d    # at addr 0x1088  "-..."
.long     0x00100012    # at addr 0x108c  "...."
.long     0x00016bf0    # at addr 0x1090  ".k.."
.long     0x00000000    # at addr 0x1094  "...."
.long     0x0000006d    # at addr 0x1098  "m..."
.long     0x00000000    # at addr 0x109c  "...."
.long     0x000003f3    # at addr 0x10a0  "...."
.long     0x001b0021    # at addr 0x10a4  "!..."
.long     0x00023280    # at addr 0x10a8  ".2.."
.long     0x00000000    # at addr 0x10ac  "...."
.long     0x00000008    # at addr 0x10b0  "...."
.long     0x00000000    # at addr 0x10b4  "...."
.long     0x000002d1    # at addr 0x10b8  "...."
.long     0x00100012    # at addr 0x10bc  "...."
.long     0x00016bb0    # at addr 0x10c0  ".k.."
.long     0x00000000    # at addr 0x10c4  "...."
.long     0x00000037    # at addr 0x10c8  "7..."
.long     0x00000000    # at addr 0x10cc  "...."
.long     0x000002e6    # at addr 0x10d0  "...."
.long     0x001b0011    # at addr 0x10d4  "...."
.long     0x00023298    # at addr 0x10d8  ".2.."
.long     0x00000000    # at addr 0x10dc  "...."
.long     0x00000008    # at addr 0x10e0  "...."
.long     0x00000000    # at addr 0x10e4  "...."
.long     0x0000030d    # at addr 0x10e8  "...."
.long     0x00100012    # at addr 0x10ec  "...."
.long     0x00016aa0    # at addr 0x10f0  ".j.."
.long     0x00000000    # at addr 0x10f4  "...."
.long     0x00000019    # at addr 0x10f8  "...."
.long     0x00000000    # at addr 0x10fc  "...."
.long     0x000005b4    # at addr 0x1100  "...."
.long     0x00120011    # at addr 0x1104  "...."
.long     0x0001c940    # at addr 0x1108  "@..."
.long     0x00000000    # at addr 0x110c  "...."
.long     0x00000028    # at addr 0x1110  "(..."
.long     0x00000000    # at addr 0x1114  "...."
.long     0x0000045f    # at addr 0x1118  "_..."
.long     0x00000022    # at addr 0x111c  ""..."
.long     0x00000000    # at addr 0x1120  "...."
.long     0x00000000    # at addr 0x1124  "...."
.long     0x00000000    # at addr 0x1128  "...."
.long     0x00000000    # at addr 0x112c  "...."
.long     0x0000031e    # at addr 0x1130  "...."
.long     0x00100012    # at addr 0x1134  "...."
.long     0x00016ac0    # at addr 0x1138  ".j.."
.long     0x00000000    # at addr 0x113c  "...."
.long     0x000000eb    # at addr 0x1140  "...."
.long     0x00000000    # at addr 0x1144  "...."
.long     0x00000286    # at addr 0x1148  "...."
.long     0x00000012    # at addr 0x114c  "...."
.long     0x00000000    # at addr 0x1150  "...."
.long     0x00000000    # at addr 0x1154  "...."
.long     0x00000000    # at addr 0x1158  "...."
.long     0x00000000    # at addr 0x115c  "...."
.long     0x00000263    # at addr 0x1160  "c..."
.long     0x001b0011    # at addr 0x1164  "...."
.long     0x00023288    # at addr 0x1168  ".2.."
.long     0x00000000    # at addr 0x116c  "...."
.long     0x00000008    # at addr 0x1170  "...."
.long     0x00000000    # at addr 0x1174  "...."
.long     0x000005e7    # at addr 0x1178  "...."
.long     0x001b0011    # at addr 0x117c  "...."
.long     0x00024400    # at addr 0x1180  ".D.."
.long     0x00000000    # at addr 0x1184  "...."
.long     0x00000008    # at addr 0x1188  "...."
.long     0x00000000    # at addr 0x118c  "...."

.p2align 0

# Data section .dynstr (size 1612)  0x00001190 - 0x000017db

.section .dynstr
Var0x1190:       # next=0x18020, start=0x1190, end=0x17db
.long     0x62696c00    # at addr 0x1190  ".lib"
.long     0x696c6573    # at addr 0x1194  "seli"
.long     0x2e78756e    # at addr 0x1198  "nux."
.long     0x312e6f73    # at addr 0x119c  "so.1"
.long     0x54495f00    # at addr 0x11a0  "._IT"
.long     0x65645f4d    # at addr 0x11a4  "M_de"
.long     0x69676572    # at addr 0x11a8  "regi"
.long     0x72657473    # at addr 0x11ac  "ster"
.long     0x6c434d54    # at addr 0x11b0  "TMCl"
.long     0x54656e6f    # at addr 0x11b4  "oneT"
.long     0x656c6261    # at addr 0x11b8  "able"
.long     0x675f5f00    # at addr 0x11bc  ".__g"
.long     0x5f6e6f6d    # at addr 0x11c0  "mon_"
.long     0x72617473    # at addr 0x11c4  "star"
.long     0x005f5f74    # at addr 0x11c8  "t__."
.long     0x4d54495f    # at addr 0x11cc  "_ITM"
.long     0x6765725f    # at addr 0x11d0  "_reg"
.long     0x65747369    # at addr 0x11d4  "iste"
.long     0x434d5472    # at addr 0x11d8  "rTMC"
.long     0x656e6f6c    # at addr 0x11dc  "lone"
.long     0x6c626154    # at addr 0x11e0  "Tabl"
.long     0x67660065    # at addr 0x11e4  "e.fg"
.long     0x69667465    # at addr 0x11e8  "etfi"
.long     0x6f63656c    # at addr 0x11ec  "leco"
.long     0x7266006e    # at addr 0x11f0  "n.fr"
.long     0x6f636565    # at addr 0x11f4  "eeco"
.long     0x676c006e    # at addr 0x11f8  "n.lg"
.long     0x69667465    # at addr 0x11fc  "etfi"
.long     0x6f63656c    # at addr 0x1200  "leco"
.long     0x696c006e    # at addr 0x1204  "n.li"
.long     0x732e6362    # at addr 0x1208  "bc.s"
.long     0x00362e6f    # at addr 0x120c  "o.6."
.long     0x756c6666    # at addr 0x1210  "fflu"
.long     0x73006873    # at addr 0x1214  "sh.s"
.long     0x70637274    # at addr 0x1218  "trcp"
.long     0x6d670079    # at addr 0x121c  "y.gm"
.long     0x656d6974    # at addr 0x1220  "time"
.long     0x5f00725f    # at addr 0x1224  "_r._"
.long     0x6972705f    # at addr 0x1228  "_pri"
.long     0x5f66746e    # at addr 0x122c  "ntf_"
.long     0x006b6863    # at addr 0x1230  "chk."
.long     0x616d6e66    # at addr 0x1234  "fnma"
.long     0x00686374    # at addr 0x1238  "tch."
.long     0x64616572    # at addr 0x123c  "read"
.long     0x00726964    # at addr 0x1240  "dir."
.long     0x6c746573    # at addr 0x1244  "setl"
.long     0x6c61636f    # at addr 0x1248  "ocal"
.long     0x626d0065    # at addr 0x124c  "e.mb"
.long     0x776f7472    # at addr 0x1250  "rtow"
.long     0x74730063    # at addr 0x1254  "c.st"
.long     0x6d636e72    # at addr 0x1258  "rncm"
.long     0x706f0070    # at addr 0x125c  "p.op"
.long     0x646e6974    # at addr 0x1260  "tind"
.long     0x72747300    # at addr 0x1264  ".str"
.long     0x72686372    # at addr 0x1268  "rchr"
.long     0x6c666600    # at addr 0x126c  ".ffl"
.long     0x5f687375    # at addr 0x1270  "ush_"
.long     0x6f6c6e75    # at addr 0x1274  "unlo"
.long     0x64656b63    # at addr 0x1278  "cked"
.long     0x67636400    # at addr 0x127c  ".dcg"
.long     0x65747465    # at addr 0x1280  "ette"
.long     0x73007478    # at addr 0x1284  "xt.s"
.long     0x636e7074    # at addr 0x1288  "tpnc"
.long     0x67007970    # at addr 0x128c  "py.g"
.long     0x77707465    # at addr 0x1290  "etpw"
.long     0x00646975    # at addr 0x1294  "uid."
.long     0x736f6c63    # at addr 0x1298  "clos"
.long     0x72696465    # at addr 0x129c  "edir"
.long     0x74656700    # at addr 0x12a0  ".get"
.long     0x69677267    # at addr 0x12a4  "grgi"
.long     0x72650064    # at addr 0x12a8  "d.er"
.long     0x00726f72    # at addr 0x12ac  "ror."
.long     0x6e676973    # at addr 0x12b0  "sign"
.long     0x6d006c61    # at addr 0x12b4  "al.m"
.long     0x6f747362    # at addr 0x12b8  "bsto"
.long     0x00736377    # at addr 0x12bc  "wcs."
.long     0x70676973    # at addr 0x12c0  "sigp"
.long     0x6d636f72    # at addr 0x12c4  "rocm"
.long     0x006b7361    # at addr 0x12c8  "ask."
.long     0x74735f5f    # at addr 0x12cc  "__st"
.long     0x5f6b6361    # at addr 0x12d0  "ack_"
.long     0x5f6b6863    # at addr 0x12d4  "chk_"
.long     0x6c696166    # at addr 0x12d8  "fail"
.long     0x6c5f5f00    # at addr 0x12dc  ".__l"
.long     0x61747378    # at addr 0x12e0  "xsta"
.long     0x73690074    # at addr 0x12e4  "t.is"
.long     0x69727077    # at addr 0x12e8  "wpri"
.long     0x7200746e    # at addr 0x12ec  "nt.r"
.long     0x6c6c6165    # at addr 0x12f0  "eall"
.long     0x6100636f    # at addr 0x12f4  "oc.a"
.long     0x74726f62    # at addr 0x12f8  "bort"
.long     0x78655f00    # at addr 0x12fc  "._ex"
.long     0x73007469    # at addr 0x1300  "it.s"
.long     0x70737274    # at addr 0x1304  "trsp"
.long     0x7270006e    # at addr 0x1308  "n.pr"
.long     0x6172676f    # at addr 0x130c  "ogra"
.long     0x6e695f6d    # at addr 0x1310  "m_in"
.long     0x61636f76    # at addr 0x1314  "voca"
.long     0x6e6f6974    # at addr 0x1318  "tion"
.long     0x6d616e5f    # at addr 0x131c  "_nam"
.long     0x74730065    # at addr 0x1320  "e.st"
.long     0x69746672    # at addr 0x1324  "rfti"
.long     0x5f00656d    # at addr 0x1328  "me._"
.long     0x7373615f    # at addr 0x132c  "_ass"
.long     0x5f747265    # at addr 0x1330  "ert_"
.long     0x6c696166    # at addr 0x1334  "fail"
.long     0x636f6c00    # at addr 0x1338  ".loc"
.long     0x69746c61    # at addr 0x133c  "alti"
.long     0x725f656d    # at addr 0x1340  "me_r"
.long     0x635f5f00    # at addr 0x1344  ".__c"
.long     0x65707974    # at addr 0x1348  "type"
.long     0x7465675f    # at addr 0x134c  "_get"
.long     0x5f626d5f    # at addr 0x1350  "_mb_"
.long     0x5f727563    # at addr 0x1354  "cur_"
.long     0x0078616d    # at addr 0x1358  "max."
.long     0x74617369    # at addr 0x135c  "isat"
.long     0x67007974    # at addr 0x1360  "ty.g"
.long     0x77707465    # at addr 0x1364  "etpw"
.long     0x006d616e    # at addr 0x1368  "nam."
.long     0x6c6c6163    # at addr 0x136c  "call"
.long     0x7300636f    # at addr 0x1370  "oc.s"
.long     0x656c7274    # at addr 0x1374  "trle"
.long     0x6973006e    # at addr 0x1378  "n.si"
.long     0x706d6567    # at addr 0x137c  "gemp"
.long     0x65737974    # at addr 0x1380  "tyse"
.long     0x656d0074    # at addr 0x1384  "t.me"
.long     0x7465736d    # at addr 0x1388  "mset"
.long     0x636f6c00    # at addr 0x138c  ".loc"
.long     0x63656c61    # at addr 0x1390  "alec"
.long     0x00766e6f    # at addr 0x1394  "onv."
.long     0x72655f5f    # at addr 0x1398  "__er"
.long     0x5f6f6e72    # at addr 0x139c  "rno_"
.long     0x61636f6c    # at addr 0x13a0  "loca"
.long     0x6e6f6974    # at addr 0x13a4  "tion"
.long     0x6d656d00    # at addr 0x13a8  ".mem"
.long     0x00706d63    # at addr 0x13ac  "cmp."
.long     0x706d656d    # at addr 0x13b0  "memp"
.long     0x00797063    # at addr 0x13b4  "cpy."
.long     0x65736e75    # at addr 0x13b8  "unse"
.long     0x766e6574    # at addr 0x13bc  "tenv"
.long     0x65735f00    # at addr 0x13c0  "._se"
.long     0x706d6a74    # at addr 0x13c4  "tjmp"
.long     0x665f5f00    # at addr 0x13c8  ".__f"
.long     0x6e697270    # at addr 0x13cc  "prin"
.long     0x635f6674    # at addr 0x13d0  "tf_c"
.long     0x73006b68    # at addr 0x13d4  "hk.s"
.long     0x64616769    # at addr 0x13d8  "igad"
.long     0x74657364    # at addr 0x13dc  "dset"
.long     0x74656700    # at addr 0x13e0  ".get"
.long     0x616e7267    # at addr 0x13e4  "grna"
.long     0x6377006d    # at addr 0x13e8  "m.wc"
.long     0x64697773    # at addr 0x13ec  "swid"
.long     0x73006874    # at addr 0x13f0  "th.s"
.long     0x756f6474    # at addr 0x13f4  "tdou"
.long     0x736c0074    # at addr 0x13f8  "t.ls"
.long     0x006b6565    # at addr 0x13fc  "eek."
.long     0x636d656d    # at addr 0x1400  "memc"
.long     0x66007970    # at addr 0x1404  "py.f"
.long     0x736f6c63    # at addr 0x1408  "clos"
.long     0x74730065    # at addr 0x140c  "e.st"
.long     0x756f7472    # at addr 0x1410  "rtou"
.long     0x616d006c    # at addr 0x1414  "l.ma"
.long     0x636f6c6c    # at addr 0x1418  "lloc"
.long     0x6d697400    # at addr 0x141c  ".tim"
.long     0x006d6765    # at addr 0x1420  "egm."
.long     0x73696172    # at addr 0x1424  "rais"
.long     0x626d0065    # at addr 0x1428  "e.mb"
.long     0x696e6973    # at addr 0x142c  "sini"
.long     0x7a740074    # at addr 0x1430  "t.tz"
.long     0x00746573    # at addr 0x1434  "set."
.long     0x6c5f6c6e    # at addr 0x1438  "nl_l"
.long     0x69676e61    # at addr 0x143c  "angi"
.long     0x006f666e    # at addr 0x1440  "nfo."
.long     0x6e65706f    # at addr 0x1444  "open"
.long     0x00726964    # at addr 0x1448  "dir."
.long     0x74635f5f    # at addr 0x144c  "__ct"
.long     0x5f657079    # at addr 0x1450  "ype_"
.long     0x6f6c5f62    # at addr 0x1454  "b_lo"
.long     0x65670063    # at addr 0x1458  "c.ge"
.long     0x766e6574    # at addr 0x145c  "tenv"
.long     0x626f5f00    # at addr 0x1460  "._ob"
.long     0x63617473    # at addr 0x1464  "stac"
.long     0x6c615f6b    # at addr 0x1468  "k_al"
.long     0x61636f6c    # at addr 0x146c  "loca"
.long     0x5f646574    # at addr 0x1470  "ted_"
.long     0x706f0070    # at addr 0x1474  "p.op"
.long     0x67726174    # at addr 0x1478  "targ"
.long     0x665f5f00    # at addr 0x147c  ".__f"
.long     0x64616572    # at addr 0x1480  "read"
.long     0x00676e69    # at addr 0x1484  "ing."
.long     0x65647473    # at addr 0x1488  "stde"
.long     0x77007272    # at addr 0x148c  "rr.w"
.long     0x64697763    # at addr 0x1490  "cwid"
.long     0x69006874    # at addr 0x1494  "th.i"
.long     0x6c74636f    # at addr 0x1498  "octl"
.long     0x626f5f00    # at addr 0x149c  "._ob"
.long     0x63617473    # at addr 0x14a0  "stac"
.long     0x65625f6b    # at addr 0x14a4  "k_be"
.long     0x5f6e6967    # at addr 0x14a8  "gin_"
.long     0x6f5f0031    # at addr 0x14ac  "1._o"
.long     0x61747362    # at addr 0x14b0  "bsta"
.long     0x6e5f6b63    # at addr 0x14b4  "ck_n"
.long     0x68637765    # at addr 0x14b8  "ewch"
.long     0x006b6e75    # at addr 0x14bc  "unk."
.long     0x6e735f5f    # at addr 0x14c0  "__sn"
.long     0x6e697270    # at addr 0x14c4  "prin"
.long     0x635f6674    # at addr 0x14c8  "tf_c"
.long     0x72006b68    # at addr 0x14cc  "hk.r"
.long     0x6c646165    # at addr 0x14d0  "eadl"
.long     0x006b6e69    # at addr 0x14d4  "ink."
.long     0x6f746567    # at addr 0x14d8  "geto"
.long     0x6c5f7470    # at addr 0x14dc  "pt_l"
.long     0x00676e6f    # at addr 0x14e0  "ong."
.long     0x78665f5f    # at addr 0x14e4  "__fx"
.long     0x74617473    # at addr 0x14e8  "stat"
.long     0x6c696600    # at addr 0x14ec  ".fil"
.long     0x006f6e65    # at addr 0x14f0  "eno."
.long     0x68746567    # at addr 0x14f4  "geth"
.long     0x6e74736f    # at addr 0x14f8  "ostn"
.long     0x00656d61    # at addr 0x14fc  "ame."
.long     0x73626f5f    # at addr 0x1500  "_obs"
.long     0x6b636174    # at addr 0x1504  "tack"
.long     0x6d656d5f    # at addr 0x1508  "_mem"
.long     0x5f79726f    # at addr 0x150c  "ory_"
.long     0x64657375    # at addr 0x1510  "used"
.long     0x74656700    # at addr 0x1514  ".get"
.long     0x00647763    # at addr 0x1518  "cwd."
.long     0x69727766    # at addr 0x151c  "fwri"
.long     0x67006574    # at addr 0x1520  "te.g"
.long     0x69747465    # at addr 0x1524  "etti"
.long     0x666f656d    # at addr 0x1528  "meof"
.long     0x00796164    # at addr 0x152c  "day."
.long     0x61676973    # at addr 0x1530  "siga"
.long     0x6f697463    # at addr 0x1534  "ctio"
.long     0x5f5f006e    # at addr 0x1538  "n.__"
.long     0x636d656d    # at addr 0x153c  "memc"
.long     0x635f7970    # at addr 0x1540  "py_c"
.long     0x73006b68    # at addr 0x1544  "hk.s"
.long     0x73696769    # at addr 0x1548  "igis"
.long     0x626d656d    # at addr 0x154c  "memb"
.long     0x63007265    # at addr 0x1550  "er.c"
.long     0x6b636f6c    # at addr 0x1554  "lock"
.long     0x7465675f    # at addr 0x1558  "_get"
.long     0x656d6974    # at addr 0x155c  "time"
.long     0x665f5f00    # at addr 0x1560  ".__f"
.long     0x646e6570    # at addr 0x1564  "pend"
.long     0x00676e69    # at addr 0x1568  "ing."
.long     0x63727473    # at addr 0x156c  "strc"
.long     0x69007268    # at addr 0x1570  "hr.i"
.long     0x6e637773    # at addr 0x1574  "swcn"
.long     0x006c7274    # at addr 0x1578  "trl."
.long     0x69746b6d    # at addr 0x157c  "mkti"
.long     0x7000656d    # at addr 0x1580  "me.p"
.long     0x72676f72    # at addr 0x1584  "rogr"
.long     0x695f6d61    # at addr 0x1588  "am_i"
.long     0x636f766e    # at addr 0x158c  "nvoc"
.long     0x6f697461    # at addr 0x1590  "atio"
.long     0x68735f6e    # at addr 0x1594  "n_sh"
.long     0x5f74726f    # at addr 0x1598  "ort_"
.long     0x656d616e    # at addr 0x159c  "name"
.long     0x73637700    # at addr 0x15a0  ".wcs"
.long     0x626d6f74    # at addr 0x15a4  "tomb"
.long     0x5f5f0073    # at addr 0x15a8  "s.__"
.long     0x70797463    # at addr 0x15ac  "ctyp"
.long     0x6f745f65    # at addr 0x15b0  "e_to"
.long     0x65707075    # at addr 0x15b4  "uppe"
.long     0x6f6c5f72    # at addr 0x15b8  "r_lo"
.long     0x5f5f0063    # at addr 0x15bc  "c.__"
.long     0x70797463    # at addr 0x15c0  "ctyp"
.long     0x6f745f65    # at addr 0x15c4  "e_to"
.long     0x65776f6c    # at addr 0x15c8  "lowe"
.long     0x6f6c5f72    # at addr 0x15cc  "r_lo"
.long     0x626f0063    # at addr 0x15d0  "c.ob"
.long     0x63617473    # at addr 0x15d4  "stac"
.long     0x6c615f6b    # at addr 0x15d8  "k_al"
.long     0x5f636f6c    # at addr 0x15dc  "loc_"
.long     0x6c696166    # at addr 0x15e0  "fail"
.long     0x685f6465    # at addr 0x15e4  "ed_h"
.long     0x6c646e61    # at addr 0x15e8  "andl"
.long     0x5f007265    # at addr 0x15ec  "er._"
.long     0x6178635f    # at addr 0x15f0  "_cxa"
.long     0x6e69665f    # at addr 0x15f4  "_fin"
.long     0x7a696c61    # at addr 0x15f8  "aliz"
.long     0x5f5f0065    # at addr 0x15fc  "e.__"
.long     0x69727073    # at addr 0x1600  "spri"
.long     0x5f66746e    # at addr 0x1604  "ntf_"
.long     0x006b6863    # at addr 0x1608  "chk."
.long     0x73785f5f    # at addr 0x160c  "__xs"
.long     0x00746174    # at addr 0x1610  "tat."
.long     0x78746567    # at addr 0x1614  "getx"
.long     0x72747461    # at addr 0x1618  "attr"
.long     0x6d656d00    # at addr 0x161c  ".mem"
.long     0x65766f6d    # at addr 0x1620  "move"
.long     0x626f5f00    # at addr 0x1624  "._ob"
.long     0x63617473    # at addr 0x1628  "stac"
.long     0x65625f6b    # at addr 0x162c  "k_be"
.long     0x006e6967    # at addr 0x1630  "gin."
.long     0x646e6962    # at addr 0x1634  "bind"
.long     0x74786574    # at addr 0x1638  "text"
.long     0x616d6f64    # at addr 0x163c  "doma"
.long     0x5f006e69    # at addr 0x1640  "in._"
.long     0x7378665f    # at addr 0x1644  "_fxs"
.long     0x61746174    # at addr 0x1648  "tata"
.long     0x77660074    # at addr 0x164c  "t.fw"
.long     0x65746972    # at addr 0x1650  "rite"
.long     0x6c6e755f    # at addr 0x1654  "_unl"
.long     0x656b636f    # at addr 0x1658  "ocke"
.long     0x74730064    # at addr 0x165c  "d.st"
.long     0x706d6372    # at addr 0x1660  "rcmp"
.long     0x67637400    # at addr 0x1664  ".tcg"
.long     0x67707465    # at addr 0x1668  "etpg"
.long     0x5f007072    # at addr 0x166c  "rp._"
.long     0x62696c5f    # at addr 0x1670  "_lib"
.long     0x74735f63    # at addr 0x1674  "c_st"
.long     0x5f747261    # at addr 0x1678  "art_"
.long     0x6e69616d    # at addr 0x167c  "main"
.long     0x72696400    # at addr 0x1680  ".dir"
.long     0x66006466    # at addr 0x1684  "fd.f"
.long     0x6b656573    # at addr 0x1688  "seek"
.long     0x7473006f    # at addr 0x168c  "o.st"
.long     0x6c6f6372    # at addr 0x1690  "rcol"
.long     0x6e73006c    # at addr 0x1694  "l.sn"
.long     0x6e697270    # at addr 0x1698  "prin"
.long     0x5f006674    # at addr 0x169c  "tf._"
.long     0x65766f5f    # at addr 0x16a0  "_ove"
.long     0x6f6c6672    # at addr 0x16a4  "rflo"
.long     0x5f5f0077    # at addr 0x16a8  "w.__"
.long     0x74727473    # at addr 0x16ac  "strt"
.long     0x5f6c756f    # at addr 0x16b0  "oul_"
.long     0x65746e69    # at addr 0x16b4  "inte"
.long     0x6c616e72    # at addr 0x16b8  "rnal"
.long     0x626f5f00    # at addr 0x16bc  "._ob"
.long     0x63617473    # at addr 0x16c0  "stac"
.long     0x72665f6b    # at addr 0x16c4  "k_fr"
.long     0x66006565    # at addr 0x16c8  "ee.f"
.long     0x73747570    # at addr 0x16cc  "puts"
.long     0x6c6e755f    # at addr 0x16d0  "_unl"
.long     0x656b636f    # at addr 0x16d4  "ocke"
.long     0x5f5f0064    # at addr 0x16d8  "d.__"
.long     0x676f7270    # at addr 0x16dc  "prog"
.long     0x656d616e    # at addr 0x16e0  "name"
.long     0x705f5f00    # at addr 0x16e4  ".__p"
.long     0x6e676f72    # at addr 0x16e8  "rogn"
.long     0x5f656d61    # at addr 0x16ec  "ame_"
.long     0x6c6c7566    # at addr 0x16f0  "full"
.long     0x635f5f00    # at addr 0x16f4  ".__c"
.long     0x615f6178    # at addr 0x16f8  "xa_a"
.long     0x69786574    # at addr 0x16fc  "texi"
.long     0x75710074    # at addr 0x1700  "t.qu"
.long     0x5f65746f    # at addr 0x1704  "ote_"
.long     0x746f7571    # at addr 0x1708  "quot"
.long     0x5f676e69    # at addr 0x170c  "ing_"
.long     0x6974706f    # at addr 0x1710  "opti"
.long     0x00736e6f    # at addr 0x1714  "ons."
.long     0x73726556    # at addr 0x1718  "Vers"
.long     0x006e6f69    # at addr 0x171c  "ion."
.long     0x6d677261    # at addr 0x1720  "argm"
.long     0x68637461    # at addr 0x1724  "atch"
.long     0x6569645f    # at addr 0x1728  "_die"
.long     0x5f736c00    # at addr 0x172c  ".ls_"
.long     0x65646f6d    # at addr 0x1730  "mode"
.long     0x4f495f00    # at addr 0x1734  "._IO"
.long     0x6474735f    # at addr 0x1738  "_std"
.long     0x755f6e69    # at addr 0x173c  "in_u"
.long     0x00646573    # at addr 0x1740  "sed."
.long     0x746f7571    # at addr 0x1744  "quot"
.long     0x5f676e69    # at addr 0x1748  "ing_"
.long     0x6c797473    # at addr 0x174c  "styl"
.long     0x61765f65    # at addr 0x1750  "e_va"
.long     0x7100736c    # at addr 0x1754  "ls.q"
.long     0x69746f75    # at addr 0x1758  "uoti"
.long     0x735f676e    # at addr 0x175c  "ng_s"
.long     0x656c7974    # at addr 0x1760  "tyle"
.long     0x6772615f    # at addr 0x1764  "_arg"
.long     0x78650073    # at addr 0x1768  "s.ex"
.long     0x665f7469    # at addr 0x176c  "it_f"
.long     0x756c6961    # at addr 0x1770  "ailu"
.long     0x70006572    # at addr 0x1774  "re.p"
.long     0x72676f72    # at addr 0x1778  "rogr"
.long     0x6e5f6d61    # at addr 0x177c  "am_n"
.long     0x00656d61    # at addr 0x1780  "ame."
.long     0x73726576    # at addr 0x1784  "vers"
.long     0x5f6e6f69    # at addr 0x1788  "ion_"
.long     0x5f637465    # at addr 0x178c  "etc_"
.long     0x79706f63    # at addr 0x1790  "copy"
.long     0x68676972    # at addr 0x1794  "righ"
.long     0x4c470074    # at addr 0x1798  "t.GL"
.long     0x5f434249    # at addr 0x179c  "IBC_"
.long     0x34312e32    # at addr 0x17a0  "2.14"
.long     0x494c4700    # at addr 0x17a4  ".GLI"
.long     0x325f4342    # at addr 0x17a8  "BC_2"
.long     0x4700342e    # at addr 0x17ac  ".4.G"
.long     0x4342494c    # at addr 0x17b0  "LIBC"
.long     0x312e325f    # at addr 0x17b4  "_2.1"
.long     0x4c470037    # at addr 0x17b8  "7.GL"
.long     0x5f434249    # at addr 0x17bc  "IBC_"
.long     0x2e332e32    # at addr 0x17c0  "2.3."
.long     0x4c470034    # at addr 0x17c4  "4.GL"
.long     0x5f434249    # at addr 0x17c8  "IBC_"
.long     0x2e322e32    # at addr 0x17cc  "2.2."
.long     0x4c470035    # at addr 0x17d0  "5.GL"
.long     0x5f434249    # at addr 0x17d4  "IBC_"
.long     0x00332e32    # at addr 0x17d8  "2.3."

.p2align 1

# Data section .gnu.version (size 278)  0x000017dc - 0x000018f1

.section .gnu.version
Var0x17dc:       # next=0x18020, start=0x17dc, end=0x18f1
.long     0x00020000    # at addr 0x17dc  "...."
.long     0x00030003    # at addr 0x17e0  "...."
.long     0x00030004    # at addr 0x17e4  "...."
.long     0x00030003    # at addr 0x17e8  "...."
.long     0x00000003    # at addr 0x17ec  "...."
.long     0x00030003    # at addr 0x17f0  "...."
.long     0x00030003    # at addr 0x17f4  "...."
.long     0x00030003    # at addr 0x17f8  "...."
.long     0x00030003    # at addr 0x17fc  "...."
.long     0x00030003    # at addr 0x1800  "...."
.long     0x00050003    # at addr 0x1804  "...."
.long     0x00030003    # at addr 0x1808  "...."
.long     0x00030003    # at addr 0x180c  "...."
.long     0x00030003    # at addr 0x1810  "...."
.long     0x00030003    # at addr 0x1814  "...."
.long     0x00030003    # at addr 0x1818  "...."
.long     0x00030006    # at addr 0x181c  "...."
.long     0x00030003    # at addr 0x1820  "...."
.long     0x00060003    # at addr 0x1824  "...."
.long     0x00030003    # at addr 0x1828  "...."
.long     0x00000003    # at addr 0x182c  "...."
.long     0x00030003    # at addr 0x1830  "...."
.long     0x00030003    # at addr 0x1834  "...."
.long     0x00030003    # at addr 0x1838  "...."
.long     0x00030003    # at addr 0x183c  "...."
.long     0x00030003    # at addr 0x1840  "...."
.long     0x00030003    # at addr 0x1844  "...."
.long     0x00030003    # at addr 0x1848  "...."
.long     0x00030003    # at addr 0x184c  "...."
.long     0x00030000    # at addr 0x1850  "...."
.long     0x00030003    # at addr 0x1854  "...."
.long     0x00040003    # at addr 0x1858  "...."
.long     0x00000003    # at addr 0x185c  "...."
.long     0x00030007    # at addr 0x1860  "...."
.long     0x00030000    # at addr 0x1864  "...."
.long     0x00030003    # at addr 0x1868  "...."
.long     0x00030003    # at addr 0x186c  "...."
.long     0x00030003    # at addr 0x1870  "...."
.long     0x00030003    # at addr 0x1874  "...."
.long     0x00030003    # at addr 0x1878  "...."
.long     0x00030003    # at addr 0x187c  "...."
.long     0x00030003    # at addr 0x1880  "...."
.long     0x00040003    # at addr 0x1884  "...."
.long     0x00030003    # at addr 0x1888  "...."
.long     0x00030003    # at addr 0x188c  "...."
.long     0x00030003    # at addr 0x1890  "...."
.long     0x00030003    # at addr 0x1894  "...."
.long     0x00030003    # at addr 0x1898  "...."
.long     0x00000002    # at addr 0x189c  "...."
.long     0x00030003    # at addr 0x18a0  "...."
.long     0x00030003    # at addr 0x18a4  "...."
.long     0x00000004    # at addr 0x18a8  "...."
.long     0x00030003    # at addr 0x18ac  "...."
.long     0x00030003    # at addr 0x18b0  "...."
.long     0x00020002    # at addr 0x18b4  "...."
.long     0x00030004    # at addr 0x18b8  "...."
.long     0x00030001    # at addr 0x18bc  "...."
.long     0x00030003    # at addr 0x18c0  "...."
.long     0x00010001    # at addr 0x18c4  "...."
.long     0x00010001    # at addr 0x18c8  "...."
.long     0x00030001    # at addr 0x18cc  "...."
.long     0x00010001    # at addr 0x18d0  "...."
.long     0x00010001    # at addr 0x18d4  "...."
.long     0x00030001    # at addr 0x18d8  "...."
.long     0x00030001    # at addr 0x18dc  "...."
.long     0x00030001    # at addr 0x18e0  "...."
.long     0x00010001    # at addr 0x18e4  "...."
.long     0x00010003    # at addr 0x18e8  "...."
.long     0x00030003    # at addr 0x18ec  "...."
.byte     0x01    # "."
.byte     0x00    # "."

.p2align 3

# Data section .gnu.version_r (size 112)  0x000018f8 - 0x00001967

.section .gnu.version_r
Var0x18f8:       # next=0x18020, start=0x18f8, end=0x1967
.long     0x00060001    # at addr 0x18f8  "...."
.long     0x00000076    # at addr 0x18fc  "v..."
.long     0x00000010    # at addr 0x1900  "...."
.long     0x00000000    # at addr 0x1904  "...."
.long     0x06969194    # at addr 0x1908  "...."
.long     0x00070000    # at addr 0x190c  "...."
.long     0x0000060a    # at addr 0x1910  "...."
.long     0x00000010    # at addr 0x1914  "...."
.long     0x0d696914    # at addr 0x1918  ".ii."
.long     0x00060000    # at addr 0x191c  "...."
.long     0x00000615    # at addr 0x1920  "...."
.long     0x00000010    # at addr 0x1924  "...."
.long     0x06969197    # at addr 0x1928  "...."
.long     0x00050000    # at addr 0x192c  "...."
.long     0x0000061f    # at addr 0x1930  "...."
.long     0x00000010    # at addr 0x1934  "...."
.long     0x09691974    # at addr 0x1938  "t.i."
.long     0x00040000    # at addr 0x193c  "...."
.long     0x0000062a    # at addr 0x1940  "*..."
.long     0x00000010    # at addr 0x1944  "...."
.long     0x09691a75    # at addr 0x1948  "u.i."
.long     0x00030000    # at addr 0x194c  "...."
.long     0x00000636    # at addr 0x1950  "6..."
.long     0x00000010    # at addr 0x1954  "...."
.long     0x0d696913    # at addr 0x1958  ".ii."
.long     0x00020000    # at addr 0x195c  "...."
.long     0x00000642    # at addr 0x1960  "B..."
.long     0x00000000    # at addr 0x1964  "...."

.p2align 3

# Data section .rela.dyn (size 4944)  0x00001968 - 0x00002cb7

.section .rela.dyn
Var0x1968:       # next=0x18020, start=0x1968, end=0x2cb7
.long     0x00022010    # at addr 0x1968  ". .."
.long     0x00000000    # at addr 0x196c  "...."
.long     0x00000008    # at addr 0x1970  "...."
.long     0x00000000    # at addr 0x1974  "...."
.long     0x000068b0    # at addr 0x1978  ".h.."
.long     0x00000000    # at addr 0x197c  "...."
.long     0x00022018    # at addr 0x1980  ". .."
.long     0x00000000    # at addr 0x1984  "...."
.long     0x00000008    # at addr 0x1988  "...."
.long     0x00000000    # at addr 0x198c  "...."
.long     0x00006870    # at addr 0x1990  "ph.."
.long     0x00000000    # at addr 0x1994  "...."
.long     0x00022020    # at addr 0x1998  "  .."
.long     0x00000000    # at addr 0x199c  "...."
.long     0x00000008    # at addr 0x19a0  "...."
.long     0x00000000    # at addr 0x19a4  "...."
.long     0x00007340    # at addr 0x19a8  "@s.."
.long     0x00000000    # at addr 0x19ac  "...."
.long     0x00022028    # at addr 0x19b0  "( .."
.long     0x00000000    # at addr 0x19b4  "...."
.long     0x00000008    # at addr 0x19b8  "...."
.long     0x00000000    # at addr 0x19bc  "...."
.long     0x000078a0    # at addr 0x19c0  ".x.."
.long     0x00000000    # at addr 0x19c4  "...."
.long     0x00022030    # at addr 0x19c8  "0 .."
.long     0x00000000    # at addr 0x19cc  "...."
.long     0x00000008    # at addr 0x19d0  "...."
.long     0x00000000    # at addr 0x19d4  "...."
.long     0x00007350    # at addr 0x19d8  "Ps.."
.long     0x00000000    # at addr 0x19dc  "...."
.long     0x00022038    # at addr 0x19e0  "8 .."
.long     0x00000000    # at addr 0x19e4  "...."
.long     0x00000008    # at addr 0x19e8  "...."
.long     0x00000000    # at addr 0x19ec  "...."
.long     0x00007960    # at addr 0x19f0  "`y.."
.long     0x00000000    # at addr 0x19f4  "...."
.long     0x00022040    # at addr 0x19f8  "@ .."
.long     0x00000000    # at addr 0x19fc  "...."
.long     0x00000008    # at addr 0x1a00  "...."
.long     0x00000000    # at addr 0x1a04  "...."
.long     0x00006ef0    # at addr 0x1a08  ".n.."
.long     0x00000000    # at addr 0x1a0c  "...."
.long     0x00022048    # at addr 0x1a10  "H .."
.long     0x00000000    # at addr 0x1a14  "...."
.long     0x00000008    # at addr 0x1a18  "...."
.long     0x00000000    # at addr 0x1a1c  "...."
.long     0x00007900    # at addr 0x1a20  ".y.."
.long     0x00000000    # at addr 0x1a24  "...."
.long     0x00022050    # at addr 0x1a28  "P .."
.long     0x00000000    # at addr 0x1a2c  "...."
.long     0x00000008    # at addr 0x1a30  "...."
.long     0x00000000    # at addr 0x1a34  "...."
.long     0x00006f00    # at addr 0x1a38  ".o.."
.long     0x00000000    # at addr 0x1a3c  "...."
.long     0x00022058    # at addr 0x1a40  "X .."
.long     0x00000000    # at addr 0x1a44  "...."
.long     0x00000008    # at addr 0x1a48  "...."
.long     0x00000000    # at addr 0x1a4c  "...."
.long     0x000079d0    # at addr 0x1a50  ".y.."
.long     0x00000000    # at addr 0x1a54  "...."
.long     0x00022060    # at addr 0x1a58  "` .."
.long     0x00000000    # at addr 0x1a5c  "...."
.long     0x00000008    # at addr 0x1a60  "...."
.long     0x00000000    # at addr 0x1a64  "...."
.long     0x0000c850    # at addr 0x1a68  "P..."
.long     0x00000000    # at addr 0x1a6c  "...."
.long     0x00022068    # at addr 0x1a70  "h .."
.long     0x00000000    # at addr 0x1a74  "...."
.long     0x00000008    # at addr 0x1a78  "...."
.long     0x00000000    # at addr 0x1a7c  "...."
.long     0x0000c930    # at addr 0x1a80  "0..."
.long     0x00000000    # at addr 0x1a84  "...."
.long     0x00022070    # at addr 0x1a88  "p .."
.long     0x00000000    # at addr 0x1a8c  "...."
.long     0x00000008    # at addr 0x1a90  "...."
.long     0x00000000    # at addr 0x1a94  "...."
.long     0x0000c8c0    # at addr 0x1a98  "...."
.long     0x00000000    # at addr 0x1a9c  "...."
.long     0x00022078    # at addr 0x1aa0  "x .."
.long     0x00000000    # at addr 0x1aa4  "...."
.long     0x00000008    # at addr 0x1aa8  "...."
.long     0x00000000    # at addr 0x1aac  "...."
.long     0x0000c9f0    # at addr 0x1ab0  "...."
.long     0x00000000    # at addr 0x1ab4  "...."
.long     0x00022080    # at addr 0x1ab8  ". .."
.long     0x00000000    # at addr 0x1abc  "...."
.long     0x00000008    # at addr 0x1ac0  "...."
.long     0x00000000    # at addr 0x1ac4  "...."
.long     0x0000cab0    # at addr 0x1ac8  "...."
.long     0x00000000    # at addr 0x1acc  "...."
.long     0x00022088    # at addr 0x1ad0  ". .."
.long     0x00000000    # at addr 0x1ad4  "...."
.long     0x00000008    # at addr 0x1ad8  "...."
.long     0x00000000    # at addr 0x1adc  "...."
.long     0x0000cbb0    # at addr 0x1ae0  "...."
.long     0x00000000    # at addr 0x1ae4  "...."
.long     0x00022090    # at addr 0x1ae8  ". .."
.long     0x00000000    # at addr 0x1aec  "...."
.long     0x00000008    # at addr 0x1af0  "...."
.long     0x00000000    # at addr 0x1af4  "...."
.long     0x0000cb30    # at addr 0x1af8  "0..."
.long     0x00000000    # at addr 0x1afc  "...."
.long     0x00022098    # at addr 0x1b00  ". .."
.long     0x00000000    # at addr 0x1b04  "...."
.long     0x00000008    # at addr 0x1b08  "...."
.long     0x00000000    # at addr 0x1b0c  "...."
.long     0x00007cd0    # at addr 0x1b10  ".|.."
.long     0x00000000    # at addr 0x1b14  "...."
.long     0x000220a0    # at addr 0x1b18  ". .."
.long     0x00000000    # at addr 0x1b1c  "...."
.long     0x00000008    # at addr 0x1b20  "...."
.long     0x00000000    # at addr 0x1b24  "...."
.long     0x0000a5b0    # at addr 0x1b28  "...."
.long     0x00000000    # at addr 0x1b2c  "...."
.long     0x000220a8    # at addr 0x1b30  ". .."
.long     0x00000000    # at addr 0x1b34  "...."
.long     0x00000008    # at addr 0x1b38  "...."
.long     0x00000000    # at addr 0x1b3c  "...."
.long     0x0000a5f0    # at addr 0x1b40  "...."
.long     0x00000000    # at addr 0x1b44  "...."
.long     0x000220b0    # at addr 0x1b48  ". .."
.long     0x00000000    # at addr 0x1b4c  "...."
.long     0x00000008    # at addr 0x1b50  "...."
.long     0x00000000    # at addr 0x1b54  "...."
.long     0x0000a770    # at addr 0x1b58  "p..."
.long     0x00000000    # at addr 0x1b5c  "...."
.long     0x000220b8    # at addr 0x1b60  ". .."
.long     0x00000000    # at addr 0x1b64  "...."
.long     0x00000008    # at addr 0x1b68  "...."
.long     0x00000000    # at addr 0x1b6c  "...."
.long     0x0000a6f0    # at addr 0x1b70  "...."
.long     0x00000000    # at addr 0x1b74  "...."
.long     0x000220c0    # at addr 0x1b78  ". .."
.long     0x00000000    # at addr 0x1b7c  "...."
.long     0x00000008    # at addr 0x1b80  "...."
.long     0x00000000    # at addr 0x1b84  "...."
.long     0x00007860    # at addr 0x1b88  "`x.."
.long     0x00000000    # at addr 0x1b8c  "...."
.long     0x000220c8    # at addr 0x1b90  ". .."
.long     0x00000000    # at addr 0x1b94  "...."
.long     0x00000008    # at addr 0x1b98  "...."
.long     0x00000000    # at addr 0x1b9c  "...."
.long     0x0000a670    # at addr 0x1ba0  "p..."
.long     0x00000000    # at addr 0x1ba4  "...."
.long     0x000220d0    # at addr 0x1ba8  ". .."
.long     0x00000000    # at addr 0x1bac  "...."
.long     0x00000008    # at addr 0x1bb0  "...."
.long     0x00000000    # at addr 0x1bb4  "...."
.long     0x0000a7b0    # at addr 0x1bb8  "...."
.long     0x00000000    # at addr 0x1bbc  "...."
.long     0x000220d8    # at addr 0x1bc0  ". .."
.long     0x00000000    # at addr 0x1bc4  "...."
.long     0x00000008    # at addr 0x1bc8  "...."
.long     0x00000000    # at addr 0x1bcc  "...."
.long     0x0000a530    # at addr 0x1bd0  "0..."
.long     0x00000000    # at addr 0x1bd4  "...."
.long     0x000220e0    # at addr 0x1bd8  ". .."
.long     0x00000000    # at addr 0x1bdc  "...."
.long     0x00000008    # at addr 0x1be0  "...."
.long     0x00000000    # at addr 0x1be4  "...."
.long     0x00007380    # at addr 0x1be8  ".s.."
.long     0x00000000    # at addr 0x1bec  "...."
.long     0x000220e8    # at addr 0x1bf0  ". .."
.long     0x00000000    # at addr 0x1bf4  "...."
.long     0x00000008    # at addr 0x1bf8  "...."
.long     0x00000000    # at addr 0x1bfc  "...."
.long     0x00007c70    # at addr 0x1c00  "p|.."
.long     0x00000000    # at addr 0x1c04  "...."
.long     0x000220f0    # at addr 0x1c08  ". .."
.long     0x00000000    # at addr 0x1c0c  "...."
.long     0x00000008    # at addr 0x1c10  "...."
.long     0x00000000    # at addr 0x1c14  "...."
.long     0x00007360    # at addr 0x1c18  "`s.."
.long     0x00000000    # at addr 0x1c1c  "...."
.long     0x000220f8    # at addr 0x1c20  ". .."
.long     0x00000000    # at addr 0x1c24  "...."
.long     0x00000008    # at addr 0x1c28  "...."
.long     0x00000000    # at addr 0x1c2c  "...."
.long     0x00007c00    # at addr 0x1c30  ".|.."
.long     0x00000000    # at addr 0x1c34  "...."
.long     0x00022120    # at addr 0x1c38  " !.."
.long     0x00000000    # at addr 0x1c3c  "...."
.long     0x00000008    # at addr 0x1c40  "...."
.long     0x00000000    # at addr 0x1c44  "...."
.long     0x0000c0b0    # at addr 0x1c48  "...."
.long     0x00000000    # at addr 0x1c4c  "...."
.long     0x00022128    # at addr 0x1c50  "(!.."
.long     0x00000000    # at addr 0x1c54  "...."
.long     0x00000008    # at addr 0x1c58  "...."
.long     0x00000000    # at addr 0x1c5c  "...."
.long     0x0000c210    # at addr 0x1c60  "...."
.long     0x00000000    # at addr 0x1c64  "...."
.long     0x00022130    # at addr 0x1c68  "0!.."
.long     0x00000000    # at addr 0x1c6c  "...."
.long     0x00000008    # at addr 0x1c70  "...."
.long     0x00000000    # at addr 0x1c74  "...."
.long     0x0000c0f0    # at addr 0x1c78  "...."
.long     0x00000000    # at addr 0x1c7c  "...."
.long     0x00022138    # at addr 0x1c80  "8!.."
.long     0x00000000    # at addr 0x1c84  "...."
.long     0x00000008    # at addr 0x1c88  "...."
.long     0x00000000    # at addr 0x1c8c  "...."
.long     0x0000c320    # at addr 0x1c90  " ..."
.long     0x00000000    # at addr 0x1c94  "...."
.long     0x00022140    # at addr 0x1c98  "@!.."
.long     0x00000000    # at addr 0x1c9c  "...."
.long     0x00000008    # at addr 0x1ca0  "...."
.long     0x00000000    # at addr 0x1ca4  "...."
.long     0x0000c4d0    # at addr 0x1ca8  "...."
.long     0x00000000    # at addr 0x1cac  "...."
.long     0x00022148    # at addr 0x1cb0  "H!.."
.long     0x00000000    # at addr 0x1cb4  "...."
.long     0x00000008    # at addr 0x1cb8  "...."
.long     0x00000000    # at addr 0x1cbc  "...."
.long     0x0000a880    # at addr 0x1cc0  "...."
.long     0x00000000    # at addr 0x1cc4  "...."
.long     0x00022150    # at addr 0x1cc8  "P!.."
.long     0x00000000    # at addr 0x1ccc  "...."
.long     0x00000008    # at addr 0x1cd0  "...."
.long     0x00000000    # at addr 0x1cd4  "...."
.long     0x0000c510    # at addr 0x1cd8  "...."
.long     0x00000000    # at addr 0x1cdc  "...."
.long     0x00022158    # at addr 0x1ce0  "X!.."
.long     0x00000000    # at addr 0x1ce4  "...."
.long     0x00000008    # at addr 0x1ce8  "...."
.long     0x00000000    # at addr 0x1cec  "...."
.long     0x0000c720    # at addr 0x1cf0  " ..."
.long     0x00000000    # at addr 0x1cf4  "...."
.long     0x00022160    # at addr 0x1cf8  "`!.."
.long     0x00000000    # at addr 0x1cfc  "...."
.long     0x00000008    # at addr 0x1d00  "...."
.long     0x00000000    # at addr 0x1d04  "...."
.long     0x0000c060    # at addr 0x1d08  "`..."
.long     0x00000000    # at addr 0x1d0c  "...."
.long     0x00022168    # at addr 0x1d10  "h!.."
.long     0x00000000    # at addr 0x1d14  "...."
.long     0x00000008    # at addr 0x1d18  "...."
.long     0x00000000    # at addr 0x1d1c  "...."
.long     0x0000c290    # at addr 0x1d20  "...."
.long     0x00000000    # at addr 0x1d24  "...."
.long     0x00022170    # at addr 0x1d28  "p!.."
.long     0x00000000    # at addr 0x1d2c  "...."
.long     0x00000008    # at addr 0x1d30  "...."
.long     0x00000000    # at addr 0x1d34  "...."
.long     0x0000bfc0    # at addr 0x1d38  "...."
.long     0x00000000    # at addr 0x1d3c  "...."
.long     0x00022178    # at addr 0x1d40  "x!.."
.long     0x00000000    # at addr 0x1d44  "...."
.long     0x00000008    # at addr 0x1d48  "...."
.long     0x00000000    # at addr 0x1d4c  "...."
.long     0x0000c3b0    # at addr 0x1d50  "...."
.long     0x00000000    # at addr 0x1d54  "...."
.long     0x00022180    # at addr 0x1d58  ".!.."
.long     0x00000000    # at addr 0x1d5c  "...."
.long     0x00000008    # at addr 0x1d60  "...."
.long     0x00000000    # at addr 0x1d64  "...."
.long     0x0000c560    # at addr 0x1d68  "`..."
.long     0x00000000    # at addr 0x1d6c  "...."
.long     0x00022188    # at addr 0x1d70  ".!.."
.long     0x00000000    # at addr 0x1d74  "...."
.long     0x00000008    # at addr 0x1d78  "...."
.long     0x00000000    # at addr 0x1d7c  "...."
.long     0x0000a7f0    # at addr 0x1d80  "...."
.long     0x00000000    # at addr 0x1d84  "...."
.long     0x00022190    # at addr 0x1d88  ".!.."
.long     0x00000000    # at addr 0x1d8c  "...."
.long     0x00000008    # at addr 0x1d90  "...."
.long     0x00000000    # at addr 0x1d94  "...."
.long     0x0000c640    # at addr 0x1d98  "@..."
.long     0x00000000    # at addr 0x1d9c  "...."
.long     0x00022198    # at addr 0x1da0  ".!.."
.long     0x00000000    # at addr 0x1da4  "...."
.long     0x00000008    # at addr 0x1da8  "...."
.long     0x00000000    # at addr 0x1dac  "...."
.long     0x0000c7b0    # at addr 0x1db0  "...."
.long     0x00000000    # at addr 0x1db4  "...."
.long     0x000221a0    # at addr 0x1db8  ".!.."
.long     0x00000000    # at addr 0x1dbc  "...."
.long     0x00000008    # at addr 0x1dc0  "...."
.long     0x00000000    # at addr 0x1dc4  "...."
.long     0x0000c140    # at addr 0x1dc8  "@..."
.long     0x00000000    # at addr 0x1dcc  "...."
.long     0x000221a8    # at addr 0x1dd0  ".!.."
.long     0x00000000    # at addr 0x1dd4  "...."
.long     0x00000008    # at addr 0x1dd8  "...."
.long     0x00000000    # at addr 0x1ddc  "...."
.long     0x0000c450    # at addr 0x1de0  "P..."
.long     0x00000000    # at addr 0x1de4  "...."
.long     0x000221b0    # at addr 0x1de8  ".!.."
.long     0x00000000    # at addr 0x1dec  "...."
.long     0x00000008    # at addr 0x1df0  "...."
.long     0x00000000    # at addr 0x1df4  "...."
.long     0x0000c010    # at addr 0x1df8  "...."
.long     0x00000000    # at addr 0x1dfc  "...."
.long     0x000221b8    # at addr 0x1e00  ".!.."
.long     0x00000000    # at addr 0x1e04  "...."
.long     0x00000008    # at addr 0x1e08  "...."
.long     0x00000000    # at addr 0x1e0c  "...."
.long     0x0000c180    # at addr 0x1e10  "...."
.long     0x00000000    # at addr 0x1e14  "...."
.long     0x000221c0    # at addr 0x1e18  ".!.."
.long     0x00000000    # at addr 0x1e1c  "...."
.long     0x00000008    # at addr 0x1e20  "...."
.long     0x00000000    # at addr 0x1e24  "...."
.long     0x0000c600    # at addr 0x1e28  "...."
.long     0x00000000    # at addr 0x1e2c  "...."
.long     0x000221c8    # at addr 0x1e30  ".!.."
.long     0x00000000    # at addr 0x1e34  "...."
.long     0x00000008    # at addr 0x1e38  "...."
.long     0x00000000    # at addr 0x1e3c  "...."
.long     0x00007b80    # at addr 0x1e40  ".{.."
.long     0x00000000    # at addr 0x1e44  "...."
.long     0x000221d0    # at addr 0x1e48  ".!.."
.long     0x00000000    # at addr 0x1e4c  "...."
.long     0x00000008    # at addr 0x1e50  "...."
.long     0x00000000    # at addr 0x1e54  "...."
.long     0x0000c5b0    # at addr 0x1e58  "...."
.long     0x00000000    # at addr 0x1e5c  "...."
.long     0x000221d8    # at addr 0x1e60  ".!.."
.long     0x00000000    # at addr 0x1e64  "...."
.long     0x00000008    # at addr 0x1e68  "...."
.long     0x00000000    # at addr 0x1e6c  "...."
.long     0x0000c690    # at addr 0x1e70  "...."
.long     0x00000000    # at addr 0x1e74  "...."
.long     0x000221e0    # at addr 0x1e78  ".!.."
.long     0x00000000    # at addr 0x1e7c  "...."
.long     0x00000008    # at addr 0x1e80  "...."
.long     0x00000000    # at addr 0x1e84  "...."
.long     0x0001c288    # at addr 0x1e88  "...."
.long     0x00000000    # at addr 0x1e8c  "...."
.long     0x000221e8    # at addr 0x1e90  ".!.."
.long     0x00000000    # at addr 0x1e94  "...."
.long     0x00000008    # at addr 0x1e98  "...."
.long     0x00000000    # at addr 0x1e9c  "...."
.long     0x00019b12    # at addr 0x1ea0  "...."
.long     0x00000000    # at addr 0x1ea4  "...."
.long     0x000221f0    # at addr 0x1ea8  ".!.."
.long     0x00000000    # at addr 0x1eac  "...."
.long     0x00000008    # at addr 0x1eb0  "...."
.long     0x00000000    # at addr 0x1eb4  "...."
.long     0x00019b16    # at addr 0x1eb8  "...."
.long     0x00000000    # at addr 0x1ebc  "...."
.long     0x000221f8    # at addr 0x1ec0  ".!.."
.long     0x00000000    # at addr 0x1ec4  "...."
.long     0x00000008    # at addr 0x1ec8  "...."
.long     0x00000000    # at addr 0x1ecc  "...."
.long     0x00019b1c    # at addr 0x1ed0  "...."
.long     0x00000000    # at addr 0x1ed4  "...."
.long     0x00022200    # at addr 0x1ed8  ".".."
.long     0x00000000    # at addr 0x1edc  "...."
.long     0x00000008    # at addr 0x1ee0  "...."
.long     0x00000000    # at addr 0x1ee4  "...."
.long     0x00019b22    # at addr 0x1ee8  ""..."
.long     0x00000000    # at addr 0x1eec  "...."
.long     0x00022208    # at addr 0x1ef0  ".".."
.long     0x00000000    # at addr 0x1ef4  "...."
.long     0x00000008    # at addr 0x1ef8  "...."
.long     0x00000000    # at addr 0x1efc  "...."
.long     0x00019b25    # at addr 0x1f00  "%..."
.long     0x00000000    # at addr 0x1f04  "...."
.long     0x00022210    # at addr 0x1f08  ".".."
.long     0x00000000    # at addr 0x1f0c  "...."
.long     0x00000008    # at addr 0x1f10  "...."
.long     0x00000000    # at addr 0x1f14  "...."
.long     0x00019b2a    # at addr 0x1f18  "*..."
.long     0x00000000    # at addr 0x1f1c  "...."
.long     0x00022218    # at addr 0x1f20  ".".."
.long     0x00000000    # at addr 0x1f24  "...."
.long     0x00000008    # at addr 0x1f28  "...."
.long     0x00000000    # at addr 0x1f2c  "...."
.long     0x00019b32    # at addr 0x1f30  "2..."
.long     0x00000000    # at addr 0x1f34  "...."
.long     0x00022220    # at addr 0x1f38  " ".."
.long     0x00000000    # at addr 0x1f3c  "...."
.long     0x00000008    # at addr 0x1f40  "...."
.long     0x00000000    # at addr 0x1f44  "...."
.long     0x00019b2f    # at addr 0x1f48  "/..."
.long     0x00000000    # at addr 0x1f4c  "...."
.long     0x00022240    # at addr 0x1f50  "@".."
.long     0x00000000    # at addr 0x1f54  "...."
.long     0x00000008    # at addr 0x1f58  "...."
.long     0x00000000    # at addr 0x1f5c  "...."
.long     0x00019b36    # at addr 0x1f60  "6..."
.long     0x00000000    # at addr 0x1f64  "...."
.long     0x00022248    # at addr 0x1f68  "H".."
.long     0x00000000    # at addr 0x1f6c  "...."
.long     0x00000008    # at addr 0x1f70  "...."
.long     0x00000000    # at addr 0x1f74  "...."
.long     0x0001bebc    # at addr 0x1f78  "...."
.long     0x00000000    # at addr 0x1f7c  "...."
.long     0x00022250    # at addr 0x1f80  "P".."
.long     0x00000000    # at addr 0x1f84  "...."
.long     0x00000008    # at addr 0x1f88  "...."
.long     0x00000000    # at addr 0x1f8c  "...."
.long     0x00019b3c    # at addr 0x1f90  "<..."
.long     0x00000000    # at addr 0x1f94  "...."
.long     0x00022258    # at addr 0x1f98  "X".."
.long     0x00000000    # at addr 0x1f9c  "...."
.long     0x00000008    # at addr 0x1fa0  "...."
.long     0x00000000    # at addr 0x1fa4  "...."
.long     0x00019b40    # at addr 0x1fa8  "@..."
.long     0x00000000    # at addr 0x1fac  "...."
.long     0x00022260    # at addr 0x1fb0  "`".."
.long     0x00000000    # at addr 0x1fb4  "...."
.long     0x00000008    # at addr 0x1fb8  "...."
.long     0x00000000    # at addr 0x1fbc  "...."
.long     0x00019b46    # at addr 0x1fc0  "F..."
.long     0x00000000    # at addr 0x1fc4  "...."
.long     0x00022280    # at addr 0x1fc8  ".".."
.long     0x00000000    # at addr 0x1fcc  "...."
.long     0x00000008    # at addr 0x1fd0  "...."
.long     0x00000000    # at addr 0x1fd4  "...."
.long     0x00019b25    # at addr 0x1fd8  "%..."
.long     0x00000000    # at addr 0x1fdc  "...."
.long     0x00022288    # at addr 0x1fe0  ".".."
.long     0x00000000    # at addr 0x1fe4  "...."
.long     0x00000008    # at addr 0x1fe8  "...."
.long     0x00000000    # at addr 0x1fec  "...."
.long     0x000199b1    # at addr 0x1ff0  "...."
.long     0x00000000    # at addr 0x1ff4  "...."
.long     0x00022290    # at addr 0x1ff8  ".".."
.long     0x00000000    # at addr 0x1ffc  "...."
.long     0x00000008    # at addr 0x2000  "...."
.long     0x00000000    # at addr 0x2004  "...."
.long     0x000199a3    # at addr 0x2008  "...."
.long     0x00000000    # at addr 0x200c  "...."
.long     0x00022298    # at addr 0x2010  ".".."
.long     0x00000000    # at addr 0x2014  "...."
.long     0x00000008    # at addr 0x2018  "...."
.long     0x00000000    # at addr 0x201c  "...."
.long     0x00019b4d    # at addr 0x2020  "M..."
.long     0x00000000    # at addr 0x2024  "...."
.long     0x000222a0    # at addr 0x2028  ".".."
.long     0x00000000    # at addr 0x202c  "...."
.long     0x00000008    # at addr 0x2030  "...."
.long     0x00000000    # at addr 0x2034  "...."
.long     0x000197cf    # at addr 0x2038  "...."
.long     0x00000000    # at addr 0x203c  "...."
.long     0x000222c0    # at addr 0x2040  ".".."
.long     0x00000000    # at addr 0x2044  "...."
.long     0x00000008    # at addr 0x2048  "...."
.long     0x00000000    # at addr 0x204c  "...."
.long     0x00019b57    # at addr 0x2050  "W..."
.long     0x00000000    # at addr 0x2054  "...."
.long     0x000222c8    # at addr 0x2058  ".".."
.long     0x00000000    # at addr 0x205c  "...."
.long     0x00000008    # at addr 0x2060  "...."
.long     0x00000000    # at addr 0x2064  "...."
.long     0x00019b5f    # at addr 0x2068  "_..."
.long     0x00000000    # at addr 0x206c  "...."
.long     0x000222d0    # at addr 0x2070  ".".."
.long     0x00000000    # at addr 0x2074  "...."
.long     0x00000008    # at addr 0x2078  "...."
.long     0x00000000    # at addr 0x207c  "...."
.long     0x00019b64    # at addr 0x2080  "d..."
.long     0x00000000    # at addr 0x2084  "...."
.long     0x000222d8    # at addr 0x2088  ".".."
.long     0x00000000    # at addr 0x208c  "...."
.long     0x00000008    # at addr 0x2090  "...."
.long     0x00000000    # at addr 0x2094  "...."
.long     0x00019b6b    # at addr 0x2098  "k..."
.long     0x00000000    # at addr 0x209c  "...."
.long     0x000222e0    # at addr 0x20a0  ".".."
.long     0x00000000    # at addr 0x20a4  "...."
.long     0x00000008    # at addr 0x20a8  "...."
.long     0x00000000    # at addr 0x20ac  "...."
.long     0x00019b76    # at addr 0x20b0  "v..."
.long     0x00000000    # at addr 0x20b4  "...."
.long     0x000222e8    # at addr 0x20b8  ".".."
.long     0x00000000    # at addr 0x20bc  "...."
.long     0x00000008    # at addr 0x20c0  "...."
.long     0x00000000    # at addr 0x20c4  "...."
.long     0x00019b7d    # at addr 0x20c8  "}..."
.long     0x00000000    # at addr 0x20cc  "...."
.long     0x000222f0    # at addr 0x20d0  ".".."
.long     0x00000000    # at addr 0x20d4  "...."
.long     0x00000008    # at addr 0x20d8  "...."
.long     0x00000000    # at addr 0x20dc  "...."
.long     0x00019b86    # at addr 0x20e0  "...."
.long     0x00000000    # at addr 0x20e4  "...."
.long     0x00022300    # at addr 0x20e8  ".#.."
.long     0x00000000    # at addr 0x20ec  "...."
.long     0x00000008    # at addr 0x20f0  "...."
.long     0x00000000    # at addr 0x20f4  "...."
.long     0x00019c20    # at addr 0x20f8  " ..."
.long     0x00000000    # at addr 0x20fc  "...."
.long     0x00022320    # at addr 0x2100  " #.."
.long     0x00000000    # at addr 0x2104  "...."
.long     0x00000008    # at addr 0x2108  "...."
.long     0x00000000    # at addr 0x210c  "...."
.long     0x0001c274    # at addr 0x2110  "t..."
.long     0x00000000    # at addr 0x2114  "...."
.long     0x00022340    # at addr 0x2118  "@#.."
.long     0x00000000    # at addr 0x211c  "...."
.long     0x00000008    # at addr 0x2120  "...."
.long     0x00000000    # at addr 0x2124  "...."
.long     0x00019b94    # at addr 0x2128  "...."
.long     0x00000000    # at addr 0x212c  "...."
.long     0x00022360    # at addr 0x2130  "`#.."
.long     0x00000000    # at addr 0x2134  "...."
.long     0x00000008    # at addr 0x2138  "...."
.long     0x00000000    # at addr 0x213c  "...."
.long     0x00019b9e    # at addr 0x2140  "...."
.long     0x00000000    # at addr 0x2144  "...."
.long     0x00022380    # at addr 0x2148  ".#.."
.long     0x00000000    # at addr 0x214c  "...."
.long     0x00000008    # at addr 0x2150  "...."
.long     0x00000000    # at addr 0x2154  "...."
.long     0x00019ba4    # at addr 0x2158  "...."
.long     0x00000000    # at addr 0x215c  "...."
.long     0x000223a0    # at addr 0x2160  ".#.."
.long     0x00000000    # at addr 0x2164  "...."
.long     0x00000008    # at addr 0x2168  "...."
.long     0x00000000    # at addr 0x216c  "...."
.long     0x00019bae    # at addr 0x2170  "...."
.long     0x00000000    # at addr 0x2174  "...."
.long     0x000223c0    # at addr 0x2178  ".#.."
.long     0x00000000    # at addr 0x217c  "...."
.long     0x00000008    # at addr 0x2180  "...."
.long     0x00000000    # at addr 0x2184  "...."
.long     0x00019bc6    # at addr 0x2188  "...."
.long     0x00000000    # at addr 0x218c  "...."
.long     0x000223e0    # at addr 0x2190  ".#.."
.long     0x00000000    # at addr 0x2194  "...."
.long     0x00000008    # at addr 0x2198  "...."
.long     0x00000000    # at addr 0x219c  "...."
.long     0x00019bd5    # at addr 0x21a0  "...."
.long     0x00000000    # at addr 0x21a4  "...."
.long     0x00022400    # at addr 0x21a8  ".$.."
.long     0x00000000    # at addr 0x21ac  "...."
.long     0x00000008    # at addr 0x21b0  "...."
.long     0x00000000    # at addr 0x21b4  "...."
.long     0x00019bdb    # at addr 0x21b8  "...."
.long     0x00000000    # at addr 0x21bc  "...."
.long     0x00022420    # at addr 0x21c0  " $.."
.long     0x00000000    # at addr 0x21c4  "...."
.long     0x00000008    # at addr 0x21c8  "...."
.long     0x00000000    # at addr 0x21cc  "...."
.long     0x00019be5    # at addr 0x21d0  "...."
.long     0x00000000    # at addr 0x21d4  "...."
.long     0x00022440    # at addr 0x21d8  "@$.."
.long     0x00000000    # at addr 0x21dc  "...."
.long     0x00000008    # at addr 0x21e0  "...."
.long     0x00000000    # at addr 0x21e4  "...."
.long     0x00019bf5    # at addr 0x21e8  "...."
.long     0x00000000    # at addr 0x21ec  "...."
.long     0x00022460    # at addr 0x21f0  "`$.."
.long     0x00000000    # at addr 0x21f4  "...."
.long     0x00000008    # at addr 0x21f8  "...."
.long     0x00000000    # at addr 0x21fc  "...."
.long     0x00019bfe    # at addr 0x2200  "...."
.long     0x00000000    # at addr 0x2204  "...."
.long     0x00022480    # at addr 0x2208  ".$.."
.long     0x00000000    # at addr 0x220c  "...."
.long     0x00000008    # at addr 0x2210  "...."
.long     0x00000000    # at addr 0x2214  "...."
.long     0x00019c11    # at addr 0x2218  "...."
.long     0x00000000    # at addr 0x221c  "...."
.long     0x000224a0    # at addr 0x2220  ".$.."
.long     0x00000000    # at addr 0x2224  "...."
.long     0x00000008    # at addr 0x2228  "...."
.long     0x00000000    # at addr 0x222c  "...."
.long     0x000199a3    # at addr 0x2230  "...."
.long     0x00000000    # at addr 0x2234  "...."
.long     0x000224c0    # at addr 0x2238  ".$.."
.long     0x00000000    # at addr 0x223c  "...."
.long     0x00000008    # at addr 0x2240  "...."
.long     0x00000000    # at addr 0x2244  "...."
.long     0x00019986    # at addr 0x2248  "...."
.long     0x00000000    # at addr 0x224c  "...."
.long     0x000224e0    # at addr 0x2250  ".$.."
.long     0x00000000    # at addr 0x2254  "...."
.long     0x00000008    # at addr 0x2258  "...."
.long     0x00000000    # at addr 0x225c  "...."
.long     0x00019c19    # at addr 0x2260  "...."
.long     0x00000000    # at addr 0x2264  "...."
.long     0x00022500    # at addr 0x2268  ".%.."
.long     0x00000000    # at addr 0x226c  "...."
.long     0x00000008    # at addr 0x2270  "...."
.long     0x00000000    # at addr 0x2274  "...."
.long     0x00019c24    # at addr 0x2278  "$..."
.long     0x00000000    # at addr 0x227c  "...."
.long     0x00022520    # at addr 0x2280  " %.."
.long     0x00000000    # at addr 0x2284  "...."
.long     0x00000008    # at addr 0x2288  "...."
.long     0x00000000    # at addr 0x228c  "...."
.long     0x00019c33    # at addr 0x2290  "3..."
.long     0x00000000    # at addr 0x2294  "...."
.long     0x00022540    # at addr 0x2298  "@%.."
.long     0x00000000    # at addr 0x229c  "...."
.long     0x00000008    # at addr 0x22a0  "...."
.long     0x00000000    # at addr 0x22a4  "...."
.long     0x00019c3c    # at addr 0x22a8  "<..."
.long     0x00000000    # at addr 0x22ac  "...."
.long     0x00022560    # at addr 0x22b0  "`%.."
.long     0x00000000    # at addr 0x22b4  "...."
.long     0x00000008    # at addr 0x22b8  "...."
.long     0x00000000    # at addr 0x22bc  "...."
.long     0x00019c46    # at addr 0x22c0  "F..."
.long     0x00000000    # at addr 0x22c4  "...."
.long     0x00022580    # at addr 0x22c8  ".%.."
.long     0x00000000    # at addr 0x22cc  "...."
.long     0x00000008    # at addr 0x22d0  "...."
.long     0x00000000    # at addr 0x22d4  "...."
.long     0x00019c49    # at addr 0x22d8  "I..."
.long     0x00000000    # at addr 0x22dc  "...."
.long     0x000225a0    # at addr 0x22e0  ".%.."
.long     0x00000000    # at addr 0x22e4  "...."
.long     0x00000008    # at addr 0x22e8  "...."
.long     0x00000000    # at addr 0x22ec  "...."
.long     0x0001be18    # at addr 0x22f0  "...."
.long     0x00000000    # at addr 0x22f4  "...."
.long     0x000225c0    # at addr 0x22f8  ".%.."
.long     0x00000000    # at addr 0x22fc  "...."
.long     0x00000008    # at addr 0x2300  "...."
.long     0x00000000    # at addr 0x2304  "...."
.long     0x00019c62    # at addr 0x2308  "b..."
.long     0x00000000    # at addr 0x230c  "...."
.long     0x000225e0    # at addr 0x2310  ".%.."
.long     0x00000000    # at addr 0x2314  "...."
.long     0x00000008    # at addr 0x2318  "...."
.long     0x00000000    # at addr 0x231c  "...."
.long     0x00019c67    # at addr 0x2320  "g..."
.long     0x00000000    # at addr 0x2324  "...."
.long     0x00022600    # at addr 0x2328  ".&.."
.long     0x00000000    # at addr 0x232c  "...."
.long     0x00000008    # at addr 0x2330  "...."
.long     0x00000000    # at addr 0x2334  "...."
.long     0x000199d5    # at addr 0x2338  "...."
.long     0x00000000    # at addr 0x233c  "...."
.long     0x00022620    # at addr 0x2340  " &.."
.long     0x00000000    # at addr 0x2344  "...."
.long     0x00000008    # at addr 0x2348  "...."
.long     0x00000000    # at addr 0x234c  "...."
.long     0x00019c6e    # at addr 0x2350  "n..."
.long     0x00000000    # at addr 0x2354  "...."
.long     0x00022640    # at addr 0x2358  "@&.."
.long     0x00000000    # at addr 0x235c  "...."
.long     0x00000008    # at addr 0x2360  "...."
.long     0x00000000    # at addr 0x2364  "...."
.long     0x00019c7a    # at addr 0x2368  "z..."
.long     0x00000000    # at addr 0x236c  "...."
.long     0x00022660    # at addr 0x2370  "`&.."
.long     0x00000000    # at addr 0x2374  "...."
.long     0x00000008    # at addr 0x2378  "...."
.long     0x00000000    # at addr 0x237c  "...."
.long     0x00019c82    # at addr 0x2380  "...."
.long     0x00000000    # at addr 0x2384  "...."
.long     0x00022680    # at addr 0x2388  ".&.."
.long     0x00000000    # at addr 0x238c  "...."
.long     0x00000008    # at addr 0x2390  "...."
.long     0x00000000    # at addr 0x2394  "...."
.long     0x000199e7    # at addr 0x2398  "...."
.long     0x00000000    # at addr 0x239c  "...."
.long     0x000226a0    # at addr 0x23a0  ".&.."
.long     0x00000000    # at addr 0x23a4  "...."
.long     0x00000008    # at addr 0x23a8  "...."
.long     0x00000000    # at addr 0x23ac  "...."
.long     0x00019c8d    # at addr 0x23b0  "...."
.long     0x00000000    # at addr 0x23b4  "...."
.long     0x000226c0    # at addr 0x23b8  ".&.."
.long     0x00000000    # at addr 0x23bc  "...."
.long     0x00000008    # at addr 0x23c0  "...."
.long     0x00000000    # at addr 0x23c4  "...."
.long     0x000199b8    # at addr 0x23c8  "...."
.long     0x00000000    # at addr 0x23cc  "...."
.long     0x000226e0    # at addr 0x23d0  ".&.."
.long     0x00000000    # at addr 0x23d4  "...."
.long     0x00000008    # at addr 0x23d8  "...."
.long     0x00000000    # at addr 0x23dc  "...."
.long     0x00019c97    # at addr 0x23e0  "...."
.long     0x00000000    # at addr 0x23e4  "...."
.long     0x00022700    # at addr 0x23e8  ".'.."
.long     0x00000000    # at addr 0x23ec  "...."
.long     0x00000008    # at addr 0x23f0  "...."
.long     0x00000000    # at addr 0x23f4  "...."
.long     0x000199aa    # at addr 0x23f8  "...."
.long     0x00000000    # at addr 0x23fc  "...."
.long     0x00022720    # at addr 0x2400  " '.."
.long     0x00000000    # at addr 0x2404  "...."
.long     0x00000008    # at addr 0x2408  "...."
.long     0x00000000    # at addr 0x240c  "...."
.long     0x00019caa    # at addr 0x2410  "...."
.long     0x00000000    # at addr 0x2414  "...."
.long     0x00022740    # at addr 0x2418  "@'.."
.long     0x00000000    # at addr 0x241c  "...."
.long     0x00000008    # at addr 0x2420  "...."
.long     0x00000000    # at addr 0x2424  "...."
.long     0x000199b1    # at addr 0x2428  "...."
.long     0x00000000    # at addr 0x242c  "...."
.long     0x00022760    # at addr 0x2430  "`'.."
.long     0x00000000    # at addr 0x2434  "...."
.long     0x00000008    # at addr 0x2438  "...."
.long     0x00000000    # at addr 0x243c  "...."
.long     0x00019cb2    # at addr 0x2440  "...."
.long     0x00000000    # at addr 0x2444  "...."
.long     0x00022780    # at addr 0x2448  ".'.."
.long     0x00000000    # at addr 0x244c  "...."
.long     0x00000008    # at addr 0x2450  "...."
.long     0x00000000    # at addr 0x2454  "...."
.long     0x000199c1    # at addr 0x2458  "...."
.long     0x00000000    # at addr 0x245c  "...."
.long     0x000227a0    # at addr 0x2460  ".'.."
.long     0x00000000    # at addr 0x2464  "...."
.long     0x00000008    # at addr 0x2468  "...."
.long     0x00000000    # at addr 0x246c  "...."
.long     0x000199c9    # at addr 0x2470  "...."
.long     0x00000000    # at addr 0x2474  "...."
.long     0x000227c0    # at addr 0x2478  ".'.."
.long     0x00000000    # at addr 0x247c  "...."
.long     0x00000008    # at addr 0x2480  "...."
.long     0x00000000    # at addr 0x2484  "...."
.long     0x00019cbd    # at addr 0x2488  "...."
.long     0x00000000    # at addr 0x248c  "...."
.long     0x000227e0    # at addr 0x2490  ".'.."
.long     0x00000000    # at addr 0x2494  "...."
.long     0x00000008    # at addr 0x2498  "...."
.long     0x00000000    # at addr 0x249c  "...."
.long     0x00019cc8    # at addr 0x24a0  "...."
.long     0x00000000    # at addr 0x24a4  "...."
.long     0x00022800    # at addr 0x24a8  ".(.."
.long     0x00000000    # at addr 0x24ac  "...."
.long     0x00000008    # at addr 0x24b0  "...."
.long     0x00000000    # at addr 0x24b4  "...."
.long     0x00019cd0    # at addr 0x24b8  "...."
.long     0x00000000    # at addr 0x24bc  "...."
.long     0x00022820    # at addr 0x24c0  " (.."
.long     0x00000000    # at addr 0x24c4  "...."
.long     0x00000008    # at addr 0x24c8  "...."
.long     0x00000000    # at addr 0x24cc  "...."
.long     0x00019cd7    # at addr 0x24d0  "...."
.long     0x00000000    # at addr 0x24d4  "...."
.long     0x00022840    # at addr 0x24d8  "@(.."
.long     0x00000000    # at addr 0x24dc  "...."
.long     0x00000008    # at addr 0x24e0  "...."
.long     0x00000000    # at addr 0x24e4  "...."
.long     0x000197cf    # at addr 0x24e8  "...."
.long     0x00000000    # at addr 0x24ec  "...."
.long     0x00022880    # at addr 0x24f0  ".(.."
.long     0x00000000    # at addr 0x24f4  "...."
.long     0x00000008    # at addr 0x24f8  "...."
.long     0x00000000    # at addr 0x24fc  "...."
.long     0x00019946    # at addr 0x2500  "F..."
.long     0x00000000    # at addr 0x2504  "...."
.long     0x00022888    # at addr 0x2508  ".(.."
.long     0x00000000    # at addr 0x250c  "...."
.long     0x00000008    # at addr 0x2510  "...."
.long     0x00000000    # at addr 0x2514  "...."
.long     0x00019d3b    # at addr 0x2518  ";..."
.long     0x00000000    # at addr 0x251c  "...."
.long     0x00022890    # at addr 0x2520  ".(.."
.long     0x00000000    # at addr 0x2524  "...."
.long     0x00000008    # at addr 0x2528  "...."
.long     0x00000000    # at addr 0x252c  "...."
.long     0x00019d3e    # at addr 0x2530  ">..."
.long     0x00000000    # at addr 0x2534  "...."
.long     0x00022898    # at addr 0x2538  ".(.."
.long     0x00000000    # at addr 0x253c  "...."
.long     0x00000008    # at addr 0x2540  "...."
.long     0x00000000    # at addr 0x2544  "...."
.long     0x00019c0e    # at addr 0x2548  "...."
.long     0x00000000    # at addr 0x254c  "...."
.long     0x000228a0    # at addr 0x2550  ".(.."
.long     0x00000000    # at addr 0x2554  "...."
.long     0x00000008    # at addr 0x2558  "...."
.long     0x00000000    # at addr 0x255c  "...."
.long     0x00019b22    # at addr 0x2560  ""..."
.long     0x00000000    # at addr 0x2564  "...."
.long     0x000228a8    # at addr 0x2568  ".(.."
.long     0x00000000    # at addr 0x256c  "...."
.long     0x00000008    # at addr 0x2570  "...."
.long     0x00000000    # at addr 0x2574  "...."
.long     0x00019d41    # at addr 0x2578  "A..."
.long     0x00000000    # at addr 0x257c  "...."
.long     0x000228b0    # at addr 0x2580  ".(.."
.long     0x00000000    # at addr 0x2584  "...."
.long     0x00000008    # at addr 0x2588  "...."
.long     0x00000000    # at addr 0x258c  "...."
.long     0x00019d44    # at addr 0x2590  "D..."
.long     0x00000000    # at addr 0x2594  "...."
.long     0x000228b8    # at addr 0x2598  ".(.."
.long     0x00000000    # at addr 0x259c  "...."
.long     0x00000008    # at addr 0x25a0  "...."
.long     0x00000000    # at addr 0x25a4  "...."
.long     0x00019d47    # at addr 0x25a8  "G..."
.long     0x00000000    # at addr 0x25ac  "...."
.long     0x000228c0    # at addr 0x25b0  ".(.."
.long     0x00000000    # at addr 0x25b4  "...."
.long     0x00000008    # at addr 0x25b8  "...."
.long     0x00000000    # at addr 0x25bc  "...."
.long     0x00019d4a    # at addr 0x25c0  "J..."
.long     0x00000000    # at addr 0x25c4  "...."
.long     0x000228c8    # at addr 0x25c8  ".(.."
.long     0x00000000    # at addr 0x25cc  "...."
.long     0x00000008    # at addr 0x25d0  "...."
.long     0x00000000    # at addr 0x25d4  "...."
.long     0x00019d7d    # at addr 0x25d8  "}..."
.long     0x00000000    # at addr 0x25dc  "...."
.long     0x000228d0    # at addr 0x25e0  ".(.."
.long     0x00000000    # at addr 0x25e4  "...."
.long     0x00000008    # at addr 0x25e8  "...."
.long     0x00000000    # at addr 0x25ec  "...."
.long     0x00019d4d    # at addr 0x25f0  "M..."
.long     0x00000000    # at addr 0x25f4  "...."
.long     0x000228d8    # at addr 0x25f8  ".(.."
.long     0x00000000    # at addr 0x25fc  "...."
.long     0x00000008    # at addr 0x2600  "...."
.long     0x00000000    # at addr 0x2604  "...."
.long     0x00019d50    # at addr 0x2608  "P..."
.long     0x00000000    # at addr 0x260c  "...."
.long     0x000228e0    # at addr 0x2610  ".(.."
.long     0x00000000    # at addr 0x2614  "...."
.long     0x00000008    # at addr 0x2618  "...."
.long     0x00000000    # at addr 0x261c  "...."
.long     0x00019d53    # at addr 0x2620  "S..."
.long     0x00000000    # at addr 0x2624  "...."
.long     0x000228e8    # at addr 0x2628  ".(.."
.long     0x00000000    # at addr 0x262c  "...."
.long     0x00000008    # at addr 0x2630  "...."
.long     0x00000000    # at addr 0x2634  "...."
.long     0x00019cd4    # at addr 0x2638  "...."
.long     0x00000000    # at addr 0x263c  "...."
.long     0x000228f0    # at addr 0x2640  ".(.."
.long     0x00000000    # at addr 0x2644  "...."
.long     0x00000008    # at addr 0x2648  "...."
.long     0x00000000    # at addr 0x264c  "...."
.long     0x00019d56    # at addr 0x2650  "V..."
.long     0x00000000    # at addr 0x2654  "...."
.long     0x000228f8    # at addr 0x2658  ".(.."
.long     0x00000000    # at addr 0x265c  "...."
.long     0x00000008    # at addr 0x2660  "...."
.long     0x00000000    # at addr 0x2664  "...."
.long     0x00019d59    # at addr 0x2668  "Y..."
.long     0x00000000    # at addr 0x266c  "...."
.long     0x00022900    # at addr 0x2670  ".).."
.long     0x00000000    # at addr 0x2674  "...."
.long     0x00000008    # at addr 0x2678  "...."
.long     0x00000000    # at addr 0x267c  "...."
.long     0x00019d5c    # at addr 0x2680  "\..."
.long     0x00000000    # at addr 0x2684  "...."
.long     0x00022908    # at addr 0x2688  ".).."
.long     0x00000000    # at addr 0x268c  "...."
.long     0x00000008    # at addr 0x2690  "...."
.long     0x00000000    # at addr 0x2694  "...."
.long     0x00019d5f    # at addr 0x2698  "_..."
.long     0x00000000    # at addr 0x269c  "...."
.long     0x00022910    # at addr 0x26a0  ".).."
.long     0x00000000    # at addr 0x26a4  "...."
.long     0x00000008    # at addr 0x26a8  "...."
.long     0x00000000    # at addr 0x26ac  "...."
.long     0x00019bc3    # at addr 0x26b0  "...."
.long     0x00000000    # at addr 0x26b4  "...."
.long     0x00022918    # at addr 0x26b8  ".).."
.long     0x00000000    # at addr 0x26bc  "...."
.long     0x00000008    # at addr 0x26c0  "...."
.long     0x00000000    # at addr 0x26c4  "...."
.long     0x00019d62    # at addr 0x26c8  "b..."
.long     0x00000000    # at addr 0x26cc  "...."
.long     0x00022920    # at addr 0x26d0  " ).."
.long     0x00000000    # at addr 0x26d4  "...."
.long     0x00000008    # at addr 0x26d8  "...."
.long     0x00000000    # at addr 0x26dc  "...."
.long     0x00019d65    # at addr 0x26e0  "e..."
.long     0x00000000    # at addr 0x26e4  "...."
.long     0x00022928    # at addr 0x26e8  "().."
.long     0x00000000    # at addr 0x26ec  "...."
.long     0x00000008    # at addr 0x26f0  "...."
.long     0x00000000    # at addr 0x26f4  "...."
.long     0x00019d68    # at addr 0x26f8  "h..."
.long     0x00000000    # at addr 0x26fc  "...."
.long     0x00022930    # at addr 0x2700  "0).."
.long     0x00000000    # at addr 0x2704  "...."
.long     0x00000008    # at addr 0x2708  "...."
.long     0x00000000    # at addr 0x270c  "...."
.long     0x00019d6b    # at addr 0x2710  "k..."
.long     0x00000000    # at addr 0x2714  "...."
.long     0x00022938    # at addr 0x2718  "8).."
.long     0x00000000    # at addr 0x271c  "...."
.long     0x00000008    # at addr 0x2720  "...."
.long     0x00000000    # at addr 0x2724  "...."
.long     0x00019d6e    # at addr 0x2728  "n..."
.long     0x00000000    # at addr 0x272c  "...."
.long     0x00022960    # at addr 0x2730  "`).."
.long     0x00000000    # at addr 0x2734  "...."
.long     0x00000008    # at addr 0x2738  "...."
.long     0x00000000    # at addr 0x273c  "...."
.long     0x00019b25    # at addr 0x2740  "%..."
.long     0x00000000    # at addr 0x2744  "...."
.long     0x00022968    # at addr 0x2748  "h).."
.long     0x00000000    # at addr 0x274c  "...."
.long     0x00000008    # at addr 0x2750  "...."
.long     0x00000000    # at addr 0x2754  "...."
.long     0x00019d71    # at addr 0x2758  "q..."
.long     0x00000000    # at addr 0x275c  "...."
.long     0x00022970    # at addr 0x2760  "p).."
.long     0x00000000    # at addr 0x2764  "...."
.long     0x00000008    # at addr 0x2768  "...."
.long     0x00000000    # at addr 0x276c  "...."
.long     0x00019c3c    # at addr 0x2770  "<..."
.long     0x00000000    # at addr 0x2774  "...."
.long     0x00022978    # at addr 0x2778  "x).."
.long     0x00000000    # at addr 0x277c  "...."
.long     0x00000008    # at addr 0x2780  "...."
.long     0x00000000    # at addr 0x2784  "...."
.long     0x00019c33    # at addr 0x2788  "3..."
.long     0x00000000    # at addr 0x278c  "...."
.long     0x000229a0    # at addr 0x2790  ".).."
.long     0x00000000    # at addr 0x2794  "...."
.long     0x00000008    # at addr 0x2798  "...."
.long     0x00000000    # at addr 0x279c  "...."
.long     0x0001993d    # at addr 0x27a0  "=..."
.long     0x00000000    # at addr 0x27a4  "...."
.long     0x000229a8    # at addr 0x27a8  ".).."
.long     0x00000000    # at addr 0x27ac  "...."
.long     0x00000008    # at addr 0x27b0  "...."
.long     0x00000000    # at addr 0x27b4  "...."
.long     0x00019d77    # at addr 0x27b8  "w..."
.long     0x00000000    # at addr 0x27bc  "...."
.long     0x000229b0    # at addr 0x27c0  ".).."
.long     0x00000000    # at addr 0x27c4  "...."
.long     0x00000008    # at addr 0x27c8  "...."
.long     0x00000000    # at addr 0x27cc  "...."
.long     0x00019d7c    # at addr 0x27d0  "|..."
.long     0x00000000    # at addr 0x27d4  "...."
.long     0x000229b8    # at addr 0x27d8  ".).."
.long     0x00000000    # at addr 0x27dc  "...."
.long     0x00000008    # at addr 0x27e0  "...."
.long     0x00000000    # at addr 0x27e4  "...."
.long     0x00019954    # at addr 0x27e8  "T..."
.long     0x00000000    # at addr 0x27ec  "...."
.long     0x000229d0    # at addr 0x27f0  ".).."
.long     0x00000000    # at addr 0x27f4  "...."
.long     0x00000008    # at addr 0x27f8  "...."
.long     0x00000000    # at addr 0x27fc  "...."
.long     0x00019bc6    # at addr 0x2800  "...."
.long     0x00000000    # at addr 0x2804  "...."
.long     0x000229d8    # at addr 0x2808  ".).."
.long     0x00000000    # at addr 0x280c  "...."
.long     0x00000008    # at addr 0x2810  "...."
.long     0x00000000    # at addr 0x2814  "...."
.long     0x00019c46    # at addr 0x2818  "F..."
.long     0x00000000    # at addr 0x281c  "...."
.long     0x00022a00    # at addr 0x2820  ".*.."
.long     0x00000000    # at addr 0x2824  "...."
.long     0x00000008    # at addr 0x2828  "...."
.long     0x00000000    # at addr 0x282c  "...."
.long     0x00019c7a    # at addr 0x2830  "z..."
.long     0x00000000    # at addr 0x2834  "...."
.long     0x00022a08    # at addr 0x2838  ".*.."
.long     0x00000000    # at addr 0x283c  "...."
.long     0x00000008    # at addr 0x2840  "...."
.long     0x00000000    # at addr 0x2844  "...."
.long     0x0001c25b    # at addr 0x2848  "[..."
.long     0x00000000    # at addr 0x284c  "...."
.long     0x00022a10    # at addr 0x2850  ".*.."
.long     0x00000000    # at addr 0x2854  "...."
.long     0x00000008    # at addr 0x2858  "...."
.long     0x00000000    # at addr 0x285c  "...."
.long     0x0001c261    # at addr 0x2860  "a..."
.long     0x00000000    # at addr 0x2864  "...."
.long     0x00022a18    # at addr 0x2868  ".*.."
.long     0x00000000    # at addr 0x286c  "...."
.long     0x00000008    # at addr 0x2870  "...."
.long     0x00000000    # at addr 0x2874  "...."
.long     0x0001c26e    # at addr 0x2878  "n..."
.long     0x00000000    # at addr 0x287c  "...."
.long     0x00022a20    # at addr 0x2880  " *.."
.long     0x00000000    # at addr 0x2884  "...."
.long     0x00000008    # at addr 0x2888  "...."
.long     0x00000000    # at addr 0x288c  "...."
.long     0x0001c27b    # at addr 0x2890  "{..."
.long     0x00000000    # at addr 0x2894  "...."
.long     0x00022a28    # at addr 0x2898  "(*.."
.long     0x00000000    # at addr 0x289c  "...."
.long     0x00000008    # at addr 0x28a0  "...."
.long     0x00000000    # at addr 0x28a4  "...."
.long     0x0001ccec    # at addr 0x28a8  "...."
.long     0x00000000    # at addr 0x28ac  "...."
.long     0x00022a30    # at addr 0x28b0  "0*.."
.long     0x00000000    # at addr 0x28b4  "...."
.long     0x00000008    # at addr 0x28b8  "...."
.long     0x00000000    # at addr 0x28bc  "...."
.long     0x0001c28f    # at addr 0x28c0  "...."
.long     0x00000000    # at addr 0x28c4  "...."
.long     0x00022a38    # at addr 0x28c8  "8*.."
.long     0x00000000    # at addr 0x28cc  "...."
.long     0x00000008    # at addr 0x28d0  "...."
.long     0x00000000    # at addr 0x28d4  "...."
.long     0x0001c274    # at addr 0x28d8  "t..."
.long     0x00000000    # at addr 0x28dc  "...."
.long     0x00022a40    # at addr 0x28e0  "@*.."
.long     0x00000000    # at addr 0x28e4  "...."
.long     0x00000008    # at addr 0x28e8  "...."
.long     0x00000000    # at addr 0x28ec  "...."
.long     0x00019954    # at addr 0x28f0  "T..."
.long     0x00000000    # at addr 0x28f4  "...."
.long     0x00022a48    # at addr 0x28f8  "H*.."
.long     0x00000000    # at addr 0x28fc  "...."
.long     0x00000008    # at addr 0x2900  "...."
.long     0x00000000    # at addr 0x2904  "...."
.long     0x0001c297    # at addr 0x2908  "...."
.long     0x00000000    # at addr 0x290c  "...."
.long     0x00023008    # at addr 0x2910  ".0.."
.long     0x00000000    # at addr 0x2914  "...."
.long     0x00000008    # at addr 0x2918  "...."
.long     0x00000000    # at addr 0x291c  "...."
.long     0x00023008    # at addr 0x2920  ".0.."
.long     0x00000000    # at addr 0x2924  "...."
.long     0x00023040    # at addr 0x2928  "@0.."
.long     0x00000000    # at addr 0x292c  "...."
.long     0x00000008    # at addr 0x2930  "...."
.long     0x00000000    # at addr 0x2934  "...."
.long     0x00019cdc    # at addr 0x2938  "...."
.long     0x00000000    # at addr 0x293c  "...."
.long     0x00023048    # at addr 0x2940  "H0.."
.long     0x00000000    # at addr 0x2944  "...."
.long     0x00000008    # at addr 0x2948  "...."
.long     0x00000000    # at addr 0x294c  "...."
.long     0x00019ce6    # at addr 0x2950  "...."
.long     0x00000000    # at addr 0x2954  "...."
.long     0x00023068    # at addr 0x2958  "h0.."
.long     0x00000000    # at addr 0x295c  "...."
.long     0x00000008    # at addr 0x2960  "...."
.long     0x00000000    # at addr 0x2964  "...."
.long     0x00019cf2    # at addr 0x2968  "...."
.long     0x00000000    # at addr 0x296c  "...."
.long     0x00023078    # at addr 0x2970  "x0.."
.long     0x00000000    # at addr 0x2974  "...."
.long     0x00000008    # at addr 0x2978  "...."
.long     0x00000000    # at addr 0x297c  "...."
.long     0x00019912    # at addr 0x2980  "...."
.long     0x00000000    # at addr 0x2984  "...."
.long     0x00023098    # at addr 0x2988  ".0.."
.long     0x00000000    # at addr 0x298c  "...."
.long     0x00000008    # at addr 0x2990  "...."
.long     0x00000000    # at addr 0x2994  "...."
.long     0x0001be43    # at addr 0x2998  "C..."
.long     0x00000000    # at addr 0x299c  "...."
.long     0x000230c8    # at addr 0x29a0  ".0.."
.long     0x00000000    # at addr 0x29a4  "...."
.long     0x00000008    # at addr 0x29a8  "...."
.long     0x00000000    # at addr 0x29ac  "...."
.long     0x00019cf5    # at addr 0x29b0  "...."
.long     0x00000000    # at addr 0x29b4  "...."
.long     0x000230d8    # at addr 0x29b8  ".0.."
.long     0x00000000    # at addr 0x29bc  "...."
.long     0x00000008    # at addr 0x29c0  "...."
.long     0x00000000    # at addr 0x29c4  "...."
.long     0x00019cfb    # at addr 0x29c8  "...."
.long     0x00000000    # at addr 0x29cc  "...."
.long     0x000230e8    # at addr 0x29d0  ".0.."
.long     0x00000000    # at addr 0x29d4  "...."
.long     0x00000008    # at addr 0x29d8  "...."
.long     0x00000000    # at addr 0x29dc  "...."
.long     0x00019d0a    # at addr 0x29e0  "...."
.long     0x00000000    # at addr 0x29e4  "...."
.long     0x000230f8    # at addr 0x29e8  ".0.."
.long     0x00000000    # at addr 0x29ec  "...."
.long     0x00000008    # at addr 0x29f0  "...."
.long     0x00000000    # at addr 0x29f4  "...."
.long     0x00019d01    # at addr 0x29f8  "...."
.long     0x00000000    # at addr 0x29fc  "...."
.long     0x00023108    # at addr 0x2a00  ".1.."
.long     0x00000000    # at addr 0x2a04  "...."
.long     0x00000008    # at addr 0x2a08  "...."
.long     0x00000000    # at addr 0x2a0c  "...."
.long     0x00019d07    # at addr 0x2a10  "...."
.long     0x00000000    # at addr 0x2a14  "...."
.long     0x00023118    # at addr 0x2a18  ".1.."
.long     0x00000000    # at addr 0x2a1c  "...."
.long     0x00000008    # at addr 0x2a20  "...."
.long     0x00000000    # at addr 0x2a24  "...."
.long     0x00019d07    # at addr 0x2a28  "...."
.long     0x00000000    # at addr 0x2a2c  "...."
.long     0x00023148    # at addr 0x2a30  "H1.."
.long     0x00000000    # at addr 0x2a34  "...."
.long     0x00000008    # at addr 0x2a38  "...."
.long     0x00000000    # at addr 0x2a3c  "...."
.long     0x00019d0d    # at addr 0x2a40  "...."
.long     0x00000000    # at addr 0x2a44  "...."
.long     0x00023158    # at addr 0x2a48  "X1.."
.long     0x00000000    # at addr 0x2a4c  "...."
.long     0x00000008    # at addr 0x2a50  "...."
.long     0x00000000    # at addr 0x2a54  "...."
.long     0x00019d01    # at addr 0x2a58  "...."
.long     0x00000000    # at addr 0x2a5c  "...."
.long     0x00023168    # at addr 0x2a60  "h1.."
.long     0x00000000    # at addr 0x2a64  "...."
.long     0x00000008    # at addr 0x2a68  "...."
.long     0x00000000    # at addr 0x2a6c  "...."
.long     0x00019d13    # at addr 0x2a70  "...."
.long     0x00000000    # at addr 0x2a74  "...."
.long     0x00023178    # at addr 0x2a78  "x1.."
.long     0x00000000    # at addr 0x2a7c  "...."
.long     0x00000008    # at addr 0x2a80  "...."
.long     0x00000000    # at addr 0x2a84  "...."
.long     0x00019d19    # at addr 0x2a88  "...."
.long     0x00000000    # at addr 0x2a8c  "...."
.long     0x00023188    # at addr 0x2a90  ".1.."
.long     0x00000000    # at addr 0x2a94  "...."
.long     0x00000008    # at addr 0x2a98  "...."
.long     0x00000000    # at addr 0x2a9c  "...."
.long     0x00019d1f    # at addr 0x2aa0  "...."
.long     0x00000000    # at addr 0x2aa4  "...."
.long     0x00023198    # at addr 0x2aa8  ".1.."
.long     0x00000000    # at addr 0x2aac  "...."
.long     0x00000008    # at addr 0x2ab0  "...."
.long     0x00000000    # at addr 0x2ab4  "...."
.long     0x00019d25    # at addr 0x2ab8  "%..."
.long     0x00000000    # at addr 0x2abc  "...."
.long     0x000231a8    # at addr 0x2ac0  ".1.."
.long     0x00000000    # at addr 0x2ac4  "...."
.long     0x00000008    # at addr 0x2ac8  "...."
.long     0x00000000    # at addr 0x2acc  "...."
.long     0x00019d2b    # at addr 0x2ad0  "+..."
.long     0x00000000    # at addr 0x2ad4  "...."
.long     0x000231b8    # at addr 0x2ad8  ".1.."
.long     0x00000000    # at addr 0x2adc  "...."
.long     0x00000008    # at addr 0x2ae0  "...."
.long     0x00000000    # at addr 0x2ae4  "...."
.long     0x00019d31    # at addr 0x2ae8  "1..."
.long     0x00000000    # at addr 0x2aec  "...."
.long     0x000231d8    # at addr 0x2af0  ".1.."
.long     0x00000000    # at addr 0x2af4  "...."
.long     0x00000008    # at addr 0x2af8  "...."
.long     0x00000000    # at addr 0x2afc  "...."
.long     0x00019d37    # at addr 0x2b00  "7..."
.long     0x00000000    # at addr 0x2b04  "...."
.long     0x000231e8    # at addr 0x2b08  ".1.."
.long     0x00000000    # at addr 0x2b0c  "...."
.long     0x00000008    # at addr 0x2b10  "...."
.long     0x00000000    # at addr 0x2b14  "...."
.long     0x0001be40    # at addr 0x2b18  "@..."
.long     0x00000000    # at addr 0x2b1c  "...."
.long     0x000231f0    # at addr 0x2b20  ".1.."
.long     0x00000000    # at addr 0x2b24  "...."
.long     0x00000008    # at addr 0x2b28  "...."
.long     0x00000000    # at addr 0x2b2c  "...."
.long     0x0000d4d0    # at addr 0x2b30  "...."
.long     0x00000000    # at addr 0x2b34  "...."
.long     0x00023240    # at addr 0x2b38  "@2.."
.long     0x00000000    # at addr 0x2b3c  "...."
.long     0x00000008    # at addr 0x2b40  "...."
.long     0x00000000    # at addr 0x2b44  "...."
.long     0x00023250    # at addr 0x2b48  "P2.."
.long     0x00000000    # at addr 0x2b4c  "...."
.long     0x00023258    # at addr 0x2b50  "X2.."
.long     0x00000000    # at addr 0x2b54  "...."
.long     0x00000008    # at addr 0x2b58  "...."
.long     0x00000000    # at addr 0x2b5c  "...."
.long     0x00024420    # at addr 0x2b60  " D.."
.long     0x00000000    # at addr 0x2b64  "...."
.long     0x00023260    # at addr 0x2b68  "`2.."
.long     0x00000000    # at addr 0x2b6c  "...."
.long     0x00000008    # at addr 0x2b70  "...."
.long     0x00000000    # at addr 0x2b74  "...."
.long     0x00016960    # at addr 0x2b78  "`i.."
.long     0x00000000    # at addr 0x2b7c  "...."
.long     0x00022fc0    # at addr 0x2b80  "./.."
.long     0x00000000    # at addr 0x2b84  "...."
.long     0x00000006    # at addr 0x2b88  "...."
.long     0x00000072    # at addr 0x2b8c  "r..."
.long     0x00000000    # at addr 0x2b90  "...."
.long     0x00000000    # at addr 0x2b94  "...."
.long     0x00022fc8    # at addr 0x2b98  "./.."
.long     0x00000000    # at addr 0x2b9c  "...."
.long     0x00000006    # at addr 0x2ba0  "...."
.long     0x00000009    # at addr 0x2ba4  "...."
.long     0x00000000    # at addr 0x2ba8  "...."
.long     0x00000000    # at addr 0x2bac  "...."
.long     0x00022fd0    # at addr 0x2bb0  "./.."
.long     0x00000000    # at addr 0x2bb4  "...."
.long     0x00000006    # at addr 0x2bb8  "...."
.long     0x00000035    # at addr 0x2bbc  "5..."
.long     0x00000000    # at addr 0x2bc0  "...."
.long     0x00000000    # at addr 0x2bc4  "...."
.long     0x00022fd8    # at addr 0x2bc8  "./.."
.long     0x00000000    # at addr 0x2bcc  "...."
.long     0x00000006    # at addr 0x2bd0  "...."
.long     0x00000041    # at addr 0x2bd4  "A..."
.long     0x00000000    # at addr 0x2bd8  "...."
.long     0x00000000    # at addr 0x2bdc  "...."
.long     0x00022fe0    # at addr 0x2be0  "./.."
.long     0x00000000    # at addr 0x2be4  "...."
.long     0x00000006    # at addr 0x2be8  "...."
.long     0x00000088    # at addr 0x2bec  "...."
.long     0x00000000    # at addr 0x2bf0  "...."
.long     0x00000000    # at addr 0x2bf4  "...."
.long     0x00022fe8    # at addr 0x2bf8  "./.."
.long     0x00000000    # at addr 0x2bfc  "...."
.long     0x00000006    # at addr 0x2c00  "...."
.long     0x00000067    # at addr 0x2c04  "g..."
.long     0x00000000    # at addr 0x2c08  "...."
.long     0x00000000    # at addr 0x2c0c  "...."
.long     0x00022ff0    # at addr 0x2c10  "./.."
.long     0x00000000    # at addr 0x2c14  "...."
.long     0x00000006    # at addr 0x2c18  "...."
.long     0x00000086    # at addr 0x2c1c  "...."
.long     0x00000000    # at addr 0x2c20  "...."
.long     0x00000000    # at addr 0x2c24  "...."
.long     0x00023280    # at addr 0x2c28  ".2.."
.long     0x00000000    # at addr 0x2c2c  "...."
.long     0x00000005    # at addr 0x2c30  "...."
.long     0x0000006f    # at addr 0x2c34  "o..."
.long     0x00000000    # at addr 0x2c38  "...."
.long     0x00000000    # at addr 0x2c3c  "...."
.long     0x00023288    # at addr 0x2c40  ".2.."
.long     0x00000000    # at addr 0x2c44  "...."
.long     0x00000005    # at addr 0x2c48  "...."
.long     0x00000089    # at addr 0x2c4c  "...."
.long     0x00000000    # at addr 0x2c50  "...."
.long     0x00000000    # at addr 0x2c54  "...."
.long     0x00023290    # at addr 0x2c58  ".2.."
.long     0x00000000    # at addr 0x2c5c  "...."
.long     0x00000005    # at addr 0x2c60  "...."
.long     0x00000071    # at addr 0x2c64  "q..."
.long     0x00000000    # at addr 0x2c68  "...."
.long     0x00000000    # at addr 0x2c6c  "...."
.long     0x00023298    # at addr 0x2c70  ".2.."
.long     0x00000000    # at addr 0x2c74  "...."
.long     0x00000005    # at addr 0x2c78  "...."
.long     0x00000083    # at addr 0x2c7c  "...."
.long     0x00000000    # at addr 0x2c80  "...."
.long     0x00000000    # at addr 0x2c84  "...."
.long     0x000232a0    # at addr 0x2c88  ".2.."
.long     0x00000000    # at addr 0x2c8c  "...."
.long     0x00000005    # at addr 0x2c90  "...."
.long     0x00000079    # at addr 0x2c94  "y..."
.long     0x00000000    # at addr 0x2c98  "...."
.long     0x00000000    # at addr 0x2c9c  "...."
.long     0x000232c0    # at addr 0x2ca0  ".2.."
.long     0x00000000    # at addr 0x2ca4  "...."
.long     0x00000005    # at addr 0x2ca8  "...."
.long     0x0000007f    # at addr 0x2cac  "..."
.long     0x00000000    # at addr 0x2cb0  "...."
.long     0x00000000    # at addr 0x2cb4  "...."

.p2align 3

# Data section .rela.plt (size 2544)  0x00002cb8 - 0x000036a7

.section .rela.plt
Var0x2cb8:       # next=0x18020, start=0x2cb8, end=0x36a7
.long     0x00022c70    # at addr 0x2cb8  "p,.."
.long     0x00000000    # at addr 0x2cbc  "...."
.long     0x00000007    # at addr 0x2cc0  "...."
.long     0x00000001    # at addr 0x2cc4  "...."
.long     0x00000000    # at addr 0x2cc8  "...."
.long     0x00000000    # at addr 0x2ccc  "...."
.long     0x00022c78    # at addr 0x2cd0  "x,.."
.long     0x00000000    # at addr 0x2cd4  "...."
.long     0x00000007    # at addr 0x2cd8  "...."
.long     0x00000002    # at addr 0x2cdc  "...."
.long     0x00000000    # at addr 0x2ce0  "...."
.long     0x00000000    # at addr 0x2ce4  "...."
.long     0x00022c80    # at addr 0x2ce8  ".,.."
.long     0x00000000    # at addr 0x2cec  "...."
.long     0x00000007    # at addr 0x2cf0  "...."
.long     0x00000003    # at addr 0x2cf4  "...."
.long     0x00000000    # at addr 0x2cf8  "...."
.long     0x00000000    # at addr 0x2cfc  "...."
.long     0x00022c88    # at addr 0x2d00  ".,.."
.long     0x00000000    # at addr 0x2d04  "...."
.long     0x00000007    # at addr 0x2d08  "...."
.long     0x00000004    # at addr 0x2d0c  "...."
.long     0x00000000    # at addr 0x2d10  "...."
.long     0x00000000    # at addr 0x2d14  "...."
.long     0x00022c90    # at addr 0x2d18  ".,.."
.long     0x00000000    # at addr 0x2d1c  "...."
.long     0x00000007    # at addr 0x2d20  "...."
.long     0x00000005    # at addr 0x2d24  "...."
.long     0x00000000    # at addr 0x2d28  "...."
.long     0x00000000    # at addr 0x2d2c  "...."
.long     0x00022c98    # at addr 0x2d30  ".,.."
.long     0x00000000    # at addr 0x2d34  "...."
.long     0x00000007    # at addr 0x2d38  "...."
.long     0x00000006    # at addr 0x2d3c  "...."
.long     0x00000000    # at addr 0x2d40  "...."
.long     0x00000000    # at addr 0x2d44  "...."
.long     0x00022ca0    # at addr 0x2d48  ".,.."
.long     0x00000000    # at addr 0x2d4c  "...."
.long     0x00000007    # at addr 0x2d50  "...."
.long     0x00000007    # at addr 0x2d54  "...."
.long     0x00000000    # at addr 0x2d58  "...."
.long     0x00000000    # at addr 0x2d5c  "...."
.long     0x00022ca8    # at addr 0x2d60  ".,.."
.long     0x00000000    # at addr 0x2d64  "...."
.long     0x00000007    # at addr 0x2d68  "...."
.long     0x00000008    # at addr 0x2d6c  "...."
.long     0x00000000    # at addr 0x2d70  "...."
.long     0x00000000    # at addr 0x2d74  "...."
.long     0x00022cb0    # at addr 0x2d78  ".,.."
.long     0x00000000    # at addr 0x2d7c  "...."
.long     0x00000007    # at addr 0x2d80  "...."
.long     0x0000000a    # at addr 0x2d84  "...."
.long     0x00000000    # at addr 0x2d88  "...."
.long     0x00000000    # at addr 0x2d8c  "...."
.long     0x00022cb8    # at addr 0x2d90  ".,.."
.long     0x00000000    # at addr 0x2d94  "...."
.long     0x00000007    # at addr 0x2d98  "...."
.long     0x0000000b    # at addr 0x2d9c  "...."
.long     0x00000000    # at addr 0x2da0  "...."
.long     0x00000000    # at addr 0x2da4  "...."
.long     0x00022cc0    # at addr 0x2da8  ".,.."
.long     0x00000000    # at addr 0x2dac  "...."
.long     0x00000007    # at addr 0x2db0  "...."
.long     0x0000000c    # at addr 0x2db4  "...."
.long     0x00000000    # at addr 0x2db8  "...."
.long     0x00000000    # at addr 0x2dbc  "...."
.long     0x00022cc8    # at addr 0x2dc0  ".,.."
.long     0x00000000    # at addr 0x2dc4  "...."
.long     0x00000007    # at addr 0x2dc8  "...."
.long     0x0000000d    # at addr 0x2dcc  "...."
.long     0x00000000    # at addr 0x2dd0  "...."
.long     0x00000000    # at addr 0x2dd4  "...."
.long     0x00022cd0    # at addr 0x2dd8  ".,.."
.long     0x00000000    # at addr 0x2ddc  "...."
.long     0x00000007    # at addr 0x2de0  "...."
.long     0x0000000e    # at addr 0x2de4  "...."
.long     0x00000000    # at addr 0x2de8  "...."
.long     0x00000000    # at addr 0x2dec  "...."
.long     0x00022cd8    # at addr 0x2df0  ".,.."
.long     0x00000000    # at addr 0x2df4  "...."
.long     0x00000007    # at addr 0x2df8  "...."
.long     0x0000000f    # at addr 0x2dfc  "...."
.long     0x00000000    # at addr 0x2e00  "...."
.long     0x00000000    # at addr 0x2e04  "...."
.long     0x00022ce0    # at addr 0x2e08  ".,.."
.long     0x00000000    # at addr 0x2e0c  "...."
.long     0x00000007    # at addr 0x2e10  "...."
.long     0x00000010    # at addr 0x2e14  "...."
.long     0x00000000    # at addr 0x2e18  "...."
.long     0x00000000    # at addr 0x2e1c  "...."
.long     0x00022ce8    # at addr 0x2e20  ".,.."
.long     0x00000000    # at addr 0x2e24  "...."
.long     0x00000007    # at addr 0x2e28  "...."
.long     0x00000011    # at addr 0x2e2c  "...."
.long     0x00000000    # at addr 0x2e30  "...."
.long     0x00000000    # at addr 0x2e34  "...."
.long     0x00022cf0    # at addr 0x2e38  ".,.."
.long     0x00000000    # at addr 0x2e3c  "...."
.long     0x00000007    # at addr 0x2e40  "...."
.long     0x00000012    # at addr 0x2e44  "...."
.long     0x00000000    # at addr 0x2e48  "...."
.long     0x00000000    # at addr 0x2e4c  "...."
.long     0x00022cf8    # at addr 0x2e50  ".,.."
.long     0x00000000    # at addr 0x2e54  "...."
.long     0x00000007    # at addr 0x2e58  "...."
.long     0x00000013    # at addr 0x2e5c  "...."
.long     0x00000000    # at addr 0x2e60  "...."
.long     0x00000000    # at addr 0x2e64  "...."
.long     0x00022d00    # at addr 0x2e68  ".-.."
.long     0x00000000    # at addr 0x2e6c  "...."
.long     0x00000007    # at addr 0x2e70  "...."
.long     0x00000014    # at addr 0x2e74  "...."
.long     0x00000000    # at addr 0x2e78  "...."
.long     0x00000000    # at addr 0x2e7c  "...."
.long     0x00022d08    # at addr 0x2e80  ".-.."
.long     0x00000000    # at addr 0x2e84  "...."
.long     0x00000007    # at addr 0x2e88  "...."
.long     0x00000015    # at addr 0x2e8c  "...."
.long     0x00000000    # at addr 0x2e90  "...."
.long     0x00000000    # at addr 0x2e94  "...."
.long     0x00022d10    # at addr 0x2e98  ".-.."
.long     0x00000000    # at addr 0x2e9c  "...."
.long     0x00000007    # at addr 0x2ea0  "...."
.long     0x00000016    # at addr 0x2ea4  "...."
.long     0x00000000    # at addr 0x2ea8  "...."
.long     0x00000000    # at addr 0x2eac  "...."
.long     0x00022d18    # at addr 0x2eb0  ".-.."
.long     0x00000000    # at addr 0x2eb4  "...."
.long     0x00000007    # at addr 0x2eb8  "...."
.long     0x00000017    # at addr 0x2ebc  "...."
.long     0x00000000    # at addr 0x2ec0  "...."
.long     0x00000000    # at addr 0x2ec4  "...."
.long     0x00022d20    # at addr 0x2ec8  " -.."
.long     0x00000000    # at addr 0x2ecc  "...."
.long     0x00000007    # at addr 0x2ed0  "...."
.long     0x00000018    # at addr 0x2ed4  "...."
.long     0x00000000    # at addr 0x2ed8  "...."
.long     0x00000000    # at addr 0x2edc  "...."
.long     0x00022d28    # at addr 0x2ee0  "(-.."
.long     0x00000000    # at addr 0x2ee4  "...."
.long     0x00000007    # at addr 0x2ee8  "...."
.long     0x00000019    # at addr 0x2eec  "...."
.long     0x00000000    # at addr 0x2ef0  "...."
.long     0x00000000    # at addr 0x2ef4  "...."
.long     0x00022d30    # at addr 0x2ef8  "0-.."
.long     0x00000000    # at addr 0x2efc  "...."
.long     0x00000007    # at addr 0x2f00  "...."
.long     0x0000001a    # at addr 0x2f04  "...."
.long     0x00000000    # at addr 0x2f08  "...."
.long     0x00000000    # at addr 0x2f0c  "...."
.long     0x00022d38    # at addr 0x2f10  "8-.."
.long     0x00000000    # at addr 0x2f14  "...."
.long     0x00000007    # at addr 0x2f18  "...."
.long     0x0000001b    # at addr 0x2f1c  "...."
.long     0x00000000    # at addr 0x2f20  "...."
.long     0x00000000    # at addr 0x2f24  "...."
.long     0x00022d40    # at addr 0x2f28  "@-.."
.long     0x00000000    # at addr 0x2f2c  "...."
.long     0x00000007    # at addr 0x2f30  "...."
.long     0x0000001c    # at addr 0x2f34  "...."
.long     0x00000000    # at addr 0x2f38  "...."
.long     0x00000000    # at addr 0x2f3c  "...."
.long     0x00022d48    # at addr 0x2f40  "H-.."
.long     0x00000000    # at addr 0x2f44  "...."
.long     0x00000007    # at addr 0x2f48  "...."
.long     0x0000001d    # at addr 0x2f4c  "...."
.long     0x00000000    # at addr 0x2f50  "...."
.long     0x00000000    # at addr 0x2f54  "...."
.long     0x00022d50    # at addr 0x2f58  "P-.."
.long     0x00000000    # at addr 0x2f5c  "...."
.long     0x00000007    # at addr 0x2f60  "...."
.long     0x0000001e    # at addr 0x2f64  "...."
.long     0x00000000    # at addr 0x2f68  "...."
.long     0x00000000    # at addr 0x2f6c  "...."
.long     0x00022d58    # at addr 0x2f70  "X-.."
.long     0x00000000    # at addr 0x2f74  "...."
.long     0x00000007    # at addr 0x2f78  "...."
.long     0x0000001f    # at addr 0x2f7c  "...."
.long     0x00000000    # at addr 0x2f80  "...."
.long     0x00000000    # at addr 0x2f84  "...."
.long     0x00022d60    # at addr 0x2f88  "`-.."
.long     0x00000000    # at addr 0x2f8c  "...."
.long     0x00000007    # at addr 0x2f90  "...."
.long     0x00000020    # at addr 0x2f94  " ..."
.long     0x00000000    # at addr 0x2f98  "...."
.long     0x00000000    # at addr 0x2f9c  "...."
.long     0x00022d68    # at addr 0x2fa0  "h-.."
.long     0x00000000    # at addr 0x2fa4  "...."
.long     0x00000007    # at addr 0x2fa8  "...."
.long     0x00000021    # at addr 0x2fac  "!..."
.long     0x00000000    # at addr 0x2fb0  "...."
.long     0x00000000    # at addr 0x2fb4  "...."
.long     0x00022d70    # at addr 0x2fb8  "p-.."
.long     0x00000000    # at addr 0x2fbc  "...."
.long     0x00000007    # at addr 0x2fc0  "...."
.long     0x00000022    # at addr 0x2fc4  ""..."
.long     0x00000000    # at addr 0x2fc8  "...."
.long     0x00000000    # at addr 0x2fcc  "...."
.long     0x00022d78    # at addr 0x2fd0  "x-.."
.long     0x00000000    # at addr 0x2fd4  "...."
.long     0x00000007    # at addr 0x2fd8  "...."
.long     0x00000023    # at addr 0x2fdc  "#..."
.long     0x00000000    # at addr 0x2fe0  "...."
.long     0x00000000    # at addr 0x2fe4  "...."
.long     0x00022d80    # at addr 0x2fe8  ".-.."
.long     0x00000000    # at addr 0x2fec  "...."
.long     0x00000007    # at addr 0x2ff0  "...."
.long     0x00000024    # at addr 0x2ff4  "$..."
.long     0x00000000    # at addr 0x2ff8  "...."
.long     0x00000000    # at addr 0x2ffc  "...."
.long     0x00022d88    # at addr 0x3000  ".-.."
.long     0x00000000    # at addr 0x3004  "...."
.long     0x00000007    # at addr 0x3008  "...."
.long     0x00000025    # at addr 0x300c  "%..."
.long     0x00000000    # at addr 0x3010  "...."
.long     0x00000000    # at addr 0x3014  "...."
.long     0x00022d90    # at addr 0x3018  ".-.."
.long     0x00000000    # at addr 0x301c  "...."
.long     0x00000007    # at addr 0x3020  "...."
.long     0x00000026    # at addr 0x3024  "&..."
.long     0x00000000    # at addr 0x3028  "...."
.long     0x00000000    # at addr 0x302c  "...."
.long     0x00022d98    # at addr 0x3030  ".-.."
.long     0x00000000    # at addr 0x3034  "...."
.long     0x00000007    # at addr 0x3038  "...."
.long     0x00000027    # at addr 0x303c  "'..."
.long     0x00000000    # at addr 0x3040  "...."
.long     0x00000000    # at addr 0x3044  "...."
.long     0x00022da0    # at addr 0x3048  ".-.."
.long     0x00000000    # at addr 0x304c  "...."
.long     0x00000007    # at addr 0x3050  "...."
.long     0x00000028    # at addr 0x3054  "(..."
.long     0x00000000    # at addr 0x3058  "...."
.long     0x00000000    # at addr 0x305c  "...."
.long     0x00022da8    # at addr 0x3060  ".-.."
.long     0x00000000    # at addr 0x3064  "...."
.long     0x00000007    # at addr 0x3068  "...."
.long     0x00000029    # at addr 0x306c  ")..."
.long     0x00000000    # at addr 0x3070  "...."
.long     0x00000000    # at addr 0x3074  "...."
.long     0x00022db0    # at addr 0x3078  ".-.."
.long     0x00000000    # at addr 0x307c  "...."
.long     0x00000007    # at addr 0x3080  "...."
.long     0x0000002a    # at addr 0x3084  "*..."
.long     0x00000000    # at addr 0x3088  "...."
.long     0x00000000    # at addr 0x308c  "...."
.long     0x00022db8    # at addr 0x3090  ".-.."
.long     0x00000000    # at addr 0x3094  "...."
.long     0x00000007    # at addr 0x3098  "...."
.long     0x0000002b    # at addr 0x309c  "+..."
.long     0x00000000    # at addr 0x30a0  "...."
.long     0x00000000    # at addr 0x30a4  "...."
.long     0x00022dc0    # at addr 0x30a8  ".-.."
.long     0x00000000    # at addr 0x30ac  "...."
.long     0x00000007    # at addr 0x30b0  "...."
.long     0x0000002c    # at addr 0x30b4  ",..."
.long     0x00000000    # at addr 0x30b8  "...."
.long     0x00000000    # at addr 0x30bc  "...."
.long     0x00022dc8    # at addr 0x30c0  ".-.."
.long     0x00000000    # at addr 0x30c4  "...."
.long     0x00000007    # at addr 0x30c8  "...."
.long     0x0000002d    # at addr 0x30cc  "-..."
.long     0x00000000    # at addr 0x30d0  "...."
.long     0x00000000    # at addr 0x30d4  "...."
.long     0x00022dd0    # at addr 0x30d8  ".-.."
.long     0x00000000    # at addr 0x30dc  "...."
.long     0x00000007    # at addr 0x30e0  "...."
.long     0x0000002e    # at addr 0x30e4  "...."
.long     0x00000000    # at addr 0x30e8  "...."
.long     0x00000000    # at addr 0x30ec  "...."
.long     0x00022dd8    # at addr 0x30f0  ".-.."
.long     0x00000000    # at addr 0x30f4  "...."
.long     0x00000007    # at addr 0x30f8  "...."
.long     0x0000002f    # at addr 0x30fc  "/..."
.long     0x00000000    # at addr 0x3100  "...."
.long     0x00000000    # at addr 0x3104  "...."
.long     0x00022de0    # at addr 0x3108  ".-.."
.long     0x00000000    # at addr 0x310c  "...."
.long     0x00000007    # at addr 0x3110  "...."
.long     0x00000030    # at addr 0x3114  "0..."
.long     0x00000000    # at addr 0x3118  "...."
.long     0x00000000    # at addr 0x311c  "...."
.long     0x00022de8    # at addr 0x3120  ".-.."
.long     0x00000000    # at addr 0x3124  "...."
.long     0x00000007    # at addr 0x3128  "...."
.long     0x00000031    # at addr 0x312c  "1..."
.long     0x00000000    # at addr 0x3130  "...."
.long     0x00000000    # at addr 0x3134  "...."
.long     0x00022df0    # at addr 0x3138  ".-.."
.long     0x00000000    # at addr 0x313c  "...."
.long     0x00000007    # at addr 0x3140  "...."
.long     0x00000032    # at addr 0x3144  "2..."
.long     0x00000000    # at addr 0x3148  "...."
.long     0x00000000    # at addr 0x314c  "...."
.long     0x00022df8    # at addr 0x3150  ".-.."
.long     0x00000000    # at addr 0x3154  "...."
.long     0x00000007    # at addr 0x3158  "...."
.long     0x00000033    # at addr 0x315c  "3..."
.long     0x00000000    # at addr 0x3160  "...."
.long     0x00000000    # at addr 0x3164  "...."
.long     0x00022e00    # at addr 0x3168  "...."
.long     0x00000000    # at addr 0x316c  "...."
.long     0x00000007    # at addr 0x3170  "...."
.long     0x00000034    # at addr 0x3174  "4..."
.long     0x00000000    # at addr 0x3178  "...."
.long     0x00000000    # at addr 0x317c  "...."
.long     0x00022e08    # at addr 0x3180  "...."
.long     0x00000000    # at addr 0x3184  "...."
.long     0x00000007    # at addr 0x3188  "...."
.long     0x00000036    # at addr 0x318c  "6..."
.long     0x00000000    # at addr 0x3190  "...."
.long     0x00000000    # at addr 0x3194  "...."
.long     0x00022e10    # at addr 0x3198  "...."
.long     0x00000000    # at addr 0x319c  "...."
.long     0x00000007    # at addr 0x31a0  "...."
.long     0x00000037    # at addr 0x31a4  "7..."
.long     0x00000000    # at addr 0x31a8  "...."
.long     0x00000000    # at addr 0x31ac  "...."
.long     0x00022e18    # at addr 0x31b0  "...."
.long     0x00000000    # at addr 0x31b4  "...."
.long     0x00000007    # at addr 0x31b8  "...."
.long     0x00000038    # at addr 0x31bc  "8..."
.long     0x00000000    # at addr 0x31c0  "...."
.long     0x00000000    # at addr 0x31c4  "...."
.long     0x00022e20    # at addr 0x31c8  " ..."
.long     0x00000000    # at addr 0x31cc  "...."
.long     0x00000007    # at addr 0x31d0  "...."
.long     0x00000039    # at addr 0x31d4  "9..."
.long     0x00000000    # at addr 0x31d8  "...."
.long     0x00000000    # at addr 0x31dc  "...."
.long     0x00022e28    # at addr 0x31e0  "(..."
.long     0x00000000    # at addr 0x31e4  "...."
.long     0x00000007    # at addr 0x31e8  "...."
.long     0x0000003a    # at addr 0x31ec  ":..."
.long     0x00000000    # at addr 0x31f0  "...."
.long     0x00000000    # at addr 0x31f4  "...."
.long     0x00022e30    # at addr 0x31f8  "0..."
.long     0x00000000    # at addr 0x31fc  "...."
.long     0x00000007    # at addr 0x3200  "...."
.long     0x0000003b    # at addr 0x3204  ";..."
.long     0x00000000    # at addr 0x3208  "...."
.long     0x00000000    # at addr 0x320c  "...."
.long     0x00022e38    # at addr 0x3210  "8..."
.long     0x00000000    # at addr 0x3214  "...."
.long     0x00000007    # at addr 0x3218  "...."
.long     0x0000003c    # at addr 0x321c  "<..."
.long     0x00000000    # at addr 0x3220  "...."
.long     0x00000000    # at addr 0x3224  "...."
.long     0x00022e40    # at addr 0x3228  "@..."
.long     0x00000000    # at addr 0x322c  "...."
.long     0x00000007    # at addr 0x3230  "...."
.long     0x0000003d    # at addr 0x3234  "=..."
.long     0x00000000    # at addr 0x3238  "...."
.long     0x00000000    # at addr 0x323c  "...."
.long     0x00022e48    # at addr 0x3240  "H..."
.long     0x00000000    # at addr 0x3244  "...."
.long     0x00000007    # at addr 0x3248  "...."
.long     0x0000003e    # at addr 0x324c  ">..."
.long     0x00000000    # at addr 0x3250  "...."
.long     0x00000000    # at addr 0x3254  "...."
.long     0x00022e50    # at addr 0x3258  "P..."
.long     0x00000000    # at addr 0x325c  "...."
.long     0x00000007    # at addr 0x3260  "...."
.long     0x0000003f    # at addr 0x3264  "?..."
.long     0x00000000    # at addr 0x3268  "...."
.long     0x00000000    # at addr 0x326c  "...."
.long     0x00022e58    # at addr 0x3270  "X..."
.long     0x00000000    # at addr 0x3274  "...."
.long     0x00000007    # at addr 0x3278  "...."
.long     0x00000040    # at addr 0x327c  "@..."
.long     0x00000000    # at addr 0x3280  "...."
.long     0x00000000    # at addr 0x3284  "...."
.long     0x00022e60    # at addr 0x3288  "`..."
.long     0x00000000    # at addr 0x328c  "...."
.long     0x00000007    # at addr 0x3290  "...."
.long     0x00000042    # at addr 0x3294  "B..."
.long     0x00000000    # at addr 0x3298  "...."
.long     0x00000000    # at addr 0x329c  "...."
.long     0x00022e68    # at addr 0x32a0  "h..."
.long     0x00000000    # at addr 0x32a4  "...."
.long     0x00000007    # at addr 0x32a8  "...."
.long     0x00000043    # at addr 0x32ac  "C..."
.long     0x00000000    # at addr 0x32b0  "...."
.long     0x00000000    # at addr 0x32b4  "...."
.long     0x00022e70    # at addr 0x32b8  "p..."
.long     0x00000000    # at addr 0x32bc  "...."
.long     0x00000007    # at addr 0x32c0  "...."
.long     0x00000044    # at addr 0x32c4  "D..."
.long     0x00000000    # at addr 0x32c8  "...."
.long     0x00000000    # at addr 0x32cc  "...."
.long     0x00022e78    # at addr 0x32d0  "x..."
.long     0x00000000    # at addr 0x32d4  "...."
.long     0x00000007    # at addr 0x32d8  "...."
.long     0x00000045    # at addr 0x32dc  "E..."
.long     0x00000000    # at addr 0x32e0  "...."
.long     0x00000000    # at addr 0x32e4  "...."
.long     0x00022e80    # at addr 0x32e8  "...."
.long     0x00000000    # at addr 0x32ec  "...."
.long     0x00000007    # at addr 0x32f0  "...."
.long     0x00000046    # at addr 0x32f4  "F..."
.long     0x00000000    # at addr 0x32f8  "...."
.long     0x00000000    # at addr 0x32fc  "...."
.long     0x00022e88    # at addr 0x3300  "...."
.long     0x00000000    # at addr 0x3304  "...."
.long     0x00000007    # at addr 0x3308  "...."
.long     0x00000047    # at addr 0x330c  "G..."
.long     0x00000000    # at addr 0x3310  "...."
.long     0x00000000    # at addr 0x3314  "...."
.long     0x00022e90    # at addr 0x3318  "...."
.long     0x00000000    # at addr 0x331c  "...."
.long     0x00000007    # at addr 0x3320  "...."
.long     0x00000048    # at addr 0x3324  "H..."
.long     0x00000000    # at addr 0x3328  "...."
.long     0x00000000    # at addr 0x332c  "...."
.long     0x00022e98    # at addr 0x3330  "...."
.long     0x00000000    # at addr 0x3334  "...."
.long     0x00000007    # at addr 0x3338  "...."
.long     0x00000049    # at addr 0x333c  "I..."
.long     0x00000000    # at addr 0x3340  "...."
.long     0x00000000    # at addr 0x3344  "...."
.long     0x00022ea0    # at addr 0x3348  "...."
.long     0x00000000    # at addr 0x334c  "...."
.long     0x00000007    # at addr 0x3350  "...."
.long     0x0000004a    # at addr 0x3354  "J..."
.long     0x00000000    # at addr 0x3358  "...."
.long     0x00000000    # at addr 0x335c  "...."
.long     0x00022ea8    # at addr 0x3360  "...."
.long     0x00000000    # at addr 0x3364  "...."
.long     0x00000007    # at addr 0x3368  "...."
.long     0x0000004b    # at addr 0x336c  "K..."
.long     0x00000000    # at addr 0x3370  "...."
.long     0x00000000    # at addr 0x3374  "...."
.long     0x00022eb0    # at addr 0x3378  "...."
.long     0x00000000    # at addr 0x337c  "...."
.long     0x00000007    # at addr 0x3380  "...."
.long     0x0000004c    # at addr 0x3384  "L..."
.long     0x00000000    # at addr 0x3388  "...."
.long     0x00000000    # at addr 0x338c  "...."
.long     0x00022eb8    # at addr 0x3390  "...."
.long     0x00000000    # at addr 0x3394  "...."
.long     0x00000007    # at addr 0x3398  "...."
.long     0x0000004d    # at addr 0x339c  "M..."
.long     0x00000000    # at addr 0x33a0  "...."
.long     0x00000000    # at addr 0x33a4  "...."
.long     0x00022ec0    # at addr 0x33a8  "...."
.long     0x00000000    # at addr 0x33ac  "...."
.long     0x00000007    # at addr 0x33b0  "...."
.long     0x0000004e    # at addr 0x33b4  "N..."
.long     0x00000000    # at addr 0x33b8  "...."
.long     0x00000000    # at addr 0x33bc  "...."
.long     0x00022ec8    # at addr 0x33c0  "...."
.long     0x00000000    # at addr 0x33c4  "...."
.long     0x00000007    # at addr 0x33c8  "...."
.long     0x0000004f    # at addr 0x33cc  "O..."
.long     0x00000000    # at addr 0x33d0  "...."
.long     0x00000000    # at addr 0x33d4  "...."
.long     0x00022ed0    # at addr 0x33d8  "...."
.long     0x00000000    # at addr 0x33dc  "...."
.long     0x00000007    # at addr 0x33e0  "...."
.long     0x00000050    # at addr 0x33e4  "P..."
.long     0x00000000    # at addr 0x33e8  "...."
.long     0x00000000    # at addr 0x33ec  "...."
.long     0x00022ed8    # at addr 0x33f0  "...."
.long     0x00000000    # at addr 0x33f4  "...."
.long     0x00000007    # at addr 0x33f8  "...."
.long     0x00000051    # at addr 0x33fc  "Q..."
.long     0x00000000    # at addr 0x3400  "...."
.long     0x00000000    # at addr 0x3404  "...."
.long     0x00022ee0    # at addr 0x3408  "...."
.long     0x00000000    # at addr 0x340c  "...."
.long     0x00000007    # at addr 0x3410  "...."
.long     0x00000052    # at addr 0x3414  "R..."
.long     0x00000000    # at addr 0x3418  "...."
.long     0x00000000    # at addr 0x341c  "...."
.long     0x00022ee8    # at addr 0x3420  "...."
.long     0x00000000    # at addr 0x3424  "...."
.long     0x00000007    # at addr 0x3428  "...."
.long     0x00000053    # at addr 0x342c  "S..."
.long     0x00000000    # at addr 0x3430  "...."
.long     0x00000000    # at addr 0x3434  "...."
.long     0x00022ef0    # at addr 0x3438  "...."
.long     0x00000000    # at addr 0x343c  "...."
.long     0x00000007    # at addr 0x3440  "...."
.long     0x00000054    # at addr 0x3444  "T..."
.long     0x00000000    # at addr 0x3448  "...."
.long     0x00000000    # at addr 0x344c  "...."
.long     0x00022ef8    # at addr 0x3450  "...."
.long     0x00000000    # at addr 0x3454  "...."
.long     0x00000007    # at addr 0x3458  "...."
.long     0x00000055    # at addr 0x345c  "U..."
.long     0x00000000    # at addr 0x3460  "...."
.long     0x00000000    # at addr 0x3464  "...."
.long     0x00022f00    # at addr 0x3468  "./.."
.long     0x00000000    # at addr 0x346c  "...."
.long     0x00000007    # at addr 0x3470  "...."
.long     0x00000056    # at addr 0x3474  "V..."
.long     0x00000000    # at addr 0x3478  "...."
.long     0x00000000    # at addr 0x347c  "...."
.long     0x00022f08    # at addr 0x3480  "./.."
.long     0x00000000    # at addr 0x3484  "...."
.long     0x00000007    # at addr 0x3488  "...."
.long     0x00000057    # at addr 0x348c  "W..."
.long     0x00000000    # at addr 0x3490  "...."
.long     0x00000000    # at addr 0x3494  "...."
.long     0x00022f10    # at addr 0x3498  "./.."
.long     0x00000000    # at addr 0x349c  "...."
.long     0x00000007    # at addr 0x34a0  "...."
.long     0x00000058    # at addr 0x34a4  "X..."
.long     0x00000000    # at addr 0x34a8  "...."
.long     0x00000000    # at addr 0x34ac  "...."
.long     0x00022f18    # at addr 0x34b0  "./.."
.long     0x00000000    # at addr 0x34b4  "...."
.long     0x00000007    # at addr 0x34b8  "...."
.long     0x00000059    # at addr 0x34bc  "Y..."
.long     0x00000000    # at addr 0x34c0  "...."
.long     0x00000000    # at addr 0x34c4  "...."
.long     0x00022f20    # at addr 0x34c8  " /.."
.long     0x00000000    # at addr 0x34cc  "...."
.long     0x00000007    # at addr 0x34d0  "...."
.long     0x0000005a    # at addr 0x34d4  "Z..."
.long     0x00000000    # at addr 0x34d8  "...."
.long     0x00000000    # at addr 0x34dc  "...."
.long     0x00022f28    # at addr 0x34e0  "(/.."
.long     0x00000000    # at addr 0x34e4  "...."
.long     0x00000007    # at addr 0x34e8  "...."
.long     0x0000005b    # at addr 0x34ec  "[..."
.long     0x00000000    # at addr 0x34f0  "...."
.long     0x00000000    # at addr 0x34f4  "...."
.long     0x00022f30    # at addr 0x34f8  "0/.."
.long     0x00000000    # at addr 0x34fc  "...."
.long     0x00000007    # at addr 0x3500  "...."
.long     0x0000005c    # at addr 0x3504  "\..."
.long     0x00000000    # at addr 0x3508  "...."
.long     0x00000000    # at addr 0x350c  "...."
.long     0x00022f38    # at addr 0x3510  "8/.."
.long     0x00000000    # at addr 0x3514  "...."
.long     0x00000007    # at addr 0x3518  "...."
.long     0x0000005d    # at addr 0x351c  "]..."
.long     0x00000000    # at addr 0x3520  "...."
.long     0x00000000    # at addr 0x3524  "...."
.long     0x00022f40    # at addr 0x3528  "@/.."
.long     0x00000000    # at addr 0x352c  "...."
.long     0x00000007    # at addr 0x3530  "...."
.long     0x0000005e    # at addr 0x3534  "^..."
.long     0x00000000    # at addr 0x3538  "...."
.long     0x00000000    # at addr 0x353c  "...."
.long     0x00022f48    # at addr 0x3540  "H/.."
.long     0x00000000    # at addr 0x3544  "...."
.long     0x00000007    # at addr 0x3548  "...."
.long     0x0000005f    # at addr 0x354c  "_..."
.long     0x00000000    # at addr 0x3550  "...."
.long     0x00000000    # at addr 0x3554  "...."
.long     0x00022f50    # at addr 0x3558  "P/.."
.long     0x00000000    # at addr 0x355c  "...."
.long     0x00000007    # at addr 0x3560  "...."
.long     0x00000060    # at addr 0x3564  "`..."
.long     0x00000000    # at addr 0x3568  "...."
.long     0x00000000    # at addr 0x356c  "...."
.long     0x00022f58    # at addr 0x3570  "X/.."
.long     0x00000000    # at addr 0x3574  "...."
.long     0x00000007    # at addr 0x3578  "...."
.long     0x00000061    # at addr 0x357c  "a..."
.long     0x00000000    # at addr 0x3580  "...."
.long     0x00000000    # at addr 0x3584  "...."
.long     0x00022f60    # at addr 0x3588  "`/.."
.long     0x00000000    # at addr 0x358c  "...."
.long     0x00000007    # at addr 0x3590  "...."
.long     0x00000062    # at addr 0x3594  "b..."
.long     0x00000000    # at addr 0x3598  "...."
.long     0x00000000    # at addr 0x359c  "...."
.long     0x00022f68    # at addr 0x35a0  "h/.."
.long     0x00000000    # at addr 0x35a4  "...."
.long     0x00000007    # at addr 0x35a8  "...."
.long     0x00000063    # at addr 0x35ac  "c..."
.long     0x00000000    # at addr 0x35b0  "...."
.long     0x00000000    # at addr 0x35b4  "...."
.long     0x00022f70    # at addr 0x35b8  "p/.."
.long     0x00000000    # at addr 0x35bc  "...."
.long     0x00000007    # at addr 0x35c0  "...."
.long     0x00000064    # at addr 0x35c4  "d..."
.long     0x00000000    # at addr 0x35c8  "...."
.long     0x00000000    # at addr 0x35cc  "...."
.long     0x00022f78    # at addr 0x35d0  "x/.."
.long     0x00000000    # at addr 0x35d4  "...."
.long     0x00000007    # at addr 0x35d8  "...."
.long     0x00000065    # at addr 0x35dc  "e..."
.long     0x00000000    # at addr 0x35e0  "...."
.long     0x00000000    # at addr 0x35e4  "...."
.long     0x00022f80    # at addr 0x35e8  "./.."
.long     0x00000000    # at addr 0x35ec  "...."
.long     0x00000007    # at addr 0x35f0  "...."
.long     0x00000066    # at addr 0x35f4  "f..."
.long     0x00000000    # at addr 0x35f8  "...."
.long     0x00000000    # at addr 0x35fc  "...."
.long     0x00022f88    # at addr 0x3600  "./.."
.long     0x00000000    # at addr 0x3604  "...."
.long     0x00000007    # at addr 0x3608  "...."
.long     0x00000068    # at addr 0x360c  "h..."
.long     0x00000000    # at addr 0x3610  "...."
.long     0x00000000    # at addr 0x3614  "...."
.long     0x00022f90    # at addr 0x3618  "./.."
.long     0x00000000    # at addr 0x361c  "...."
.long     0x00000007    # at addr 0x3620  "...."
.long     0x00000069    # at addr 0x3624  "i..."
.long     0x00000000    # at addr 0x3628  "...."
.long     0x00000000    # at addr 0x362c  "...."
.long     0x00022f98    # at addr 0x3630  "./.."
.long     0x00000000    # at addr 0x3634  "...."
.long     0x00000007    # at addr 0x3638  "...."
.long     0x0000006a    # at addr 0x363c  "j..."
.long     0x00000000    # at addr 0x3640  "...."
.long     0x00000000    # at addr 0x3644  "...."
.long     0x00022fa0    # at addr 0x3648  "./.."
.long     0x00000000    # at addr 0x364c  "...."
.long     0x00000007    # at addr 0x3650  "...."
.long     0x0000006b    # at addr 0x3654  "k..."
.long     0x00000000    # at addr 0x3658  "...."
.long     0x00000000    # at addr 0x365c  "...."
.long     0x00022fa8    # at addr 0x3660  "./.."
.long     0x00000000    # at addr 0x3664  "...."
.long     0x00000007    # at addr 0x3668  "...."
.long     0x0000006c    # at addr 0x366c  "l..."
.long     0x00000000    # at addr 0x3670  "...."
.long     0x00000000    # at addr 0x3674  "...."
.long     0x00022fb0    # at addr 0x3678  "./.."
.long     0x00000000    # at addr 0x367c  "...."
.long     0x00000007    # at addr 0x3680  "...."
.long     0x0000006d    # at addr 0x3684  "m..."
.long     0x00000000    # at addr 0x3688  "...."
.long     0x00000000    # at addr 0x368c  "...."
.long     0x00022fb8    # at addr 0x3690  "./.."
.long     0x00000000    # at addr 0x3694  "...."
.long     0x00000007    # at addr 0x3698  "...."
.long     0x0000006e    # at addr 0x369c  "n..."
.long     0x00000000    # at addr 0x36a0  "...."
.long     0x00000000    # at addr 0x36a4  "...."

.p2align 2

# IGNORED Other section .init (size 27)
.p2align 4

# IGNORED Other section .plt (size 1712)
.p2align 4

# IGNORED Other section .plt.got (size 48)
.p2align 4

# IGNORED Other section .plt.sec (size 1696)
.p2align 4

# IGNORED Other section .text (size 75730)
.p2align 2

# IGNORED Other section .fini (size 13)
.p2align 5

# Data section .rodata (size 21065)  0x00018000 - 0x0001d248

.section .rodata
Var0x18000:       # next=0x18020, start=0x18000, end=0x1d248
.long     0x00020001    # at addr 0x18000  "...."
.long     0x00000000    # at addr 0x18004  "...."
.long     0x00000000    # at addr 0x18008  "...."
.long     0x00000000    # at addr 0x1800c  "...."
.long     0x00000000    # at addr 0x18010  "...."
.long     0x00000000    # at addr 0x18014  "...."
.long     0x00000000    # at addr 0x18018  "...."
.long     0x00000000    # at addr 0x1801c  "...."
Var0x18020:       # next=0x18144, start=0x18000, end=0x1d248
.long     0xfffeea41    # at addr 0x18020  "A..."
.long     0xfffeea41    # at addr 0x18024  "A..."
.long     0xfffeea41    # at addr 0x18028  "A..."
.long     0xfffeea41    # at addr 0x1802c  "A..."
.long     0xfffeea41    # at addr 0x18030  "A..."
.long     0xfffeea41    # at addr 0x18034  "A..."
.long     0xfffeea41    # at addr 0x18038  "A..."
.long     0xfffeea41    # at addr 0x1803c  "A..."
.long     0xfffee9cb    # at addr 0x18040  "...."
.long     0xfffee9cb    # at addr 0x18044  "...."
.long     0xfffee9cb    # at addr 0x18048  "...."
.long     0xfffee9cb    # at addr 0x1804c  "...."
.long     0xfffee9cb    # at addr 0x18050  "...."
.long     0xfffee9cb    # at addr 0x18054  "...."
.long     0xfffee9cb    # at addr 0x18058  "...."
.long     0xfffeead2    # at addr 0x1805c  "...."
.long     0xfffee9cb    # at addr 0x18060  "...."
.long     0xfffee9cb    # at addr 0x18064  "...."
.long     0xfffee9cb    # at addr 0x18068  "...."
.long     0xfffee9cb    # at addr 0x1806c  "...."
.long     0xfffee9cb    # at addr 0x18070  "...."
.long     0xfffee9cb    # at addr 0x18074  "...."
.long     0xfffee9cb    # at addr 0x18078  "...."
.long     0xfffee9cb    # at addr 0x1807c  "...."
.long     0xfffee9cb    # at addr 0x18080  "...."
.long     0xfffee9cb    # at addr 0x18084  "...."
.long     0xfffee9cb    # at addr 0x18088  "...."
.long     0xfffee9cb    # at addr 0x1808c  "...."
.long     0xfffee9cb    # at addr 0x18090  "...."
.long     0xfffee9cb    # at addr 0x18094  "...."
.long     0xfffee9cb    # at addr 0x18098  "...."
.long     0xfffee9cb    # at addr 0x1809c  "...."
.long     0xfffee9cb    # at addr 0x180a0  "...."
.long     0xfffee9cb    # at addr 0x180a4  "...."
.long     0xfffee9cb    # at addr 0x180a8  "...."
.long     0xfffee9cb    # at addr 0x180ac  "...."
.long     0xfffee9cb    # at addr 0x180b0  "...."
.long     0xfffee9cb    # at addr 0x180b4  "...."
.long     0xfffee9cb    # at addr 0x180b8  "...."
.long     0xfffee9cb    # at addr 0x180bc  "...."
.long     0xfffee9e2    # at addr 0x180c0  "...."
.long     0xfffee9cb    # at addr 0x180c4  "...."
.long     0xfffee9cb    # at addr 0x180c8  "...."
.long     0xfffee9cb    # at addr 0x180cc  "...."
.long     0xfffee9cb    # at addr 0x180d0  "...."
.long     0xfffee9cb    # at addr 0x180d4  "...."
.long     0xfffee9cb    # at addr 0x180d8  "...."
.long     0xfffeeadc    # at addr 0x180dc  "...."
.long     0xfffee9cb    # at addr 0x180e0  "...."
.long     0xfffee9db    # at addr 0x180e4  "...."
.long     0xfffeeae6    # at addr 0x180e8  "...."
.long     0xfffee9cb    # at addr 0x180ec  "...."
.long     0xfffee9cb    # at addr 0x180f0  "...."
.long     0xfffee9c6    # at addr 0x180f4  "...."
.long     0xfffeeaf0    # at addr 0x180f8  "...."
.long     0xfffee9cb    # at addr 0x180fc  "...."
.long     0xfffee9cb    # at addr 0x18100  "...."
.long     0xfffee9cb    # at addr 0x18104  "...."
.long     0xfffee9cb    # at addr 0x18108  "...."
.long     0xfffee9cb    # at addr 0x1810c  "...."
.long     0xfffee9cb    # at addr 0x18110  "...."
.long     0xfffee9cb    # at addr 0x18114  "...."
.long     0xfffeeabe    # at addr 0x18118  "...."
.long     0xfffee9cb    # at addr 0x1811c  "...."
.long     0xfffee9cb    # at addr 0x18120  "...."
.long     0xfffee9cb    # at addr 0x18124  "...."
.long     0xfffeeac8    # at addr 0x18128  "...."
.long     0xfffee9cb    # at addr 0x1812c  "...."
.long     0xfffeeafa    # at addr 0x18130  "...."
.long     0xfffee9cb    # at addr 0x18134  "...."
.long     0xfffeeab4    # at addr 0x18138  "...."
.long     0xfffee9cb    # at addr 0x1813c  "...."
.long     0xfffee9e2    # at addr 0x18140  "...."
Var0x18144:       # next=0x18158, start=0x18000, end=0x1d248
.long     0xffff219c    # at addr 0x18144  ".!.."
.long     0xffff21fc    # at addr 0x18148  ".!.."
.long     0xffff2254    # at addr 0x1814c  "T".."
.long     0xffff2094    # at addr 0x18150  ". .."
.long     0xffff2184    # at addr 0x18154  ".!.."
Var0x18158:       # next=0x185c0, start=0x18000, end=0x1d248
.long     0xfffed6aa    # at addr 0x18158  "...."
.long     0xfffee338    # at addr 0x1815c  "8..."
.long     0xfffee33f    # at addr 0x18160  "?..."
.long     0xfffee33f    # at addr 0x18164  "?..."
.long     0xfffee33f    # at addr 0x18168  "?..."
.long     0xfffee33f    # at addr 0x1816c  "?..."
.long     0xfffee33f    # at addr 0x18170  "?..."
.long     0xfffee33f    # at addr 0x18174  "?..."
.long     0xfffee33f    # at addr 0x18178  "?..."
.long     0xfffee33f    # at addr 0x1817c  "?..."
.long     0xfffee33f    # at addr 0x18180  "?..."
.long     0xfffee33f    # at addr 0x18184  "?..."
.long     0xfffee33f    # at addr 0x18188  "?..."
.long     0xfffee33f    # at addr 0x1818c  "?..."
.long     0xfffee33f    # at addr 0x18190  "?..."
.long     0xfffee33f    # at addr 0x18194  "?..."
.long     0xfffee33f    # at addr 0x18198  "?..."
.long     0xfffee33f    # at addr 0x1819c  "?..."
.long     0xfffee33f    # at addr 0x181a0  "?..."
.long     0xfffee33f    # at addr 0x181a4  "?..."
.long     0xfffee33f    # at addr 0x181a8  "?..."
.long     0xfffee33f    # at addr 0x181ac  "?..."
.long     0xfffee33f    # at addr 0x181b0  "?..."
.long     0xfffee33f    # at addr 0x181b4  "?..."
.long     0xfffee33f    # at addr 0x181b8  "?..."
.long     0xfffee33f    # at addr 0x181bc  "?..."
.long     0xfffee33f    # at addr 0x181c0  "?..."
.long     0xfffee33f    # at addr 0x181c4  "?..."
.long     0xfffee33f    # at addr 0x181c8  "?..."
.long     0xfffee33f    # at addr 0x181cc  "?..."
.long     0xfffee33f    # at addr 0x181d0  "?..."
.long     0xfffee33f    # at addr 0x181d4  "?..."
.long     0xfffee33f    # at addr 0x181d8  "?..."
.long     0xfffee33f    # at addr 0x181dc  "?..."
.long     0xfffee33f    # at addr 0x181e0  "?..."
.long     0xfffee33f    # at addr 0x181e4  "?..."
.long     0xfffee33f    # at addr 0x181e8  "?..."
.long     0xfffee33f    # at addr 0x181ec  "?..."
.long     0xfffee33f    # at addr 0x181f0  "?..."
.long     0xfffee33f    # at addr 0x181f4  "?..."
.long     0xfffee33f    # at addr 0x181f8  "?..."
.long     0xfffee33f    # at addr 0x181fc  "?..."
.long     0xfffee33f    # at addr 0x18200  "?..."
.long     0xfffee33f    # at addr 0x18204  "?..."
.long     0xfffee33f    # at addr 0x18208  "?..."
.long     0xfffee33f    # at addr 0x1820c  "?..."
.long     0xfffee33f    # at addr 0x18210  "?..."
.long     0xfffee33f    # at addr 0x18214  "?..."
.long     0xfffee33f    # at addr 0x18218  "?..."
.long     0xfffee33f    # at addr 0x1821c  "?..."
.long     0xfffee33f    # at addr 0x18220  "?..."
.long     0xfffee33f    # at addr 0x18224  "?..."
.long     0xfffee33f    # at addr 0x18228  "?..."
.long     0xfffee33f    # at addr 0x1822c  "?..."
.long     0xfffee33f    # at addr 0x18230  "?..."
.long     0xfffee33f    # at addr 0x18234  "?..."
.long     0xfffee33f    # at addr 0x18238  "?..."
.long     0xfffee33f    # at addr 0x1823c  "?..."
.long     0xfffee33f    # at addr 0x18240  "?..."
.long     0xfffee33f    # at addr 0x18244  "?..."
.long     0xfffee33f    # at addr 0x18248  "?..."
.long     0xfffee33f    # at addr 0x1824c  "?..."
.long     0xfffee33f    # at addr 0x18250  "?..."
.long     0xfffee33f    # at addr 0x18254  "?..."
.long     0xfffee33f    # at addr 0x18258  "?..."
.long     0xfffee33f    # at addr 0x1825c  "?..."
.long     0xfffee33f    # at addr 0x18260  "?..."
.long     0xfffee33f    # at addr 0x18264  "?..."
.long     0xfffee33f    # at addr 0x18268  "?..."
.long     0xfffee33f    # at addr 0x1826c  "?..."
.long     0xfffee33f    # at addr 0x18270  "?..."
.long     0xfffee33f    # at addr 0x18274  "?..."
.long     0xfffee33f    # at addr 0x18278  "?..."
.long     0xfffee33f    # at addr 0x1827c  "?..."
.long     0xfffee33f    # at addr 0x18280  "?..."
.long     0xfffee33f    # at addr 0x18284  "?..."
.long     0xfffee33f    # at addr 0x18288  "?..."
.long     0xfffee33f    # at addr 0x1828c  "?..."
.long     0xfffee33f    # at addr 0x18290  "?..."
.long     0xfffee33f    # at addr 0x18294  "?..."
.long     0xfffee33f    # at addr 0x18298  "?..."
.long     0xfffee33f    # at addr 0x1829c  "?..."
.long     0xfffee33f    # at addr 0x182a0  "?..."
.long     0xfffee33f    # at addr 0x182a4  "?..."
.long     0xfffee33f    # at addr 0x182a8  "?..."
.long     0xfffee33f    # at addr 0x182ac  "?..."
.long     0xfffee33f    # at addr 0x182b0  "?..."
.long     0xfffee33f    # at addr 0x182b4  "?..."
.long     0xfffee33f    # at addr 0x182b8  "?..."
.long     0xfffee33f    # at addr 0x182bc  "?..."
.long     0xfffee33f    # at addr 0x182c0  "?..."
.long     0xfffee33f    # at addr 0x182c4  "?..."
.long     0xfffee33f    # at addr 0x182c8  "?..."
.long     0xfffee33f    # at addr 0x182cc  "?..."
.long     0xfffee33f    # at addr 0x182d0  "?..."
.long     0xfffee33f    # at addr 0x182d4  "?..."
.long     0xfffee33f    # at addr 0x182d8  "?..."
.long     0xfffee33f    # at addr 0x182dc  "?..."
.long     0xfffee33f    # at addr 0x182e0  "?..."
.long     0xfffee33f    # at addr 0x182e4  "?..."
.long     0xfffee33f    # at addr 0x182e8  "?..."
.long     0xfffee33f    # at addr 0x182ec  "?..."
.long     0xfffee33f    # at addr 0x182f0  "?..."
.long     0xfffee33f    # at addr 0x182f4  "?..."
.long     0xfffee33f    # at addr 0x182f8  "?..."
.long     0xfffee33f    # at addr 0x182fc  "?..."
.long     0xfffee33f    # at addr 0x18300  "?..."
.long     0xfffee33f    # at addr 0x18304  "?..."
.long     0xfffee33f    # at addr 0x18308  "?..."
.long     0xfffee33f    # at addr 0x1830c  "?..."
.long     0xfffee33f    # at addr 0x18310  "?..."
.long     0xfffee33f    # at addr 0x18314  "?..."
.long     0xfffee33f    # at addr 0x18318  "?..."
.long     0xfffee33f    # at addr 0x1831c  "?..."
.long     0xfffee33f    # at addr 0x18320  "?..."
.long     0xfffee33f    # at addr 0x18324  "?..."
.long     0xfffee33f    # at addr 0x18328  "?..."
.long     0xfffee33f    # at addr 0x1832c  "?..."
.long     0xfffee33f    # at addr 0x18330  "?..."
.long     0xfffee33f    # at addr 0x18334  "?..."
.long     0xfffee33f    # at addr 0x18338  "?..."
.long     0xfffee33f    # at addr 0x1833c  "?..."
.long     0xfffee33f    # at addr 0x18340  "?..."
.long     0xfffee33f    # at addr 0x18344  "?..."
.long     0xfffee33f    # at addr 0x18348  "?..."
.long     0xfffee33f    # at addr 0x1834c  "?..."
.long     0xfffee33f    # at addr 0x18350  "?..."
.long     0xfffee33f    # at addr 0x18354  "?..."
.long     0xfffee33f    # at addr 0x18358  "?..."
.long     0xfffee33f    # at addr 0x1835c  "?..."
.long     0xfffee33f    # at addr 0x18360  "?..."
.long     0xfffee33f    # at addr 0x18364  "?..."
.long     0xfffee33f    # at addr 0x18368  "?..."
.long     0xfffee33f    # at addr 0x1836c  "?..."
.long     0xfffee33f    # at addr 0x18370  "?..."
.long     0xfffee33f    # at addr 0x18374  "?..."
.long     0xfffee33f    # at addr 0x18378  "?..."
.long     0xfffee33f    # at addr 0x1837c  "?..."
.long     0xfffee33f    # at addr 0x18380  "?..."
.long     0xfffee33f    # at addr 0x18384  "?..."
.long     0xfffee33f    # at addr 0x18388  "?..."
.long     0xfffee33f    # at addr 0x1838c  "?..."
.long     0xfffee33f    # at addr 0x18390  "?..."
.long     0xfffee33f    # at addr 0x18394  "?..."
.long     0xfffee33f    # at addr 0x18398  "?..."
.long     0xfffee33f    # at addr 0x1839c  "?..."
.long     0xfffee33f    # at addr 0x183a0  "?..."
.long     0xfffee33f    # at addr 0x183a4  "?..."
.long     0xfffee33f    # at addr 0x183a8  "?..."
.long     0xfffee33f    # at addr 0x183ac  "?..."
.long     0xfffee33f    # at addr 0x183b0  "?..."
.long     0xfffee33f    # at addr 0x183b4  "?..."
.long     0xfffee33f    # at addr 0x183b8  "?..."
.long     0xfffee33f    # at addr 0x183bc  "?..."
.long     0xfffee33f    # at addr 0x183c0  "?..."
.long     0xfffee33f    # at addr 0x183c4  "?..."
.long     0xfffee33f    # at addr 0x183c8  "?..."
.long     0xfffee33f    # at addr 0x183cc  "?..."
.long     0xfffee33f    # at addr 0x183d0  "?..."
.long     0xfffee33f    # at addr 0x183d4  "?..."
.long     0xfffee33f    # at addr 0x183d8  "?..."
.long     0xfffee33f    # at addr 0x183dc  "?..."
.long     0xfffee33f    # at addr 0x183e0  "?..."
.long     0xfffee33f    # at addr 0x183e4  "?..."
.long     0xfffee33f    # at addr 0x183e8  "?..."
.long     0xfffee33f    # at addr 0x183ec  "?..."
.long     0xfffee33f    # at addr 0x183f0  "?..."
.long     0xfffee33f    # at addr 0x183f4  "?..."
.long     0xfffee33f    # at addr 0x183f8  "?..."
.long     0xfffee33f    # at addr 0x183fc  "?..."
.long     0xfffee33f    # at addr 0x18400  "?..."
.long     0xfffee33f    # at addr 0x18404  "?..."
.long     0xfffee33f    # at addr 0x18408  "?..."
.long     0xfffee33f    # at addr 0x1840c  "?..."
.long     0xfffee33f    # at addr 0x18410  "?..."
.long     0xfffee33f    # at addr 0x18414  "?..."
.long     0xfffee33f    # at addr 0x18418  "?..."
.long     0xfffee33f    # at addr 0x1841c  "?..."
.long     0xfffee33f    # at addr 0x18420  "?..."
.long     0xfffee33f    # at addr 0x18424  "?..."
.long     0xfffed68e    # at addr 0x18428  "...."
.long     0xfffee33f    # at addr 0x1842c  "?..."
.long     0xfffee33f    # at addr 0x18430  "?..."
.long     0xfffee33f    # at addr 0x18434  "?..."
.long     0xfffee33f    # at addr 0x18438  "?..."
.long     0xfffee33f    # at addr 0x1843c  "?..."
.long     0xfffee33f    # at addr 0x18440  "?..."
.long     0xfffee33f    # at addr 0x18444  "?..."
.long     0xfffee33f    # at addr 0x18448  "?..."
.long     0xfffee33f    # at addr 0x1844c  "?..."
.long     0xfffee33f    # at addr 0x18450  "?..."
.long     0xfffee33f    # at addr 0x18454  "?..."
.long     0xfffee33f    # at addr 0x18458  "?..."
.long     0xfffee33f    # at addr 0x1845c  "?..."
.long     0xfffee33f    # at addr 0x18460  "?..."
.long     0xfffee33f    # at addr 0x18464  "?..."
.long     0xfffed67f    # at addr 0x18468  "..."
.long     0xfffed62e    # at addr 0x1846c  "...."
.long     0xfffed61f    # at addr 0x18470  "...."
.long     0xfffed613    # at addr 0x18474  "...."
.long     0xfffee33f    # at addr 0x18478  "?..."
.long     0xfffed604    # at addr 0x1847c  "...."
.long     0xfffed5f8    # at addr 0x18480  "...."
.long     0xfffed5e9    # at addr 0x18484  "...."
.long     0xfffed5b4    # at addr 0x18488  "...."
.long     0xfffee33f    # at addr 0x1848c  "?..."
.long     0xfffee33f    # at addr 0x18490  "?..."
.long     0xfffed5a5    # at addr 0x18494  "...."
.long     0xfffee33f    # at addr 0x18498  "?..."
.long     0xfffed597    # at addr 0x1849c  "...."
.long     0xfffee33f    # at addr 0x184a0  "?..."
.long     0xfffee33f    # at addr 0x184a4  "?..."
.long     0xfffed586    # at addr 0x184a8  "...."
.long     0xfffed57a    # at addr 0x184ac  "z..."
.long     0xfffed566    # at addr 0x184b0  "f..."
.long     0xfffed524    # at addr 0x184b4  "$..."
.long     0xfffed510    # at addr 0x184b8  "...."
.long     0xfffee33f    # at addr 0x184bc  "?..."
.long     0xfffee33f    # at addr 0x184c0  "?..."
.long     0xfffed4fc    # at addr 0x184c4  "...."
.long     0xfffee33f    # at addr 0x184c8  "?..."
.long     0xfffed4f0    # at addr 0x184cc  "...."
.long     0xfffee33f    # at addr 0x184d0  "?..."
.long     0xfffee33f    # at addr 0x184d4  "?..."
.long     0xfffee33f    # at addr 0x184d8  "?..."
.long     0xfffee33f    # at addr 0x184dc  "?..."
.long     0xfffee33f    # at addr 0x184e0  "?..."
.long     0xfffee33f    # at addr 0x184e4  "?..."
.long     0xfffed4e1    # at addr 0x184e8  "...."
.long     0xfffed4d0    # at addr 0x184ec  "...."
.long     0xfffed4c1    # at addr 0x184f0  "...."
.long     0xfffed4b5    # at addr 0x184f4  "...."
.long     0xfffee33f    # at addr 0x184f8  "?..."
.long     0xfffed475    # at addr 0x184fc  "u..."
.long     0xfffed45f    # at addr 0x18500  "_..."
.long     0xfffed430    # at addr 0x18504  "0..."
.long     0xfffed424    # at addr 0x18508  "$..."
.long     0xfffee33f    # at addr 0x1850c  "?..."
.long     0xfffecf5a    # at addr 0x18510  "Z..."
.long     0xfffecf69    # at addr 0x18514  "i..."
.long     0xfffed415    # at addr 0x18518  "...."
.long     0xfffecf62    # at addr 0x1851c  "b..."
.long     0xfffed3ff    # at addr 0x18520  "...."
.long     0xfffed3f0    # at addr 0x18524  "...."
.long     0xfffed3e4    # at addr 0x18528  "...."
.long     0xfffed3d8    # at addr 0x1852c  "...."
.long     0xfffed360    # at addr 0x18530  "`..."
.long     0xfffed34c    # at addr 0x18534  "L..."
.long     0xfffed33d    # at addr 0x18538  "=..."
.long     0xfffed329    # at addr 0x1853c  ")..."
.long     0xfffed37b    # at addr 0x18540  "{..."
.long     0xfffed36c    # at addr 0x18544  "l..."
.long     0xfffee33f    # at addr 0x18548  "?..."
.long     0xfffee33f    # at addr 0x1854c  "?..."
.long     0xfffee33f    # at addr 0x18550  "?..."
.long     0xfffee33f    # at addr 0x18554  "?..."
.long     0xfffee33f    # at addr 0x18558  "?..."
.long     0xfffee33f    # at addr 0x1855c  "?..."
.long     0xfffee33f    # at addr 0x18560  "?..."
.long     0xfffed3cc    # at addr 0x18564  "...."
.long     0xfffed2e8    # at addr 0x18568  "...."
.long     0xfffed285    # at addr 0x1856c  "...."
.long     0xfffed276    # at addr 0x18570  "v..."
.long     0xfffed267    # at addr 0x18574  "g..."
.long     0xfffed220    # at addr 0x18578  " ..."
.long     0xfffed20a    # at addr 0x1857c  "...."
.long     0xfffed1fe    # at addr 0x18580  "...."
.long     0xfffed1d3    # at addr 0x18584  "...."
.long     0xfffed163    # at addr 0x18588  "c..."
.long     0xfffed11c    # at addr 0x1858c  "...."
.long     0xfffed0d4    # at addr 0x18590  "...."
.long     0xfffed0c8    # at addr 0x18594  "...."
.long     0xfffed099    # at addr 0x18598  "...."
.long     0xfffed04d    # at addr 0x1859c  "M..."
.long     0xfffed006    # at addr 0x185a0  "...."
.long     0xfffecffa    # at addr 0x185a4  "...."
.long     0x00000000    # at addr 0x185a8  "...."
.long     0x00000000    # at addr 0x185ac  "...."
.long     0x00000000    # at addr 0x185b0  "...."
.long     0x00000000    # at addr 0x185b4  "...."
.long     0x00000000    # at addr 0x185b8  "...."
.long     0x00000000    # at addr 0x185bc  "...."
Var0x185c0:       # next=0x185f8, start=0x18000, end=0x1d248
.long     0x00000001    # at addr 0x185c0  "...."
.long     0x00000002    # at addr 0x185c4  "...."
.long     0x00000000    # at addr 0x185c8  "...."
.long     0x00000003    # at addr 0x185cc  "...."
.long     0x00000000    # at addr 0x185d0  "...."
.long     0x00000004    # at addr 0x185d4  "...."
.long     0x00000000    # at addr 0x185d8  "...."
.long     0x00000005    # at addr 0x185dc  "...."
.long     0x00000000    # at addr 0x185e0  "...."
.long     0x00000006    # at addr 0x185e4  "...."
.long     0x00000000    # at addr 0x185e8  "...."
.long     0x00000007    # at addr 0x185ec  "...."
.long     0x00000000    # at addr 0x185f0  "...."
.long     0x00000008    # at addr 0x185f4  "...."
Var0x185f8:       # next=0x18624, start=0x18000, end=0x1d248
.long     0x5f766564    # at addr 0x185f8  "dev_"
.long     0x5f6f6e69    # at addr 0x185fc  "ino_"
.long     0x00706f70    # at addr 0x18600  "pop."
.long     0x00000000    # at addr 0x18604  "...."
.long     0x00000000    # at addr 0x18608  "...."
.long     0x00000000    # at addr 0x1860c  "...."
.long     0x00000000    # at addr 0x18610  "...."
.long     0x00000000    # at addr 0x18614  "...."
.long     0x00000000    # at addr 0x18618  "...."
.long     0x00000000    # at addr 0x1861c  "...."
.long     0x00000014    # at addr 0x18620  "...."
Var0x18624:       # next=0x18660, start=0x18000, end=0x1d248
.long     0x0000000e    # at addr 0x18624  "...."
.long     0x00000001    # at addr 0x18628  "...."
.long     0x00000002    # at addr 0x1862c  "...."
.long     0x0000000d    # at addr 0x18630  "...."
.long     0x00000003    # at addr 0x18634  "...."
.long     0x0000000f    # at addr 0x18638  "...."
.long     0x0000001d    # at addr 0x1863c  "...."
.long     0x0000001b    # at addr 0x18640  "...."
.long     0x0000001a    # at addr 0x18644  "...."
.long     0x00000018    # at addr 0x18648  "...."
.long     0x00000019    # at addr 0x1864c  "...."
.long     0x00000000    # at addr 0x18650  "...."
.long     0x00000000    # at addr 0x18654  "...."
.long     0x00000000    # at addr 0x18658  "...."
.long     0x00000000    # at addr 0x1865c  "...."
Var0x18660:       # next=0x18688, start=0x18000, end=0x1d248
.long     0x0000000d    # at addr 0x18660  "...."
.long     0x00000008    # at addr 0x18664  "...."
.long     0x0000000b    # at addr 0x18668  "...."
.long     0x00000006    # at addr 0x1866c  "...."
.long     0x0000000a    # at addr 0x18670  "...."
.long     0x00000005    # at addr 0x18674  "...."
.long     0x00000007    # at addr 0x18678  "...."
.long     0x00000009    # at addr 0x1867c  "...."
.long     0x00000005    # at addr 0x18680  "...."
.long     0x00000006    # at addr 0x18684  "...."
Var0x18688:       # next=0x18693, start=0x18000, end=0x1d248
.long     0x74726f73    # at addr 0x18688  "sort"
.long     0x6c69665f    # at addr 0x1868c  "_fil"
.byte     0x65    # "e"
.byte     0x73    # "e"
.byte     0x00    # "e"
Var0x18693:       # next=0x1869a, start=0x18000, end=0x1d248
.long     0x69736f70    # at addr 0x18693  "posi"
.byte     0x78    # "x"
.byte     0x2d    # "x"
.byte     0x00    # "x"
Var0x1869a:       # next=0x186a0, start=0x18000, end=0x1d248
.long     0x6e69616d    # at addr 0x1869a  "main"
.byte     0x00    # "."
.byte     0x00    # "."
Var0x186a0:       # next=0x186d0, start=0x18000, end=0x1d248
.long     0x00000001    # at addr 0x186a0  "...."
.long     0x00000001    # at addr 0x186a4  "...."
.long     0x00000001    # at addr 0x186a8  "...."
.long     0x00000000    # at addr 0x186ac  "...."
.long     0x00000000    # at addr 0x186b0  "...."
.long     0x00000000    # at addr 0x186b4  "...."
.long     0x00000002    # at addr 0x186b8  "...."
.long     0x00000002    # at addr 0x186bc  "...."
.long     0x00000002    # at addr 0x186c0  "...."
.long     0x00000000    # at addr 0x186c4  "...."
.long     0x00000000    # at addr 0x186c8  "...."
.long     0x00000000    # at addr 0x186cc  "...."
Var0x186d0:       # next=0x186f0, start=0x18000, end=0x1d248
.long     0x00000002    # at addr 0x186d0  "...."
.long     0x00000002    # at addr 0x186d4  "...."
.long     0x00000002    # at addr 0x186d8  "...."
.long     0x00000001    # at addr 0x186dc  "...."
.long     0x00000001    # at addr 0x186e0  "...."
.long     0x00000000    # at addr 0x186e4  "...."
.long     0x00000000    # at addr 0x186e8  "...."
.long     0x00000000    # at addr 0x186ec  "...."
Var0x186f0:       # next=0x18710, start=0x18000, end=0x1d248
.long     0xffffffff    # at addr 0x186f0  "...."
.long     0x00000004    # at addr 0x186f4  "...."
.long     0x00000002    # at addr 0x186f8  "...."
.long     0x00000001    # at addr 0x186fc  "...."
.long     0x00000003    # at addr 0x18700  "...."
.long     0x00000000    # at addr 0x18704  "...."
.long     0x00000000    # at addr 0x18708  "...."
.long     0x00000000    # at addr 0x1870c  "...."
Var0x18710:       # next=0x18730, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x18710  "...."
.long     0x00000000    # at addr 0x18714  "...."
.long     0x00000004    # at addr 0x18718  "...."
.long     0x00000003    # at addr 0x1871c  "...."
.long     0x00000003    # at addr 0x18720  "...."
.long     0x00000002    # at addr 0x18724  "...."
.long     0x00000001    # at addr 0x18728  "...."
.long     0x00000000    # at addr 0x1872c  "...."
Var0x18730:       # next=0x18740, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x18730  "...."
.long     0x00000001    # at addr 0x18734  "...."
.long     0x00000002    # at addr 0x18738  "...."
.long     0x00000003    # at addr 0x1873c  "...."
Var0x18740:       # next=0x18750, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x18740  "...."
.long     0x00000001    # at addr 0x18744  "...."
.long     0x00000002    # at addr 0x18748  "...."
.long     0x00000003    # at addr 0x1874c  "...."
Var0x18750:       # next=0x18760, start=0x18000, end=0x1d248
.long     0x6463703f    # at addr 0x18750  "?pcd"
.long     0x736c2d62    # at addr 0x18754  "b-ls"
.long     0x00006477    # at addr 0x18758  "wd.."
.long     0x00000000    # at addr 0x1875c  "...."
Var0x18760:       # next=0x197a4, start=0x18000, end=0x1d248
.long     0x6f432023    # at addr 0x18760  "# Co"
.long     0x6769666e    # at addr 0x18764  "nfig"
.long     0x74617275    # at addr 0x18768  "urat"
.long     0x206e6f69    # at addr 0x1876c  "ion "
.long     0x656c6966    # at addr 0x18770  "file"
.long     0x726f6620    # at addr 0x18774  " for"
.long     0x72696420    # at addr 0x18778  " dir"
.long     0x6f6c6f63    # at addr 0x1877c  "colo"
.long     0x202c7372    # at addr 0x18780  "rs, "
.long     0x74752061    # at addr 0x18784  "a ut"
.long     0x74696c69    # at addr 0x18788  "ilit"
.long     0x6f742079    # at addr 0x1878c  "y to"
.long     0x6c656820    # at addr 0x18790  " hel"
.long     0x6f792070    # at addr 0x18794  "p yo"
.long     0x65732075    # at addr 0x18798  "u se"
.long     0x68742074    # at addr 0x1879c  "t th"
.long     0x20230065    # at addr 0x187a0  "e.# "
.long     0x435f534c    # at addr 0x187a4  "LS_C"
.long     0x524f4c4f    # at addr 0x187a8  "OLOR"
.long     0x6e652053    # at addr 0x187ac  "S en"
.long     0x6f726976    # at addr 0x187b0  "viro"
.long     0x6e656d6e    # at addr 0x187b4  "nmen"
.long     0x61762074    # at addr 0x187b8  "t va"
.long     0x62616972    # at addr 0x187bc  "riab"
.long     0x7520656c    # at addr 0x187c0  "le u"
.long     0x20646573    # at addr 0x187c4  "sed "
.long     0x47207962    # at addr 0x187c8  "by G"
.long     0x6c20554e    # at addr 0x187cc  "NU l"
.long     0x69772073    # at addr 0x187d0  "s wi"
.long     0x74206874    # at addr 0x187d4  "th t"
.long     0x2d206568    # at addr 0x187d8  "he -"
.long     0x6c6f632d    # at addr 0x187dc  "-col"
.long     0x6f20726f    # at addr 0x187e0  "or o"
.long     0x6f697470    # at addr 0x187e4  "ptio"
.long     0x23002e6e    # at addr 0x187e8  "n..#"
.long     0x706f4320    # at addr 0x187ec  " Cop"
.long     0x67697279    # at addr 0x187f0  "yrig"
.long     0x28207468    # at addr 0x187f4  "ht ("
.long     0x31202943    # at addr 0x187f8  "C) 1"
.long     0x2d363939    # at addr 0x187fc  "996-"
.long     0x38313032    # at addr 0x18800  "2018"
.long     0x65724620    # at addr 0x18804  " Fre"
.long     0x6f532065    # at addr 0x18808  "e So"
.long     0x61777466    # at addr 0x1880c  "ftwa"
.long     0x46206572    # at addr 0x18810  "re F"
.long     0x646e756f    # at addr 0x18814  "ound"
.long     0x6f697461    # at addr 0x18818  "atio"
.long     0x49202c6e    # at addr 0x1881c  "n, I"
.long     0x002e636e    # at addr 0x18820  "nc.."
.long     0x6f432023    # at addr 0x18824  "# Co"
.long     0x6e697970    # at addr 0x18828  "pyin"
.long     0x6e612067    # at addr 0x1882c  "g an"
.long     0x69642064    # at addr 0x18830  "d di"
.long     0x69727473    # at addr 0x18834  "stri"
.long     0x69747562    # at addr 0x18838  "buti"
.long     0x6f206e6f    # at addr 0x1883c  "on o"
.long     0x68742066    # at addr 0x18840  "f th"
.long     0x66207369    # at addr 0x18844  "is f"
.long     0x2c656c69    # at addr 0x18848  "ile,"
.long     0x74697720    # at addr 0x1884c  " wit"
.long     0x726f2068    # at addr 0x18850  "h or"
.long     0x74697720    # at addr 0x18854  " wit"
.long     0x74756f68    # at addr 0x18858  "hout"
.long     0x646f6d20    # at addr 0x1885c  " mod"
.long     0x63696669    # at addr 0x18860  "ific"
.long     0x6f697461    # at addr 0x18864  "atio"
.long     0x23002c6e    # at addr 0x18868  "n,.#"
.long     0x65726120    # at addr 0x1886c  " are"
.long     0x72657020    # at addr 0x18870  " per"
.long     0x7474696d    # at addr 0x18874  "mitt"
.long     0x70206465    # at addr 0x18878  "ed p"
.long     0x69766f72    # at addr 0x1887c  "rovi"
.long     0x20646564    # at addr 0x18880  "ded "
.long     0x20656874    # at addr 0x18884  "the "
.long     0x79706f63    # at addr 0x18888  "copy"
.long     0x68676972    # at addr 0x1888c  "righ"
.long     0x6f6e2074    # at addr 0x18890  "t no"
.long     0x65636974    # at addr 0x18894  "tice"
.long     0x646e6120    # at addr 0x18898  " and"
.long     0x69687420    # at addr 0x1889c  " thi"
.long     0x6f6e2073    # at addr 0x188a0  "s no"
.long     0x65636974    # at addr 0x188a4  "tice"
.long     0x65726120    # at addr 0x188a8  " are"
.long     0x65727020    # at addr 0x188ac  " pre"
.long     0x76726573    # at addr 0x188b0  "serv"
.long     0x002e6465    # at addr 0x188b4  "ed.."
.long     0x68542023    # at addr 0x188b8  "# Th"
.long     0x656b2065    # at addr 0x188bc  "e ke"
.long     0x726f7779    # at addr 0x188c0  "ywor"
.long     0x43207364    # at addr 0x188c4  "ds C"
.long     0x524f4c4f    # at addr 0x188c8  "OLOR"
.long     0x504f202c    # at addr 0x188cc  ", OP"
.long     0x4e4f4954    # at addr 0x188d0  "TION"
.long     0x61202c53    # at addr 0x188d4  "S, a"
.long     0x4520646e    # at addr 0x188d8  "nd E"
.long     0x54484749    # at addr 0x188dc  "IGHT"
.long     0x20544942    # at addr 0x188e0  "BIT "
.long     0x6e6f6828    # at addr 0x188e4  "(hon"
.long     0x6465726f    # at addr 0x188e8  "ored"
.long     0x20796220    # at addr 0x188ec  " by "
.long     0x00656874    # at addr 0x188f0  "the."
.long     0x6c732023    # at addr 0x188f4  "# sl"
.long     0x776b6361    # at addr 0x188f8  "ackw"
.long     0x20657261    # at addr 0x188fc  "are "
.long     0x73726576    # at addr 0x18900  "vers"
.long     0x206e6f69    # at addr 0x18904  "ion "
.long     0x6420666f    # at addr 0x18908  "of d"
.long     0x6f637269    # at addr 0x1890c  "irco"
.long     0x73726f6c    # at addr 0x18910  "lors"
.long     0x72612029    # at addr 0x18914  ") ar"
.long     0x65722065    # at addr 0x18918  "e re"
.long     0x6e676f63    # at addr 0x1891c  "cogn"
.long     0x64657a69    # at addr 0x18920  "ized"
.long     0x74756220    # at addr 0x18924  " but"
.long     0x6e676920    # at addr 0x18928  " ign"
.long     0x6465726f    # at addr 0x1892c  "ored"
.long     0x2023002e    # at addr 0x18930  "..# "
.long     0x6f6c6542    # at addr 0x18934  "Belo"
.long     0x72612077    # at addr 0x18938  "w ar"
.long     0x45542065    # at addr 0x1893c  "e TE"
.long     0x65204d52    # at addr 0x18940  "RM e"
.long     0x6972746e    # at addr 0x18944  "ntri"
.long     0x202c7365    # at addr 0x18948  "es, "
.long     0x63696877    # at addr 0x1894c  "whic"
.long     0x61632068    # at addr 0x18950  "h ca"
.long     0x6562206e    # at addr 0x18954  "n be"
.long     0x67206120    # at addr 0x18958  " a g"
.long     0x20626f6c    # at addr 0x1895c  "lob "
.long     0x74746170    # at addr 0x18960  "patt"
.long     0x736e7265    # at addr 0x18964  "erns"
.long     0x6f74202c    # at addr 0x18968  ", to"
.long     0x74616d20    # at addr 0x1896c  " mat"
.long     0x23006863    # at addr 0x18970  "ch.#"
.long     0x61676120    # at addr 0x18974  " aga"
.long     0x74736e69    # at addr 0x18978  "inst"
.long     0x65687420    # at addr 0x1897c  " the"
.long     0x52455420    # at addr 0x18980  " TER"
.long     0x6e65204d    # at addr 0x18984  "M en"
.long     0x6f726976    # at addr 0x18988  "viro"
.long     0x6e656d6e    # at addr 0x1898c  "nmen"
.long     0x61762074    # at addr 0x18990  "t va"
.long     0x62616972    # at addr 0x18994  "riab"
.long     0x7420656c    # at addr 0x18998  "le t"
.long     0x6564206f    # at addr 0x1899c  "o de"
.long     0x6d726574    # at addr 0x189a0  "term"
.long     0x20656e69    # at addr 0x189a4  "ine "
.long     0x69206669    # at addr 0x189a8  "if i"
.long     0x73692074    # at addr 0x189ac  "t is"
.long     0x6c6f6320    # at addr 0x189b0  " col"
.long     0x7a69726f    # at addr 0x189b4  "oriz"
.long     0x656c6261    # at addr 0x189b8  "able"
.long     0x4554002e    # at addr 0x189bc  "..TE"
.long     0x45204d52    # at addr 0x189c0  "RM E"
.long     0x6d726574    # at addr 0x189c4  "term"
.long     0x52455400    # at addr 0x189c8  ".TER"
.long     0x6e61204d    # at addr 0x189cc  "M an"
.long     0x54006973    # at addr 0x189d0  "si.T"
.long     0x204d5245    # at addr 0x189d4  "ERM "
.long     0x6c6f632a    # at addr 0x189d8  "*col"
.long     0x002a726f    # at addr 0x189dc  "or*."
.long     0x4d524554    # at addr 0x189e0  "TERM"
.long     0x6e6f6320    # at addr 0x189e4  " con"
.long     0x392d305b    # at addr 0x189e8  "[0-9"
.long     0x5b782a5d    # at addr 0x189ec  "]*x["
.long     0x5d392d30    # at addr 0x189f0  "0-9]"
.long     0x4554002a    # at addr 0x189f4  "*.TE"
.long     0x63204d52    # at addr 0x189f8  "RM c"
.long     0x32736e6f    # at addr 0x189fc  "ons2"
.long     0x45540035    # at addr 0x18a00  "5.TE"
.long     0x63204d52    # at addr 0x18a04  "RM c"
.long     0x6f736e6f    # at addr 0x18a08  "onso"
.long     0x5400656c    # at addr 0x18a0c  "le.T"
.long     0x204d5245    # at addr 0x18a10  "ERM "
.long     0x77677963    # at addr 0x18a14  "cygw"
.long     0x54006e69    # at addr 0x18a18  "in.T"
.long     0x204d5245    # at addr 0x18a1c  "ERM "
.long     0x65747464    # at addr 0x18a20  "dtte"
.long     0x54006d72    # at addr 0x18a24  "rm.T"
.long     0x204d5245    # at addr 0x18a28  "ERM "
.long     0x6d6f6e67    # at addr 0x18a2c  "gnom"
.long     0x45540065    # at addr 0x18a30  "e.TE"
.long     0x68204d52    # at addr 0x18a34  "RM h"
.long     0x00647275    # at addr 0x18a38  "urd."
.long     0x4d524554    # at addr 0x18a3c  "TERM"
.long     0x62666a20    # at addr 0x18a40  " jfb"
.long     0x6d726574    # at addr 0x18a44  "term"
.long     0x52455400    # at addr 0x18a48  ".TER"
.long     0x6f6b204d    # at addr 0x18a4c  "M ko"
.long     0x6c6f736e    # at addr 0x18a50  "nsol"
.long     0x45540065    # at addr 0x18a54  "e.TE"
.long     0x6b204d52    # at addr 0x18a58  "RM k"
.long     0x6d726574    # at addr 0x18a5c  "term"
.long     0x52455400    # at addr 0x18a60  ".TER"
.long     0x696c204d    # at addr 0x18a64  "M li"
.long     0x0078756e    # at addr 0x18a68  "nux."
.long     0x4d524554    # at addr 0x18a6c  "TERM"
.long     0x6e696c20    # at addr 0x18a70  " lin"
.long     0x632d7875    # at addr 0x18a74  "ux-c"
.long     0x52455400    # at addr 0x18a78  ".TER"
.long     0x6c6d204d    # at addr 0x18a7c  "M ml"
.long     0x6d726574    # at addr 0x18a80  "term"
.long     0x52455400    # at addr 0x18a84  ".TER"
.long     0x7570204d    # at addr 0x18a88  "M pu"
.long     0x00797474    # at addr 0x18a8c  "tty."
.long     0x4d524554    # at addr 0x18a90  "TERM"
.long     0x76787220    # at addr 0x18a94  " rxv"
.long     0x54002a74    # at addr 0x18a98  "t*.T"
.long     0x204d5245    # at addr 0x18a9c  "ERM "
.long     0x65726373    # at addr 0x18aa0  "scre"
.long     0x002a6e65    # at addr 0x18aa4  "en*."
.long     0x4d524554    # at addr 0x18aa8  "TERM"
.long     0x00747320    # at addr 0x18aac  " st."
.long     0x4d524554    # at addr 0x18ab0  "TERM"
.long     0x72657420    # at addr 0x18ab4  " ter"
.long     0x616e696d    # at addr 0x18ab8  "mina"
.long     0x00726f74    # at addr 0x18abc  "tor."
.long     0x4d524554    # at addr 0x18ac0  "TERM"
.long     0x756d7420    # at addr 0x18ac4  " tmu"
.long     0x54002a78    # at addr 0x18ac8  "x*.T"
.long     0x204d5245    # at addr 0x18acc  "ERM "
.long     0x30317476    # at addr 0x18ad0  "vt10"
.long     0x45540030    # at addr 0x18ad4  "0.TE"
.long     0x78204d52    # at addr 0x18ad8  "RM x"
.long     0x6d726574    # at addr 0x18adc  "term"
.long     0x2023002a    # at addr 0x18ae0  "*.# "
.long     0x6f6c6542    # at addr 0x18ae4  "Belo"
.long     0x72612077    # at addr 0x18ae8  "w ar"
.long     0x68742065    # at addr 0x18aec  "e th"
.long     0x6f632065    # at addr 0x18af0  "e co"
.long     0x20726f6c    # at addr 0x18af4  "lor "
.long     0x74696e69    # at addr 0x18af8  "init"
.long     0x72747320    # at addr 0x18afc  " str"
.long     0x73676e69    # at addr 0x18b00  "ings"
.long     0x726f6620    # at addr 0x18b04  " for"
.long     0x65687420    # at addr 0x18b08  " the"
.long     0x73616220    # at addr 0x18b0c  " bas"
.long     0x66206369    # at addr 0x18b10  "ic f"
.long     0x20656c69    # at addr 0x18b14  "ile "
.long     0x65707974    # at addr 0x18b18  "type"
.long     0x41202e73    # at addr 0x18b1c  "s. A"
.long     0x6c6f6320    # at addr 0x18b20  " col"
.long     0x6920726f    # at addr 0x18b24  "or i"
.long     0x0074696e    # at addr 0x18b28  "nit."
.long     0x74732023    # at addr 0x18b2c  "# st"
.long     0x676e6972    # at addr 0x18b30  "ring"
.long     0x6e6f6320    # at addr 0x18b34  " con"
.long     0x74736973    # at addr 0x18b38  "sist"
.long     0x666f2073    # at addr 0x18b3c  "s of"
.long     0x656e6f20    # at addr 0x18b40  " one"
.long     0x20726f20    # at addr 0x18b44  " or "
.long     0x65726f6d    # at addr 0x18b48  "more"
.long     0x20666f20    # at addr 0x18b4c  " of "
.long     0x20656874    # at addr 0x18b50  "the "
.long     0x6c6c6f66    # at addr 0x18b54  "foll"
.long     0x6e69776f    # at addr 0x18b58  "owin"
.long     0x756e2067    # at addr 0x18b5c  "g nu"
.long     0x6972656d    # at addr 0x18b60  "meri"
.long     0x6f632063    # at addr 0x18b64  "c co"
.long     0x3a736564    # at addr 0x18b68  "des:"
.long     0x41202300    # at addr 0x18b6c  ".# A"
.long     0x69727474    # at addr 0x18b70  "ttri"
.long     0x65747562    # at addr 0x18b74  "bute"
.long     0x646f6320    # at addr 0x18b78  " cod"
.long     0x003a7365    # at addr 0x18b7c  "es:."
.long     0x30302023    # at addr 0x18b80  "# 00"
.long     0x6e6f6e3d    # at addr 0x18b84  "=non"
.long     0x31302065    # at addr 0x18b88  "e 01"
.long     0x6c6f623d    # at addr 0x18b8c  "=bol"
.long     0x34302064    # at addr 0x18b90  "d 04"
.long     0x646e753d    # at addr 0x18b94  "=und"
.long     0x63737265    # at addr 0x18b98  "ersc"
.long     0x2065726f    # at addr 0x18b9c  "ore "
.long     0x623d3530    # at addr 0x18ba0  "05=b"
.long     0x6b6e696c    # at addr 0x18ba4  "link"
.long     0x3d373020    # at addr 0x18ba8  " 07="
.long     0x65766572    # at addr 0x18bac  "reve"
.long     0x20657372    # at addr 0x18bb0  "rse "
.long     0x633d3830    # at addr 0x18bb4  "08=c"
.long     0x65636e6f    # at addr 0x18bb8  "once"
.long     0x64656c61    # at addr 0x18bbc  "aled"
.long     0x54202300    # at addr 0x18bc0  ".# T"
.long     0x20747865    # at addr 0x18bc4  "ext "
.long     0x6f6c6f63    # at addr 0x18bc8  "colo"
.long     0x6f632072    # at addr 0x18bcc  "r co"
.long     0x3a736564    # at addr 0x18bd0  "des:"
.long     0x33202300    # at addr 0x18bd4  ".# 3"
.long     0x6c623d30    # at addr 0x18bd8  "0=bl"
.long     0x206b6361    # at addr 0x18bdc  "ack "
.long     0x723d3133    # at addr 0x18be0  "31=r"
.long     0x33206465    # at addr 0x18be4  "ed 3"
.long     0x72673d32    # at addr 0x18be8  "2=gr"
.long     0x206e6565    # at addr 0x18bec  "een "
.long     0x793d3333    # at addr 0x18bf0  "33=y"
.long     0x6f6c6c65    # at addr 0x18bf4  "ello"
.long     0x34332077    # at addr 0x18bf8  "w 34"
.long     0x756c623d    # at addr 0x18bfc  "=blu"
.long     0x35332065    # at addr 0x18c00  "e 35"
.long     0x67616d3d    # at addr 0x18c04  "=mag"
.long     0x61746e65    # at addr 0x18c08  "enta"
.long     0x3d363320    # at addr 0x18c0c  " 36="
.long     0x6e617963    # at addr 0x18c10  "cyan"
.long     0x3d373320    # at addr 0x18c14  " 37="
.long     0x74696877    # at addr 0x18c18  "whit"
.long     0x20230065    # at addr 0x18c1c  "e.# "
.long     0x6b636142    # at addr 0x18c20  "Back"
.long     0x756f7267    # at addr 0x18c24  "grou"
.long     0x6320646e    # at addr 0x18c28  "nd c"
.long     0x726f6c6f    # at addr 0x18c2c  "olor"
.long     0x646f6320    # at addr 0x18c30  " cod"
.long     0x003a7365    # at addr 0x18c34  "es:."
.long     0x30342023    # at addr 0x18c38  "# 40"
.long     0x616c623d    # at addr 0x18c3c  "=bla"
.long     0x34206b63    # at addr 0x18c40  "ck 4"
.long     0x65723d31    # at addr 0x18c44  "1=re"
.long     0x32342064    # at addr 0x18c48  "d 42"
.long     0x6572673d    # at addr 0x18c4c  "=gre"
.long     0x34206e65    # at addr 0x18c50  "en 4"
.long     0x65793d33    # at addr 0x18c54  "3=ye"
.long     0x776f6c6c    # at addr 0x18c58  "llow"
.long     0x3d343420    # at addr 0x18c5c  " 44="
.long     0x65756c62    # at addr 0x18c60  "blue"
.long     0x3d353420    # at addr 0x18c64  " 45="
.long     0x6567616d    # at addr 0x18c68  "mage"
.long     0x2061746e    # at addr 0x18c6c  "nta "
.long     0x633d3634    # at addr 0x18c70  "46=c"
.long     0x206e6179    # at addr 0x18c74  "yan "
.long     0x773d3734    # at addr 0x18c78  "47=w"
.long     0x65746968    # at addr 0x18c7c  "hite"
.long     0x4f4e2300    # at addr 0x18c80  ".#NO"
.long     0x4c414d52    # at addr 0x18c84  "RMAL"
.long     0x20303020    # at addr 0x18c88  " 00 "
.long     0x6f6e2023    # at addr 0x18c8c  "# no"
.long     0x6c6f6320    # at addr 0x18c90  " col"
.long     0x6320726f    # at addr 0x18c94  "or c"
.long     0x2065646f    # at addr 0x18c98  "ode "
.long     0x61207461    # at addr 0x18c9c  "at a"
.long     0x23006c6c    # at addr 0x18ca0  "ll.#"
.long     0x454c4946    # at addr 0x18ca4  "FILE"
.long     0x20303020    # at addr 0x18ca8  " 00 "
.long     0x65722023    # at addr 0x18cac  "# re"
.long     0x616c7567    # at addr 0x18cb0  "gula"
.long     0x69662072    # at addr 0x18cb4  "r fi"
.long     0x203a656c    # at addr 0x18cb8  "le: "
.long     0x20657375    # at addr 0x18cbc  "use "
.long     0x63206f6e    # at addr 0x18cc0  "no c"
.long     0x726f6c6f    # at addr 0x18cc4  "olor"
.long     0x20746120    # at addr 0x18cc8  " at "
.long     0x006c6c61    # at addr 0x18ccc  "all."
.long     0x45534552    # at addr 0x18cd0  "RESE"
.long     0x20302054    # at addr 0x18cd4  "T 0 "
.long     0x65722023    # at addr 0x18cd8  "# re"
.long     0x20746573    # at addr 0x18cdc  "set "
.long     0x22206f74    # at addr 0x18ce0  "to ""
.long     0x6d726f6e    # at addr 0x18ce4  "norm"
.long     0x20226c61    # at addr 0x18ce8  "al" "
.long     0x6f6c6f63    # at addr 0x18cec  "colo"
.long     0x49440072    # at addr 0x18cf0  "r.DI"
.long     0x31302052    # at addr 0x18cf4  "R 01"
.long     0x2034333b    # at addr 0x18cf8  ";34 "
.long     0x69642023    # at addr 0x18cfc  "# di"
.long     0x74636572    # at addr 0x18d00  "rect"
.long     0x0079726f    # at addr 0x18d04  "ory."
.long     0x4b4e494c    # at addr 0x18d08  "LINK"
.long     0x3b313020    # at addr 0x18d0c  " 01;"
.long     0x23203633    # at addr 0x18d10  "36 #"
.long     0x6d797320    # at addr 0x18d14  " sym"
.long     0x696c6f62    # at addr 0x18d18  "boli"
.long     0x696c2063    # at addr 0x18d1c  "c li"
.long     0x202e6b6e    # at addr 0x18d20  "nk. "
.long     0x20664928    # at addr 0x18d24  "(If "
.long     0x20756f79    # at addr 0x18d28  "you "
.long     0x20746573    # at addr 0x18d2c  "set "
.long     0x73696874    # at addr 0x18d30  "this"
.long     0x206f7420    # at addr 0x18d34  " to "
.long     0x72617427    # at addr 0x18d38  "'tar"
.long     0x27746567    # at addr 0x18d3c  "get'"
.long     0x736e6920    # at addr 0x18d40  " ins"
.long     0x64616574    # at addr 0x18d44  "tead"
.long     0x20666f20    # at addr 0x18d48  " of "
.long     0x23200061    # at addr 0x18d4c  "a. #"
.long     0x6d756e20    # at addr 0x18d50  " num"
.long     0x63697265    # at addr 0x18d54  "eric"
.long     0x76206c61    # at addr 0x18d58  "al v"
.long     0x65756c61    # at addr 0x18d5c  "alue"
.long     0x6874202c    # at addr 0x18d60  ", th"
.long     0x6f632065    # at addr 0x18d64  "e co"
.long     0x20726f6c    # at addr 0x18d68  "lor "
.long     0x61207369    # at addr 0x18d6c  "is a"
.long     0x6f662073    # at addr 0x18d70  "s fo"
.long     0x68742072    # at addr 0x18d74  "r th"
.long     0x69662065    # at addr 0x18d78  "e fi"
.long     0x7020656c    # at addr 0x18d7c  "le p"
.long     0x746e696f    # at addr 0x18d80  "oint"
.long     0x74206465    # at addr 0x18d84  "ed t"
.long     0x00292e6f    # at addr 0x18d88  "o.)."
.long     0x544c554d    # at addr 0x18d8c  "MULT"
.long     0x52414849    # at addr 0x18d90  "IHAR"
.long     0x4e494c44    # at addr 0x18d94  "DLIN"
.long     0x3030204b    # at addr 0x18d98  "K 00"
.long     0x72202320    # at addr 0x18d9c  " # r"
.long     0x6c756765    # at addr 0x18da0  "egul"
.long     0x66207261    # at addr 0x18da4  "ar f"
.long     0x20656c69    # at addr 0x18da8  "ile "
.long     0x68746977    # at addr 0x18dac  "with"
.long     0x726f6d20    # at addr 0x18db0  " mor"
.long     0x68742065    # at addr 0x18db4  "e th"
.long     0x6f206e61    # at addr 0x18db8  "an o"
.long     0x6c20656e    # at addr 0x18dbc  "ne l"
.long     0x006b6e69    # at addr 0x18dc0  "ink."
.long     0x4f464946    # at addr 0x18dc4  "FIFO"
.long     0x3b303420    # at addr 0x18dc8  " 40;"
.long     0x23203333    # at addr 0x18dcc  "33 #"
.long     0x70697020    # at addr 0x18dd0  " pip"
.long     0x4f530065    # at addr 0x18dd4  "e.SO"
.long     0x30204b43    # at addr 0x18dd8  "CK 0"
.long     0x35333b31    # at addr 0x18ddc  "1;35"
.long     0x73202320    # at addr 0x18de0  " # s"
.long     0x656b636f    # at addr 0x18de4  "ocke"
.long     0x4f440074    # at addr 0x18de8  "t.DO"
.long     0x3020524f    # at addr 0x18dec  "OR 0"
.long     0x35333b31    # at addr 0x18df0  "1;35"
.long     0x64202320    # at addr 0x18df4  " # d"
.long     0x00726f6f    # at addr 0x18df8  "oor."
.long     0x204b4c42    # at addr 0x18dfc  "BLK "
.long     0x333b3034    # at addr 0x18e00  "40;3"
.long     0x31303b33    # at addr 0x18e04  "3;01"
.long     0x62202320    # at addr 0x18e08  " # b"
.long     0x6b636f6c    # at addr 0x18e0c  "lock"
.long     0x76656420    # at addr 0x18e10  " dev"
.long     0x20656369    # at addr 0x18e14  "ice "
.long     0x76697264    # at addr 0x18e18  "driv"
.long     0x43007265    # at addr 0x18e1c  "er.C"
.long     0x34205248    # at addr 0x18e20  "HR 4"
.long     0x33333b30    # at addr 0x18e24  "0;33"
.long     0x2031303b    # at addr 0x18e28  ";01 "
.long     0x68632023    # at addr 0x18e2c  "# ch"
.long     0x63617261    # at addr 0x18e30  "arac"
.long     0x20726574    # at addr 0x18e34  "ter "
.long     0x69766564    # at addr 0x18e38  "devi"
.long     0x64206563    # at addr 0x18e3c  "ce d"
.long     0x65766972    # at addr 0x18e40  "rive"
.long     0x524f0072    # at addr 0x18e44  "r.OR"
.long     0x4e414850    # at addr 0x18e48  "PHAN"
.long     0x3b303420    # at addr 0x18e4c  " 40;"
.long     0x303b3133    # at addr 0x18e50  "31;0"
.long     0x20232031    # at addr 0x18e54  "1 # "
.long     0x6c6d7973    # at addr 0x18e58  "syml"
.long     0x206b6e69    # at addr 0x18e5c  "ink "
.long     0x6e206f74    # at addr 0x18e60  "to n"
.long     0x78656e6f    # at addr 0x18e64  "onex"
.long     0x65747369    # at addr 0x18e68  "iste"
.long     0x6620746e    # at addr 0x18e6c  "nt f"
.long     0x2c656c69    # at addr 0x18e70  "ile,"
.long     0x20726f20    # at addr 0x18e74  " or "
.long     0x2d6e6f6e    # at addr 0x18e78  "non-"
.long     0x74617473    # at addr 0x18e7c  "stat"
.long     0x6c626127    # at addr 0x18e80  "'abl"
.long     0x69662065    # at addr 0x18e84  "e fi"
.long     0x2e20656c    # at addr 0x18e88  "le ."
.long     0x4d002e2e    # at addr 0x18e8c  "...M"
.long     0x49535349    # at addr 0x18e90  "ISSI"
.long     0x3020474e    # at addr 0x18e94  "NG 0"
.long     0x20232030    # at addr 0x18e98  "0 # "
.long     0x202e2e2e    # at addr 0x18e9c  "... "
.long     0x20646e61    # at addr 0x18ea0  "and "
.long     0x20656874    # at addr 0x18ea4  "the "
.long     0x656c6966    # at addr 0x18ea8  "file"
.long     0x68742073    # at addr 0x18eac  "s th"
.long     0x70207965    # at addr 0x18eb0  "ey p"
.long     0x746e696f    # at addr 0x18eb4  "oint"
.long     0x006f7420    # at addr 0x18eb8  " to."
.long     0x55544553    # at addr 0x18ebc  "SETU"
.long     0x33204449    # at addr 0x18ec0  "ID 3"
.long     0x31343b37    # at addr 0x18ec4  "7;41"
.long     0x66202320    # at addr 0x18ec8  " # f"
.long     0x20656c69    # at addr 0x18ecc  "ile "
.long     0x74616874    # at addr 0x18ed0  "that"
.long     0x20736920    # at addr 0x18ed4  " is "
.long     0x75746573    # at addr 0x18ed8  "setu"
.long     0x28206469    # at addr 0x18edc  "id ("
.long     0x29732b75    # at addr 0x18ee0  "u+s)"
.long     0x54455300    # at addr 0x18ee4  ".SET"
.long     0x20444947    # at addr 0x18ee8  "GID "
.long     0x343b3033    # at addr 0x18eec  "30;4"
.long     0x20232033    # at addr 0x18ef0  "3 # "
.long     0x656c6966    # at addr 0x18ef4  "file"
.long     0x61687420    # at addr 0x18ef8  " tha"
.long     0x73692074    # at addr 0x18efc  "t is"
.long     0x74657320    # at addr 0x18f00  " set"
.long     0x20646967    # at addr 0x18f04  "gid "
.long     0x732b6728    # at addr 0x18f08  "(g+s"
.long     0x41430029    # at addr 0x18f0c  ").CA"
.long     0x49424150    # at addr 0x18f10  "PABI"
.long     0x5954494c    # at addr 0x18f14  "LITY"
.long     0x3b303320    # at addr 0x18f18  " 30;"
.long     0x23203134    # at addr 0x18f1c  "41 #"
.long     0x6c696620    # at addr 0x18f20  " fil"
.long     0x69772065    # at addr 0x18f24  "e wi"
.long     0x63206874    # at addr 0x18f28  "th c"
.long     0x62617061    # at addr 0x18f2c  "apab"
.long     0x74696c69    # at addr 0x18f30  "ilit"
.long     0x54530079    # at addr 0x18f34  "y.ST"
.long     0x594b4349    # at addr 0x18f38  "ICKY"
.long     0x48544f5f    # at addr 0x18f3c  "_OTH"
.long     0x575f5245    # at addr 0x18f40  "ER_W"
.long     0x41544952    # at addr 0x18f44  "RITA"
.long     0x20454c42    # at addr 0x18f48  "BLE "
.long     0x343b3033    # at addr 0x18f4c  "30;4"
.long     0x20232032    # at addr 0x18f50  "2 # "
.long     0x20726964    # at addr 0x18f54  "dir "
.long     0x74616874    # at addr 0x18f58  "that"
.long     0x20736920    # at addr 0x18f5c  " is "
.long     0x63697473    # at addr 0x18f60  "stic"
.long     0x6120796b    # at addr 0x18f64  "ky a"
.long     0x6f20646e    # at addr 0x18f68  "nd o"
.long     0x72656874    # at addr 0x18f6c  "ther"
.long     0x6972772d    # at addr 0x18f70  "-wri"
.long     0x6c626174    # at addr 0x18f74  "tabl"
.long     0x2b282065    # at addr 0x18f78  "e (+"
.long     0x2b6f2c74    # at addr 0x18f7c  "t,o+"
.long     0x4f002977    # at addr 0x18f80  "w).O"
.long     0x52454854    # at addr 0x18f84  "THER"
.long     0x4952575f    # at addr 0x18f88  "_WRI"
.long     0x4c424154    # at addr 0x18f8c  "TABL"
.long     0x34332045    # at addr 0x18f90  "E 34"
.long     0x2032343b    # at addr 0x18f94  ";42 "
.long     0x69642023    # at addr 0x18f98  "# di"
.long     0x68742072    # at addr 0x18f9c  "r th"
.long     0x69207461    # at addr 0x18fa0  "at i"
.long     0x746f2073    # at addr 0x18fa4  "s ot"
.long     0x2d726568    # at addr 0x18fa8  "her-"
.long     0x74697277    # at addr 0x18fac  "writ"
.long     0x656c6261    # at addr 0x18fb0  "able"
.long     0x2b6f2820    # at addr 0x18fb4  " (o+"
.long     0x61202977    # at addr 0x18fb8  "w) a"
.long     0x6e20646e    # at addr 0x18fbc  "nd n"
.long     0x7320746f    # at addr 0x18fc0  "ot s"
.long     0x6b636974    # at addr 0x18fc4  "tick"
.long     0x54530079    # at addr 0x18fc8  "y.ST"
.long     0x594b4349    # at addr 0x18fcc  "ICKY"
.long     0x3b373320    # at addr 0x18fd0  " 37;"
.long     0x23203434    # at addr 0x18fd4  "44 #"
.long     0x72696420    # at addr 0x18fd8  " dir"
.long     0x74697720    # at addr 0x18fdc  " wit"
.long     0x68742068    # at addr 0x18fe0  "h th"
.long     0x74732065    # at addr 0x18fe4  "e st"
.long     0x796b6369    # at addr 0x18fe8  "icky"
.long     0x74696220    # at addr 0x18fec  " bit"
.long     0x74657320    # at addr 0x18ff0  " set"
.long     0x742b2820    # at addr 0x18ff4  " (+t"
.long     0x6e612029    # at addr 0x18ff8  ") an"
.long     0x6f6e2064    # at addr 0x18ffc  "d no"
.long     0x746f2074    # at addr 0x19000  "t ot"
.long     0x2d726568    # at addr 0x19004  "her-"
.long     0x74697277    # at addr 0x19008  "writ"
.long     0x656c6261    # at addr 0x1900c  "able"
.long     0x54202300    # at addr 0x19010  ".# T"
.long     0x20736968    # at addr 0x19014  "his "
.long     0x66207369    # at addr 0x19018  "is f"
.long     0x6620726f    # at addr 0x1901c  "or f"
.long     0x73656c69    # at addr 0x19020  "iles"
.long     0x74697720    # at addr 0x19024  " wit"
.long     0x78652068    # at addr 0x19028  "h ex"
.long     0x74756365    # at addr 0x1902c  "ecut"
.long     0x65702065    # at addr 0x19030  "e pe"
.long     0x73696d72    # at addr 0x19034  "rmis"
.long     0x6e6f6973    # at addr 0x19038  "sion"
.long     0x5845003a    # at addr 0x1903c  ":.EX"
.long     0x30204345    # at addr 0x19040  "EC 0"
.long     0x32333b31    # at addr 0x19044  "1;32"
.long     0x4c202300    # at addr 0x19048  ".# L"
.long     0x20747369    # at addr 0x1904c  "ist "
.long     0x20796e61    # at addr 0x19050  "any "
.long     0x656c6966    # at addr 0x19054  "file"
.long     0x74786520    # at addr 0x19058  " ext"
.long     0x69736e65    # at addr 0x1905c  "ensi"
.long     0x20736e6f    # at addr 0x19060  "ons "
.long     0x656b696c    # at addr 0x19064  "like"
.long     0x672e2720    # at addr 0x19068  " '.g"
.long     0x6f20277a    # at addr 0x1906c  "z' o"
.long     0x2e272072    # at addr 0x19070  "r '."
.long     0x27726174    # at addr 0x19074  "tar'"
.long     0x61687420    # at addr 0x19078  " tha"
.long     0x6f792074    # at addr 0x1907c  "t yo"
.long     0x6f772075    # at addr 0x19080  "u wo"
.long     0x20646c75    # at addr 0x19084  "uld "
.long     0x656b696c    # at addr 0x19088  "like"
.long     0x00736c20    # at addr 0x1908c  " ls."
.long     0x6f742023    # at addr 0x19090  "# to"
.long     0x6c6f6320    # at addr 0x19094  " col"
.long     0x7a69726f    # at addr 0x19098  "oriz"
.long     0x65622065    # at addr 0x1909c  "e be"
.long     0x2e776f6c    # at addr 0x190a0  "low."
.long     0x74755020    # at addr 0x190a4  " Put"
.long     0x65687420    # at addr 0x190a8  " the"
.long     0x74786520    # at addr 0x190ac  " ext"
.long     0x69736e65    # at addr 0x190b0  "ensi"
.long     0x202c6e6f    # at addr 0x190b4  "on, "
.long     0x70732061    # at addr 0x190b8  "a sp"
.long     0x2c656361    # at addr 0x190bc  "ace,"
.long     0x646e6120    # at addr 0x190c0  " and"
.long     0x65687420    # at addr 0x190c4  " the"
.long     0x6c6f6320    # at addr 0x190c8  " col"
.long     0x6920726f    # at addr 0x190cc  "or i"
.long     0x2074696e    # at addr 0x190d0  "nit "
.long     0x69727473    # at addr 0x190d4  "stri"
.long     0x002e676e    # at addr 0x190d8  "ng.."
.long     0x61282023    # at addr 0x190dc  "# (a"
.long     0x6120646e    # at addr 0x190e0  "nd a"
.long     0x6320796e    # at addr 0x190e4  "ny c"
.long     0x656d6d6f    # at addr 0x190e8  "omme"
.long     0x2073746e    # at addr 0x190ec  "nts "
.long     0x20756f79    # at addr 0x190f0  "you "
.long     0x746e6177    # at addr 0x190f4  "want"
.long     0x206f7420    # at addr 0x190f8  " to "
.long     0x20646461    # at addr 0x190fc  "add "
.long     0x65746661    # at addr 0x19100  "afte"
.long     0x20612072    # at addr 0x19104  "r a "
.long     0x29272327    # at addr 0x19108  "'#')"
.long     0x49202300    # at addr 0x1910c  ".# I"
.long     0x6f792066    # at addr 0x19110  "f yo"
.long     0x73752075    # at addr 0x19114  "u us"
.long     0x4f442065    # at addr 0x19118  "e DO"
.long     0x74732d53    # at addr 0x1911c  "S-st"
.long     0x20656c79    # at addr 0x19120  "yle "
.long     0x66667573    # at addr 0x19124  "suff"
.long     0x73657869    # at addr 0x19128  "ixes"
.long     0x6f79202c    # at addr 0x1912c  ", yo"
.long     0x616d2075    # at addr 0x19130  "u ma"
.long     0x61772079    # at addr 0x19134  "y wa"
.long     0x7420746e    # at addr 0x19138  "nt t"
.long     0x6e75206f    # at addr 0x1913c  "o un"
.long     0x6d6d6f63    # at addr 0x19140  "comm"
.long     0x20746e65    # at addr 0x19144  "ent "
.long     0x20656874    # at addr 0x19148  "the "
.long     0x6c6c6f66    # at addr 0x1914c  "foll"
.long     0x6e69776f    # at addr 0x19150  "owin"
.long     0x23003a67    # at addr 0x19154  "g:.#"
.long     0x646d632e    # at addr 0x19158  ".cmd"
.long     0x3b313020    # at addr 0x1915c  " 01;"
.long     0x23203233    # at addr 0x19160  "32 #"
.long     0x65786520    # at addr 0x19164  " exe"
.long     0x61747563    # at addr 0x19168  "cuta"
.long     0x73656c62    # at addr 0x1916c  "bles"
.long     0x72622820    # at addr 0x19170  " (br"
.long     0x74686769    # at addr 0x19174  "ight"
.long     0x65726720    # at addr 0x19178  " gre"
.long     0x00296e65    # at addr 0x1917c  "en)."
.long     0x78652e23    # at addr 0x19180  "#.ex"
.long     0x31302065    # at addr 0x19184  "e 01"
.long     0x0032333b    # at addr 0x19188  ";32."
.long     0x6f632e23    # at addr 0x1918c  "#.co"
.long     0x3130206d    # at addr 0x19190  "m 01"
.long     0x0032333b    # at addr 0x19194  ";32."
.long     0x74622e23    # at addr 0x19198  "#.bt"
.long     0x3130206d    # at addr 0x1919c  "m 01"
.long     0x0032333b    # at addr 0x191a0  ";32."
.long     0x61622e23    # at addr 0x191a4  "#.ba"
.long     0x31302074    # at addr 0x191a8  "t 01"
.long     0x0032333b    # at addr 0x191ac  ";32."
.long     0x724f2023    # at addr 0x191b0  "# Or"
.long     0x20666920    # at addr 0x191b4  " if "
.long     0x20756f79    # at addr 0x191b8  "you "
.long     0x746e6177    # at addr 0x191bc  "want"
.long     0x206f7420    # at addr 0x191c0  " to "
.long     0x6f6c6f63    # at addr 0x191c4  "colo"
.long     0x657a6972    # at addr 0x191c8  "rize"
.long     0x72637320    # at addr 0x191cc  " scr"
.long     0x73747069    # at addr 0x191d0  "ipts"
.long     0x65766520    # at addr 0x191d4  " eve"
.long     0x6669206e    # at addr 0x191d8  "n if"
.long     0x65687420    # at addr 0x191dc  " the"
.long     0x6f642079    # at addr 0x191e0  "y do"
.long     0x746f6e20    # at addr 0x191e4  " not"
.long     0x76616820    # at addr 0x191e8  " hav"
.long     0x68742065    # at addr 0x191ec  "e th"
.long     0x20230065    # at addr 0x191f0  "e.# "
.long     0x63657865    # at addr 0x191f4  "exec"
.long     0x62617475    # at addr 0x191f8  "utab"
.long     0x6220656c    # at addr 0x191fc  "le b"
.long     0x61207469    # at addr 0x19200  "it a"
.long     0x61757463    # at addr 0x19204  "ctua"
.long     0x20796c6c    # at addr 0x19208  "lly "
.long     0x2e746573    # at addr 0x1920c  "set."
.long     0x732e2300    # at addr 0x19210  ".#.s"
.long     0x31302068    # at addr 0x19214  "h 01"
.long     0x0032333b    # at addr 0x19218  ";32."
.long     0x73632e23    # at addr 0x1921c  "#.cs"
.long     0x31302068    # at addr 0x19220  "h 01"
.long     0x0032333b    # at addr 0x19224  ";32."
.long     0x61202320    # at addr 0x19228  " # a"
.long     0x69686372    # at addr 0x1922c  "rchi"
.long     0x20736576    # at addr 0x19230  "ves "
.long     0x6320726f    # at addr 0x19234  "or c"
.long     0x72706d6f    # at addr 0x19238  "ompr"
.long     0x65737365    # at addr 0x1923c  "esse"
.long     0x62282064    # at addr 0x19240  "d (b"
.long     0x68676972    # at addr 0x19244  "righ"
.long     0x65722074    # at addr 0x19248  "t re"
.long     0x2e002964    # at addr 0x1924c  "d).."
.long     0x20726174    # at addr 0x19250  "tar "
.long     0x333b3130    # at addr 0x19254  "01;3"
.long     0x742e0031    # at addr 0x19258  "1..t"
.long     0x30207a67    # at addr 0x1925c  "gz 0"
.long     0x31333b31    # at addr 0x19260  "1;31"
.long     0x72612e00    # at addr 0x19264  "..ar"
.long     0x31302063    # at addr 0x19268  "c 01"
.long     0x0031333b    # at addr 0x1926c  ";31."
.long     0x6a72612e    # at addr 0x19270  ".arj"
.long     0x3b313020    # at addr 0x19274  " 01;"
.long     0x2e003133    # at addr 0x19278  "31.."
.long     0x207a6174    # at addr 0x1927c  "taz "
.long     0x333b3130    # at addr 0x19280  "01;3"
.long     0x6c2e0031    # at addr 0x19284  "1..l"
.long     0x30206168    # at addr 0x19288  "ha 0"
.long     0x31333b31    # at addr 0x1928c  "1;31"
.long     0x7a6c2e00    # at addr 0x19290  "..lz"
.long     0x31302034    # at addr 0x19294  "4 01"
.long     0x0031333b    # at addr 0x19298  ";31."
.long     0x687a6c2e    # at addr 0x1929c  ".lzh"
.long     0x3b313020    # at addr 0x192a0  " 01;"
.long     0x2e003133    # at addr 0x192a4  "31.."
.long     0x616d7a6c    # at addr 0x192a8  "lzma"
.long     0x3b313020    # at addr 0x192ac  " 01;"
.long     0x2e003133    # at addr 0x192b0  "31.."
.long     0x207a6c74    # at addr 0x192b4  "tlz "
.long     0x333b3130    # at addr 0x192b8  "01;3"
.long     0x742e0031    # at addr 0x192bc  "1..t"
.long     0x30207a78    # at addr 0x192c0  "xz 0"
.long     0x31333b31    # at addr 0x192c4  "1;31"
.long     0x7a742e00    # at addr 0x192c8  "..tz"
.long     0x3130206f    # at addr 0x192cc  "o 01"
.long     0x0031333b    # at addr 0x192d0  ";31."
.long     0x7a37742e    # at addr 0x192d4  ".t7z"
.long     0x3b313020    # at addr 0x192d8  " 01;"
.long     0x2e003133    # at addr 0x192dc  "31.."
.long     0x2070697a    # at addr 0x192e0  "zip "
.long     0x333b3130    # at addr 0x192e4  "01;3"
.long     0x7a2e0031    # at addr 0x192e8  "1..z"
.long     0x3b313020    # at addr 0x192ec  " 01;"
.long     0x2e003133    # at addr 0x192f0  "31.."
.long     0x30207a64    # at addr 0x192f4  "dz 0"
.long     0x31333b31    # at addr 0x192f8  "1;31"
.long     0x7a672e00    # at addr 0x192fc  "..gz"
.long     0x3b313020    # at addr 0x19300  " 01;"
.long     0x2e003133    # at addr 0x19304  "31.."
.long     0x207a726c    # at addr 0x19308  "lrz "
.long     0x333b3130    # at addr 0x1930c  "01;3"
.long     0x6c2e0031    # at addr 0x19310  "1..l"
.long     0x3130207a    # at addr 0x19314  "z 01"
.long     0x0031333b    # at addr 0x19318  ";31."
.long     0x6f7a6c2e    # at addr 0x1931c  ".lzo"
.long     0x3b313020    # at addr 0x19320  " 01;"
.long     0x2e003133    # at addr 0x19324  "31.."
.long     0x30207a78    # at addr 0x19328  "xz 0"
.long     0x31333b31    # at addr 0x1932c  "1;31"
.long     0x737a2e00    # at addr 0x19330  "..zs"
.long     0x31302074    # at addr 0x19334  "t 01"
.long     0x0031333b    # at addr 0x19338  ";31."
.long     0x737a742e    # at addr 0x1933c  ".tzs"
.long     0x31302074    # at addr 0x19340  "t 01"
.long     0x0031333b    # at addr 0x19344  ";31."
.long     0x327a622e    # at addr 0x19348  ".bz2"
.long     0x3b313020    # at addr 0x1934c  " 01;"
.long     0x2e003133    # at addr 0x19350  "31.."
.long     0x30207a62    # at addr 0x19354  "bz 0"
.long     0x31333b31    # at addr 0x19358  "1;31"
.long     0x62742e00    # at addr 0x1935c  "..tb"
.long     0x3130207a    # at addr 0x19360  "z 01"
.long     0x0031333b    # at addr 0x19364  ";31."
.long     0x7a62742e    # at addr 0x19368  ".tbz"
.long     0x31302032    # at addr 0x1936c  "2 01"
.long     0x0031333b    # at addr 0x19370  ";31."
.long     0x207a742e    # at addr 0x19374  ".tz "
.long     0x333b3130    # at addr 0x19378  "01;3"
.long     0x642e0031    # at addr 0x1937c  "1..d"
.long     0x30206265    # at addr 0x19380  "eb 0"
.long     0x31333b31    # at addr 0x19384  "1;31"
.long     0x70722e00    # at addr 0x19388  "..rp"
.long     0x3130206d    # at addr 0x1938c  "m 01"
.long     0x0031333b    # at addr 0x19390  ";31."
.long     0x72616a2e    # at addr 0x19394  ".jar"
.long     0x3b313020    # at addr 0x19398  " 01;"
.long     0x2e003133    # at addr 0x1939c  "31.."
.long     0x20726177    # at addr 0x193a0  "war "
.long     0x333b3130    # at addr 0x193a4  "01;3"
.long     0x652e0031    # at addr 0x193a8  "1..e"
.long     0x30207261    # at addr 0x193ac  "ar 0"
.long     0x31333b31    # at addr 0x193b0  "1;31"
.long     0x61732e00    # at addr 0x193b4  "..sa"
.long     0x31302072    # at addr 0x193b8  "r 01"
.long     0x0031333b    # at addr 0x193bc  ";31."
.long     0x7261722e    # at addr 0x193c0  ".rar"
.long     0x3b313020    # at addr 0x193c4  " 01;"
.long     0x2e003133    # at addr 0x193c8  "31.."
.long     0x207a6c61    # at addr 0x193cc  "alz "
.long     0x333b3130    # at addr 0x193d0  "01;3"
.long     0x612e0031    # at addr 0x193d4  "1..a"
.long     0x30206563    # at addr 0x193d8  "ce 0"
.long     0x31333b31    # at addr 0x193dc  "1;31"
.long     0x6f7a2e00    # at addr 0x193e0  "..zo"
.long     0x3130206f    # at addr 0x193e4  "o 01"
.long     0x0031333b    # at addr 0x193e8  ";31."
.long     0x6970632e    # at addr 0x193ec  ".cpi"
.long     0x3130206f    # at addr 0x193f0  "o 01"
.long     0x0031333b    # at addr 0x193f4  ";31."
.long     0x207a372e    # at addr 0x193f8  ".7z "
.long     0x333b3130    # at addr 0x193fc  "01;3"
.long     0x722e0031    # at addr 0x19400  "1..r"
.long     0x3130207a    # at addr 0x19404  "z 01"
.long     0x0031333b    # at addr 0x19408  ";31."
.long     0x6261632e    # at addr 0x1940c  ".cab"
.long     0x3b313020    # at addr 0x19410  " 01;"
.long     0x2e003133    # at addr 0x19414  "31.."
.long     0x206d6977    # at addr 0x19418  "wim "
.long     0x333b3130    # at addr 0x1941c  "01;3"
.long     0x732e0031    # at addr 0x19420  "1..s"
.long     0x30206d77    # at addr 0x19424  "wm 0"
.long     0x31333b31    # at addr 0x19428  "1;31"
.long     0x77642e00    # at addr 0x1942c  "..dw"
.long     0x3130206d    # at addr 0x19430  "m 01"
.long     0x0031333b    # at addr 0x19434  ";31."
.long     0x6473652e    # at addr 0x19438  ".esd"
.long     0x3b313020    # at addr 0x1943c  " 01;"
.long     0x23003133    # at addr 0x19440  "31.#"
.long     0x616d6920    # at addr 0x19444  " ima"
.long     0x66206567    # at addr 0x19448  "ge f"
.long     0x616d726f    # at addr 0x1944c  "orma"
.long     0x2e007374    # at addr 0x19450  "ts.."
.long     0x2067706a    # at addr 0x19454  "jpg "
.long     0x333b3130    # at addr 0x19458  "01;3"
.long     0x6a2e0035    # at addr 0x1945c  "5..j"
.long     0x20676570    # at addr 0x19460  "peg "
.long     0x333b3130    # at addr 0x19464  "01;3"
.long     0x6d2e0035    # at addr 0x19468  "5..m"
.long     0x2067706a    # at addr 0x1946c  "jpg "
.long     0x333b3130    # at addr 0x19470  "01;3"
.long     0x6d2e0035    # at addr 0x19474  "5..m"
.long     0x6765706a    # at addr 0x19478  "jpeg"
.long     0x3b313020    # at addr 0x1947c  " 01;"
.long     0x2e003533    # at addr 0x19480  "35.."
.long     0x20666967    # at addr 0x19484  "gif "
.long     0x333b3130    # at addr 0x19488  "01;3"
.long     0x622e0035    # at addr 0x1948c  "5..b"
.long     0x3020706d    # at addr 0x19490  "mp 0"
.long     0x35333b31    # at addr 0x19494  "1;35"
.long     0x62702e00    # at addr 0x19498  "..pb"
.long     0x3130206d    # at addr 0x1949c  "m 01"
.long     0x0035333b    # at addr 0x194a0  ";35."
.long     0x6d67702e    # at addr 0x194a4  ".pgm"
.long     0x3b313020    # at addr 0x194a8  " 01;"
.long     0x2e003533    # at addr 0x194ac  "35.."
.long     0x206d7070    # at addr 0x194b0  "ppm "
.long     0x333b3130    # at addr 0x194b4  "01;3"
.long     0x742e0035    # at addr 0x194b8  "5..t"
.long     0x30206167    # at addr 0x194bc  "ga 0"
.long     0x35333b31    # at addr 0x194c0  "1;35"
.long     0x62782e00    # at addr 0x194c4  "..xb"
.long     0x3130206d    # at addr 0x194c8  "m 01"
.long     0x0035333b    # at addr 0x194cc  ";35."
.long     0x6d70782e    # at addr 0x194d0  ".xpm"
.long     0x3b313020    # at addr 0x194d4  " 01;"
.long     0x2e003533    # at addr 0x194d8  "35.."
.long     0x20666974    # at addr 0x194dc  "tif "
.long     0x333b3130    # at addr 0x194e0  "01;3"
.long     0x742e0035    # at addr 0x194e4  "5..t"
.long     0x20666669    # at addr 0x194e8  "iff "
.long     0x333b3130    # at addr 0x194ec  "01;3"
.long     0x702e0035    # at addr 0x194f0  "5..p"
.long     0x3020676e    # at addr 0x194f4  "ng 0"
.long     0x35333b31    # at addr 0x194f8  "1;35"
.long     0x76732e00    # at addr 0x194fc  "..sv"
.long     0x31302067    # at addr 0x19500  "g 01"
.long     0x0035333b    # at addr 0x19504  ";35."
.long     0x6776732e    # at addr 0x19508  ".svg"
.long     0x3130207a    # at addr 0x1950c  "z 01"
.long     0x0035333b    # at addr 0x19510  ";35."
.long     0x676e6d2e    # at addr 0x19514  ".mng"
.long     0x3b313020    # at addr 0x19518  " 01;"
.long     0x2e003533    # at addr 0x1951c  "35.."
.long     0x20786370    # at addr 0x19520  "pcx "
.long     0x333b3130    # at addr 0x19524  "01;3"
.long     0x6d2e0035    # at addr 0x19528  "5..m"
.long     0x3020766f    # at addr 0x1952c  "ov 0"
.long     0x35333b31    # at addr 0x19530  "1;35"
.long     0x706d2e00    # at addr 0x19534  "..mp"
.long     0x31302067    # at addr 0x19538  "g 01"
.long     0x0035333b    # at addr 0x1953c  ";35."
.long     0x65706d2e    # at addr 0x19540  ".mpe"
.long     0x31302067    # at addr 0x19544  "g 01"
.long     0x0035333b    # at addr 0x19548  ";35."
.long     0x76326d2e    # at addr 0x1954c  ".m2v"
.long     0x3b313020    # at addr 0x19550  " 01;"
.long     0x2e003533    # at addr 0x19554  "35.."
.long     0x20766b6d    # at addr 0x19558  "mkv "
.long     0x333b3130    # at addr 0x1955c  "01;3"
.long     0x772e0035    # at addr 0x19560  "5..w"
.long     0x206d6265    # at addr 0x19564  "ebm "
.long     0x333b3130    # at addr 0x19568  "01;3"
.long     0x6f2e0035    # at addr 0x1956c  "5..o"
.long     0x30206d67    # at addr 0x19570  "gm 0"
.long     0x35333b31    # at addr 0x19574  "1;35"
.long     0x706d2e00    # at addr 0x19578  "..mp"
.long     0x31302034    # at addr 0x1957c  "4 01"
.long     0x0035333b    # at addr 0x19580  ";35."
.long     0x76346d2e    # at addr 0x19584  ".m4v"
.long     0x3b313020    # at addr 0x19588  " 01;"
.long     0x2e003533    # at addr 0x1958c  "35.."
.long     0x7634706d    # at addr 0x19590  "mp4v"
.long     0x3b313020    # at addr 0x19594  " 01;"
.long     0x2e003533    # at addr 0x19598  "35.."
.long     0x20626f76    # at addr 0x1959c  "vob "
.long     0x333b3130    # at addr 0x195a0  "01;3"
.long     0x712e0035    # at addr 0x195a4  "5..q"
.long     0x31302074    # at addr 0x195a8  "t 01"
.long     0x0035333b    # at addr 0x195ac  ";35."
.long     0x76756e2e    # at addr 0x195b0  ".nuv"
.long     0x3b313020    # at addr 0x195b4  " 01;"
.long     0x2e003533    # at addr 0x195b8  "35.."
.long     0x20766d77    # at addr 0x195bc  "wmv "
.long     0x333b3130    # at addr 0x195c0  "01;3"
.long     0x612e0035    # at addr 0x195c4  "5..a"
.long     0x30206673    # at addr 0x195c8  "sf 0"
.long     0x35333b31    # at addr 0x195cc  "1;35"
.long     0x6d722e00    # at addr 0x195d0  "..rm"
.long     0x3b313020    # at addr 0x195d4  " 01;"
.long     0x2e003533    # at addr 0x195d8  "35.."
.long     0x62766d72    # at addr 0x195dc  "rmvb"
.long     0x3b313020    # at addr 0x195e0  " 01;"
.long     0x2e003533    # at addr 0x195e4  "35.."
.long     0x20636c66    # at addr 0x195e8  "flc "
.long     0x333b3130    # at addr 0x195ec  "01;3"
.long     0x612e0035    # at addr 0x195f0  "5..a"
.long     0x30206976    # at addr 0x195f4  "vi 0"
.long     0x35333b31    # at addr 0x195f8  "1;35"
.long     0x6c662e00    # at addr 0x195fc  "..fl"
.long     0x31302069    # at addr 0x19600  "i 01"
.long     0x0035333b    # at addr 0x19604  ";35."
.long     0x766c662e    # at addr 0x19608  ".flv"
.long     0x3b313020    # at addr 0x1960c  " 01;"
.long     0x2e003533    # at addr 0x19610  "35.."
.long     0x30206c67    # at addr 0x19614  "gl 0"
.long     0x35333b31    # at addr 0x19618  "1;35"
.long     0x6c642e00    # at addr 0x1961c  "..dl"
.long     0x3b313020    # at addr 0x19620  " 01;"
.long     0x2e003533    # at addr 0x19624  "35.."
.long     0x20666378    # at addr 0x19628  "xcf "
.long     0x333b3130    # at addr 0x1962c  "01;3"
.long     0x782e0035    # at addr 0x19630  "5..x"
.long     0x30206477    # at addr 0x19634  "wd 0"
.long     0x35333b31    # at addr 0x19638  "1;35"
.long     0x75792e00    # at addr 0x1963c  "..yu"
.long     0x31302076    # at addr 0x19640  "v 01"
.long     0x0035333b    # at addr 0x19644  ";35."
.long     0x6d67632e    # at addr 0x19648  ".cgm"
.long     0x3b313020    # at addr 0x1964c  " 01;"
.long     0x2e003533    # at addr 0x19650  "35.."
.long     0x20666d65    # at addr 0x19654  "emf "
.long     0x333b3130    # at addr 0x19658  "01;3"
.long     0x20230035    # at addr 0x1965c  "5.# "
.long     0x70747468    # at addr 0x19660  "http"
.long     0x2f2f3a73    # at addr 0x19664  "s://"
.long     0x696b6977    # at addr 0x19668  "wiki"
.long     0x7069782e    # at addr 0x1966c  ".xip"
.long     0x726f2e68    # at addr 0x19670  "h.or"
.long     0x494d2f67    # at addr 0x19674  "g/MI"
.long     0x545f454d    # at addr 0x19678  "ME_T"
.long     0x73657079    # at addr 0x1967c  "ypes"
.long     0x646e615f    # at addr 0x19680  "_and"
.long     0x6c69465f    # at addr 0x19684  "_Fil"
.long     0x78455f65    # at addr 0x19688  "e_Ex"
.long     0x736e6574    # at addr 0x1968c  "tens"
.long     0x736e6f69    # at addr 0x19690  "ions"
.long     0x676f2e00    # at addr 0x19694  "..og"
.long     0x31302076    # at addr 0x19698  "v 01"
.long     0x0035333b    # at addr 0x1969c  ";35."
.long     0x78676f2e    # at addr 0x196a0  ".ogx"
.long     0x3b313020    # at addr 0x196a4  " 01;"
.long     0x23003533    # at addr 0x196a8  "35.#"
.long     0x64756120    # at addr 0x196ac  " aud"
.long     0x66206f69    # at addr 0x196b0  "io f"
.long     0x616d726f    # at addr 0x196b4  "orma"
.long     0x2e007374    # at addr 0x196b8  "ts.."
.long     0x20636161    # at addr 0x196bc  "aac "
.long     0x333b3030    # at addr 0x196c0  "00;3"
.long     0x612e0036    # at addr 0x196c4  "6..a"
.long     0x30302075    # at addr 0x196c8  "u 00"
.long     0x0036333b    # at addr 0x196cc  ";36."
.long     0x616c662e    # at addr 0x196d0  ".fla"
.long     0x30302063    # at addr 0x196d4  "c 00"
.long     0x0036333b    # at addr 0x196d8  ";36."
.long     0x61346d2e    # at addr 0x196dc  ".m4a"
.long     0x3b303020    # at addr 0x196e0  " 00;"
.long     0x2e003633    # at addr 0x196e4  "36.."
.long     0x2064696d    # at addr 0x196e8  "mid "
.long     0x333b3030    # at addr 0x196ec  "00;3"
.long     0x6d2e0036    # at addr 0x196f0  "6..m"
.long     0x20696469    # at addr 0x196f4  "idi "
.long     0x333b3030    # at addr 0x196f8  "00;3"
.long     0x6d2e0036    # at addr 0x196fc  "6..m"
.long     0x3020616b    # at addr 0x19700  "ka 0"
.long     0x36333b30    # at addr 0x19704  "0;36"
.long     0x706d2e00    # at addr 0x19708  "..mp"
.long     0x30302033    # at addr 0x1970c  "3 00"
.long     0x0036333b    # at addr 0x19710  ";36."
.long     0x63706d2e    # at addr 0x19714  ".mpc"
.long     0x3b303020    # at addr 0x19718  " 00;"
.long     0x2e003633    # at addr 0x1971c  "36.."
.long     0x2067676f    # at addr 0x19720  "ogg "
.long     0x333b3030    # at addr 0x19724  "00;3"
.long     0x722e0036    # at addr 0x19728  "6..r"
.long     0x30302061    # at addr 0x1972c  "a 00"
.long     0x0036333b    # at addr 0x19730  ";36."
.long     0x7661772e    # at addr 0x19734  ".wav"
.long     0x3b303020    # at addr 0x19738  " 00;"
.long     0x23003633    # at addr 0x1973c  "36.#"
.long     0x74746820    # at addr 0x19740  " htt"
.long     0x2f3a7370    # at addr 0x19744  "ps:/"
.long     0x6b69772f    # at addr 0x19748  "/wik"
.long     0x69782e69    # at addr 0x1974c  "i.xi"
.long     0x6f2e6870    # at addr 0x19750  "ph.o"
.long     0x4d2f6772    # at addr 0x19754  "rg/M"
.long     0x5f454d49    # at addr 0x19758  "IME_"
.long     0x65707954    # at addr 0x1975c  "Type"
.long     0x6e615f73    # at addr 0x19760  "s_an"
.long     0x69465f64    # at addr 0x19764  "d_Fi"
.long     0x455f656c    # at addr 0x19768  "le_E"
.long     0x6e657478    # at addr 0x1976c  "xten"
.long     0x6e6f6973    # at addr 0x19770  "sion"
.long     0x6f2e0073    # at addr 0x19774  "s..o"
.long     0x30206167    # at addr 0x19778  "ga 0"
.long     0x36333b30    # at addr 0x1977c  "0;36"
.long     0x706f2e00    # at addr 0x19780  "..op"
.long     0x30207375    # at addr 0x19784  "us 0"
.long     0x36333b30    # at addr 0x19788  "0;36"
.long     0x70732e00    # at addr 0x1978c  "..sp"
.long     0x30302078    # at addr 0x19790  "x 00"
.long     0x0036333b    # at addr 0x19794  ";36."
.long     0x7073782e    # at addr 0x19798  ".xsp"
.long     0x30302066    # at addr 0x1979c  "f 00"
.long     0x0036333b    # at addr 0x197a0  ";36."
Var0x197a4:       # next=0x197ad, start=0x18000, end=0x1d248
.long     0x732a2e25    # at addr 0x197a4  "%.*s"
.long     0x73257325    # at addr 0x197a8  "%s%s"
.byte     0x00    # "."
Var0x197ad:       # next=0x197b4, start=0x18000, end=0x1d248
.long     0x30252525    # at addr 0x197ad  "%%%0"
.byte     0x32    # "2"
.byte     0x78    # "2"
.byte     0x00    # "2"
Var0x197b4:       # next=0x197bd, start=0x18000, end=0x1d248
.long     0x2f637273    # at addr 0x197b4  "src/"
.long     0x632e736c    # at addr 0x197b8  "ls.c"
.byte     0x00    # "."
Var0x197bd:       # next=0x197d7, start=0x18000, end=0x1d248
.long     0x74726f73    # at addr 0x197bd  "sort"
.long     0x7079745f    # at addr 0x197c1  "_typ"
.long     0x3d212065    # at addr 0x197c5  "e !="
.long     0x726f7320    # at addr 0x197c9  " sor"
.long     0x65765f74    # at addr 0x197cd  "t_ve"
.long     0x6f697372    # at addr 0x197d1  "rsio"
.byte     0x6e    # "n"
.byte     0x00    # "n"
Var0x197d7:       # next=0x197d8, start=0x18000, end=0x1d248
.byte     0x20    # " "
Var0x197d8:       # next=0x197dc, start=0x18000, end=0x1d248
.long     0x00756c25    # at addr 0x197d8  "%lu."
Var0x197dc:       # next=0x197e2, start=0x18000, end=0x1d248
.long     0x756c2a25    # at addr 0x197dc  "%*lu"
.byte     0x20    # " "
.byte     0x00    # " "
Var0x197e2:       # next=0x197e4, start=0x18000, end=0x1d248
.byte     0x3f    # "?"
.byte     0x00    # "?"
Var0x197e4:       # next=0x197f8, start=0x18000, end=0x1d248
.long     0x3b385d1b    # at addr 0x197e4  ".]8;"
.long     0x6c69663b    # at addr 0x197e8  ";fil"
.long     0x2f2f3a65    # at addr 0x197ec  "e://"
.long     0x73257325    # at addr 0x197f0  "%s%s"
.long     0x00077325    # at addr 0x197f4  "%s.."
Var0x197f8:       # next=0x197fe, start=0x18000, end=0x1d248
.long     0x3b385d1b    # at addr 0x197f8  ".]8;"
.byte     0x3b    # ";"
.byte     0x07    # ";"
Var0x197fe:       # next=0x197ff, start=0x18000, end=0x1d248
.byte     0x00    # "."
Var0x197ff:       # next=0x19807, start=0x18000, end=0x1d248
.long     0x25207325    # at addr 0x197ff  "%s %"
.long     0x0020732a    # at addr 0x19803  "*s ."
Var0x19807:       # next=0x1980a, start=0x18000, end=0x1d248
.byte     0x20    # " "
.byte     0x20    # " "
.byte     0x00    # " "
Var0x1980a:       # next=0x1980f, start=0x18000, end=0x1d248
.long     0x2c732a25    # at addr 0x1980a  "%*s,"
.byte     0x20    # " "
Var0x1980f:       # next=0x19814, start=0x18000, end=0x1d248
.long     0x20732a25    # at addr 0x1980f  "%*s "
.byte     0x00    # "."
Var0x19814:       # next=0x19819, start=0x18000, end=0x1d248
.long     0x203e2d20    # at addr 0x19814  " -> "
.byte     0x00    # "."
Var0x19819:       # next=0x19831, start=0x18000, end=0x1d248
.long     0x6f727265    # at addr 0x19819  "erro"
.long     0x61632072    # at addr 0x1981d  "r ca"
.long     0x696e6f6e    # at addr 0x19821  "noni"
.long     0x696c6163    # at addr 0x19825  "cali"
.long     0x676e697a    # at addr 0x19829  "zing"
.long     0x00732520    # at addr 0x1982d  " %s."
Var0x19831:       # next=0x19842, start=0x18000, end=0x1d248
.long     0x6e6e6163    # at addr 0x19831  "cann"
.long     0x6120746f    # at addr 0x19835  "ot a"
.long     0x73656363    # at addr 0x19839  "cces"
.long     0x73252073    # at addr 0x1983d  "s %s"
.byte     0x00    # "."
Var0x19842:       # next=0x1985f, start=0x18000, end=0x1d248
.long     0x6e6e6163    # at addr 0x19842  "cann"
.long     0x7220746f    # at addr 0x19846  "ot r"
.long     0x20646165    # at addr 0x1984a  "ead "
.long     0x626d7973    # at addr 0x1984e  "symb"
.long     0x63696c6f    # at addr 0x19852  "olic"
.long     0x6e696c20    # at addr 0x19856  " lin"
.long     0x7325206b    # at addr 0x1985a  "k %s"
.byte     0x00    # "."
Var0x1985f:       # next=0x19869, start=0x18000, end=0x1d248
.long     0x616c6e75    # at addr 0x1985f  "unla"
.long     0x656c6562    # at addr 0x19863  "bele"
.byte     0x64    # "d"
.byte     0x00    # "d"
Var0x19869:       # next=0x19882, start=0x18000, end=0x1d248
.long     0x6e6e6163    # at addr 0x19869  "cann"
.long     0x6f20746f    # at addr 0x1986d  "ot o"
.long     0x206e6570    # at addr 0x19871  "pen "
.long     0x65726964    # at addr 0x19875  "dire"
.long     0x726f7463    # at addr 0x19879  "ctor"
.long     0x73252079    # at addr 0x1987d  "y %s"
.byte     0x00    # "."
Var0x19882:       # next=0x19897, start=0x18000, end=0x1d248
.long     0x64616572    # at addr 0x19882  "read"
.long     0x20676e69    # at addr 0x19886  "ing "
.long     0x65726964    # at addr 0x1988a  "dire"
.long     0x726f7463    # at addr 0x1988e  "ctor"
.long     0x73252079    # at addr 0x19892  "y %s"
.byte     0x00    # "."
Var0x19897:       # next=0x198ac, start=0x18000, end=0x1d248
.long     0x736f6c63    # at addr 0x19897  "clos"
.long     0x20676e69    # at addr 0x1989b  "ing "
.long     0x65726964    # at addr 0x1989f  "dire"
.long     0x726f7463    # at addr 0x198a3  "ctor"
.long     0x73252079    # at addr 0x198a7  "y %s"
.byte     0x00    # "."
Var0x198ac:       # next=0x198b2, start=0x18000, end=0x1d248
.long     0x61746f74    # at addr 0x198ac  "tota"
.byte     0x6c    # "l"
.byte     0x00    # "l"
Var0x198b2:       # next=0x198b3, start=0x18000, end=0x1d248
.byte     0x76    # "v"
Var0x198b3:       # next=0x198b7, start=0x18000, end=0x1d248
.long     0x00726964    # at addr 0x198b3  "dir."
Var0x198b7:       # next=0x198c7, start=0x18000, end=0x1d248
.long     0x74736574    # at addr 0x198b7  "test"
.long     0x766e6920    # at addr 0x198bb  " inv"
.long     0x7461636f    # at addr 0x198bf  "ocat"
.long     0x006e6f69    # at addr 0x198c3  "ion."
Var0x198c7:       # next=0x198d1, start=0x18000, end=0x1d248
.long     0x746c754d    # at addr 0x198c7  "Mult"
.long     0x61632d69    # at addr 0x198cb  "i-ca"
.byte     0x6c    # "l"
.byte     0x6c    # "l"
Var0x198d1:       # next=0x198dd, start=0x18000, end=0x1d248
.long     0x766e6920    # at addr 0x198d1  " inv"
.long     0x7461636f    # at addr 0x198d5  "ocat"
.long     0x006e6f69    # at addr 0x198d9  "ion."
Var0x198dd:       # next=0x198e7, start=0x18000, end=0x1d248
.long     0x32616873    # at addr 0x198dd  "sha2"
.long     0x75733432    # at addr 0x198e1  "24su"
.byte     0x6d    # "m"
.byte     0x00    # "m"
Var0x198e7:       # next=0x198f6, start=0x18000, end=0x1d248
.long     0x32616873    # at addr 0x198e7  "sha2"
.long     0x69747520    # at addr 0x198eb  " uti"
.long     0x6974696c    # at addr 0x198ef  "liti"
.byte     0x65    # "e"
.byte     0x73    # "e"
.byte     0x00    # "e"
Var0x198f6:       # next=0x19900, start=0x18000, end=0x1d248
.long     0x32616873    # at addr 0x198f6  "sha2"
.long     0x75733635    # at addr 0x198fa  "56su"
.byte     0x6d    # "m"
.byte     0x00    # "m"
Var0x19900:       # next=0x1990a, start=0x18000, end=0x1d248
.long     0x33616873    # at addr 0x19900  "sha3"
.long     0x75733438    # at addr 0x19904  "84su"
.byte     0x6d    # "m"
.byte     0x00    # "m"
Var0x1990a:       # next=0x19914, start=0x18000, end=0x1d248
.long     0x35616873    # at addr 0x1990a  "sha5"
.long     0x75733231    # at addr 0x1990e  "12su"
.byte     0x6d    # "m"
.byte     0x00    # "m"
Var0x19914:       # next=0x1992b, start=0x18000, end=0x1d248
.long     0x2073250a    # at addr 0x19914  ".%s "
.long     0x696c6e6f    # at addr 0x19918  "onli"
.long     0x6820656e    # at addr 0x1991c  "ne h"
.long     0x3a706c65    # at addr 0x19920  "elp:"
.long     0x73253c20    # at addr 0x19924  " <%s"
.byte     0x3e    # ">"
.byte     0x0a    # ">"
.byte     0x00    # ">"
Var0x1992b:       # next=0x1992f, start=0x18000, end=0x1d248
.long     0x20554e47    # at addr 0x1992b  "GNU "
Var0x1992f:       # next=0x19936, start=0x18000, end=0x1d248
.long     0x65726f63    # at addr 0x1992f  "core"
.byte     0x75    # "u"
.byte     0x74    # "u"
.byte     0x69    # "u"
Var0x19936:       # next=0x19939, start=0x18000, end=0x1d248
.byte     0x6c    # "l"
.byte     0x73    # "l"
.byte     0x00    # "l"
Var0x19939:       # next=0x1993d, start=0x18000, end=0x1d248
.long     0x005f6e65    # at addr 0x19939  "en_."
Var0x1993d:       # next=0x19946, start=0x18000, end=0x1d248
.long     0x6c6c7566    # at addr 0x1993d  "full"
.long     0x6f73692d    # at addr 0x19941  "-iso"
.byte     0x00    # "."
Var0x19946:       # next=0x19949, start=0x18000, end=0x1d248
.byte     0x6c    # "l"
.byte     0x63    # "l"
.byte     0x00    # "l"
Var0x19949:       # next=0x19954, start=0x18000, end=0x1d248
.long     0x7273752f    # at addr 0x19949  "/usr"
.long     0x6168732f    # at addr 0x1994d  "/sha"
.byte     0x72    # "r"
.byte     0x65    # "r"
.byte     0x2f    # "r"
Var0x19954:       # next=0x1995b, start=0x18000, end=0x1d248
.long     0x61636f6c    # at addr 0x19954  "loca"
.byte     0x6c    # "l"
.byte     0x65    # "l"
.byte     0x00    # "l"
Var0x1995b:       # next=0x19969, start=0x18000, end=0x1d248
.long     0x544f5551    # at addr 0x1995b  "QUOT"
.long     0x5f474e49    # at addr 0x1995f  "ING_"
.long     0x4c595453    # at addr 0x19963  "STYL"
.byte     0x45    # "E"
.byte     0x00    # "E"
Var0x19969:       # next=0x19971, start=0x18000, end=0x1d248
.long     0x554c4f43    # at addr 0x19969  "COLU"
.long     0x00534e4d    # at addr 0x1996d  "MNS."
Var0x19971:       # next=0x19979, start=0x18000, end=0x1d248
.long     0x53424154    # at addr 0x19971  "TABS"
.long     0x00455a49    # at addr 0x19975  "IZE."
Var0x19979:       # next=0x1998c, start=0x18000, end=0x1d248
.long     0x61766e69    # at addr 0x19979  "inva"
.long     0x2064696c    # at addr 0x1997d  "lid "
.long     0x656e696c    # at addr 0x19981  "line"
.long     0x64697720    # at addr 0x19985  " wid"
.byte     0x74    # "t"
.byte     0x68    # "t"
.byte     0x00    # "t"
Var0x1998c:       # next=0x19993, start=0x18000, end=0x1d248
.long     0x203a7325    # at addr 0x1998c  "%s: "
.byte     0x25    # "%"
.byte     0x73    # "%"
.byte     0x00    # "%"
Var0x19993:       # next=0x19994, start=0x18000, end=0x1d248
.byte     0x2e    # "."
Var0x19994:       # next=0x19997, start=0x18000, end=0x1d248
.byte     0x2a    # "*"
.byte     0x7e    # "*"
.byte     0x00    # "*"
Var0x19997:       # next=0x199a8, start=0x18000, end=0x1d248
.long     0x61766e69    # at addr 0x19997  "inva"
.long     0x2064696c    # at addr 0x1999b  "lid "
.long     0x20626174    # at addr 0x1999f  "tab "
.long     0x657a6973    # at addr 0x199a3  "size"
.byte     0x00    # "."
Var0x199a8:       # next=0x199af, start=0x18000, end=0x1d248
.long     0x6f732d2d    # at addr 0x199a8  "--so"
.byte     0x72    # "r"
.byte     0x74    # "r"
.byte     0x00    # "r"
Var0x199af:       # next=0x199b6, start=0x18000, end=0x1d248
.long     0x69742d2d    # at addr 0x199af  "--ti"
.byte     0x6d    # "m"
.byte     0x65    # "m"
.byte     0x00    # "m"
Var0x199b6:       # next=0x199bf, start=0x18000, end=0x1d248
.long     0x6f662d2d    # at addr 0x199b6  "--fo"
.long     0x74616d72    # at addr 0x199ba  "rmat"
.byte     0x00    # "."
Var0x199bf:       # next=0x199c7, start=0x18000, end=0x1d248
.long     0x6f632d2d    # at addr 0x199bf  "--co"
.long     0x00726f6c    # at addr 0x199c3  "lor."
Var0x199c7:       # next=0x199d3, start=0x18000, end=0x1d248
.long     0x79682d2d    # at addr 0x199c7  "--hy"
.long     0x6c726570    # at addr 0x199cb  "perl"
.long     0x006b6e69    # at addr 0x199cf  "ink."
Var0x199d3:       # next=0x199e5, start=0x18000, end=0x1d248
.long     0x6e692d2d    # at addr 0x199d3  "--in"
.long     0x61636964    # at addr 0x199d7  "dica"
.long     0x2d726f74    # at addr 0x199db  "tor-"
.long     0x6c797473    # at addr 0x199df  "styl"
.byte     0x65    # "e"
.byte     0x00    # "e"
Var0x199e5:       # next=0x199f5, start=0x18000, end=0x1d248
.long     0x75712d2d    # at addr 0x199e5  "--qu"
.long     0x6e69746f    # at addr 0x199e9  "otin"
.long     0x74732d67    # at addr 0x199ed  "g-st"
.long     0x00656c79    # at addr 0x199f1  "yle."
Var0x199f5:       # next=0x19a05, start=0x18000, end=0x1d248
.long     0x69766144    # at addr 0x199f5  "Davi"
.long     0x614d2064    # at addr 0x199f9  "d Ma"
.long     0x6e654b63    # at addr 0x199fd  "cKen"
.long     0x0065697a    # at addr 0x19a01  "zie."
Var0x19a05:       # next=0x19a19, start=0x18000, end=0x1d248
.long     0x68636952    # at addr 0x19a05  "Rich"
.long     0x20647261    # at addr 0x19a09  "ard "
.long     0x53202e4d    # at addr 0x19a0d  "M. S"
.long     0x6c6c6174    # at addr 0x19a11  "tall"
.long     0x006e616d    # at addr 0x19a15  "man."
Var0x19a19:       # next=0x19a1c, start=0x18000, end=0x1d248
.byte     0x4c    # "L"
.byte     0x53    # "L"
.byte     0x5f    # "L"
Var0x19a1c:       # next=0x19a27, start=0x18000, end=0x1d248
.long     0x434f4c42    # at addr 0x19a1c  "BLOC"
.long     0x49535f4b    # at addr 0x19a20  "K_SI"
.byte     0x5a    # "Z"
.byte     0x45    # "Z"
.byte     0x00    # "Z"
Var0x19a27:       # next=0x19a2d, start=0x18000, end=0x1d248
.long     0x403e3d2a    # at addr 0x19a27  "*=>@"
.byte     0x7c    # "|"
.byte     0x00    # "|"
Var0x19a2d:       # next=0x19a38, start=0x18000, end=0x1d248
.long     0x454d4954    # at addr 0x19a2d  "TIME"
.long     0x5954535f    # at addr 0x19a31  "_STY"
.byte     0x4c    # "L"
.byte     0x45    # "L"
.byte     0x00    # "L"
Var0x19a38:       # next=0x19a55, start=0x18000, end=0x1d248
.long     0x61766e69    # at addr 0x19a38  "inva"
.long     0x2064696c    # at addr 0x19a3c  "lid "
.long     0x656d6974    # at addr 0x19a40  "time"
.long     0x79747320    # at addr 0x19a44  " sty"
.long     0x6620656c    # at addr 0x19a48  "le f"
.long     0x616d726f    # at addr 0x19a4c  "orma"
.long     0x73252074    # at addr 0x19a50  "t %s"
.byte     0x00    # "."
Var0x19a55:       # next=0x19a60, start=0x18000, end=0x1d248
.long     0x656d6974    # at addr 0x19a55  "time"
.long     0x79747320    # at addr 0x19a59  " sty"
.byte     0x6c    # "l"
.byte     0x65    # "l"
.byte     0x00    # "l"
Var0x19a60:       # next=0x19a73, start=0x18000, end=0x1d248
.long     0x696c6156    # at addr 0x19a60  "Vali"
.long     0x72612064    # at addr 0x19a64  "d ar"
.long     0x656d7567    # at addr 0x19a68  "gume"
.long     0x2073746e    # at addr 0x19a6c  "nts "
.byte     0x61    # "a"
.byte     0x72    # "a"
.byte     0x65    # "a"
Var0x19a73:       # next=0x19a76, start=0x18000, end=0x1d248
.byte     0x3a    # ":"
.byte     0x0a    # ":"
.byte     0x00    # ":"
Var0x19a76:       # next=0x19a86, start=0x18000, end=0x1d248
.long     0x202d2020    # at addr 0x19a76  "  - "
.long     0x736f705b    # at addr 0x19a7a  "[pos"
.long     0x5d2d7869    # at addr 0x19a7e  "ix-]"
.long     0x000a7325    # at addr 0x19a82  "%s.."
Var0x19a86:       # next=0x19a9e, start=0x18000, end=0x1d248
.long     0x252d5925    # at addr 0x19a86  "%Y-%"
.long     0x64252d6d    # at addr 0x19a8a  "m-%d"
.long     0x3a482520    # at addr 0x19a8e  " %H:"
.long     0x253a4d25    # at addr 0x19a92  "%M:%"
.long     0x4e252e53    # at addr 0x19a96  "S.%N"
.long     0x007a2520    # at addr 0x19a9a  " %z."
Var0x19a9e:       # next=0x19aa1, start=0x18000, end=0x1d248
.byte     0x25    # "%"
.byte     0x59    # "%"
.byte     0x2d    # "%"
Var0x19aa1:       # next=0x19aa7, start=0x18000, end=0x1d248
.long     0x252d6d25    # at addr 0x19aa1  "%m-%"
.byte     0x64    # "d"
.byte     0x20    # "d"
Var0x19aa7:       # next=0x19aad, start=0x18000, end=0x1d248
.long     0x253a4825    # at addr 0x19aa7  "%H:%"
.byte     0x4d    # "M"
.byte     0x00    # "M"
Var0x19aad:       # next=0x19ab7, start=0x18000, end=0x1d248
.long     0x252d5925    # at addr 0x19aad  "%Y-%"
.long     0x64252d6d    # at addr 0x19ab1  "m-%d"
.byte     0x20    # " "
.byte     0x00    # " "
Var0x19ab7:       # next=0x19ac1, start=0x18000, end=0x1d248
.long     0x435f534c    # at addr 0x19ab7  "LS_C"
.long     0x524f4c4f    # at addr 0x19abb  "OLOR"
.byte     0x53    # "S"
.byte     0x00    # "S"
Var0x19ac1:       # next=0x19ac6, start=0x18000, end=0x1d248
.long     0x4f4c4f43    # at addr 0x19ac1  "COLO"
.byte     0x52    # "R"
Var0x19ac6:       # next=0x19acb, start=0x18000, end=0x1d248
.long     0x4d524554    # at addr 0x19ac6  "TERM"
.byte     0x00    # "."
Var0x19acb:       # next=0x19ad1, start=0x18000, end=0x1d248
.long     0x4d524554    # at addr 0x19acb  "TERM"
.byte     0x20    # " "
.byte     0x00    # " "
Var0x19ad1:       # next=0x19ae9, start=0x18000, end=0x1d248
.long     0x65726e75    # at addr 0x19ad1  "unre"
.long     0x6e676f63    # at addr 0x19ad5  "cogn"
.long     0x64657a69    # at addr 0x19ad9  "ized"
.long     0x65727020    # at addr 0x19add  " pre"
.long     0x3a786966    # at addr 0x19ae1  "fix:"
.long     0x00732520    # at addr 0x19ae5  " %s."
Var0x19ae9:       # next=0x19af0, start=0x18000, end=0x1d248
.long     0x67726174    # at addr 0x19ae9  "targ"
.byte     0x65    # "e"
.byte     0x74    # "e"
.byte     0x00    # "e"
Var0x19af0:       # next=0x19af3, start=0x18000, end=0x1d248
.byte     0x54    # "T"
.byte     0x5a    # "T"
.byte     0x00    # "T"
Var0x19af3:       # next=0x19af5, start=0x18000, end=0x1d248
.byte     0x2e    # "."
.byte     0x00    # "."
Var0x19af5:       # next=0x19afb, start=0x18000, end=0x1d248
.long     0x6e756f66    # at addr 0x19af5  "foun"
.byte     0x64    # "d"
.byte     0x00    # "d"
Var0x19afb:       # next=0x19b03, start=0x18000, end=0x1d248
.long     0x49442f2f    # at addr 0x19afb  "//DI"
.long     0x2f444552    # at addr 0x19aff  "RED/"
Var0x19b03:       # next=0x19b05, start=0x18000, end=0x1d248
.byte     0x2f    # "/"
.byte     0x00    # "/"
Var0x19b05:       # next=0x19cf3, start=0x18000, end=0x1d248
.long     0x55532f2f    # at addr 0x19b05  "//SU"
.long     0x52494442    # at addr 0x19b09  "BDIR"
.long     0x2f2f4445    # at addr 0x19b0d  "ED//"
.long     0x73657900    # at addr 0x19b11  ".yes"
.long     0x726f6600    # at addr 0x19b15  ".for"
.long     0x6e006563    # at addr 0x19b19  "ce.n"
.long     0x72657665    # at addr 0x19b1d  "ever"
.long     0x006f6e00    # at addr 0x19b21  ".no."
.long     0x656e6f6e    # at addr 0x19b25  "none"
.long     0x74756100    # at addr 0x19b29  ".aut"
.long     0x6669006f    # at addr 0x19b2d  "o.if"
.long     0x7974742d    # at addr 0x19b31  "-tty"
.long     0x69746100    # at addr 0x19b35  ".ati"
.long     0x7500656d    # at addr 0x19b39  "me.u"
.long     0x63006573    # at addr 0x19b3d  "se.c"
.long     0x656d6974    # at addr 0x19b41  "time"
.long     0x61747300    # at addr 0x19b45  ".sta"
.long     0x00737574    # at addr 0x19b49  "tus."
.long     0x65747865    # at addr 0x19b4d  "exte"
.long     0x6f69736e    # at addr 0x19b51  "nsio"
.long     0x6576006e    # at addr 0x19b55  "n.ve"
.long     0x736f6272    # at addr 0x19b59  "rbos"
.long     0x6f6c0065    # at addr 0x19b5d  "e.lo"
.long     0x6300676e    # at addr 0x19b61  "ng.c"
.long     0x616d6d6f    # at addr 0x19b65  "omma"
.long     0x6f680073    # at addr 0x19b69  "s.ho"
.long     0x6f7a6972    # at addr 0x19b6d  "rizo"
.long     0x6c61746e    # at addr 0x19b71  "ntal"
.long     0x72636100    # at addr 0x19b75  ".acr"
.long     0x0073736f    # at addr 0x19b79  "oss."
.long     0x74726576    # at addr 0x19b7d  "vert"
.long     0x6c616369    # at addr 0x19b81  "ical"
.long     0x6e697300    # at addr 0x19b85  ".sin"
.long     0x2d656c67    # at addr 0x19b89  "gle-"
.long     0x756c6f63    # at addr 0x19b8d  "colu"
.long     0x64006e6d    # at addr 0x19b91  "mn.d"
.long     0x63657269    # at addr 0x19b95  "irec"
.long     0x79726f74    # at addr 0x19b99  "tory"
.long     0x72696400    # at addr 0x19b9d  ".dir"
.long     0x66006465    # at addr 0x19ba1  "ed.f"
.long     0x2d6c6c75    # at addr 0x19ba5  "ull-"
.long     0x656d6974    # at addr 0x19ba9  "time"
.long     0x6f726700    # at addr 0x19bad  ".gro"
.long     0x642d7075    # at addr 0x19bb1  "up-d"
.long     0x63657269    # at addr 0x19bb5  "irec"
.long     0x69726f74    # at addr 0x19bb9  "tori"
.long     0x662d7365    # at addr 0x19bbd  "es-f"
.long     0x74737269    # at addr 0x19bc1  "irst"
.long     0x6d756800    # at addr 0x19bc5  ".hum"
.long     0x722d6e61    # at addr 0x19bc9  "an-r"
.long     0x61646165    # at addr 0x19bcd  "eada"
.long     0x00656c62    # at addr 0x19bd1  "ble."
.long     0x646f6e69    # at addr 0x19bd5  "inod"
.long     0x696b0065    # at addr 0x19bd9  "e.ki"
.long     0x79626962    # at addr 0x19bdd  "biby"
.long     0x00736574    # at addr 0x19be1  "tes."
.long     0x656d756e    # at addr 0x19be5  "nume"
.long     0x2d636972    # at addr 0x19be9  "ric-"
.long     0x2d646975    # at addr 0x19bed  "uid-"
.long     0x00646967    # at addr 0x19bf1  "gid."
.long     0x672d6f6e    # at addr 0x19bf5  "no-g"
.long     0x70756f72    # at addr 0x19bf9  "roup"
.long     0x64696800    # at addr 0x19bfd  ".hid"
.long     0x6f632d65    # at addr 0x19c01  "e-co"
.long     0x6f72746e    # at addr 0x19c05  "ntro"
.long     0x68632d6c    # at addr 0x19c09  "l-ch"
.long     0x00737261    # at addr 0x19c0d  "ars."
.long     0x65766572    # at addr 0x19c11  "reve"
.long     0x00657372    # at addr 0x19c15  "rse."
.long     0x6f6d6c61    # at addr 0x19c19  "almo"
.long     0x612d7473    # at addr 0x19c1d  "st-a"
.long     0x69006c6c    # at addr 0x19c21  "ll.i"
.long     0x726f6e67    # at addr 0x19c25  "gnor"
.long     0x61622d65    # at addr 0x19c29  "e-ba"
.long     0x70756b63    # at addr 0x19c2d  "ckup"
.long     0x6c630073    # at addr 0x19c31  "s.cl"
.long     0x69737361    # at addr 0x19c35  "assi"
.long     0x66007966    # at addr 0x19c39  "fy.f"
.long     0x2d656c69    # at addr 0x19c3d  "ile-"
.long     0x65707974    # at addr 0x19c41  "type"
.long     0x00697300    # at addr 0x19c45  ".si."
.long     0x65726564    # at addr 0x19c49  "dere"
.long     0x65726566    # at addr 0x19c4d  "fere"
.long     0x2d65636e    # at addr 0x19c51  "nce-"
.long     0x6d6d6f63    # at addr 0x19c55  "comm"
.long     0x2d646e61    # at addr 0x19c59  "and-"
.long     0x656e696c    # at addr 0x19c5d  "line"
.long     0x64696800    # at addr 0x19c61  ".hid"
.long     0x67690065    # at addr 0x19c65  "e.ig"
.long     0x65726f6e    # at addr 0x19c69  "nore"
.long     0x72656400    # at addr 0x19c6d  ".der"
.long     0x72656665    # at addr 0x19c71  "efer"
.long     0x65636e65    # at addr 0x19c75  "ence"
.long     0x74696c00    # at addr 0x19c79  ".lit"
.long     0x6c617265    # at addr 0x19c7d  "eral"
.long     0x6f757100    # at addr 0x19c81  ".quo"
.long     0x6e2d6574    # at addr 0x19c85  "te-n"
.long     0x00656d61    # at addr 0x19c89  "ame."
.long     0x75636572    # at addr 0x19c8d  "recu"
.long     0x76697372    # at addr 0x19c91  "rsiv"
.long     0x68730065    # at addr 0x19c95  "e.sh"
.long     0x632d776f    # at addr 0x19c99  "ow-c"
.long     0x72746e6f    # at addr 0x19c9d  "ontr"
.long     0x632d6c6f    # at addr 0x19ca1  "ol-c"
.long     0x73726168    # at addr 0x19ca5  "hars"
.long     0x62617400    # at addr 0x19ca9  ".tab"
.long     0x657a6973    # at addr 0x19cad  "size"
.long     0x6d697400    # at addr 0x19cb1  ".tim"
.long     0x74732d65    # at addr 0x19cb5  "e-st"
.long     0x00656c79    # at addr 0x19cb9  "yle."
.long     0x636f6c62    # at addr 0x19cbd  "bloc"
.long     0x69732d6b    # at addr 0x19cc1  "k-si"
.long     0x6300657a    # at addr 0x19cc5  "ze.c"
.long     0x65746e6f    # at addr 0x19cc9  "onte"
.long     0x61007478    # at addr 0x19ccd  "xt.a"
.long     0x6f687475    # at addr 0x19cd1  "utho"
.long     0x65680072    # at addr 0x19cd5  "r.he"
.long     0x2500706c    # at addr 0x19cd9  "lp.%"
.long     0x65252062    # at addr 0x19cdd  "b %e"
.long     0x59252020    # at addr 0x19ce1  "  %Y"
.long     0x20622500    # at addr 0x19ce5  ".%b "
.long     0x25206525    # at addr 0x19ce9  "%e %"
.long     0x4d253a48    # at addr 0x19ced  "H:%M"
.byte     0x00    # "."
.byte     0x1b    # "."
Var0x19cf3:       # next=0x19d80, start=0x18000, end=0x1d248
.long     0x3130005b    # at addr 0x19cf3  "[.01"
.long     0x0034333b    # at addr 0x19cf7  ";34."
.long     0x333b3130    # at addr 0x19cfb  "01;3"
.long     0x31300036    # at addr 0x19cff  "6.01"
.long     0x0035333b    # at addr 0x19d03  ";35."
.long     0x333b3130    # at addr 0x19d07  "01;3"
.long     0x31300033    # at addr 0x19d0b  "3.01"
.long     0x0032333b    # at addr 0x19d0f  ";32."
.long     0x343b3733    # at addr 0x19d13  "37;4"
.long     0x30330031    # at addr 0x19d17  "1.30"
.long     0x0033343b    # at addr 0x19d1b  ";43."
.long     0x343b3733    # at addr 0x19d1f  "37;4"
.long     0x34330034    # at addr 0x19d23  "4.34"
.long     0x0032343b    # at addr 0x19d27  ";42."
.long     0x343b3033    # at addr 0x19d2b  "30;4"
.long     0x30330032    # at addr 0x19d2f  "2.30"
.long     0x0031343b    # at addr 0x19d33  ";41."
.long     0x004b5b1b    # at addr 0x19d37  ".[K."
.long     0x65006372    # at addr 0x19d3b  "rc.e"
.long     0x69660063    # at addr 0x19d3f  "c.fi"
.long     0x00696400    # at addr 0x19d43  ".di."
.long     0x70006e6c    # at addr 0x19d47  "ln.p"
.long     0x64620069    # at addr 0x19d4b  "i.bd"
.long     0x00646300    # at addr 0x19d4f  ".cd."
.long     0x6500696d    # at addr 0x19d53  "mi.e"
.long     0x6f640078    # at addr 0x19d57  "x.do"
.long     0x00757300    # at addr 0x19d5b  ".su."
.long     0x6f006773    # at addr 0x19d5f  "sg.o"
.long     0x77740077    # at addr 0x19d63  "w.tw"
.long     0x00616300    # at addr 0x19d67  ".ca."
.long     0x6300686d    # at addr 0x19d6b  "mh.c"
.long     0x6c73006c    # at addr 0x19d6f  "l.sl"
.long     0x00687361    # at addr 0x19d73  "ash."
.long     0x676e6f6c    # at addr 0x19d77  "long"
.long     0x6f73692d    # at addr 0x19d7b  "-iso"
.byte     0x00    # "."
Var0x19d80:       # next=0x19da8, start=0x18000, end=0x1d248
.long     0x6e6e6163    # at addr 0x19d80  "cann"
.long     0x6420746f    # at addr 0x19d84  "ot d"
.long     0x72657465    # at addr 0x19d88  "eter"
.long     0x656e696d    # at addr 0x19d8c  "mine"
.long     0x76656420    # at addr 0x19d90  " dev"
.long     0x20656369    # at addr 0x19d94  "ice "
.long     0x20646e61    # at addr 0x19d98  "and "
.long     0x646f6e69    # at addr 0x19d9c  "inod"
.long     0x666f2065    # at addr 0x19da0  "e of"
.long     0x00732520    # at addr 0x19da4  " %s."
Var0x19da8:       # next=0x19dd8, start=0x18000, end=0x1d248
.long     0x203a7325    # at addr 0x19da8  "%s: "
.long     0x20746f6e    # at addr 0x19dac  "not "
.long     0x7473696c    # at addr 0x19db0  "list"
.long     0x20676e69    # at addr 0x19db4  "ing "
.long     0x65726c61    # at addr 0x19db8  "alre"
.long     0x2d796461    # at addr 0x19dbc  "ady-"
.long     0x7473696c    # at addr 0x19dc0  "list"
.long     0x64206465    # at addr 0x19dc4  "ed d"
.long     0x63657269    # at addr 0x19dc8  "irec"
.long     0x79726f74    # at addr 0x19dcc  "tory"
.long     0x00000000    # at addr 0x19dd0  "...."
.long     0x00000000    # at addr 0x19dd4  "...."
Var0x19dd8:       # next=0x19e00, start=0x18000, end=0x1d248
.long     0x20797254    # at addr 0x19dd8  "Try "
.long     0x20732527    # at addr 0x19ddc  "'%s "
.long     0x65682d2d    # at addr 0x19de0  "--he"
.long     0x2027706c    # at addr 0x19de4  "lp' "
.long     0x20726f66    # at addr 0x19de8  "for "
.long     0x65726f6d    # at addr 0x19dec  "more"
.long     0x666e6920    # at addr 0x19df0  " inf"
.long     0x616d726f    # at addr 0x19df4  "orma"
.long     0x6e6f6974    # at addr 0x19df8  "tion"
.long     0x00000a2e    # at addr 0x19dfc  "...."
Var0x19e00:       # next=0x19e28, start=0x18000, end=0x1d248
.long     0x67617355    # at addr 0x19e00  "Usag"
.long     0x25203a65    # at addr 0x19e04  "e: %"
.long     0x4f5b2073    # at addr 0x19e08  "s [O"
.long     0x4f495450    # at addr 0x19e0c  "PTIO"
.long     0x2e2e5d4e    # at addr 0x19e10  "N].."
.long     0x465b202e    # at addr 0x19e14  ". [F"
.long     0x5d454c49    # at addr 0x19e18  "ILE]"
.long     0x0a2e2e2e    # at addr 0x19e1c  "...."
.long     0x00000000    # at addr 0x19e20  "...."
.long     0x00000000    # at addr 0x19e24  "...."
Var0x19e28:       # next=0x19eb8, start=0x18000, end=0x1d248
.long     0x7473694c    # at addr 0x19e28  "List"
.long     0x666e6920    # at addr 0x19e2c  " inf"
.long     0x616d726f    # at addr 0x19e30  "orma"
.long     0x6e6f6974    # at addr 0x19e34  "tion"
.long     0x6f626120    # at addr 0x19e38  " abo"
.long     0x74207475    # at addr 0x19e3c  "ut t"
.long     0x46206568    # at addr 0x19e40  "he F"
.long     0x73454c49    # at addr 0x19e44  "ILEs"
.long     0x68742820    # at addr 0x19e48  " (th"
.long     0x75632065    # at addr 0x19e4c  "e cu"
.long     0x6e657272    # at addr 0x19e50  "rren"
.long     0x69642074    # at addr 0x19e54  "t di"
.long     0x74636572    # at addr 0x19e58  "rect"
.long     0x2079726f    # at addr 0x19e5c  "ory "
.long     0x64207962    # at addr 0x19e60  "by d"
.long     0x75616665    # at addr 0x19e64  "efau"
.long     0x2e29746c    # at addr 0x19e68  "lt)."
.long     0x726f530a    # at addr 0x19e6c  ".Sor"
.long     0x6e652074    # at addr 0x19e70  "t en"
.long     0x65697274    # at addr 0x19e74  "trie"
.long     0x6c612073    # at addr 0x19e78  "s al"
.long     0x62616870    # at addr 0x19e7c  "phab"
.long     0x63697465    # at addr 0x19e80  "etic"
.long     0x796c6c61    # at addr 0x19e84  "ally"
.long     0x20666920    # at addr 0x19e88  " if "
.long     0x656e6f6e    # at addr 0x19e8c  "none"
.long     0x20666f20    # at addr 0x19e90  " of "
.long     0x7466632d    # at addr 0x19e94  "-cft"
.long     0x55537675    # at addr 0x19e98  "uvSU"
.long     0x6f6e2058    # at addr 0x19e9c  "X no"
.long     0x2d2d2072    # at addr 0x19ea0  "r --"
.long     0x74726f73    # at addr 0x19ea4  "sort"
.long     0x20736920    # at addr 0x19ea8  " is "
.long     0x63657073    # at addr 0x19eac  "spec"
.long     0x65696669    # at addr 0x19eb0  "ifie"
.long     0x000a2e64    # at addr 0x19eb4  "d..."
Var0x19eb8:       # next=0x19f08, start=0x18000, end=0x1d248
.long     0x6e614d0a    # at addr 0x19eb8  ".Man"
.long     0x6f746164    # at addr 0x19ebc  "dato"
.long     0x61207972    # at addr 0x19ec0  "ry a"
.long     0x6d756772    # at addr 0x19ec4  "rgum"
.long     0x73746e65    # at addr 0x19ec8  "ents"
.long     0x206f7420    # at addr 0x19ecc  " to "
.long     0x676e6f6c    # at addr 0x19ed0  "long"
.long     0x74706f20    # at addr 0x19ed4  " opt"
.long     0x736e6f69    # at addr 0x19ed8  "ions"
.long     0x65726120    # at addr 0x19edc  " are"
.long     0x6e616d20    # at addr 0x19ee0  " man"
.long     0x6f746164    # at addr 0x19ee4  "dato"
.long     0x66207972    # at addr 0x19ee8  "ry f"
.long     0x7320726f    # at addr 0x19eec  "or s"
.long     0x74726f68    # at addr 0x19ef0  "hort"
.long     0x74706f20    # at addr 0x19ef4  " opt"
.long     0x736e6f69    # at addr 0x19ef8  "ions"
.long     0x6f6f7420    # at addr 0x19efc  " too"
.long     0x00000a2e    # at addr 0x19f00  "...."
.long     0x00000000    # at addr 0x19f04  "...."
Var0x19f08:       # next=0x1a018, start=0x18000, end=0x1d248
.long     0x612d2020    # at addr 0x19f08  "  -a"
.long     0x2d2d202c    # at addr 0x19f0c  ", --"
.long     0x206c6c61    # at addr 0x19f10  "all "
.long     0x20202020    # at addr 0x19f14  "    "
.long     0x20202020    # at addr 0x19f18  "    "
.long     0x20202020    # at addr 0x19f1c  "    "
.long     0x20202020    # at addr 0x19f20  "    "
.long     0x206f6420    # at addr 0x19f24  " do "
.long     0x20746f6e    # at addr 0x19f28  "not "
.long     0x6f6e6769    # at addr 0x19f2c  "igno"
.long     0x65206572    # at addr 0x19f30  "re e"
.long     0x6972746e    # at addr 0x19f34  "ntri"
.long     0x73207365    # at addr 0x19f38  "es s"
.long     0x74726174    # at addr 0x19f3c  "tart"
.long     0x20676e69    # at addr 0x19f40  "ing "
.long     0x68746977    # at addr 0x19f44  "with"
.long     0x200a2e20    # at addr 0x19f48  " .. "
.long     0x2c412d20    # at addr 0x19f4c  " -A,"
.long     0x612d2d20    # at addr 0x19f50  " --a"
.long     0x736f6d6c    # at addr 0x19f54  "lmos"
.long     0x6c612d74    # at addr 0x19f58  "t-al"
.long     0x2020206c    # at addr 0x19f5c  "l   "
.long     0x20202020    # at addr 0x19f60  "    "
.long     0x20202020    # at addr 0x19f64  "    "
.long     0x6e206f64    # at addr 0x19f68  "do n"
.long     0x6c20746f    # at addr 0x19f6c  "ot l"
.long     0x20747369    # at addr 0x19f70  "ist "
.long     0x6c706d69    # at addr 0x19f74  "impl"
.long     0x20646569    # at addr 0x19f78  "ied "
.long     0x6e61202e    # at addr 0x19f7c  ". an"
.long     0x2e2e2064    # at addr 0x19f80  "d .."
.long     0x2020200a    # at addr 0x19f84  ".   "
.long     0x2d202020    # at addr 0x19f88  "   -"
.long     0x7475612d    # at addr 0x19f8c  "-aut"
.long     0x20726f68    # at addr 0x19f90  "hor "
.long     0x20202020    # at addr 0x19f94  "    "
.long     0x20202020    # at addr 0x19f98  "    "
.long     0x20202020    # at addr 0x19f9c  "    "
.long     0x69772020    # at addr 0x19fa0  "  wi"
.long     0x2d206874    # at addr 0x19fa4  "th -"
.long     0x70202c6c    # at addr 0x19fa8  "l, p"
.long     0x746e6972    # at addr 0x19fac  "rint"
.long     0x65687420    # at addr 0x19fb0  " the"
.long     0x74756120    # at addr 0x19fb4  " aut"
.long     0x20726f68    # at addr 0x19fb8  "hor "
.long     0x6520666f    # at addr 0x19fbc  "of e"
.long     0x20686361    # at addr 0x19fc0  "ach "
.long     0x656c6966    # at addr 0x19fc4  "file"
.long     0x2d20200a    # at addr 0x19fc8  ".  -"
.long     0x2d202c62    # at addr 0x19fcc  "b, -"
.long     0x6373652d    # at addr 0x19fd0  "-esc"
.long     0x20657061    # at addr 0x19fd4  "ape "
.long     0x20202020    # at addr 0x19fd8  "    "
.long     0x20202020    # at addr 0x19fdc  "    "
.long     0x20202020    # at addr 0x19fe0  "    "
.long     0x72702020    # at addr 0x19fe4  "  pr"
.long     0x20746e69    # at addr 0x19fe8  "int "
.long     0x74732d43    # at addr 0x19fec  "C-st"
.long     0x20656c79    # at addr 0x19ff0  "yle "
.long     0x61637365    # at addr 0x19ff4  "esca"
.long     0x20736570    # at addr 0x19ff8  "pes "
.long     0x20726f66    # at addr 0x19ffc  "for "
.long     0x676e6f6e    # at addr 0x1a000  "nong"
.long     0x68706172    # at addr 0x1a004  "raph"
.long     0x63206369    # at addr 0x1a008  "ic c"
.long     0x61726168    # at addr 0x1a00c  "hara"
.long     0x72657463    # at addr 0x1a010  "cter"
.long     0x00000a73    # at addr 0x1a014  "s..."
Var0x1a018:       # next=0x1a0b8, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1a018  "    "
.long     0x2d2d2020    # at addr 0x1a01c  "  --"
.long     0x636f6c62    # at addr 0x1a020  "bloc"
.long     0x69732d6b    # at addr 0x1a024  "k-si"
.long     0x533d657a    # at addr 0x1a028  "ze=S"
.long     0x20455a49    # at addr 0x1a02c  "IZE "
.long     0x20202020    # at addr 0x1a030  "    "
.long     0x74697720    # at addr 0x1a034  " wit"
.long     0x6c2d2068    # at addr 0x1a038  "h -l"
.long     0x6373202c    # at addr 0x1a03c  ", sc"
.long     0x20656c61    # at addr 0x1a040  "ale "
.long     0x657a6973    # at addr 0x1a044  "size"
.long     0x79622073    # at addr 0x1a048  "s by"
.long     0x5a495320    # at addr 0x1a04c  " SIZ"
.long     0x68772045    # at addr 0x1a050  "E wh"
.long     0x70206e65    # at addr 0x1a054  "en p"
.long     0x746e6972    # at addr 0x1a058  "rint"
.long     0x20676e69    # at addr 0x1a05c  "ing "
.long     0x6d656874    # at addr 0x1a060  "them"
.long     0x20200a3b    # at addr 0x1a064  ";.  "
.long     0x20202020    # at addr 0x1a068  "    "
.long     0x20202020    # at addr 0x1a06c  "    "
.long     0x20202020    # at addr 0x1a070  "    "
.long     0x20202020    # at addr 0x1a074  "    "
.long     0x20202020    # at addr 0x1a078  "    "
.long     0x20202020    # at addr 0x1a07c  "    "
.long     0x20202020    # at addr 0x1a080  "    "
.long     0x672e6520    # at addr 0x1a084  " e.g"
.long     0x27202c2e    # at addr 0x1a088  "., '"
.long     0x6c622d2d    # at addr 0x1a08c  "--bl"
.long     0x2d6b636f    # at addr 0x1a090  "ock-"
.long     0x657a6973    # at addr 0x1a094  "size"
.long     0x3b274d3d    # at addr 0x1a098  "=M';"
.long     0x65657320    # at addr 0x1a09c  " see"
.long     0x5a495320    # at addr 0x1a0a0  " SIZ"
.long     0x6f662045    # at addr 0x1a0a4  "E fo"
.long     0x74616d72    # at addr 0x1a0a8  "rmat"
.long     0x6c656220    # at addr 0x1a0ac  " bel"
.long     0x000a776f    # at addr 0x1a0b0  "ow.."
.long     0x00000000    # at addr 0x1a0b4  "...."
Var0x1a0b8:       # next=0x1a228, start=0x18000, end=0x1d248
.long     0x422d2020    # at addr 0x1a0b8  "  -B"
.long     0x2d2d202c    # at addr 0x1a0bc  ", --"
.long     0x6f6e6769    # at addr 0x1a0c0  "igno"
.long     0x622d6572    # at addr 0x1a0c4  "re-b"
.long     0x756b6361    # at addr 0x1a0c8  "acku"
.long     0x20207370    # at addr 0x1a0cc  "ps  "
.long     0x20202020    # at addr 0x1a0d0  "    "
.long     0x206f6420    # at addr 0x1a0d4  " do "
.long     0x20746f6e    # at addr 0x1a0d8  "not "
.long     0x7473696c    # at addr 0x1a0dc  "list"
.long     0x706d6920    # at addr 0x1a0e0  " imp"
.long     0x6465696c    # at addr 0x1a0e4  "lied"
.long     0x746e6520    # at addr 0x1a0e8  " ent"
.long     0x73656972    # at addr 0x1a0ec  "ries"
.long     0x646e6520    # at addr 0x1a0f0  " end"
.long     0x20676e69    # at addr 0x1a0f4  "ing "
.long     0x68746977    # at addr 0x1a0f8  "with"
.long     0x200a7e20    # at addr 0x1a0fc  " ~. "
.long     0x20632d20    # at addr 0x1a100  " -c "
.long     0x20202020    # at addr 0x1a104  "    "
.long     0x20202020    # at addr 0x1a108  "    "
.long     0x20202020    # at addr 0x1a10c  "    "
.long     0x20202020    # at addr 0x1a110  "    "
.long     0x20202020    # at addr 0x1a114  "    "
.long     0x20202020    # at addr 0x1a118  "    "
.long     0x68746977    # at addr 0x1a11c  "with"
.long     0x746c2d20    # at addr 0x1a120  " -lt"
.long     0x6f73203a    # at addr 0x1a124  ": so"
.long     0x62207472    # at addr 0x1a128  "rt b"
.long     0x61202c79    # at addr 0x1a12c  "y, a"
.long     0x7320646e    # at addr 0x1a130  "nd s"
.long     0x2c776f68    # at addr 0x1a134  "how,"
.long     0x69746320    # at addr 0x1a138  " cti"
.long     0x2820656d    # at addr 0x1a13c  "me ("
.long     0x656d6974    # at addr 0x1a140  "time"
.long     0x20666f20    # at addr 0x1a144  " of "
.long     0x7473616c    # at addr 0x1a148  "last"
.long     0x2020200a    # at addr 0x1a14c  ".   "
.long     0x20202020    # at addr 0x1a150  "    "
.long     0x20202020    # at addr 0x1a154  "    "
.long     0x20202020    # at addr 0x1a158  "    "
.long     0x20202020    # at addr 0x1a15c  "    "
.long     0x20202020    # at addr 0x1a160  "    "
.long     0x20202020    # at addr 0x1a164  "    "
.long     0x20202020    # at addr 0x1a168  "    "
.long     0x69646f6d    # at addr 0x1a16c  "modi"
.long     0x61636966    # at addr 0x1a170  "fica"
.long     0x6e6f6974    # at addr 0x1a174  "tion"
.long     0x20666f20    # at addr 0x1a178  " of "
.long     0x656c6966    # at addr 0x1a17c  "file"
.long     0x61747320    # at addr 0x1a180  " sta"
.long     0x20737574    # at addr 0x1a184  "tus "
.long     0x6f666e69    # at addr 0x1a188  "info"
.long     0x74616d72    # at addr 0x1a18c  "rmat"
.long     0x296e6f69    # at addr 0x1a190  "ion)"
.long     0x20200a3b    # at addr 0x1a194  ";.  "
.long     0x20202020    # at addr 0x1a198  "    "
.long     0x20202020    # at addr 0x1a19c  "    "
.long     0x20202020    # at addr 0x1a1a0  "    "
.long     0x20202020    # at addr 0x1a1a4  "    "
.long     0x20202020    # at addr 0x1a1a8  "    "
.long     0x20202020    # at addr 0x1a1ac  "    "
.long     0x20202020    # at addr 0x1a1b0  "    "
.long     0x74697720    # at addr 0x1a1b4  " wit"
.long     0x6c2d2068    # at addr 0x1a1b8  "h -l"
.long     0x6873203a    # at addr 0x1a1bc  ": sh"
.long     0x6320776f    # at addr 0x1a1c0  "ow c"
.long     0x656d6974    # at addr 0x1a1c4  "time"
.long     0x646e6120    # at addr 0x1a1c8  " and"
.long     0x726f7320    # at addr 0x1a1cc  " sor"
.long     0x79622074    # at addr 0x1a1d0  "t by"
.long     0x6d616e20    # at addr 0x1a1d4  " nam"
.long     0x200a3b65    # at addr 0x1a1d8  "e;. "
.long     0x20202020    # at addr 0x1a1dc  "    "
.long     0x20202020    # at addr 0x1a1e0  "    "
.long     0x20202020    # at addr 0x1a1e4  "    "
.long     0x20202020    # at addr 0x1a1e8  "    "
.long     0x20202020    # at addr 0x1a1ec  "    "
.long     0x20202020    # at addr 0x1a1f0  "    "
.long     0x20202020    # at addr 0x1a1f4  "    "
.long     0x746f2020    # at addr 0x1a1f8  "  ot"
.long     0x77726568    # at addr 0x1a1fc  "herw"
.long     0x3a657369    # at addr 0x1a200  "ise:"
.long     0x726f7320    # at addr 0x1a204  " sor"
.long     0x79622074    # at addr 0x1a208  "t by"
.long     0x69746320    # at addr 0x1a20c  " cti"
.long     0x202c656d    # at addr 0x1a210  "me, "
.long     0x6577656e    # at addr 0x1a214  "newe"
.long     0x66207473    # at addr 0x1a218  "st f"
.long     0x74737269    # at addr 0x1a21c  "irst"
.long     0x0000000a    # at addr 0x1a220  "...."
.long     0x00000000    # at addr 0x1a224  "...."
Var0x1a228:       # next=0x1a398, start=0x18000, end=0x1d248
.long     0x432d2020    # at addr 0x1a228  "  -C"
.long     0x20202020    # at addr 0x1a22c  "    "
.long     0x20202020    # at addr 0x1a230  "    "
.long     0x20202020    # at addr 0x1a234  "    "
.long     0x20202020    # at addr 0x1a238  "    "
.long     0x20202020    # at addr 0x1a23c  "    "
.long     0x20202020    # at addr 0x1a240  "    "
.long     0x73696c20    # at addr 0x1a244  " lis"
.long     0x6e652074    # at addr 0x1a248  "t en"
.long     0x65697274    # at addr 0x1a24c  "trie"
.long     0x79622073    # at addr 0x1a250  "s by"
.long     0x6c6f6320    # at addr 0x1a254  " col"
.long     0x736e6d75    # at addr 0x1a258  "umns"
.long     0x2020200a    # at addr 0x1a25c  ".   "
.long     0x2d202020    # at addr 0x1a260  "   -"
.long     0x6c6f632d    # at addr 0x1a264  "-col"
.long     0x3d5b726f    # at addr 0x1a268  "or[="
.long     0x4e454857    # at addr 0x1a26c  "WHEN"
.long     0x2020205d    # at addr 0x1a270  "]   "
.long     0x20202020    # at addr 0x1a274  "    "
.long     0x6f632020    # at addr 0x1a278  "  co"
.long     0x69726f6c    # at addr 0x1a27c  "lori"
.long     0x7420657a    # at addr 0x1a280  "ze t"
.long     0x6f206568    # at addr 0x1a284  "he o"
.long     0x75707475    # at addr 0x1a288  "utpu"
.long     0x57203b74    # at addr 0x1a28c  "t; W"
.long     0x204e4548    # at addr 0x1a290  "HEN "
.long     0x206e6163    # at addr 0x1a294  "can "
.long     0x27206562    # at addr 0x1a298  "be '"
.long     0x61776c61    # at addr 0x1a29c  "alwa"
.long     0x20277379    # at addr 0x1a2a0  "ys' "
.long     0x66656428    # at addr 0x1a2a4  "(def"
.long     0x746c7561    # at addr 0x1a2a8  "ault"
.long     0x2020200a    # at addr 0x1a2ac  ".   "
.long     0x20202020    # at addr 0x1a2b0  "    "
.long     0x20202020    # at addr 0x1a2b4  "    "
.long     0x20202020    # at addr 0x1a2b8  "    "
.long     0x20202020    # at addr 0x1a2bc  "    "
.long     0x20202020    # at addr 0x1a2c0  "    "
.long     0x20202020    # at addr 0x1a2c4  "    "
.long     0x20202020    # at addr 0x1a2c8  "    "
.long     0x6f206669    # at addr 0x1a2cc  "if o"
.long     0x7474696d    # at addr 0x1a2d0  "mitt"
.long     0x2c296465    # at addr 0x1a2d4  "ed),"
.long     0x75612720    # at addr 0x1a2d8  " 'au"
.long     0x2c276f74    # at addr 0x1a2dc  "to',"
.long     0x20726f20    # at addr 0x1a2e0  " or "
.long     0x76656e27    # at addr 0x1a2e4  "'nev"
.long     0x3b277265    # at addr 0x1a2e8  "er';"
.long     0x726f6d20    # at addr 0x1a2ec  " mor"
.long     0x6e692065    # at addr 0x1a2f0  "e in"
.long     0x62206f66    # at addr 0x1a2f4  "fo b"
.long     0x776f6c65    # at addr 0x1a2f8  "elow"
.long     0x2d20200a    # at addr 0x1a2fc  ".  -"
.long     0x2d202c64    # at addr 0x1a300  "d, -"
.long     0x7269642d    # at addr 0x1a304  "-dir"
.long     0x6f746365    # at addr 0x1a308  "ecto"
.long     0x20207972    # at addr 0x1a30c  "ry  "
.long     0x20202020    # at addr 0x1a310  "    "
.long     0x20202020    # at addr 0x1a314  "    "
.long     0x696c2020    # at addr 0x1a318  "  li"
.long     0x64207473    # at addr 0x1a31c  "st d"
.long     0x63657269    # at addr 0x1a320  "irec"
.long     0x69726f74    # at addr 0x1a324  "tori"
.long     0x74207365    # at addr 0x1a328  "es t"
.long     0x736d6568    # at addr 0x1a32c  "hems"
.long     0x65766c65    # at addr 0x1a330  "elve"
.long     0x6e202c73    # at addr 0x1a334  "s, n"
.long     0x7420746f    # at addr 0x1a338  "ot t"
.long     0x72696568    # at addr 0x1a33c  "heir"
.long     0x6e6f6320    # at addr 0x1a340  " con"
.long     0x746e6574    # at addr 0x1a344  "tent"
.long     0x20200a73    # at addr 0x1a348  "s.  "
.long     0x202c442d    # at addr 0x1a34c  "-D, "
.long     0x69642d2d    # at addr 0x1a350  "--di"
.long     0x20646572    # at addr 0x1a354  "red "
.long     0x20202020    # at addr 0x1a358  "    "
.long     0x20202020    # at addr 0x1a35c  "    "
.long     0x20202020    # at addr 0x1a360  "    "
.long     0x67202020    # at addr 0x1a364  "   g"
.long     0x72656e65    # at addr 0x1a368  "ener"
.long     0x20657461    # at addr 0x1a36c  "ate "
.long     0x7074756f    # at addr 0x1a370  "outp"
.long     0x64207475    # at addr 0x1a374  "ut d"
.long     0x67697365    # at addr 0x1a378  "esig"
.long     0x2064656e    # at addr 0x1a37c  "ned "
.long     0x20726f66    # at addr 0x1a380  "for "
.long     0x63616d45    # at addr 0x1a384  "Emac"
.long     0x64202773    # at addr 0x1a388  "s' d"
.long     0x64657269    # at addr 0x1a38c  "ired"
.long     0x646f6d20    # at addr 0x1a390  " mod"
.long     0x00000a65    # at addr 0x1a394  "e..."
Var0x1a398:       # next=0x1a540, start=0x18000, end=0x1d248
.long     0x662d2020    # at addr 0x1a398  "  -f"
.long     0x20202020    # at addr 0x1a39c  "    "
.long     0x20202020    # at addr 0x1a3a0  "    "
.long     0x20202020    # at addr 0x1a3a4  "    "
.long     0x20202020    # at addr 0x1a3a8  "    "
.long     0x20202020    # at addr 0x1a3ac  "    "
.long     0x20202020    # at addr 0x1a3b0  "    "
.long     0x206f6420    # at addr 0x1a3b4  " do "
.long     0x20746f6e    # at addr 0x1a3b8  "not "
.long     0x74726f73    # at addr 0x1a3bc  "sort"
.long     0x6e65202c    # at addr 0x1a3c0  ", en"
.long     0x656c6261    # at addr 0x1a3c4  "able"
.long     0x55612d20    # at addr 0x1a3c8  " -aU"
.long     0x6964202c    # at addr 0x1a3cc  ", di"
.long     0x6c626173    # at addr 0x1a3d0  "sabl"
.long     0x6c2d2065    # at addr 0x1a3d4  "e -l"
.long     0x2d2d2073    # at addr 0x1a3d8  "s --"
.long     0x6f6c6f63    # at addr 0x1a3dc  "colo"
.long     0x20200a72    # at addr 0x1a3e0  "r.  "
.long     0x202c462d    # at addr 0x1a3e4  "-F, "
.long     0x6c632d2d    # at addr 0x1a3e8  "--cl"
.long     0x69737361    # at addr 0x1a3ec  "assi"
.long     0x20207966    # at addr 0x1a3f0  "fy  "
.long     0x20202020    # at addr 0x1a3f4  "    "
.long     0x20202020    # at addr 0x1a3f8  "    "
.long     0x61202020    # at addr 0x1a3fc  "   a"
.long     0x6e657070    # at addr 0x1a400  "ppen"
.long     0x6e692064    # at addr 0x1a404  "d in"
.long     0x61636964    # at addr 0x1a408  "dica"
.long     0x20726f74    # at addr 0x1a40c  "tor "
.long     0x656e6f28    # at addr 0x1a410  "(one"
.long     0x20666f20    # at addr 0x1a414  " of "
.long     0x3e3d2f2a    # at addr 0x1a418  "*/=>"
.long     0x20297c40    # at addr 0x1a41c  "@|) "
.long     0x65206f74    # at addr 0x1a420  "to e"
.long     0x6972746e    # at addr 0x1a424  "ntri"
.long     0x200a7365    # at addr 0x1a428  "es. "
.long     0x20202020    # at addr 0x1a42c  "    "
.long     0x662d2d20    # at addr 0x1a430  " --f"
.long     0x2d656c69    # at addr 0x1a434  "ile-"
.long     0x65707974    # at addr 0x1a438  "type"
.long     0x20202020    # at addr 0x1a43c  "    "
.long     0x20202020    # at addr 0x1a440  "    "
.long     0x20202020    # at addr 0x1a444  "    "
.long     0x656b696c    # at addr 0x1a448  "like"
.long     0x65736977    # at addr 0x1a44c  "wise"
.long     0x7865202c    # at addr 0x1a450  ", ex"
.long     0x74706563    # at addr 0x1a454  "cept"
.long     0x206f6420    # at addr 0x1a458  " do "
.long     0x20746f6e    # at addr 0x1a45c  "not "
.long     0x65707061    # at addr 0x1a460  "appe"
.long     0x2720646e    # at addr 0x1a464  "nd '"
.long     0x200a272a    # at addr 0x1a468  "*'. "
.long     0x20202020    # at addr 0x1a46c  "    "
.long     0x662d2d20    # at addr 0x1a470  " --f"
.long     0x616d726f    # at addr 0x1a474  "orma"
.long     0x4f573d74    # at addr 0x1a478  "t=WO"
.long     0x20204452    # at addr 0x1a47c  "RD  "
.long     0x20202020    # at addr 0x1a480  "    "
.long     0x20202020    # at addr 0x1a484  "    "
.long     0x6f726361    # at addr 0x1a488  "acro"
.long     0x2d207373    # at addr 0x1a48c  "ss -"
.long     0x63202c78    # at addr 0x1a490  "x, c"
.long     0x616d6d6f    # at addr 0x1a494  "omma"
.long     0x6d2d2073    # at addr 0x1a498  "s -m"
.long     0x6f68202c    # at addr 0x1a49c  ", ho"
.long     0x6f7a6972    # at addr 0x1a4a0  "rizo"
.long     0x6c61746e    # at addr 0x1a4a4  "ntal"
.long     0x2c782d20    # at addr 0x1a4a8  " -x,"
.long     0x6e6f6c20    # at addr 0x1a4ac  " lon"
.long     0x6c2d2067    # at addr 0x1a4b0  "g -l"
.long     0x20200a2c    # at addr 0x1a4b4  ",.  "
.long     0x20202020    # at addr 0x1a4b8  "    "
.long     0x20202020    # at addr 0x1a4bc  "    "
.long     0x20202020    # at addr 0x1a4c0  "    "
.long     0x20202020    # at addr 0x1a4c4  "    "
.long     0x20202020    # at addr 0x1a4c8  "    "
.long     0x20202020    # at addr 0x1a4cc  "    "
.long     0x20202020    # at addr 0x1a4d0  "    "
.long     0x6e697320    # at addr 0x1a4d4  " sin"
.long     0x2d656c67    # at addr 0x1a4d8  "gle-"
.long     0x756c6f63    # at addr 0x1a4dc  "colu"
.long     0x2d206e6d    # at addr 0x1a4e0  "mn -"
.long     0x76202c31    # at addr 0x1a4e4  "1, v"
.long     0x6f627265    # at addr 0x1a4e8  "erbo"
.long     0x2d206573    # at addr 0x1a4ec  "se -"
.long     0x76202c6c    # at addr 0x1a4f0  "l, v"
.long     0x69747265    # at addr 0x1a4f4  "erti"
.long     0x206c6163    # at addr 0x1a4f8  "cal "
.long     0x200a432d    # at addr 0x1a4fc  "-C. "
.long     0x20202020    # at addr 0x1a500  "    "
.long     0x662d2d20    # at addr 0x1a504  " --f"
.long     0x2d6c6c75    # at addr 0x1a508  "ull-"
.long     0x656d6974    # at addr 0x1a50c  "time"
.long     0x20202020    # at addr 0x1a510  "    "
.long     0x20202020    # at addr 0x1a514  "    "
.long     0x20202020    # at addr 0x1a518  "    "
.long     0x656b696c    # at addr 0x1a51c  "like"
.long     0x206c2d20    # at addr 0x1a520  " -l "
.long     0x69742d2d    # at addr 0x1a524  "--ti"
.long     0x732d656d    # at addr 0x1a528  "me-s"
.long     0x656c7974    # at addr 0x1a52c  "tyle"
.long     0x6c75663d    # at addr 0x1a530  "=ful"
.long     0x73692d6c    # at addr 0x1a534  "l-is"
.long     0x00000a6f    # at addr 0x1a538  "o..."
.long     0x00000000    # at addr 0x1a53c  "...."
Var0x1a540:       # next=0x1a580, start=0x18000, end=0x1d248
.long     0x672d2020    # at addr 0x1a540  "  -g"
.long     0x20202020    # at addr 0x1a544  "    "
.long     0x20202020    # at addr 0x1a548  "    "
.long     0x20202020    # at addr 0x1a54c  "    "
.long     0x20202020    # at addr 0x1a550  "    "
.long     0x20202020    # at addr 0x1a554  "    "
.long     0x20202020    # at addr 0x1a558  "    "
.long     0x6b696c20    # at addr 0x1a55c  " lik"
.long     0x6c2d2065    # at addr 0x1a560  "e -l"
.long     0x7562202c    # at addr 0x1a564  ", bu"
.long     0x6f642074    # at addr 0x1a568  "t do"
.long     0x746f6e20    # at addr 0x1a56c  " not"
.long     0x73696c20    # at addr 0x1a570  " lis"
.long     0x776f2074    # at addr 0x1a574  "t ow"
.long     0x0a72656e    # at addr 0x1a578  "ner."
.long     0x00000000    # at addr 0x1a57c  "...."
Var0x1a580:       # next=0x1a678, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1a580  "    "
.long     0x2d2d2020    # at addr 0x1a584  "  --"
.long     0x756f7267    # at addr 0x1a588  "grou"
.long     0x69642d70    # at addr 0x1a58c  "p-di"
.long     0x74636572    # at addr 0x1a590  "rect"
.long     0x6569726f    # at addr 0x1a594  "orie"
.long     0x69662d73    # at addr 0x1a598  "s-fi"
.long     0x0a747372    # at addr 0x1a59c  "rst."
.long     0x20202020    # at addr 0x1a5a0  "    "
.long     0x20202020    # at addr 0x1a5a4  "    "
.long     0x20202020    # at addr 0x1a5a8  "    "
.long     0x20202020    # at addr 0x1a5ac  "    "
.long     0x20202020    # at addr 0x1a5b0  "    "
.long     0x20202020    # at addr 0x1a5b4  "    "
.long     0x20202020    # at addr 0x1a5b8  "    "
.long     0x6f726720    # at addr 0x1a5bc  " gro"
.long     0x64207075    # at addr 0x1a5c0  "up d"
.long     0x63657269    # at addr 0x1a5c4  "irec"
.long     0x69726f74    # at addr 0x1a5c8  "tori"
.long     0x62207365    # at addr 0x1a5cc  "es b"
.long     0x726f6665    # at addr 0x1a5d0  "efor"
.long     0x69662065    # at addr 0x1a5d4  "e fi"
.long     0x3b73656c    # at addr 0x1a5d8  "les;"
.long     0x2020200a    # at addr 0x1a5dc  ".   "
.long     0x20202020    # at addr 0x1a5e0  "    "
.long     0x20202020    # at addr 0x1a5e4  "    "
.long     0x20202020    # at addr 0x1a5e8  "    "
.long     0x20202020    # at addr 0x1a5ec  "    "
.long     0x20202020    # at addr 0x1a5f0  "    "
.long     0x20202020    # at addr 0x1a5f4  "    "
.long     0x20202020    # at addr 0x1a5f8  "    "
.long     0x206e6163    # at addr 0x1a5fc  "can "
.long     0x61206562    # at addr 0x1a600  "be a"
.long     0x656d6775    # at addr 0x1a604  "ugme"
.long     0x6465746e    # at addr 0x1a608  "nted"
.long     0x74697720    # at addr 0x1a60c  " wit"
.long     0x20612068    # at addr 0x1a610  "h a "
.long     0x6f732d2d    # at addr 0x1a614  "--so"
.long     0x6f207472    # at addr 0x1a618  "rt o"
.long     0x6f697470    # at addr 0x1a61c  "ptio"
.long     0x62202c6e    # at addr 0x1a620  "n, b"
.long     0x61207475    # at addr 0x1a624  "ut a"
.long     0x200a796e    # at addr 0x1a628  "ny. "
.long     0x20202020    # at addr 0x1a62c  "    "
.long     0x20202020    # at addr 0x1a630  "    "
.long     0x20202020    # at addr 0x1a634  "    "
.long     0x20202020    # at addr 0x1a638  "    "
.long     0x20202020    # at addr 0x1a63c  "    "
.long     0x20202020    # at addr 0x1a640  "    "
.long     0x20202020    # at addr 0x1a644  "    "
.long     0x73752020    # at addr 0x1a648  "  us"
.long     0x666f2065    # at addr 0x1a64c  "e of"
.long     0x732d2d20    # at addr 0x1a650  " --s"
.long     0x3d74726f    # at addr 0x1a654  "ort="
.long     0x656e6f6e    # at addr 0x1a658  "none"
.long     0x552d2820    # at addr 0x1a65c  " (-U"
.long     0x69642029    # at addr 0x1a660  ") di"
.long     0x6c626173    # at addr 0x1a664  "sabl"
.long     0x67207365    # at addr 0x1a668  "es g"
.long     0x70756f72    # at addr 0x1a66c  "roup"
.long     0x0a676e69    # at addr 0x1a670  "ing."
.long     0x00000000    # at addr 0x1a674  "...."
Var0x1a678:       # next=0x1a6c8, start=0x18000, end=0x1d248
.long     0x472d2020    # at addr 0x1a678  "  -G"
.long     0x2d2d202c    # at addr 0x1a67c  ", --"
.long     0x672d6f6e    # at addr 0x1a680  "no-g"
.long     0x70756f72    # at addr 0x1a684  "roup"
.long     0x20202020    # at addr 0x1a688  "    "
.long     0x20202020    # at addr 0x1a68c  "    "
.long     0x20202020    # at addr 0x1a690  "    "
.long     0x206e6920    # at addr 0x1a694  " in "
.long     0x6f6c2061    # at addr 0x1a698  "a lo"
.long     0x6c20676e    # at addr 0x1a69c  "ng l"
.long     0x69747369    # at addr 0x1a6a0  "isti"
.long     0x202c676e    # at addr 0x1a6a4  "ng, "
.long     0x276e6f64    # at addr 0x1a6a8  "don'"
.long     0x72702074    # at addr 0x1a6ac  "t pr"
.long     0x20746e69    # at addr 0x1a6b0  "int "
.long     0x756f7267    # at addr 0x1a6b4  "grou"
.long     0x616e2070    # at addr 0x1a6b8  "p na"
.long     0x0a73656d    # at addr 0x1a6bc  "mes."
.long     0x00000000    # at addr 0x1a6c0  "...."
.long     0x00000000    # at addr 0x1a6c4  "...."
Var0x1a6c8:       # next=0x1a760, start=0x18000, end=0x1d248
.long     0x682d2020    # at addr 0x1a6c8  "  -h"
.long     0x2d2d202c    # at addr 0x1a6cc  ", --"
.long     0x616d7568    # at addr 0x1a6d0  "huma"
.long     0x65722d6e    # at addr 0x1a6d4  "n-re"
.long     0x62616461    # at addr 0x1a6d8  "adab"
.long     0x2020656c    # at addr 0x1a6dc  "le  "
.long     0x20202020    # at addr 0x1a6e0  "    "
.long     0x74697720    # at addr 0x1a6e4  " wit"
.long     0x6c2d2068    # at addr 0x1a6e8  "h -l"
.long     0x646e6120    # at addr 0x1a6ec  " and"
.long     0x2c732d20    # at addr 0x1a6f0  " -s,"
.long     0x69727020    # at addr 0x1a6f4  " pri"
.long     0x7320746e    # at addr 0x1a6f8  "nt s"
.long     0x73657a69    # at addr 0x1a6fc  "izes"
.long     0x6b696c20    # at addr 0x1a700  " lik"
.long     0x4b312065    # at addr 0x1a704  "e 1K"
.long     0x34333220    # at addr 0x1a708  " 234"
.long     0x4732204d    # at addr 0x1a70c  "M 2G"
.long     0x63746520    # at addr 0x1a710  " etc"
.long     0x20200a2e    # at addr 0x1a714  "..  "
.long     0x20202020    # at addr 0x1a718  "    "
.long     0x69732d2d    # at addr 0x1a71c  "--si"
.long     0x20202020    # at addr 0x1a720  "    "
.long     0x20202020    # at addr 0x1a724  "    "
.long     0x20202020    # at addr 0x1a728  "    "
.long     0x20202020    # at addr 0x1a72c  "    "
.long     0x6c202020    # at addr 0x1a730  "   l"
.long     0x77656b69    # at addr 0x1a734  "ikew"
.long     0x2c657369    # at addr 0x1a738  "ise,"
.long     0x74756220    # at addr 0x1a73c  " but"
.long     0x65737520    # at addr 0x1a740  " use"
.long     0x776f7020    # at addr 0x1a744  " pow"
.long     0x20737265    # at addr 0x1a748  "ers "
.long     0x3120666f    # at addr 0x1a74c  "of 1"
.long     0x20303030    # at addr 0x1a750  "000 "
.long     0x20746f6e    # at addr 0x1a754  "not "
.long     0x34323031    # at addr 0x1a758  "1024"
.long     0x0000000a    # at addr 0x1a75c  "...."
Var0x1a760:       # next=0x1a908, start=0x18000, end=0x1d248
.long     0x482d2020    # at addr 0x1a760  "  -H"
.long     0x2d2d202c    # at addr 0x1a764  ", --"
.long     0x65726564    # at addr 0x1a768  "dere"
.long     0x65726566    # at addr 0x1a76c  "fere"
.long     0x2d65636e    # at addr 0x1a770  "nce-"
.long     0x6d6d6f63    # at addr 0x1a774  "comm"
.long     0x2d646e61    # at addr 0x1a778  "and-"
.long     0x656e696c    # at addr 0x1a77c  "line"
.long     0x2020200a    # at addr 0x1a780  ".   "
.long     0x20202020    # at addr 0x1a784  "    "
.long     0x20202020    # at addr 0x1a788  "    "
.long     0x20202020    # at addr 0x1a78c  "    "
.long     0x20202020    # at addr 0x1a790  "    "
.long     0x20202020    # at addr 0x1a794  "    "
.long     0x20202020    # at addr 0x1a798  "    "
.long     0x6f662020    # at addr 0x1a79c  "  fo"
.long     0x776f6c6c    # at addr 0x1a7a0  "llow"
.long     0x6d797320    # at addr 0x1a7a4  " sym"
.long     0x696c6f62    # at addr 0x1a7a8  "boli"
.long     0x696c2063    # at addr 0x1a7ac  "c li"
.long     0x20736b6e    # at addr 0x1a7b0  "nks "
.long     0x7473696c    # at addr 0x1a7b4  "list"
.long     0x6f206465    # at addr 0x1a7b8  "ed o"
.long     0x6874206e    # at addr 0x1a7bc  "n th"
.long     0x6f632065    # at addr 0x1a7c0  "e co"
.long     0x6e616d6d    # at addr 0x1a7c4  "mman"
.long     0x696c2064    # at addr 0x1a7c8  "d li"
.long     0x200a656e    # at addr 0x1a7cc  "ne. "
.long     0x20202020    # at addr 0x1a7d0  "    "
.long     0x642d2d20    # at addr 0x1a7d4  " --d"
.long     0x66657265    # at addr 0x1a7d8  "eref"
.long     0x6e657265    # at addr 0x1a7dc  "eren"
.long     0x632d6563    # at addr 0x1a7e0  "ce-c"
.long     0x616d6d6f    # at addr 0x1a7e4  "omma"
.long     0x6c2d646e    # at addr 0x1a7e8  "nd-l"
.long     0x2d656e69    # at addr 0x1a7ec  "ine-"
.long     0x6c6d7973    # at addr 0x1a7f0  "syml"
.long     0x2d6b6e69    # at addr 0x1a7f4  "ink-"
.long     0x642d6f74    # at addr 0x1a7f8  "to-d"
.long     0x200a7269    # at addr 0x1a7fc  "ir. "
.long     0x20202020    # at addr 0x1a800  "    "
.long     0x20202020    # at addr 0x1a804  "    "
.long     0x20202020    # at addr 0x1a808  "    "
.long     0x20202020    # at addr 0x1a80c  "    "
.long     0x20202020    # at addr 0x1a810  "    "
.long     0x20202020    # at addr 0x1a814  "    "
.long     0x20202020    # at addr 0x1a818  "    "
.long     0x6c6c6f66    # at addr 0x1a81c  "foll"
.long     0x6520776f    # at addr 0x1a820  "ow e"
.long     0x20686361    # at addr 0x1a824  "ach "
.long     0x6d6d6f63    # at addr 0x1a828  "comm"
.long     0x20646e61    # at addr 0x1a82c  "and "
.long     0x656e696c    # at addr 0x1a830  "line"
.long     0x6d797320    # at addr 0x1a834  " sym"
.long     0x696c6f62    # at addr 0x1a838  "boli"
.long     0x696c2063    # at addr 0x1a83c  "c li"
.long     0x200a6b6e    # at addr 0x1a840  "nk. "
.long     0x20202020    # at addr 0x1a844  "    "
.long     0x20202020    # at addr 0x1a848  "    "
.long     0x20202020    # at addr 0x1a84c  "    "
.long     0x20202020    # at addr 0x1a850  "    "
.long     0x20202020    # at addr 0x1a854  "    "
.long     0x20202020    # at addr 0x1a858  "    "
.long     0x20202020    # at addr 0x1a85c  "    "
.long     0x68742020    # at addr 0x1a860  "  th"
.long     0x70207461    # at addr 0x1a864  "at p"
.long     0x746e696f    # at addr 0x1a868  "oint"
.long     0x6f742073    # at addr 0x1a86c  "s to"
.long     0x64206120    # at addr 0x1a870  " a d"
.long     0x63657269    # at addr 0x1a874  "irec"
.long     0x79726f74    # at addr 0x1a878  "tory"
.long     0x2020200a    # at addr 0x1a87c  ".   "
.long     0x2d202020    # at addr 0x1a880  "   -"
.long     0x6469682d    # at addr 0x1a884  "-hid"
.long     0x41503d65    # at addr 0x1a888  "e=PA"
.long     0x52455454    # at addr 0x1a88c  "TTER"
.long     0x2020204e    # at addr 0x1a890  "N   "
.long     0x20202020    # at addr 0x1a894  "    "
.long     0x6f642020    # at addr 0x1a898  "  do"
.long     0x746f6e20    # at addr 0x1a89c  " not"
.long     0x73696c20    # at addr 0x1a8a0  " lis"
.long     0x6d692074    # at addr 0x1a8a4  "t im"
.long     0x65696c70    # at addr 0x1a8a8  "plie"
.long     0x6e652064    # at addr 0x1a8ac  "d en"
.long     0x65697274    # at addr 0x1a8b0  "trie"
.long     0x616d2073    # at addr 0x1a8b4  "s ma"
.long     0x69686374    # at addr 0x1a8b8  "tchi"
.long     0x7320676e    # at addr 0x1a8bc  "ng s"
.long     0x6c6c6568    # at addr 0x1a8c0  "hell"
.long     0x54415020    # at addr 0x1a8c4  " PAT"
.long     0x4e524554    # at addr 0x1a8c8  "TERN"
.long     0x2020200a    # at addr 0x1a8cc  ".   "
.long     0x20202020    # at addr 0x1a8d0  "    "
.long     0x20202020    # at addr 0x1a8d4  "    "
.long     0x20202020    # at addr 0x1a8d8  "    "
.long     0x20202020    # at addr 0x1a8dc  "    "
.long     0x20202020    # at addr 0x1a8e0  "    "
.long     0x20202020    # at addr 0x1a8e4  "    "
.long     0x20202020    # at addr 0x1a8e8  "    "
.long     0x65766f28    # at addr 0x1a8ec  "(ove"
.long     0x64697272    # at addr 0x1a8f0  "rrid"
.long     0x206e6564    # at addr 0x1a8f4  "den "
.long     0x2d207962    # at addr 0x1a8f8  "by -"
.long     0x726f2061    # at addr 0x1a8fc  "a or"
.long     0x29412d20    # at addr 0x1a900  " -A)"
.long     0x0000000a    # at addr 0x1a904  "...."
Var0x1a908:       # next=0x1a9a0, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1a908  "    "
.long     0x2d2d2020    # at addr 0x1a90c  "  --"
.long     0x65707968    # at addr 0x1a910  "hype"
.long     0x6e696c72    # at addr 0x1a914  "rlin"
.long     0x573d5b6b    # at addr 0x1a918  "k[=W"
.long     0x5d4e4548    # at addr 0x1a91c  "HEN]"
.long     0x20202020    # at addr 0x1a920  "    "
.long     0x70796820    # at addr 0x1a924  " hyp"
.long     0x696c7265    # at addr 0x1a928  "erli"
.long     0x66206b6e    # at addr 0x1a92c  "nk f"
.long     0x20656c69    # at addr 0x1a930  "ile "
.long     0x656d616e    # at addr 0x1a934  "name"
.long     0x57203b73    # at addr 0x1a938  "s; W"
.long     0x204e4548    # at addr 0x1a93c  "HEN "
.long     0x206e6163    # at addr 0x1a940  "can "
.long     0x27206562    # at addr 0x1a944  "be '"
.long     0x61776c61    # at addr 0x1a948  "alwa"
.long     0x0a277379    # at addr 0x1a94c  "ys'."
.long     0x20202020    # at addr 0x1a950  "    "
.long     0x20202020    # at addr 0x1a954  "    "
.long     0x20202020    # at addr 0x1a958  "    "
.long     0x20202020    # at addr 0x1a95c  "    "
.long     0x20202020    # at addr 0x1a960  "    "
.long     0x20202020    # at addr 0x1a964  "    "
.long     0x20202020    # at addr 0x1a968  "    "
.long     0x28202020    # at addr 0x1a96c  "   ("
.long     0x61666564    # at addr 0x1a970  "defa"
.long     0x20746c75    # at addr 0x1a974  "ult "
.long     0x6f206669    # at addr 0x1a978  "if o"
.long     0x7474696d    # at addr 0x1a97c  "mitt"
.long     0x2c296465    # at addr 0x1a980  "ed),"
.long     0x75612720    # at addr 0x1a984  " 'au"
.long     0x2c276f74    # at addr 0x1a988  "to',"
.long     0x20726f20    # at addr 0x1a98c  " or "
.long     0x76656e27    # at addr 0x1a990  "'nev"
.long     0x0a277265    # at addr 0x1a994  "er'."
.long     0x00000000    # at addr 0x1a998  "...."
.long     0x00000000    # at addr 0x1a99c  "...."
Var0x1a9a0:       # next=0x1ab08, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1a9a0  "    "
.long     0x2d2d2020    # at addr 0x1a9a4  "  --"
.long     0x69646e69    # at addr 0x1a9a8  "indi"
.long     0x6f746163    # at addr 0x1a9ac  "cato"
.long     0x74732d72    # at addr 0x1a9b0  "r-st"
.long     0x3d656c79    # at addr 0x1a9b4  "yle="
.long     0x44524f57    # at addr 0x1a9b8  "WORD"
.long     0x70612020    # at addr 0x1a9bc  "  ap"
.long     0x646e6570    # at addr 0x1a9c0  "pend"
.long     0x646e6920    # at addr 0x1a9c4  " ind"
.long     0x74616369    # at addr 0x1a9c8  "icat"
.long     0x7720726f    # at addr 0x1a9cc  "or w"
.long     0x20687469    # at addr 0x1a9d0  "ith "
.long     0x6c797473    # at addr 0x1a9d4  "styl"
.long     0x4f572065    # at addr 0x1a9d8  "e WO"
.long     0x74204452    # at addr 0x1a9dc  "RD t"
.long     0x6e65206f    # at addr 0x1a9e0  "o en"
.long     0x20797274    # at addr 0x1a9e4  "try "
.long     0x656d616e    # at addr 0x1a9e8  "name"
.long     0x200a3a73    # at addr 0x1a9ec  "s:. "
.long     0x20202020    # at addr 0x1a9f0  "    "
.long     0x20202020    # at addr 0x1a9f4  "    "
.long     0x20202020    # at addr 0x1a9f8  "    "
.long     0x20202020    # at addr 0x1a9fc  "    "
.long     0x20202020    # at addr 0x1aa00  "    "
.long     0x20202020    # at addr 0x1aa04  "    "
.long     0x20202020    # at addr 0x1aa08  "    "
.long     0x6f6e2020    # at addr 0x1aa0c  "  no"
.long     0x2820656e    # at addr 0x1aa10  "ne ("
.long     0x61666564    # at addr 0x1aa14  "defa"
.long     0x29746c75    # at addr 0x1aa18  "ult)"
.long     0x6c73202c    # at addr 0x1aa1c  ", sl"
.long     0x20687361    # at addr 0x1aa20  "ash "
.long     0x29702d28    # at addr 0x1aa24  "(-p)"
.long     0x20200a2c    # at addr 0x1aa28  ",.  "
.long     0x20202020    # at addr 0x1aa2c  "    "
.long     0x20202020    # at addr 0x1aa30  "    "
.long     0x20202020    # at addr 0x1aa34  "    "
.long     0x20202020    # at addr 0x1aa38  "    "
.long     0x20202020    # at addr 0x1aa3c  "    "
.long     0x20202020    # at addr 0x1aa40  "    "
.long     0x20202020    # at addr 0x1aa44  "    "
.long     0x6c696620    # at addr 0x1aa48  " fil"
.long     0x79742d65    # at addr 0x1aa4c  "e-ty"
.long     0x28206570    # at addr 0x1aa50  "pe ("
.long     0x69662d2d    # at addr 0x1aa54  "--fi"
.long     0x742d656c    # at addr 0x1aa58  "le-t"
.long     0x29657079    # at addr 0x1aa5c  "ype)"
.long     0x6c63202c    # at addr 0x1aa60  ", cl"
.long     0x69737361    # at addr 0x1aa64  "assi"
.long     0x28207966    # at addr 0x1aa68  "fy ("
.long     0x0a29462d    # at addr 0x1aa6c  "-F)."
.long     0x692d2020    # at addr 0x1aa70  "  -i"
.long     0x2d2d202c    # at addr 0x1aa74  ", --"
.long     0x646f6e69    # at addr 0x1aa78  "inod"
.long     0x20202065    # at addr 0x1aa7c  "e   "
.long     0x20202020    # at addr 0x1aa80  "    "
.long     0x20202020    # at addr 0x1aa84  "    "
.long     0x20202020    # at addr 0x1aa88  "    "
.long     0x69727020    # at addr 0x1aa8c  " pri"
.long     0x7420746e    # at addr 0x1aa90  "nt t"
.long     0x69206568    # at addr 0x1aa94  "he i"
.long     0x7865646e    # at addr 0x1aa98  "ndex"
.long     0x6d756e20    # at addr 0x1aa9c  " num"
.long     0x20726562    # at addr 0x1aaa0  "ber "
.long     0x6520666f    # at addr 0x1aaa4  "of e"
.long     0x20686361    # at addr 0x1aaa8  "ach "
.long     0x656c6966    # at addr 0x1aaac  "file"
.long     0x2d20200a    # at addr 0x1aab0  ".  -"
.long     0x2d202c49    # at addr 0x1aab4  "I, -"
.long     0x6e67692d    # at addr 0x1aab8  "-ign"
.long     0x3d65726f    # at addr 0x1aabc  "ore="
.long     0x54544150    # at addr 0x1aac0  "PATT"
.long     0x204e5245    # at addr 0x1aac4  "ERN "
.long     0x20202020    # at addr 0x1aac8  "    "
.long     0x6f642020    # at addr 0x1aacc  "  do"
.long     0x746f6e20    # at addr 0x1aad0  " not"
.long     0x73696c20    # at addr 0x1aad4  " lis"
.long     0x6d692074    # at addr 0x1aad8  "t im"
.long     0x65696c70    # at addr 0x1aadc  "plie"
.long     0x6e652064    # at addr 0x1aae0  "d en"
.long     0x65697274    # at addr 0x1aae4  "trie"
.long     0x616d2073    # at addr 0x1aae8  "s ma"
.long     0x69686374    # at addr 0x1aaec  "tchi"
.long     0x7320676e    # at addr 0x1aaf0  "ng s"
.long     0x6c6c6568    # at addr 0x1aaf4  "hell"
.long     0x54415020    # at addr 0x1aaf8  " PAT"
.long     0x4e524554    # at addr 0x1aafc  "TERN"
.long     0x0000000a    # at addr 0x1ab00  "...."
.long     0x00000000    # at addr 0x1ab04  "...."
Var0x1ab08:       # next=0x1aba0, start=0x18000, end=0x1d248
.long     0x6b2d2020    # at addr 0x1ab08  "  -k"
.long     0x2d2d202c    # at addr 0x1ab0c  ", --"
.long     0x6962696b    # at addr 0x1ab10  "kibi"
.long     0x65747962    # at addr 0x1ab14  "byte"
.long     0x20202073    # at addr 0x1ab18  "s   "
.long     0x20202020    # at addr 0x1ab1c  "    "
.long     0x20202020    # at addr 0x1ab20  "    "
.long     0x66656420    # at addr 0x1ab24  " def"
.long     0x746c7561    # at addr 0x1ab28  "ault"
.long     0x206f7420    # at addr 0x1ab2c  " to "
.long     0x34323031    # at addr 0x1ab30  "1024"
.long     0x7479622d    # at addr 0x1ab34  "-byt"
.long     0x6c622065    # at addr 0x1ab38  "e bl"
.long     0x736b636f    # at addr 0x1ab3c  "ocks"
.long     0x726f6620    # at addr 0x1ab40  " for"
.long     0x73696420    # at addr 0x1ab44  " dis"
.long     0x7375206b    # at addr 0x1ab48  "k us"
.long     0x3b656761    # at addr 0x1ab4c  "age;"
.long     0x2020200a    # at addr 0x1ab50  ".   "
.long     0x20202020    # at addr 0x1ab54  "    "
.long     0x20202020    # at addr 0x1ab58  "    "
.long     0x20202020    # at addr 0x1ab5c  "    "
.long     0x20202020    # at addr 0x1ab60  "    "
.long     0x20202020    # at addr 0x1ab64  "    "
.long     0x20202020    # at addr 0x1ab68  "    "
.long     0x20202020    # at addr 0x1ab6c  "    "
.long     0x64657375    # at addr 0x1ab70  "used"
.long     0x6c6e6f20    # at addr 0x1ab74  " onl"
.long     0x69772079    # at addr 0x1ab78  "y wi"
.long     0x2d206874    # at addr 0x1ab7c  "th -"
.long     0x6e612073    # at addr 0x1ab80  "s an"
.long     0x65702064    # at addr 0x1ab84  "d pe"
.long     0x69642072    # at addr 0x1ab88  "r di"
.long     0x74636572    # at addr 0x1ab8c  "rect"
.long     0x2079726f    # at addr 0x1ab90  "ory "
.long     0x61746f74    # at addr 0x1ab94  "tota"
.long     0x000a736c    # at addr 0x1ab98  "ls.."
.long     0x00000000    # at addr 0x1ab9c  "...."
Var0x1aba0:       # next=0x1ad08, start=0x18000, end=0x1d248
.long     0x6c2d2020    # at addr 0x1aba0  "  -l"
.long     0x20202020    # at addr 0x1aba4  "    "
.long     0x20202020    # at addr 0x1aba8  "    "
.long     0x20202020    # at addr 0x1abac  "    "
.long     0x20202020    # at addr 0x1abb0  "    "
.long     0x20202020    # at addr 0x1abb4  "    "
.long     0x20202020    # at addr 0x1abb8  "    "
.long     0x65737520    # at addr 0x1abbc  " use"
.long     0x6c206120    # at addr 0x1abc0  " a l"
.long     0x20676e6f    # at addr 0x1abc4  "ong "
.long     0x7473696c    # at addr 0x1abc8  "list"
.long     0x20676e69    # at addr 0x1abcc  "ing "
.long     0x6d726f66    # at addr 0x1abd0  "form"
.long     0x200a7461    # at addr 0x1abd4  "at. "
.long     0x2c4c2d20    # at addr 0x1abd8  " -L,"
.long     0x642d2d20    # at addr 0x1abdc  " --d"
.long     0x66657265    # at addr 0x1abe0  "eref"
.long     0x6e657265    # at addr 0x1abe4  "eren"
.long     0x20206563    # at addr 0x1abe8  "ce  "
.long     0x20202020    # at addr 0x1abec  "    "
.long     0x20202020    # at addr 0x1abf0  "    "
.long     0x6e656877    # at addr 0x1abf4  "when"
.long     0x6f687320    # at addr 0x1abf8  " sho"
.long     0x676e6977    # at addr 0x1abfc  "wing"
.long     0x6c696620    # at addr 0x1ac00  " fil"
.long     0x6e692065    # at addr 0x1ac04  "e in"
.long     0x6d726f66    # at addr 0x1ac08  "form"
.long     0x6f697461    # at addr 0x1ac0c  "atio"
.long     0x6f66206e    # at addr 0x1ac10  "n fo"
.long     0x20612072    # at addr 0x1ac14  "r a "
.long     0x626d7973    # at addr 0x1ac18  "symb"
.long     0x63696c6f    # at addr 0x1ac1c  "olic"
.long     0x2020200a    # at addr 0x1ac20  ".   "
.long     0x20202020    # at addr 0x1ac24  "    "
.long     0x20202020    # at addr 0x1ac28  "    "
.long     0x20202020    # at addr 0x1ac2c  "    "
.long     0x20202020    # at addr 0x1ac30  "    "
.long     0x20202020    # at addr 0x1ac34  "    "
.long     0x20202020    # at addr 0x1ac38  "    "
.long     0x20202020    # at addr 0x1ac3c  "    "
.long     0x6b6e696c    # at addr 0x1ac40  "link"
.long     0x6873202c    # at addr 0x1ac44  ", sh"
.long     0x6920776f    # at addr 0x1ac48  "ow i"
.long     0x726f666e    # at addr 0x1ac4c  "nfor"
.long     0x6974616d    # at addr 0x1ac50  "mati"
.long     0x66206e6f    # at addr 0x1ac54  "on f"
.long     0x7420726f    # at addr 0x1ac58  "or t"
.long     0x66206568    # at addr 0x1ac5c  "he f"
.long     0x20656c69    # at addr 0x1ac60  "ile "
.long     0x20656874    # at addr 0x1ac64  "the "
.long     0x6b6e696c    # at addr 0x1ac68  "link"
.long     0x2020200a    # at addr 0x1ac6c  ".   "
.long     0x20202020    # at addr 0x1ac70  "    "
.long     0x20202020    # at addr 0x1ac74  "    "
.long     0x20202020    # at addr 0x1ac78  "    "
.long     0x20202020    # at addr 0x1ac7c  "    "
.long     0x20202020    # at addr 0x1ac80  "    "
.long     0x20202020    # at addr 0x1ac84  "    "
.long     0x20202020    # at addr 0x1ac88  "    "
.long     0x65666572    # at addr 0x1ac8c  "refe"
.long     0x636e6572    # at addr 0x1ac90  "renc"
.long     0x72207365    # at addr 0x1ac94  "es r"
.long     0x65687461    # at addr 0x1ac98  "athe"
.long     0x68742072    # at addr 0x1ac9c  "r th"
.long     0x66206e61    # at addr 0x1aca0  "an f"
.long     0x7420726f    # at addr 0x1aca4  "or t"
.long     0x6c206568    # at addr 0x1aca8  "he l"
.long     0x206b6e69    # at addr 0x1acac  "ink "
.long     0x65737469    # at addr 0x1acb0  "itse"
.long     0x200a666c    # at addr 0x1acb4  "lf. "
.long     0x206d2d20    # at addr 0x1acb8  " -m "
.long     0x20202020    # at addr 0x1acbc  "    "
.long     0x20202020    # at addr 0x1acc0  "    "
.long     0x20202020    # at addr 0x1acc4  "    "
.long     0x20202020    # at addr 0x1acc8  "    "
.long     0x20202020    # at addr 0x1accc  "    "
.long     0x20202020    # at addr 0x1acd0  "    "
.long     0x6c6c6966    # at addr 0x1acd4  "fill"
.long     0x64697720    # at addr 0x1acd8  " wid"
.long     0x77206874    # at addr 0x1acdc  "th w"
.long     0x20687469    # at addr 0x1ace0  "ith "
.long     0x6f632061    # at addr 0x1ace4  "a co"
.long     0x20616d6d    # at addr 0x1ace8  "mma "
.long     0x61706573    # at addr 0x1acec  "sepa"
.long     0x65746172    # at addr 0x1acf0  "rate"
.long     0x696c2064    # at addr 0x1acf4  "d li"
.long     0x6f207473    # at addr 0x1acf8  "st o"
.long     0x6e652066    # at addr 0x1acfc  "f en"
.long     0x65697274    # at addr 0x1ad00  "trie"
.long     0x00000a73    # at addr 0x1ad04  "s..."
Var0x1ad08:       # next=0x1ae38, start=0x18000, end=0x1d248
.long     0x6e2d2020    # at addr 0x1ad08  "  -n"
.long     0x2d2d202c    # at addr 0x1ad0c  ", --"
.long     0x656d756e    # at addr 0x1ad10  "nume"
.long     0x2d636972    # at addr 0x1ad14  "ric-"
.long     0x2d646975    # at addr 0x1ad18  "uid-"
.long     0x20646967    # at addr 0x1ad1c  "gid "
.long     0x20202020    # at addr 0x1ad20  "    "
.long     0x6b696c20    # at addr 0x1ad24  " lik"
.long     0x6c2d2065    # at addr 0x1ad28  "e -l"
.long     0x7562202c    # at addr 0x1ad2c  ", bu"
.long     0x696c2074    # at addr 0x1ad30  "t li"
.long     0x6e207473    # at addr 0x1ad34  "st n"
.long     0x72656d75    # at addr 0x1ad38  "umer"
.long     0x75206369    # at addr 0x1ad3c  "ic u"
.long     0x20726573    # at addr 0x1ad40  "ser "
.long     0x20646e61    # at addr 0x1ad44  "and "
.long     0x756f7267    # at addr 0x1ad48  "grou"
.long     0x44492070    # at addr 0x1ad4c  "p ID"
.long     0x20200a73    # at addr 0x1ad50  "s.  "
.long     0x202c4e2d    # at addr 0x1ad54  "-N, "
.long     0x696c2d2d    # at addr 0x1ad58  "--li"
.long     0x61726574    # at addr 0x1ad5c  "tera"
.long     0x2020206c    # at addr 0x1ad60  "l   "
.long     0x20202020    # at addr 0x1ad64  "    "
.long     0x20202020    # at addr 0x1ad68  "    "
.long     0x70202020    # at addr 0x1ad6c  "   p"
.long     0x746e6972    # at addr 0x1ad70  "rint"
.long     0x746e6520    # at addr 0x1ad74  " ent"
.long     0x6e207972    # at addr 0x1ad78  "ry n"
.long     0x73656d61    # at addr 0x1ad7c  "ames"
.long     0x74697720    # at addr 0x1ad80  " wit"
.long     0x74756f68    # at addr 0x1ad84  "hout"
.long     0x6f757120    # at addr 0x1ad88  " quo"
.long     0x676e6974    # at addr 0x1ad8c  "ting"
.long     0x2d20200a    # at addr 0x1ad90  ".  -"
.long     0x2020206f    # at addr 0x1ad94  "o   "
.long     0x20202020    # at addr 0x1ad98  "    "
.long     0x20202020    # at addr 0x1ad9c  "    "
.long     0x20202020    # at addr 0x1ada0  "    "
.long     0x20202020    # at addr 0x1ada4  "    "
.long     0x20202020    # at addr 0x1ada8  "    "
.long     0x696c2020    # at addr 0x1adac  "  li"
.long     0x2d20656b    # at addr 0x1adb0  "ke -"
.long     0x62202c6c    # at addr 0x1adb4  "l, b"
.long     0x64207475    # at addr 0x1adb8  "ut d"
.long     0x6f6e206f    # at addr 0x1adbc  "o no"
.long     0x696c2074    # at addr 0x1adc0  "t li"
.long     0x67207473    # at addr 0x1adc4  "st g"
.long     0x70756f72    # at addr 0x1adc8  "roup"
.long     0x666e6920    # at addr 0x1adcc  " inf"
.long     0x616d726f    # at addr 0x1add0  "orma"
.long     0x6e6f6974    # at addr 0x1add4  "tion"
.long     0x2d20200a    # at addr 0x1add8  ".  -"
.long     0x2d202c70    # at addr 0x1addc  "p, -"
.long     0x646e692d    # at addr 0x1ade0  "-ind"
.long     0x74616369    # at addr 0x1ade4  "icat"
.long     0x732d726f    # at addr 0x1ade8  "or-s"
.long     0x656c7974    # at addr 0x1adec  "tyle"
.long     0x616c733d    # at addr 0x1adf0  "=sla"
.long     0x200a6873    # at addr 0x1adf4  "sh. "
.long     0x20202020    # at addr 0x1adf8  "    "
.long     0x20202020    # at addr 0x1adfc  "    "
.long     0x20202020    # at addr 0x1ae00  "    "
.long     0x20202020    # at addr 0x1ae04  "    "
.long     0x20202020    # at addr 0x1ae08  "    "
.long     0x20202020    # at addr 0x1ae0c  "    "
.long     0x20202020    # at addr 0x1ae10  "    "
.long     0x65707061    # at addr 0x1ae14  "appe"
.long     0x2f20646e    # at addr 0x1ae18  "nd /"
.long     0x646e6920    # at addr 0x1ae1c  " ind"
.long     0x74616369    # at addr 0x1ae20  "icat"
.long     0x7420726f    # at addr 0x1ae24  "or t"
.long     0x6964206f    # at addr 0x1ae28  "o di"
.long     0x74636572    # at addr 0x1ae2c  "rect"
.long     0x6569726f    # at addr 0x1ae30  "orie"
.long     0x00000a73    # at addr 0x1ae34  "s..."
Var0x1ae38:       # next=0x1b088, start=0x18000, end=0x1d248
.long     0x712d2020    # at addr 0x1ae38  "  -q"
.long     0x2d2d202c    # at addr 0x1ae3c  ", --"
.long     0x65646968    # at addr 0x1ae40  "hide"
.long     0x6e6f632d    # at addr 0x1ae44  "-con"
.long     0x6c6f7274    # at addr 0x1ae48  "trol"
.long     0x6168632d    # at addr 0x1ae4c  "-cha"
.long     0x20207372    # at addr 0x1ae50  "rs  "
.long     0x69727020    # at addr 0x1ae54  " pri"
.long     0x3f20746e    # at addr 0x1ae58  "nt ?"
.long     0x736e6920    # at addr 0x1ae5c  " ins"
.long     0x64616574    # at addr 0x1ae60  "tead"
.long     0x20666f20    # at addr 0x1ae64  " of "
.long     0x676e6f6e    # at addr 0x1ae68  "nong"
.long     0x68706172    # at addr 0x1ae6c  "raph"
.long     0x63206369    # at addr 0x1ae70  "ic c"
.long     0x61726168    # at addr 0x1ae74  "hara"
.long     0x72657463    # at addr 0x1ae78  "cter"
.long     0x20200a73    # at addr 0x1ae7c  "s.  "
.long     0x20202020    # at addr 0x1ae80  "    "
.long     0x68732d2d    # at addr 0x1ae84  "--sh"
.long     0x632d776f    # at addr 0x1ae88  "ow-c"
.long     0x72746e6f    # at addr 0x1ae8c  "ontr"
.long     0x632d6c6f    # at addr 0x1ae90  "ol-c"
.long     0x73726168    # at addr 0x1ae94  "hars"
.long     0x73202020    # at addr 0x1ae98  "   s"
.long     0x20776f68    # at addr 0x1ae9c  "how "
.long     0x676e6f6e    # at addr 0x1aea0  "nong"
.long     0x68706172    # at addr 0x1aea4  "raph"
.long     0x63206369    # at addr 0x1aea8  "ic c"
.long     0x61726168    # at addr 0x1aeac  "hara"
.long     0x72657463    # at addr 0x1aeb0  "cter"
.long     0x73612073    # at addr 0x1aeb4  "s as"
.long     0x2073692d    # at addr 0x1aeb8  "-is "
.long     0x65687428    # at addr 0x1aebc  "(the"
.long     0x66656420    # at addr 0x1aec0  " def"
.long     0x746c7561    # at addr 0x1aec4  "ault"
.long     0x20200a2c    # at addr 0x1aec8  ",.  "
.long     0x20202020    # at addr 0x1aecc  "    "
.long     0x20202020    # at addr 0x1aed0  "    "
.long     0x20202020    # at addr 0x1aed4  "    "
.long     0x20202020    # at addr 0x1aed8  "    "
.long     0x20202020    # at addr 0x1aedc  "    "
.long     0x20202020    # at addr 0x1aee0  "    "
.long     0x20202020    # at addr 0x1aee4  "    "
.long     0x6c6e7520    # at addr 0x1aee8  " unl"
.long     0x20737365    # at addr 0x1aeec  "ess "
.long     0x676f7270    # at addr 0x1aef0  "prog"
.long     0x206d6172    # at addr 0x1aef4  "ram "
.long     0x27207369    # at addr 0x1aef8  "is '"
.long     0x2027736c    # at addr 0x1aefc  "ls' "
.long     0x20646e61    # at addr 0x1af00  "and "
.long     0x7074756f    # at addr 0x1af04  "outp"
.long     0x69207475    # at addr 0x1af08  "ut i"
.long     0x20612073    # at addr 0x1af0c  "s a "
.long     0x6d726574    # at addr 0x1af10  "term"
.long     0x6c616e69    # at addr 0x1af14  "inal"
.long     0x20200a29    # at addr 0x1af18  ").  "
.long     0x202c512d    # at addr 0x1af1c  "-Q, "
.long     0x75712d2d    # at addr 0x1af20  "--qu"
.long     0x2d65746f    # at addr 0x1af24  "ote-"
.long     0x656d616e    # at addr 0x1af28  "name"
.long     0x20202020    # at addr 0x1af2c  "    "
.long     0x20202020    # at addr 0x1af30  "    "
.long     0x65202020    # at addr 0x1af34  "   e"
.long     0x6f6c636e    # at addr 0x1af38  "nclo"
.long     0x65206573    # at addr 0x1af3c  "se e"
.long     0x7972746e    # at addr 0x1af40  "ntry"
.long     0x6d616e20    # at addr 0x1af44  " nam"
.long     0x69207365    # at addr 0x1af48  "es i"
.long     0x6f64206e    # at addr 0x1af4c  "n do"
.long     0x656c6275    # at addr 0x1af50  "uble"
.long     0x6f757120    # at addr 0x1af54  " quo"
.long     0x0a736574    # at addr 0x1af58  "tes."
.long     0x20202020    # at addr 0x1af5c  "    "
.long     0x2d2d2020    # at addr 0x1af60  "  --"
.long     0x746f7571    # at addr 0x1af64  "quot"
.long     0x2d676e69    # at addr 0x1af68  "ing-"
.long     0x6c797473    # at addr 0x1af6c  "styl"
.long     0x4f573d65    # at addr 0x1af70  "e=WO"
.long     0x20204452    # at addr 0x1af74  "RD  "
.long     0x65737520    # at addr 0x1af78  " use"
.long     0x6f757120    # at addr 0x1af7c  " quo"
.long     0x676e6974    # at addr 0x1af80  "ting"
.long     0x79747320    # at addr 0x1af84  " sty"
.long     0x5720656c    # at addr 0x1af88  "le W"
.long     0x2044524f    # at addr 0x1af8c  "ORD "
.long     0x20726f66    # at addr 0x1af90  "for "
.long     0x72746e65    # at addr 0x1af94  "entr"
.long     0x616e2079    # at addr 0x1af98  "y na"
.long     0x3a73656d    # at addr 0x1af9c  "mes:"
.long     0x2020200a    # at addr 0x1afa0  ".   "
.long     0x20202020    # at addr 0x1afa4  "    "
.long     0x20202020    # at addr 0x1afa8  "    "
.long     0x20202020    # at addr 0x1afac  "    "
.long     0x20202020    # at addr 0x1afb0  "    "
.long     0x20202020    # at addr 0x1afb4  "    "
.long     0x20202020    # at addr 0x1afb8  "    "
.long     0x20202020    # at addr 0x1afbc  "    "
.long     0x6574696c    # at addr 0x1afc0  "lite"
.long     0x2c6c6172    # at addr 0x1afc4  "ral,"
.long     0x636f6c20    # at addr 0x1afc8  " loc"
.long     0x2c656c61    # at addr 0x1afcc  "ale,"
.long     0x65687320    # at addr 0x1afd0  " she"
.long     0x202c6c6c    # at addr 0x1afd4  "ll, "
.long     0x6c656873    # at addr 0x1afd8  "shel"
.long     0x6c612d6c    # at addr 0x1afdc  "l-al"
.long     0x73796177    # at addr 0x1afe0  "ways"
.long     0x20200a2c    # at addr 0x1afe4  ",.  "
.long     0x20202020    # at addr 0x1afe8  "    "
.long     0x20202020    # at addr 0x1afec  "    "
.long     0x20202020    # at addr 0x1aff0  "    "
.long     0x20202020    # at addr 0x1aff4  "    "
.long     0x20202020    # at addr 0x1aff8  "    "
.long     0x20202020    # at addr 0x1affc  "    "
.long     0x20202020    # at addr 0x1b000  "    "
.long     0x65687320    # at addr 0x1b004  " she"
.long     0x652d6c6c    # at addr 0x1b008  "ll-e"
.long     0x70616373    # at addr 0x1b00c  "scap"
.long     0x73202c65    # at addr 0x1b010  "e, s"
.long     0x6c6c6568    # at addr 0x1b014  "hell"
.long     0x6373652d    # at addr 0x1b018  "-esc"
.long     0x2d657061    # at addr 0x1b01c  "ape-"
.long     0x61776c61    # at addr 0x1b020  "alwa"
.long     0x202c7379    # at addr 0x1b024  "ys, "
.long     0x65202c63    # at addr 0x1b028  "c, e"
.long     0x70616373    # at addr 0x1b02c  "scap"
.long     0x20200a65    # at addr 0x1b030  "e.  "
.long     0x20202020    # at addr 0x1b034  "    "
.long     0x20202020    # at addr 0x1b038  "    "
.long     0x20202020    # at addr 0x1b03c  "    "
.long     0x20202020    # at addr 0x1b040  "    "
.long     0x20202020    # at addr 0x1b044  "    "
.long     0x20202020    # at addr 0x1b048  "    "
.long     0x20202020    # at addr 0x1b04c  "    "
.long     0x766f2820    # at addr 0x1b050  " (ov"
.long     0x69727265    # at addr 0x1b054  "erri"
.long     0x20736564    # at addr 0x1b058  "des "
.long     0x544f5551    # at addr 0x1b05c  "QUOT"
.long     0x5f474e49    # at addr 0x1b060  "ING_"
.long     0x4c595453    # at addr 0x1b064  "STYL"
.long     0x6e652045    # at addr 0x1b068  "E en"
.long     0x6f726976    # at addr 0x1b06c  "viro"
.long     0x6e656d6e    # at addr 0x1b070  "nmen"
.long     0x61762074    # at addr 0x1b074  "t va"
.long     0x62616972    # at addr 0x1b078  "riab"
.long     0x0a29656c    # at addr 0x1b07c  "le)."
.long     0x00000000    # at addr 0x1b080  "...."
.long     0x00000000    # at addr 0x1b084  "...."
Var0x1b088:       # next=0x1b150, start=0x18000, end=0x1d248
.long     0x722d2020    # at addr 0x1b088  "  -r"
.long     0x2d2d202c    # at addr 0x1b08c  ", --"
.long     0x65766572    # at addr 0x1b090  "reve"
.long     0x20657372    # at addr 0x1b094  "rse "
.long     0x20202020    # at addr 0x1b098  "    "
.long     0x20202020    # at addr 0x1b09c  "    "
.long     0x20202020    # at addr 0x1b0a0  "    "
.long     0x76657220    # at addr 0x1b0a4  " rev"
.long     0x65737265    # at addr 0x1b0a8  "erse"
.long     0x64726f20    # at addr 0x1b0ac  " ord"
.long     0x77207265    # at addr 0x1b0b0  "er w"
.long     0x656c6968    # at addr 0x1b0b4  "hile"
.long     0x726f7320    # at addr 0x1b0b8  " sor"
.long     0x676e6974    # at addr 0x1b0bc  "ting"
.long     0x2d20200a    # at addr 0x1b0c0  ".  -"
.long     0x2d202c52    # at addr 0x1b0c4  "R, -"
.long     0x6365722d    # at addr 0x1b0c8  "-rec"
.long     0x69737275    # at addr 0x1b0cc  "ursi"
.long     0x20206576    # at addr 0x1b0d0  "ve  "
.long     0x20202020    # at addr 0x1b0d4  "    "
.long     0x20202020    # at addr 0x1b0d8  "    "
.long     0x696c2020    # at addr 0x1b0dc  "  li"
.long     0x73207473    # at addr 0x1b0e0  "st s"
.long     0x69646275    # at addr 0x1b0e4  "ubdi"
.long     0x74636572    # at addr 0x1b0e8  "rect"
.long     0x6569726f    # at addr 0x1b0ec  "orie"
.long     0x65722073    # at addr 0x1b0f0  "s re"
.long     0x73727563    # at addr 0x1b0f4  "curs"
.long     0x6c657669    # at addr 0x1b0f8  "ivel"
.long     0x20200a79    # at addr 0x1b0fc  "y.  "
.long     0x202c732d    # at addr 0x1b100  "-s, "
.long     0x69732d2d    # at addr 0x1b104  "--si"
.long     0x2020657a    # at addr 0x1b108  "ze  "
.long     0x20202020    # at addr 0x1b10c  "    "
.long     0x20202020    # at addr 0x1b110  "    "
.long     0x20202020    # at addr 0x1b114  "    "
.long     0x70202020    # at addr 0x1b118  "   p"
.long     0x746e6972    # at addr 0x1b11c  "rint"
.long     0x65687420    # at addr 0x1b120  " the"
.long     0x6c6c6120    # at addr 0x1b124  " all"
.long     0x7461636f    # at addr 0x1b128  "ocat"
.long     0x73206465    # at addr 0x1b12c  "ed s"
.long     0x20657a69    # at addr 0x1b130  "ize "
.long     0x6520666f    # at addr 0x1b134  "of e"
.long     0x20686361    # at addr 0x1b138  "ach "
.long     0x656c6966    # at addr 0x1b13c  "file"
.long     0x6e69202c    # at addr 0x1b140  ", in"
.long     0x6f6c6220    # at addr 0x1b144  " blo"
.long     0x0a736b63    # at addr 0x1b148  "cks."
.long     0x00000000    # at addr 0x1b14c  "...."
Var0x1b150:       # next=0x1b358, start=0x18000, end=0x1d248
.long     0x532d2020    # at addr 0x1b150  "  -S"
.long     0x20202020    # at addr 0x1b154  "    "
.long     0x20202020    # at addr 0x1b158  "    "
.long     0x20202020    # at addr 0x1b15c  "    "
.long     0x20202020    # at addr 0x1b160  "    "
.long     0x20202020    # at addr 0x1b164  "    "
.long     0x20202020    # at addr 0x1b168  "    "
.long     0x726f7320    # at addr 0x1b16c  " sor"
.long     0x79622074    # at addr 0x1b170  "t by"
.long     0x6c696620    # at addr 0x1b174  " fil"
.long     0x69732065    # at addr 0x1b178  "e si"
.long     0x202c657a    # at addr 0x1b17c  "ze, "
.long     0x6772616c    # at addr 0x1b180  "larg"
.long     0x20747365    # at addr 0x1b184  "est "
.long     0x73726966    # at addr 0x1b188  "firs"
.long     0x20200a74    # at addr 0x1b18c  "t.  "
.long     0x20202020    # at addr 0x1b190  "    "
.long     0x6f732d2d    # at addr 0x1b194  "--so"
.long     0x573d7472    # at addr 0x1b198  "rt=W"
.long     0x2044524f    # at addr 0x1b19c  "ORD "
.long     0x20202020    # at addr 0x1b1a0  "    "
.long     0x20202020    # at addr 0x1b1a4  "    "
.long     0x73202020    # at addr 0x1b1a8  "   s"
.long     0x2074726f    # at addr 0x1b1ac  "ort "
.long     0x57207962    # at addr 0x1b1b0  "by W"
.long     0x2044524f    # at addr 0x1b1b4  "ORD "
.long     0x74736e69    # at addr 0x1b1b8  "inst"
.long     0x20646165    # at addr 0x1b1bc  "ead "
.long     0x6e20666f    # at addr 0x1b1c0  "of n"
.long     0x3a656d61    # at addr 0x1b1c4  "ame:"
.long     0x6e6f6e20    # at addr 0x1b1c8  " non"
.long     0x2d282065    # at addr 0x1b1cc  "e (-"
.long     0x202c2955    # at addr 0x1b1d0  "U), "
.long     0x657a6973    # at addr 0x1b1d4  "size"
.long     0x532d2820    # at addr 0x1b1d8  " (-S"
.long     0x200a2c29    # at addr 0x1b1dc  "),. "
.long     0x20202020    # at addr 0x1b1e0  "    "
.long     0x20202020    # at addr 0x1b1e4  "    "
.long     0x20202020    # at addr 0x1b1e8  "    "
.long     0x20202020    # at addr 0x1b1ec  "    "
.long     0x20202020    # at addr 0x1b1f0  "    "
.long     0x20202020    # at addr 0x1b1f4  "    "
.long     0x20202020    # at addr 0x1b1f8  "    "
.long     0x69742020    # at addr 0x1b1fc  "  ti"
.long     0x2820656d    # at addr 0x1b200  "me ("
.long     0x2c29742d    # at addr 0x1b204  "-t),"
.long     0x72657620    # at addr 0x1b208  " ver"
.long     0x6e6f6973    # at addr 0x1b20c  "sion"
.long     0x762d2820    # at addr 0x1b210  " (-v"
.long     0x65202c29    # at addr 0x1b214  "), e"
.long     0x6e657478    # at addr 0x1b218  "xten"
.long     0x6e6f6973    # at addr 0x1b21c  "sion"
.long     0x582d2820    # at addr 0x1b220  " (-X"
.long     0x20200a29    # at addr 0x1b224  ").  "
.long     0x20202020    # at addr 0x1b228  "    "
.long     0x69742d2d    # at addr 0x1b22c  "--ti"
.long     0x573d656d    # at addr 0x1b230  "me=W"
.long     0x2044524f    # at addr 0x1b234  "ORD "
.long     0x20202020    # at addr 0x1b238  "    "
.long     0x20202020    # at addr 0x1b23c  "    "
.long     0x77202020    # at addr 0x1b240  "   w"
.long     0x20687469    # at addr 0x1b244  "ith "
.long     0x202c6c2d    # at addr 0x1b248  "-l, "
.long     0x776f6873    # at addr 0x1b24c  "show"
.long     0x6d697420    # at addr 0x1b250  " tim"
.long     0x73612065    # at addr 0x1b254  "e as"
.long     0x524f5720    # at addr 0x1b258  " WOR"
.long     0x6e692044    # at addr 0x1b25c  "D in"
.long     0x61657473    # at addr 0x1b260  "stea"
.long     0x666f2064    # at addr 0x1b264  "d of"
.long     0x66656420    # at addr 0x1b268  " def"
.long     0x746c7561    # at addr 0x1b26c  "ault"
.long     0x2020200a    # at addr 0x1b270  ".   "
.long     0x20202020    # at addr 0x1b274  "    "
.long     0x20202020    # at addr 0x1b278  "    "
.long     0x20202020    # at addr 0x1b27c  "    "
.long     0x20202020    # at addr 0x1b280  "    "
.long     0x20202020    # at addr 0x1b284  "    "
.long     0x20202020    # at addr 0x1b288  "    "
.long     0x20202020    # at addr 0x1b28c  "    "
.long     0x69646f6d    # at addr 0x1b290  "modi"
.long     0x61636966    # at addr 0x1b294  "fica"
.long     0x6e6f6974    # at addr 0x1b298  "tion"
.long     0x6d697420    # at addr 0x1b29c  " tim"
.long     0x61203a65    # at addr 0x1b2a0  "e: a"
.long     0x656d6974    # at addr 0x1b2a4  "time"
.long     0x20726f20    # at addr 0x1b2a8  " or "
.long     0x65636361    # at addr 0x1b2ac  "acce"
.long     0x6f207373    # at addr 0x1b2b0  "ss o"
.long     0x73752072    # at addr 0x1b2b4  "r us"
.long     0x2d282065    # at addr 0x1b2b8  "e (-"
.long     0x0a3b2975    # at addr 0x1b2bc  "u);."
.long     0x20202020    # at addr 0x1b2c0  "    "
.long     0x20202020    # at addr 0x1b2c4  "    "
.long     0x20202020    # at addr 0x1b2c8  "    "
.long     0x20202020    # at addr 0x1b2cc  "    "
.long     0x20202020    # at addr 0x1b2d0  "    "
.long     0x20202020    # at addr 0x1b2d4  "    "
.long     0x20202020    # at addr 0x1b2d8  "    "
.long     0x63202020    # at addr 0x1b2dc  "   c"
.long     0x656d6974    # at addr 0x1b2e0  "time"
.long     0x20726f20    # at addr 0x1b2e4  " or "
.long     0x74617473    # at addr 0x1b2e8  "stat"
.long     0x28207375    # at addr 0x1b2ec  "us ("
.long     0x3b29632d    # at addr 0x1b2f0  "-c);"
.long     0x736c6120    # at addr 0x1b2f4  " als"
.long     0x7375206f    # at addr 0x1b2f8  "o us"
.long     0x70732065    # at addr 0x1b2fc  "e sp"
.long     0x66696365    # at addr 0x1b300  "ecif"
.long     0x20646569    # at addr 0x1b304  "ied "
.long     0x656d6974    # at addr 0x1b308  "time"
.long     0x2020200a    # at addr 0x1b30c  ".   "
.long     0x20202020    # at addr 0x1b310  "    "
.long     0x20202020    # at addr 0x1b314  "    "
.long     0x20202020    # at addr 0x1b318  "    "
.long     0x20202020    # at addr 0x1b31c  "    "
.long     0x20202020    # at addr 0x1b320  "    "
.long     0x20202020    # at addr 0x1b324  "    "
.long     0x20202020    # at addr 0x1b328  "    "
.long     0x73207361    # at addr 0x1b32c  "as s"
.long     0x2074726f    # at addr 0x1b330  "ort "
.long     0x2079656b    # at addr 0x1b334  "key "
.long     0x2d206669    # at addr 0x1b338  "if -"
.long     0x726f732d    # at addr 0x1b33c  "-sor"
.long     0x69743d74    # at addr 0x1b340  "t=ti"
.long     0x2820656d    # at addr 0x1b344  "me ("
.long     0x6577656e    # at addr 0x1b348  "newe"
.long     0x66207473    # at addr 0x1b34c  "st f"
.long     0x74737269    # at addr 0x1b350  "irst"
.long     0x00000a29    # at addr 0x1b354  ")..."
Var0x1b358:       # next=0x1b3a8, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1b358  "    "
.long     0x2d2d2020    # at addr 0x1b35c  "  --"
.long     0x656d6974    # at addr 0x1b360  "time"
.long     0x7974732d    # at addr 0x1b364  "-sty"
.long     0x543d656c    # at addr 0x1b368  "le=T"
.long     0x5f454d49    # at addr 0x1b36c  "IME_"
.long     0x4c595453    # at addr 0x1b370  "STYL"
.long     0x74202045    # at addr 0x1b374  "E  t"
.long     0x2f656d69    # at addr 0x1b378  "ime/"
.long     0x65746164    # at addr 0x1b37c  "date"
.long     0x726f6620    # at addr 0x1b380  " for"
.long     0x2074616d    # at addr 0x1b384  "mat "
.long     0x68746977    # at addr 0x1b388  "with"
.long     0x3b6c2d20    # at addr 0x1b38c  " -l;"
.long     0x65657320    # at addr 0x1b390  " see"
.long     0x4d495420    # at addr 0x1b394  " TIM"
.long     0x54535f45    # at addr 0x1b398  "E_ST"
.long     0x20454c59    # at addr 0x1b39c  "YLE "
.long     0x6f6c6562    # at addr 0x1b3a0  "belo"
.long     0x00000a77    # at addr 0x1b3a4  "w..."
Var0x1b3a8:       # next=0x1b438, start=0x18000, end=0x1d248
.long     0x742d2020    # at addr 0x1b3a8  "  -t"
.long     0x20202020    # at addr 0x1b3ac  "    "
.long     0x20202020    # at addr 0x1b3b0  "    "
.long     0x20202020    # at addr 0x1b3b4  "    "
.long     0x20202020    # at addr 0x1b3b8  "    "
.long     0x20202020    # at addr 0x1b3bc  "    "
.long     0x20202020    # at addr 0x1b3c0  "    "
.long     0x726f7320    # at addr 0x1b3c4  " sor"
.long     0x79622074    # at addr 0x1b3c8  "t by"
.long     0x646f6d20    # at addr 0x1b3cc  " mod"
.long     0x63696669    # at addr 0x1b3d0  "ific"
.long     0x6f697461    # at addr 0x1b3d4  "atio"
.long     0x6974206e    # at addr 0x1b3d8  "n ti"
.long     0x202c656d    # at addr 0x1b3dc  "me, "
.long     0x6577656e    # at addr 0x1b3e0  "newe"
.long     0x66207473    # at addr 0x1b3e4  "st f"
.long     0x74737269    # at addr 0x1b3e8  "irst"
.long     0x2d20200a    # at addr 0x1b3ec  ".  -"
.long     0x2d202c54    # at addr 0x1b3f0  "T, -"
.long     0x6261742d    # at addr 0x1b3f4  "-tab"
.long     0x657a6973    # at addr 0x1b3f8  "size"
.long     0x4c4f433d    # at addr 0x1b3fc  "=COL"
.long     0x20202053    # at addr 0x1b400  "S   "
.long     0x20202020    # at addr 0x1b404  "    "
.long     0x73612020    # at addr 0x1b408  "  as"
.long     0x656d7573    # at addr 0x1b40c  "sume"
.long     0x62617420    # at addr 0x1b410  " tab"
.long     0x6f747320    # at addr 0x1b414  " sto"
.long     0x61207370    # at addr 0x1b418  "ps a"
.long     0x61652074    # at addr 0x1b41c  "t ea"
.long     0x43206863    # at addr 0x1b420  "ch C"
.long     0x20534c4f    # at addr 0x1b424  "OLS "
.long     0x74736e69    # at addr 0x1b428  "inst"
.long     0x20646165    # at addr 0x1b42c  "ead "
.long     0x3820666f    # at addr 0x1b430  "of 8"
.long     0x0000000a    # at addr 0x1b434  "...."
Var0x1b438:       # next=0x1b5b0, start=0x18000, end=0x1d248
.long     0x752d2020    # at addr 0x1b438  "  -u"
.long     0x20202020    # at addr 0x1b43c  "    "
.long     0x20202020    # at addr 0x1b440  "    "
.long     0x20202020    # at addr 0x1b444  "    "
.long     0x20202020    # at addr 0x1b448  "    "
.long     0x20202020    # at addr 0x1b44c  "    "
.long     0x20202020    # at addr 0x1b450  "    "
.long     0x74697720    # at addr 0x1b454  " wit"
.long     0x6c2d2068    # at addr 0x1b458  "h -l"
.long     0x73203a74    # at addr 0x1b45c  "t: s"
.long     0x2074726f    # at addr 0x1b460  "ort "
.long     0x202c7962    # at addr 0x1b464  "by, "
.long     0x20646e61    # at addr 0x1b468  "and "
.long     0x776f6873    # at addr 0x1b46c  "show"
.long     0x6361202c    # at addr 0x1b470  ", ac"
.long     0x73736563    # at addr 0x1b474  "cess"
.long     0x6d697420    # at addr 0x1b478  " tim"
.long     0x200a3b65    # at addr 0x1b47c  "e;. "
.long     0x20202020    # at addr 0x1b480  "    "
.long     0x20202020    # at addr 0x1b484  "    "
.long     0x20202020    # at addr 0x1b488  "    "
.long     0x20202020    # at addr 0x1b48c  "    "
.long     0x20202020    # at addr 0x1b490  "    "
.long     0x20202020    # at addr 0x1b494  "    "
.long     0x20202020    # at addr 0x1b498  "    "
.long     0x69772020    # at addr 0x1b49c  "  wi"
.long     0x2d206874    # at addr 0x1b4a0  "th -"
.long     0x73203a6c    # at addr 0x1b4a4  "l: s"
.long     0x20776f68    # at addr 0x1b4a8  "how "
.long     0x65636361    # at addr 0x1b4ac  "acce"
.long     0x74207373    # at addr 0x1b4b0  "ss t"
.long     0x20656d69    # at addr 0x1b4b4  "ime "
.long     0x20646e61    # at addr 0x1b4b8  "and "
.long     0x74726f73    # at addr 0x1b4bc  "sort"
.long     0x20796220    # at addr 0x1b4c0  " by "
.long     0x656d616e    # at addr 0x1b4c4  "name"
.long     0x20200a3b    # at addr 0x1b4c8  ";.  "
.long     0x20202020    # at addr 0x1b4cc  "    "
.long     0x20202020    # at addr 0x1b4d0  "    "
.long     0x20202020    # at addr 0x1b4d4  "    "
.long     0x20202020    # at addr 0x1b4d8  "    "
.long     0x20202020    # at addr 0x1b4dc  "    "
.long     0x20202020    # at addr 0x1b4e0  "    "
.long     0x20202020    # at addr 0x1b4e4  "    "
.long     0x68746f20    # at addr 0x1b4e8  " oth"
.long     0x69777265    # at addr 0x1b4ec  "erwi"
.long     0x203a6573    # at addr 0x1b4f0  "se: "
.long     0x74726f73    # at addr 0x1b4f4  "sort"
.long     0x20796220    # at addr 0x1b4f8  " by "
.long     0x65636361    # at addr 0x1b4fc  "acce"
.long     0x74207373    # at addr 0x1b500  "ss t"
.long     0x2c656d69    # at addr 0x1b504  "ime,"
.long     0x77656e20    # at addr 0x1b508  " new"
.long     0x20747365    # at addr 0x1b50c  "est "
.long     0x73726966    # at addr 0x1b510  "firs"
.long     0x20200a74    # at addr 0x1b514  "t.  "
.long     0x2020552d    # at addr 0x1b518  "-U  "
.long     0x20202020    # at addr 0x1b51c  "    "
.long     0x20202020    # at addr 0x1b520  "    "
.long     0x20202020    # at addr 0x1b524  "    "
.long     0x20202020    # at addr 0x1b528  "    "
.long     0x20202020    # at addr 0x1b52c  "    "
.long     0x64202020    # at addr 0x1b530  "   d"
.long     0x6f6e206f    # at addr 0x1b534  "o no"
.long     0x6f732074    # at addr 0x1b538  "t so"
.long     0x203b7472    # at addr 0x1b53c  "rt; "
.long     0x7473696c    # at addr 0x1b540  "list"
.long     0x746e6520    # at addr 0x1b544  " ent"
.long     0x73656972    # at addr 0x1b548  "ries"
.long     0x206e6920    # at addr 0x1b54c  " in "
.long     0x65726964    # at addr 0x1b550  "dire"
.long     0x726f7463    # at addr 0x1b554  "ctor"
.long     0x726f2079    # at addr 0x1b558  "y or"
.long     0x0a726564    # at addr 0x1b55c  "der."
.long     0x762d2020    # at addr 0x1b560  "  -v"
.long     0x20202020    # at addr 0x1b564  "    "
.long     0x20202020    # at addr 0x1b568  "    "
.long     0x20202020    # at addr 0x1b56c  "    "
.long     0x20202020    # at addr 0x1b570  "    "
.long     0x20202020    # at addr 0x1b574  "    "
.long     0x20202020    # at addr 0x1b578  "    "
.long     0x74616e20    # at addr 0x1b57c  " nat"
.long     0x6c617275    # at addr 0x1b580  "ural"
.long     0x726f7320    # at addr 0x1b584  " sor"
.long     0x666f2074    # at addr 0x1b588  "t of"
.long     0x65762820    # at addr 0x1b58c  " (ve"
.long     0x6f697372    # at addr 0x1b590  "rsio"
.long     0x6e20296e    # at addr 0x1b594  "n) n"
.long     0x65626d75    # at addr 0x1b598  "umbe"
.long     0x77207372    # at addr 0x1b59c  "rs w"
.long     0x69687469    # at addr 0x1b5a0  "ithi"
.long     0x6574206e    # at addr 0x1b5a4  "n te"
.long     0x000a7478    # at addr 0x1b5a8  "xt.."
.long     0x00000000    # at addr 0x1b5ac  "...."
Var0x1b5b0:       # next=0x1b720, start=0x18000, end=0x1d248
.long     0x772d2020    # at addr 0x1b5b0  "  -w"
.long     0x2d2d202c    # at addr 0x1b5b4  ", --"
.long     0x74646977    # at addr 0x1b5b8  "widt"
.long     0x4f433d68    # at addr 0x1b5bc  "h=CO"
.long     0x2020534c    # at addr 0x1b5c0  "LS  "
.long     0x20202020    # at addr 0x1b5c4  "    "
.long     0x20202020    # at addr 0x1b5c8  "    "
.long     0x74657320    # at addr 0x1b5cc  " set"
.long     0x74756f20    # at addr 0x1b5d0  " out"
.long     0x20747570    # at addr 0x1b5d4  "put "
.long     0x74646977    # at addr 0x1b5d8  "widt"
.long     0x6f742068    # at addr 0x1b5dc  "h to"
.long     0x4c4f4320    # at addr 0x1b5e0  " COL"
.long     0x20202e53    # at addr 0x1b5e4  "S.  "
.long     0x656d2030    # at addr 0x1b5e8  "0 me"
.long     0x20736e61    # at addr 0x1b5ec  "ans "
.long     0x6c206f6e    # at addr 0x1b5f0  "no l"
.long     0x74696d69    # at addr 0x1b5f4  "imit"
.long     0x2d20200a    # at addr 0x1b5f8  ".  -"
.long     0x20202078    # at addr 0x1b5fc  "x   "
.long     0x20202020    # at addr 0x1b600  "    "
.long     0x20202020    # at addr 0x1b604  "    "
.long     0x20202020    # at addr 0x1b608  "    "
.long     0x20202020    # at addr 0x1b60c  "    "
.long     0x20202020    # at addr 0x1b610  "    "
.long     0x696c2020    # at addr 0x1b614  "  li"
.long     0x65207473    # at addr 0x1b618  "st e"
.long     0x6972746e    # at addr 0x1b61c  "ntri"
.long     0x62207365    # at addr 0x1b620  "es b"
.long     0x696c2079    # at addr 0x1b624  "y li"
.long     0x2073656e    # at addr 0x1b628  "nes "
.long     0x74736e69    # at addr 0x1b62c  "inst"
.long     0x20646165    # at addr 0x1b630  "ead "
.long     0x6220666f    # at addr 0x1b634  "of b"
.long     0x6f632079    # at addr 0x1b638  "y co"
.long     0x6e6d756c    # at addr 0x1b63c  "lumn"
.long     0x20200a73    # at addr 0x1b640  "s.  "
.long     0x2020582d    # at addr 0x1b644  "-X  "
.long     0x20202020    # at addr 0x1b648  "    "
.long     0x20202020    # at addr 0x1b64c  "    "
.long     0x20202020    # at addr 0x1b650  "    "
.long     0x20202020    # at addr 0x1b654  "    "
.long     0x20202020    # at addr 0x1b658  "    "
.long     0x73202020    # at addr 0x1b65c  "   s"
.long     0x2074726f    # at addr 0x1b660  "ort "
.long     0x68706c61    # at addr 0x1b664  "alph"
.long     0x74656261    # at addr 0x1b668  "abet"
.long     0x6c616369    # at addr 0x1b66c  "ical"
.long     0x6220796c    # at addr 0x1b670  "ly b"
.long     0x6e652079    # at addr 0x1b674  "y en"
.long     0x20797274    # at addr 0x1b678  "try "
.long     0x65747865    # at addr 0x1b67c  "exte"
.long     0x6f69736e    # at addr 0x1b680  "nsio"
.long     0x20200a6e    # at addr 0x1b684  "n.  "
.long     0x202c5a2d    # at addr 0x1b688  "-Z, "
.long     0x6f632d2d    # at addr 0x1b68c  "--co"
.long     0x7865746e    # at addr 0x1b690  "ntex"
.long     0x20202074    # at addr 0x1b694  "t   "
.long     0x20202020    # at addr 0x1b698  "    "
.long     0x20202020    # at addr 0x1b69c  "    "
.long     0x70202020    # at addr 0x1b6a0  "   p"
.long     0x746e6972    # at addr 0x1b6a4  "rint"
.long     0x796e6120    # at addr 0x1b6a8  " any"
.long     0x63657320    # at addr 0x1b6ac  " sec"
.long     0x74697275    # at addr 0x1b6b0  "urit"
.long     0x6f632079    # at addr 0x1b6b4  "y co"
.long     0x7865746e    # at addr 0x1b6b8  "ntex"
.long     0x666f2074    # at addr 0x1b6bc  "t of"
.long     0x63616520    # at addr 0x1b6c0  " eac"
.long     0x69662068    # at addr 0x1b6c4  "h fi"
.long     0x200a656c    # at addr 0x1b6c8  "le. "
.long     0x20312d20    # at addr 0x1b6cc  " -1 "
.long     0x20202020    # at addr 0x1b6d0  "    "
.long     0x20202020    # at addr 0x1b6d4  "    "
.long     0x20202020    # at addr 0x1b6d8  "    "
.long     0x20202020    # at addr 0x1b6dc  "    "
.long     0x20202020    # at addr 0x1b6e0  "    "
.long     0x20202020    # at addr 0x1b6e4  "    "
.long     0x7473696c    # at addr 0x1b6e8  "list"
.long     0x656e6f20    # at addr 0x1b6ec  " one"
.long     0x6c696620    # at addr 0x1b6f0  " fil"
.long     0x65702065    # at addr 0x1b6f4  "e pe"
.long     0x696c2072    # at addr 0x1b6f8  "r li"
.long     0x202e656e    # at addr 0x1b6fc  "ne. "
.long     0x6f764120    # at addr 0x1b700  " Avo"
.long     0x27206469    # at addr 0x1b704  "id '"
.long     0x20276e5c    # at addr 0x1b708  "\n' "
.long     0x68746977    # at addr 0x1b70c  "with"
.long     0x20712d20    # at addr 0x1b710  " -q "
.long     0x2d20726f    # at addr 0x1b714  "or -"
.long     0x00000a62    # at addr 0x1b718  "b..."
.long     0x00000000    # at addr 0x1b71c  "...."
Var0x1b720:       # next=0x1b750, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1b720  "    "
.long     0x2d2d2020    # at addr 0x1b724  "  --"
.long     0x706c6568    # at addr 0x1b728  "help"
.long     0x20202020    # at addr 0x1b72c  "    "
.long     0x73696420    # at addr 0x1b730  " dis"
.long     0x79616c70    # at addr 0x1b734  "play"
.long     0x69687420    # at addr 0x1b738  " thi"
.long     0x65682073    # at addr 0x1b73c  "s he"
.long     0x6120706c    # at addr 0x1b740  "lp a"
.long     0x6520646e    # at addr 0x1b744  "nd e"
.long     0x0a746978    # at addr 0x1b748  "xit."
.long     0x00000000    # at addr 0x1b74c  "...."
Var0x1b750:       # next=0x1b788, start=0x18000, end=0x1d248
.long     0x20202020    # at addr 0x1b750  "    "
.long     0x2d2d2020    # at addr 0x1b754  "  --"
.long     0x73726576    # at addr 0x1b758  "vers"
.long     0x206e6f69    # at addr 0x1b75c  "ion "
.long     0x74756f20    # at addr 0x1b760  " out"
.long     0x20747570    # at addr 0x1b764  "put "
.long     0x73726576    # at addr 0x1b768  "vers"
.long     0x206e6f69    # at addr 0x1b76c  "ion "
.long     0x6f666e69    # at addr 0x1b770  "info"
.long     0x74616d72    # at addr 0x1b774  "rmat"
.long     0x206e6f69    # at addr 0x1b778  "ion "
.long     0x20646e61    # at addr 0x1b77c  "and "
.long     0x74697865    # at addr 0x1b780  "exit"
.long     0x0000000a    # at addr 0x1b784  "...."
Var0x1b788:       # next=0x1b828, start=0x18000, end=0x1d248
.long     0x6568540a    # at addr 0x1b788  ".The"
.long     0x5a495320    # at addr 0x1b78c  " SIZ"
.long     0x72612045    # at addr 0x1b790  "E ar"
.long     0x656d7567    # at addr 0x1b794  "gume"
.long     0x6920746e    # at addr 0x1b798  "nt i"
.long     0x6e612073    # at addr 0x1b79c  "s an"
.long     0x746e6920    # at addr 0x1b7a0  " int"
.long     0x72656765    # at addr 0x1b7a4  "eger"
.long     0x646e6120    # at addr 0x1b7a8  " and"
.long     0x74706f20    # at addr 0x1b7ac  " opt"
.long     0x616e6f69    # at addr 0x1b7b0  "iona"
.long     0x6e75206c    # at addr 0x1b7b4  "l un"
.long     0x28207469    # at addr 0x1b7b8  "it ("
.long     0x6d617865    # at addr 0x1b7bc  "exam"
.long     0x3a656c70    # at addr 0x1b7c0  "ple:"
.long     0x4b303120    # at addr 0x1b7c4  " 10K"
.long     0x20736920    # at addr 0x1b7c8  " is "
.long     0x312a3031    # at addr 0x1b7cc  "10*1"
.long     0x29343230    # at addr 0x1b7d0  "024)"
.long     0x6e550a2e    # at addr 0x1b7d4  "..Un"
.long     0x20737469    # at addr 0x1b7d8  "its "
.long     0x20657261    # at addr 0x1b7dc  "are "
.long     0x2c4d2c4b    # at addr 0x1b7e0  "K,M,"
.long     0x2c542c47    # at addr 0x1b7e4  "G,T,"
.long     0x2c452c50    # at addr 0x1b7e8  "P,E,"
.long     0x20592c5a    # at addr 0x1b7ec  "Z,Y "
.long     0x776f7028    # at addr 0x1b7f0  "(pow"
.long     0x20737265    # at addr 0x1b7f4  "ers "
.long     0x3120666f    # at addr 0x1b7f8  "of 1"
.long     0x29343230    # at addr 0x1b7fc  "024)"
.long     0x20726f20    # at addr 0x1b800  " or "
.long     0x4d2c424b    # at addr 0x1b804  "KB,M"
.long     0x2e2e2c42    # at addr 0x1b808  "B,.."
.long     0x7028202e    # at addr 0x1b80c  ". (p"
.long     0x7265776f    # at addr 0x1b810  "ower"
.long     0x666f2073    # at addr 0x1b814  "s of"
.long     0x30303120    # at addr 0x1b818  " 100"
.long     0x0a2e2930    # at addr 0x1b81c  "0).."
.long     0x00000000    # at addr 0x1b820  "...."
.long     0x00000000    # at addr 0x1b824  "...."
Var0x1b828:       # next=0x1b9a0, start=0x18000, end=0x1d248
.long     0x6568540a    # at addr 0x1b828  ".The"
.long     0x4d495420    # at addr 0x1b82c  " TIM"
.long     0x54535f45    # at addr 0x1b830  "E_ST"
.long     0x20454c59    # at addr 0x1b834  "YLE "
.long     0x75677261    # at addr 0x1b838  "argu"
.long     0x746e656d    # at addr 0x1b83c  "ment"
.long     0x6e616320    # at addr 0x1b840  " can"
.long     0x20656220    # at addr 0x1b844  " be "
.long     0x6c6c7566    # at addr 0x1b848  "full"
.long     0x6f73692d    # at addr 0x1b84c  "-iso"
.long     0x6f6c202c    # at addr 0x1b850  ", lo"
.long     0x692d676e    # at addr 0x1b854  "ng-i"
.long     0x202c6f73    # at addr 0x1b858  "so, "
.long     0x2c6f7369    # at addr 0x1b85c  "iso,"
.long     0x636f6c20    # at addr 0x1b860  " loc"
.long     0x2c656c61    # at addr 0x1b864  "ale,"
.long     0x20726f20    # at addr 0x1b868  " or "
.long     0x524f462b    # at addr 0x1b86c  "+FOR"
.long     0x2e54414d    # at addr 0x1b870  "MAT."
.long     0x524f460a    # at addr 0x1b874  ".FOR"
.long     0x2054414d    # at addr 0x1b878  "MAT "
.long     0x69207369    # at addr 0x1b87c  "is i"
.long     0x7265746e    # at addr 0x1b880  "nter"
.long     0x74657270    # at addr 0x1b884  "pret"
.long     0x6c206465    # at addr 0x1b888  "ed l"
.long     0x20656b69    # at addr 0x1b88c  "ike "
.long     0x64206e69    # at addr 0x1b890  "in d"
.long     0x28657461    # at addr 0x1b894  "ate("
.long     0x202e2931    # at addr 0x1b898  "1). "
.long     0x20664920    # at addr 0x1b89c  " If "
.long     0x4d524f46    # at addr 0x1b8a0  "FORM"
.long     0x69205441    # at addr 0x1b8a4  "AT i"
.long     0x4f462073    # at addr 0x1b8a8  "s FO"
.long     0x54414d52    # at addr 0x1b8ac  "RMAT"
.long     0x656e3c31    # at addr 0x1b8b0  "1<ne"
.long     0x6e696c77    # at addr 0x1b8b4  "wlin"
.long     0x4f463e65    # at addr 0x1b8b8  "e>FO"
.long     0x54414d52    # at addr 0x1b8bc  "RMAT"
.long     0x740a2c32    # at addr 0x1b8c0  "2,.t"
.long     0x206e6568    # at addr 0x1b8c4  "hen "
.long     0x4d524f46    # at addr 0x1b8c8  "FORM"
.long     0x20315441    # at addr 0x1b8cc  "AT1 "
.long     0x6c707061    # at addr 0x1b8d0  "appl"
.long     0x20736569    # at addr 0x1b8d4  "ies "
.long     0x6e206f74    # at addr 0x1b8d8  "to n"
.long     0x722d6e6f    # at addr 0x1b8dc  "on-r"
.long     0x6e656365    # at addr 0x1b8e0  "ecen"
.long     0x69662074    # at addr 0x1b8e4  "t fi"
.long     0x2073656c    # at addr 0x1b8e8  "les "
.long     0x20646e61    # at addr 0x1b8ec  "and "
.long     0x4d524f46    # at addr 0x1b8f0  "FORM"
.long     0x20325441    # at addr 0x1b8f4  "AT2 "
.long     0x72206f74    # at addr 0x1b8f8  "to r"
.long     0x6e656365    # at addr 0x1b8fc  "ecen"
.long     0x69662074    # at addr 0x1b900  "t fi"
.long     0x2e73656c    # at addr 0x1b904  "les."
.long     0x4d49540a    # at addr 0x1b908  ".TIM"
.long     0x54535f45    # at addr 0x1b90c  "E_ST"
.long     0x20454c59    # at addr 0x1b910  "YLE "
.long     0x66657270    # at addr 0x1b914  "pref"
.long     0x64657869    # at addr 0x1b918  "ixed"
.long     0x74697720    # at addr 0x1b91c  " wit"
.long     0x70272068    # at addr 0x1b920  "h 'p"
.long     0x7869736f    # at addr 0x1b924  "osix"
.long     0x7420272d    # at addr 0x1b928  "-' t"
.long     0x73656b61    # at addr 0x1b92c  "akes"
.long     0x66666520    # at addr 0x1b930  " eff"
.long     0x20746365    # at addr 0x1b934  "ect "
.long     0x796c6e6f    # at addr 0x1b938  "only"
.long     0x74756f20    # at addr 0x1b93c  " out"
.long     0x65646973    # at addr 0x1b940  "side"
.long     0x65687420    # at addr 0x1b944  " the"
.long     0x534f5020    # at addr 0x1b948  " POS"
.long     0x6c205849    # at addr 0x1b94c  "IX l"
.long     0x6c61636f    # at addr 0x1b950  "ocal"
.long     0x410a2e65    # at addr 0x1b954  "e..A"
.long     0x206f736c    # at addr 0x1b958  "lso "
.long     0x20656874    # at addr 0x1b95c  "the "
.long     0x454d4954    # at addr 0x1b960  "TIME"
.long     0x5954535f    # at addr 0x1b964  "_STY"
.long     0x6520454c    # at addr 0x1b968  "LE e"
.long     0x7269766e    # at addr 0x1b96c  "nvir"
.long     0x656d6e6f    # at addr 0x1b970  "onme"
.long     0x7620746e    # at addr 0x1b974  "nt v"
.long     0x61697261    # at addr 0x1b978  "aria"
.long     0x20656c62    # at addr 0x1b97c  "ble "
.long     0x73746573    # at addr 0x1b980  "sets"
.long     0x65687420    # at addr 0x1b984  " the"
.long     0x66656420    # at addr 0x1b988  " def"
.long     0x746c7561    # at addr 0x1b98c  "ault"
.long     0x79747320    # at addr 0x1b990  " sty"
.long     0x7420656c    # at addr 0x1b994  "le t"
.long     0x7375206f    # at addr 0x1b998  "o us"
.long     0x000a2e65    # at addr 0x1b99c  "e..."
Var0x1b9a0:       # next=0x1bac0, start=0x18000, end=0x1d248
.long     0x6973550a    # at addr 0x1b9a0  ".Usi"
.long     0x6320676e    # at addr 0x1b9a4  "ng c"
.long     0x726f6c6f    # at addr 0x1b9a8  "olor"
.long     0x206f7420    # at addr 0x1b9ac  " to "
.long     0x74736964    # at addr 0x1b9b0  "dist"
.long     0x75676e69    # at addr 0x1b9b4  "ingu"
.long     0x20687369    # at addr 0x1b9b8  "ish "
.long     0x656c6966    # at addr 0x1b9bc  "file"
.long     0x70797420    # at addr 0x1b9c0  " typ"
.long     0x69207365    # at addr 0x1b9c4  "es i"
.long     0x69642073    # at addr 0x1b9c8  "s di"
.long     0x6c626173    # at addr 0x1b9cc  "sabl"
.long     0x62206465    # at addr 0x1b9d0  "ed b"
.long     0x2068746f    # at addr 0x1b9d4  "oth "
.long     0x64207962    # at addr 0x1b9d8  "by d"
.long     0x75616665    # at addr 0x1b9dc  "efau"
.long     0x6120746c    # at addr 0x1b9e0  "lt a"
.long     0x770a646e    # at addr 0x1b9e4  "nd.w"
.long     0x20687469    # at addr 0x1b9e8  "ith "
.long     0x6f632d2d    # at addr 0x1b9ec  "--co"
.long     0x3d726f6c    # at addr 0x1b9f0  "lor="
.long     0x6576656e    # at addr 0x1b9f4  "neve"
.long     0x20202e72    # at addr 0x1b9f8  "r.  "
.long     0x68746957    # at addr 0x1b9fc  "With"
.long     0x632d2d20    # at addr 0x1ba00  " --c"
.long     0x726f6c6f    # at addr 0x1ba04  "olor"
.long     0x7475613d    # at addr 0x1ba08  "=aut"
.long     0x6c202c6f    # at addr 0x1ba0c  "o, l"
.long     0x6d652073    # at addr 0x1ba10  "s em"
.long     0x20737469    # at addr 0x1ba14  "its "
.long     0x6f6c6f63    # at addr 0x1ba18  "colo"
.long     0x6f632072    # at addr 0x1ba1c  "r co"
.long     0x20736564    # at addr 0x1ba20  "des "
.long     0x796c6e6f    # at addr 0x1ba24  "only"
.long     0x65687720    # at addr 0x1ba28  " whe"
.long     0x74730a6e    # at addr 0x1ba2c  "n.st"
.long     0x61646e61    # at addr 0x1ba30  "anda"
.long     0x6f206472    # at addr 0x1ba34  "rd o"
.long     0x75707475    # at addr 0x1ba38  "utpu"
.long     0x73692074    # at addr 0x1ba3c  "t is"
.long     0x6e6f6320    # at addr 0x1ba40  " con"
.long     0x7463656e    # at addr 0x1ba44  "nect"
.long     0x74206465    # at addr 0x1ba48  "ed t"
.long     0x2061206f    # at addr 0x1ba4c  "o a "
.long     0x6d726574    # at addr 0x1ba50  "term"
.long     0x6c616e69    # at addr 0x1ba54  "inal"
.long     0x5420202e    # at addr 0x1ba58  ".  T"
.long     0x4c206568    # at addr 0x1ba5c  "he L"
.long     0x4f435f53    # at addr 0x1ba60  "S_CO"
.long     0x53524f4c    # at addr 0x1ba64  "LORS"
.long     0x766e6520    # at addr 0x1ba68  " env"
.long     0x6e6f7269    # at addr 0x1ba6c  "iron"
.long     0x746e656d    # at addr 0x1ba70  "ment"
.long     0x7261760a    # at addr 0x1ba74  ".var"
.long     0x6c626169    # at addr 0x1ba78  "iabl"
.long     0x61632065    # at addr 0x1ba7c  "e ca"
.long     0x6863206e    # at addr 0x1ba80  "n ch"
.long     0x65676e61    # at addr 0x1ba84  "ange"
.long     0x65687420    # at addr 0x1ba88  " the"
.long     0x74657320    # at addr 0x1ba8c  " set"
.long     0x676e6974    # at addr 0x1ba90  "ting"
.long     0x20202e73    # at addr 0x1ba94  "s.  "
.long     0x20657355    # at addr 0x1ba98  "Use "
.long     0x20656874    # at addr 0x1ba9c  "the "
.long     0x63726964    # at addr 0x1baa0  "dirc"
.long     0x726f6c6f    # at addr 0x1baa4  "olor"
.long     0x6f632073    # at addr 0x1baa8  "s co"
.long     0x6e616d6d    # at addr 0x1baac  "mman"
.long     0x6f742064    # at addr 0x1bab0  "d to"
.long     0x74657320    # at addr 0x1bab4  " set"
.long     0x2e746920    # at addr 0x1bab8  " it."
.long     0x0000000a    # at addr 0x1babc  "...."
Var0x1bac0:       # next=0x1bb58, start=0x18000, end=0x1d248
.long     0x6978450a    # at addr 0x1bac0  ".Exi"
.long     0x74732074    # at addr 0x1bac4  "t st"
.long     0x73757461    # at addr 0x1bac8  "atus"
.long     0x30200a3a    # at addr 0x1bacc  ":. 0"
.long     0x66692020    # at addr 0x1bad0  "  if"
.long     0x2c4b4f20    # at addr 0x1bad4  " OK,"
.long     0x2031200a    # at addr 0x1bad8  ". 1 "
.long     0x20666920    # at addr 0x1badc  " if "
.long     0x6f6e696d    # at addr 0x1bae0  "mino"
.long     0x72702072    # at addr 0x1bae4  "r pr"
.long     0x656c626f    # at addr 0x1bae8  "oble"
.long     0x2820736d    # at addr 0x1baec  "ms ("
.long     0x2e672e65    # at addr 0x1baf0  "e.g."
.long     0x6163202c    # at addr 0x1baf4  ", ca"
.long     0x746f6e6e    # at addr 0x1baf8  "nnot"
.long     0x63636120    # at addr 0x1bafc  " acc"
.long     0x20737365    # at addr 0x1bb00  "ess "
.long     0x64627573    # at addr 0x1bb04  "subd"
.long     0x63657269    # at addr 0x1bb08  "irec"
.long     0x79726f74    # at addr 0x1bb0c  "tory"
.long     0x200a2c29    # at addr 0x1bb10  "),. "
.long     0x69202032    # at addr 0x1bb14  "2  i"
.long     0x65732066    # at addr 0x1bb18  "f se"
.long     0x756f6972    # at addr 0x1bb1c  "riou"
.long     0x72742073    # at addr 0x1bb20  "s tr"
.long     0x6c62756f    # at addr 0x1bb24  "oubl"
.long     0x65282065    # at addr 0x1bb28  "e (e"
.long     0x2c2e672e    # at addr 0x1bb2c  ".g.,"
.long     0x6e616320    # at addr 0x1bb30  " can"
.long     0x20746f6e    # at addr 0x1bb34  "not "
.long     0x65636361    # at addr 0x1bb38  "acce"
.long     0x63207373    # at addr 0x1bb3c  "ss c"
.long     0x616d6d6f    # at addr 0x1bb40  "omma"
.long     0x6c2d646e    # at addr 0x1bb44  "nd-l"
.long     0x20656e69    # at addr 0x1bb48  "ine "
.long     0x75677261    # at addr 0x1bb4c  "argu"
.long     0x746e656d    # at addr 0x1bb50  "ment"
.long     0x000a2e29    # at addr 0x1bb54  ")..."
Var0x1bb58:       # next=0x1bb80, start=0x18000, end=0x1d248
.long     0x70747468    # at addr 0x1bb58  "http"
.long     0x2f2f3a73    # at addr 0x1bb5c  "s://"
.long     0x2e777777    # at addr 0x1bb60  "www."
.long     0x2e756e67    # at addr 0x1bb64  "gnu."
.long     0x2f67726f    # at addr 0x1bb68  "org/"
.long     0x74666f73    # at addr 0x1bb6c  "soft"
.long     0x65726177    # at addr 0x1bb70  "ware"
.long     0x726f632f    # at addr 0x1bb74  "/cor"
.long     0x69747565    # at addr 0x1bb78  "euti"
.long     0x002f736c    # at addr 0x1bb7c  "ls/."
Var0x1bb80:       # next=0x1bbc8, start=0x18000, end=0x1d248
.long     0x6f706552    # at addr 0x1bb80  "Repo"
.long     0x25207472    # at addr 0x1bb84  "rt %"
.long     0x72742073    # at addr 0x1bb88  "s tr"
.long     0x6c736e61    # at addr 0x1bb8c  "ansl"
.long     0x6f697461    # at addr 0x1bb90  "atio"
.long     0x7562206e    # at addr 0x1bb94  "n bu"
.long     0x74207367    # at addr 0x1bb98  "gs t"
.long     0x683c206f    # at addr 0x1bb9c  "o <h"
.long     0x73707474    # at addr 0x1bba0  "ttps"
.long     0x742f2f3a    # at addr 0x1bba4  "://t"
.long     0x736e6172    # at addr 0x1bba8  "rans"
.long     0x6974616c    # at addr 0x1bbac  "lati"
.long     0x72706e6f    # at addr 0x1bbb0  "onpr"
.long     0x63656a6f    # at addr 0x1bbb4  "ojec"
.long     0x726f2e74    # at addr 0x1bbb8  "t.or"
.long     0x65742f67    # at addr 0x1bbbc  "g/te"
.long     0x3e2f6d61    # at addr 0x1bbc0  "am/>"
.long     0x0000000a    # at addr 0x1bbc4  "...."
Var0x1bbc8:       # next=0x1bbe8, start=0x18000, end=0x1d248
.long     0x6c6c7546    # at addr 0x1bbc8  "Full"
.long     0x636f6420    # at addr 0x1bbcc  " doc"
.long     0x6e656d75    # at addr 0x1bbd0  "umen"
.long     0x69746174    # at addr 0x1bbd4  "tati"
.long     0x61206e6f    # at addr 0x1bbd8  "on a"
.long     0x3c203a74    # at addr 0x1bbdc  "t: <"
.long     0x73257325    # at addr 0x1bbe0  "%s%s"
.long     0x00000a3e    # at addr 0x1bbe4  ">..."
Var0x1bbe8:       # next=0x1bc20, start=0x18000, end=0x1d248
.long     0x6120726f    # at addr 0x1bbe8  "or a"
.long     0x6c696176    # at addr 0x1bbec  "vail"
.long     0x656c6261    # at addr 0x1bbf0  "able"
.long     0x636f6c20    # at addr 0x1bbf4  " loc"
.long     0x796c6c61    # at addr 0x1bbf8  "ally"
.long     0x61697620    # at addr 0x1bbfc  " via"
.long     0x6e69203a    # at addr 0x1bc00  ": in"
.long     0x27206f66    # at addr 0x1bc04  "fo '"
.long     0x726f6328    # at addr 0x1bc08  "(cor"
.long     0x69747565    # at addr 0x1bc0c  "euti"
.long     0x2029736c    # at addr 0x1bc10  "ls) "
.long     0x73257325    # at addr 0x1bc14  "%s%s"
.long     0x00000a27    # at addr 0x1bc18  "'..."
.long     0x00000000    # at addr 0x1bc1c  "...."
Var0x1bc20:       # next=0x1bc68, start=0x18000, end=0x1d248
.long     0x6f6e6769    # at addr 0x1bc20  "igno"
.long     0x676e6972    # at addr 0x1bc24  "ring"
.long     0x766e6920    # at addr 0x1bc28  " inv"
.long     0x64696c61    # at addr 0x1bc2c  "alid"
.long     0x6c617620    # at addr 0x1bc30  " val"
.long     0x6f206575    # at addr 0x1bc34  "ue o"
.long     0x6e652066    # at addr 0x1bc38  "f en"
.long     0x6f726976    # at addr 0x1bc3c  "viro"
.long     0x6e656d6e    # at addr 0x1bc40  "nmen"
.long     0x61762074    # at addr 0x1bc44  "t va"
.long     0x62616972    # at addr 0x1bc48  "riab"
.long     0x5120656c    # at addr 0x1bc4c  "le Q"
.long     0x49544f55    # at addr 0x1bc50  "UOTI"
.long     0x535f474e    # at addr 0x1bc54  "NG_S"
.long     0x454c5954    # at addr 0x1bc58  "TYLE"
.long     0x7325203a    # at addr 0x1bc5c  ": %s"
.long     0x00000000    # at addr 0x1bc60  "...."
.long     0x00000000    # at addr 0x1bc64  "...."
Var0x1bc68:       # next=0x1bca8, start=0x18000, end=0x1d248
.long     0x6f6e6769    # at addr 0x1bc68  "igno"
.long     0x676e6972    # at addr 0x1bc6c  "ring"
.long     0x766e6920    # at addr 0x1bc70  " inv"
.long     0x64696c61    # at addr 0x1bc74  "alid"
.long     0x64697720    # at addr 0x1bc78  " wid"
.long     0x69206874    # at addr 0x1bc7c  "th i"
.long     0x6e65206e    # at addr 0x1bc80  "n en"
.long     0x6f726976    # at addr 0x1bc84  "viro"
.long     0x6e656d6e    # at addr 0x1bc88  "nmen"
.long     0x61762074    # at addr 0x1bc8c  "t va"
.long     0x62616972    # at addr 0x1bc90  "riab"
.long     0x4320656c    # at addr 0x1bc94  "le C"
.long     0x4d554c4f    # at addr 0x1bc98  "OLUM"
.long     0x203a534e    # at addr 0x1bc9c  "NS: "
.long     0x00007325    # at addr 0x1bca0  "%s.."
.long     0x00000000    # at addr 0x1bca4  "...."
Var0x1bca8:       # next=0x1bce8, start=0x18000, end=0x1d248
.long     0x6f6e6769    # at addr 0x1bca8  "igno"
.long     0x676e6972    # at addr 0x1bcac  "ring"
.long     0x766e6920    # at addr 0x1bcb0  " inv"
.long     0x64696c61    # at addr 0x1bcb4  "alid"
.long     0x62617420    # at addr 0x1bcb8  " tab"
.long     0x7a697320    # at addr 0x1bcbc  " siz"
.long     0x6e692065    # at addr 0x1bcc0  "e in"
.long     0x766e6520    # at addr 0x1bcc4  " env"
.long     0x6e6f7269    # at addr 0x1bcc8  "iron"
.long     0x746e656d    # at addr 0x1bccc  "ment"
.long     0x72617620    # at addr 0x1bcd0  " var"
.long     0x6c626169    # at addr 0x1bcd4  "iabl"
.long     0x41542065    # at addr 0x1bcd8  "e TA"
.long     0x5a495342    # at addr 0x1bcdc  "BSIZ"
.long     0x25203a45    # at addr 0x1bce0  "E: %"
.long     0x00000073    # at addr 0x1bce4  "s..."
Var0x1bce8:       # next=0x1bd18, start=0x18000, end=0x1d248
.long     0x64636261    # at addr 0x1bce8  "abcd"
.long     0x69686766    # at addr 0x1bcec  "fghi"
.long     0x6e6d6c6b    # at addr 0x1bcf0  "klmn"
.long     0x7271706f    # at addr 0x1bcf4  "opqr"
.long     0x76757473    # at addr 0x1bcf8  "stuv"
.long     0x41783a77    # at addr 0x1bcfc  "w:xA"
.long     0x46444342    # at addr 0x1bd00  "BCDF"
.long     0x3a494847    # at addr 0x1bd04  "GHI:"
.long     0x52514e4c    # at addr 0x1bd08  "LNQR"
.long     0x553a5453    # at addr 0x1bd0c  "ST:U"
.long     0x00315a58    # at addr 0x1bd10  "XZ1."
.long     0x00000000    # at addr 0x1bd14  "...."
Var0x1bd18:       # next=0x1bd50, start=0x18000, end=0x1d248
.long     0x202d2020    # at addr 0x1bd18  "  - "
.long     0x524f462b    # at addr 0x1bd1c  "+FOR"
.long     0x2054414d    # at addr 0x1bd20  "MAT "
.long     0x672e6528    # at addr 0x1bd24  "(e.g"
.long     0x2b202c2e    # at addr 0x1bd28  "., +"
.long     0x253a4825    # at addr 0x1bd2c  "%H:%"
.long     0x6620294d    # at addr 0x1bd30  "M) f"
.long     0x6120726f    # at addr 0x1bd34  "or a"
.long     0x61642720    # at addr 0x1bd38  " 'da"
.long     0x2d276574    # at addr 0x1bd3c  "te'-"
.long     0x6c797473    # at addr 0x1bd40  "styl"
.long     0x6f662065    # at addr 0x1bd44  "e fo"
.long     0x74616d72    # at addr 0x1bd48  "rmat"
.long     0x0000000a    # at addr 0x1bd4c  "...."
Var0x1bd50:       # next=0x1bd88, start=0x18000, end=0x1d248
.long     0x5f766564    # at addr 0x1bd50  "dev_"
.long     0x5f6f6e69    # at addr 0x1bd54  "ino_"
.long     0x657a6973    # at addr 0x1bd58  "size"
.long     0x203d3c20    # at addr 0x1bd5c  " <= "
.long     0x7473626f    # at addr 0x1bd60  "obst"
.long     0x5f6b6361    # at addr 0x1bd64  "ack_"
.long     0x656a626f    # at addr 0x1bd68  "obje"
.long     0x735f7463    # at addr 0x1bd6c  "ct_s"
.long     0x20657a69    # at addr 0x1bd70  "ize "
.long     0x65642628    # at addr 0x1bd74  "(&de"
.long     0x6e695f76    # at addr 0x1bd78  "v_in"
.long     0x626f5f6f    # at addr 0x1bd7c  "o_ob"
.long     0x63617473    # at addr 0x1bd80  "stac"
.long     0x0000296b    # at addr 0x1bd84  "k).."
Var0x1bd88:       # next=0x1bdb0, start=0x18000, end=0x1d248
.long     0x49442f2f    # at addr 0x1bd88  "//DI"
.long     0x2d444552    # at addr 0x1bd8c  "RED-"
.long     0x4954504f    # at addr 0x1bd90  "OPTI"
.long     0x2f534e4f    # at addr 0x1bd94  "ONS/"
.long     0x2d2d202f    # at addr 0x1bd98  "/ --"
.long     0x746f7571    # at addr 0x1bd9c  "quot"
.long     0x2d676e69    # at addr 0x1bda0  "ing-"
.long     0x6c797473    # at addr 0x1bda4  "styl"
.long     0x73253d65    # at addr 0x1bda8  "e=%s"
.long     0x0000000a    # at addr 0x1bdac  "...."
Var0x1bdb0:       # next=0x1bde0, start=0x18000, end=0x1d248
.long     0x68736168    # at addr 0x1bdb0  "hash"
.long     0x7465675f    # at addr 0x1bdb4  "_get"
.long     0x655f6e5f    # at addr 0x1bdb8  "_n_e"
.long     0x6972746e    # at addr 0x1bdbc  "ntri"
.long     0x28207365    # at addr 0x1bdc0  "es ("
.long     0x69746361    # at addr 0x1bdc4  "acti"
.long     0x645f6576    # at addr 0x1bdc8  "ve_d"
.long     0x735f7269    # at addr 0x1bdcc  "ir_s"
.long     0x20297465    # at addr 0x1bdd0  "et) "
.long     0x30203d3d    # at addr 0x1bdd4  "== 0"
.long     0x00000000    # at addr 0x1bdd8  "...."
.long     0x00000000    # at addr 0x1bddc  "...."
Var0x1bde0:       # next=0x1be45, start=0x18000, end=0x1d248
.long     0x61706e75    # at addr 0x1bde0  "unpa"
.long     0x62617372    # at addr 0x1bde4  "rsab"
.long     0x7620656c    # at addr 0x1bde8  "le v"
.long     0x65756c61    # at addr 0x1bdec  "alue"
.long     0x726f6620    # at addr 0x1bdf0  " for"
.long     0x5f534c20    # at addr 0x1bdf4  " LS_"
.long     0x4f4c4f43    # at addr 0x1bdf8  "COLO"
.long     0x65205352    # at addr 0x1bdfc  "RS e"
.long     0x7269766e    # at addr 0x1be00  "nvir"
.long     0x656d6e6f    # at addr 0x1be04  "onme"
.long     0x7620746e    # at addr 0x1be08  "nt v"
.long     0x61697261    # at addr 0x1be0c  "aria"
.long     0x00656c62    # at addr 0x1be10  "ble."
.long     0x00000000    # at addr 0x1be14  "...."
.long     0x65726564    # at addr 0x1be18  "dere"
.long     0x65726566    # at addr 0x1be1c  "fere"
.long     0x2d65636e    # at addr 0x1be20  "nce-"
.long     0x6d6d6f63    # at addr 0x1be24  "comm"
.long     0x2d646e61    # at addr 0x1be28  "and-"
.long     0x656e696c    # at addr 0x1be2c  "line"
.long     0x6d79732d    # at addr 0x1be30  "-sym"
.long     0x6b6e696c    # at addr 0x1be34  "link"
.long     0x2d6f742d    # at addr 0x1be38  "-to-"
.long     0x00726964    # at addr 0x1be3c  "dir."
.long     0x30332e38    # at addr 0x1be40  "8.30"
.byte     0x00    # "."
Var0x1be45:       # next=0x1be60, start=0x18000, end=0x1d248
.long     0x61766e69    # at addr 0x1be45  "inva"
.long     0x2064696c    # at addr 0x1be49  "lid "
.long     0x75677261    # at addr 0x1be4d  "argu"
.long     0x746e656d    # at addr 0x1be51  "ment"
.long     0x20732520    # at addr 0x1be55  " %s "
.long     0x20726f66    # at addr 0x1be59  "for "
.byte     0x25    # "%"
.byte     0x73    # "%"
.byte     0x00    # "%"
Var0x1be60:       # next=0x1be7d, start=0x18000, end=0x1d248
.long     0x69626d61    # at addr 0x1be60  "ambi"
.long     0x756f7567    # at addr 0x1be64  "guou"
.long     0x72612073    # at addr 0x1be68  "s ar"
.long     0x656d7567    # at addr 0x1be6c  "gume"
.long     0x2520746e    # at addr 0x1be70  "nt %"
.long     0x6f662073    # at addr 0x1be74  "s fo"
.long     0x73252072    # at addr 0x1be78  "r %s"
.byte     0x00    # "."
Var0x1be7d:       # next=0x1be92, start=0x18000, end=0x1d248
.long     0x696c6156    # at addr 0x1be7d  "Vali"
.long     0x72612064    # at addr 0x1be81  "d ar"
.long     0x656d7567    # at addr 0x1be85  "gume"
.long     0x2073746e    # at addr 0x1be89  "nts "
.long     0x3a657261    # at addr 0x1be8d  "are:"
.byte     0x00    # "."
Var0x1be92:       # next=0x1be9a, start=0x18000, end=0x1d248
.long     0x2d20200a    # at addr 0x1be92  ".  -"
.long     0x00732520    # at addr 0x1be96  " %s."
Var0x1be9a:       # next=0x1be9c, start=0x18000, end=0x1d248
.byte     0x2c    # ","
.byte     0x20    # ","
Var0x1be9c:       # next=0x1be9f, start=0x18000, end=0x1d248
.byte     0x25    # "%"
.byte     0x73    # "%"
.byte     0x00    # "%"
Var0x1be9f:       # next=0x1beab, start=0x18000, end=0x1d248
.long     0x74697277    # at addr 0x1be9f  "writ"
.long     0x72652065    # at addr 0x1bea3  "e er"
.long     0x00726f72    # at addr 0x1bea7  "ror."
Var0x1beab:       # next=0x1bec3, start=0x18000, end=0x1d248
.long     0x74737973    # at addr 0x1beab  "syst"
.long     0x702e6d65    # at addr 0x1beaf  "em.p"
.long     0x7869736f    # at addr 0x1beb3  "osix"
.long     0x6c63615f    # at addr 0x1beb7  "_acl"
.long     0x6363615f    # at addr 0x1bebb  "_acc"
.long     0x00737365    # at addr 0x1bebf  "ess."
Var0x1bec3:       # next=0x1bedc, start=0x18000, end=0x1d248
.long     0x74737973    # at addr 0x1bec3  "syst"
.long     0x702e6d65    # at addr 0x1bec7  "em.p"
.long     0x7869736f    # at addr 0x1becb  "osix"
.long     0x6c63615f    # at addr 0x1becf  "_acl"
.long     0x6665645f    # at addr 0x1bed3  "_def"
.long     0x746c7561    # at addr 0x1bed7  "ault"
.byte     0x00    # "."
Var0x1bedc:       # next=0x1bee2, start=0x18000, end=0x1d248
.long     0x49534f50    # at addr 0x1bedc  "POSI"
.byte     0x58    # "X"
.byte     0x00    # "X"
Var0x1bee2:       # next=0x1befa, start=0x18000, end=0x1d248
.long     0x6e652023    # at addr 0x1bee2  "# en"
.long     0x65697274    # at addr 0x1bee6  "trie"
.long     0x20203a73    # at addr 0x1beea  "s:  "
.long     0x20202020    # at addr 0x1beee  "    "
.long     0x25202020    # at addr 0x1bef2  "   %"
.long     0x000a756c    # at addr 0x1bef6  "lu.."
Var0x1befa:       # next=0x1bf12, start=0x18000, end=0x1d248
.long     0x75622023    # at addr 0x1befa  "# bu"
.long     0x74656b63    # at addr 0x1befe  "cket"
.long     0x20203a73    # at addr 0x1bf02  "s:  "
.long     0x20202020    # at addr 0x1bf06  "    "
.long     0x25202020    # at addr 0x1bf0a  "   %"
.long     0x000a756c    # at addr 0x1bf0e  "lu.."
Var0x1bf12:       # next=0x1bf30, start=0x18000, end=0x1d248
.long     0x2078616d    # at addr 0x1bf12  "max "
.long     0x6b637562    # at addr 0x1bf16  "buck"
.long     0x6c207465    # at addr 0x1bf1a  "et l"
.long     0x74676e65    # at addr 0x1bf1e  "engt"
.long     0x25203a68    # at addr 0x1bf22  "h: %"
.long     0x000a756c    # at addr 0x1bf26  "lu.."
.long     0x00000000    # at addr 0x1bf2a  "...."
.byte     0x00    # "."
.byte     0x00    # "."
Var0x1bf30:       # next=0x1bf60, start=0x18000, end=0x1d248
.long     0x75622023    # at addr 0x1bf30  "# bu"
.long     0x74656b63    # at addr 0x1bf34  "cket"
.long     0x73752073    # at addr 0x1bf38  "s us"
.long     0x203a6465    # at addr 0x1bf3c  "ed: "
.long     0x25202020    # at addr 0x1bf40  "   %"
.long     0x2820756c    # at addr 0x1bf44  "lu ("
.long     0x66322e25    # at addr 0x1bf48  "%.2f"
.long     0x0a292525    # at addr 0x1bf4c  "%%)."
.long     0x00000000    # at addr 0x1bf50  "...."
.long     0x00000000    # at addr 0x1bf54  "...."
.long     0x00000000    # at addr 0x1bf58  "...."
.long     0x00000000    # at addr 0x1bf5c  "...."
Var0x1bf60:       # next=0x1bf74, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x1bf60  "...."
.long     0x3f800000    # at addr 0x1bf64  "...?"
.long     0x3f4ccccd    # at addr 0x1bf68  "..L?"
.long     0x3fb4fdf4    # at addr 0x1bf6c  "...?"
.long     0x00000000    # at addr 0x1bf70  "...."
Var0x1bf74:       # next=0x1bf78, start=0x18000, end=0x1d248
.long     0x3dcccccd    # at addr 0x1bf74  "...="
Var0x1bf78:       # next=0x1bf7c, start=0x18000, end=0x1d248
.long     0x3f666666    # at addr 0x1bf78  "fff?"
Var0x1bf7c:       # next=0x1bf80, start=0x18000, end=0x1d248
.long     0x3f8ccccd    # at addr 0x1bf7c  "...?"
Var0x1bf80:       # next=0x1bf84, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x1bf80  "...."
Var0x1bf84:       # next=0x1bf88, start=0x18000, end=0x1d248
.long     0x3f800000    # at addr 0x1bf84  "...?"
Var0x1bf88:       # next=0x1bf8c, start=0x18000, end=0x1d248
.long     0x5f800000    # at addr 0x1bf88  "..._"
Var0x1bf8c:       # next=0x1bf90, start=0x18000, end=0x1d248
.long     0x5f000000    # at addr 0x1bf8c  "..._"
Var0x1bf90:       # next=0x1bf98, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x1bf90  "...."
.long     0x40590000    # at addr 0x1bf94  "..Y@"
Var0x1bf98:       # next=0x1bf9e, start=0x18000, end=0x1d248
.long     0x4c302e25    # at addr 0x1bf98  "%.0L"
.byte     0x66    # "f"
.byte     0x00    # "f"
Var0x1bf9e:       # next=0x1bfa4, start=0x18000, end=0x1d248
.long     0x4c312e25    # at addr 0x1bf9e  "%.1L"
.byte     0x66    # "f"
.byte     0x00    # "f"
Var0x1bfa4:       # next=0x1bfae, start=0x18000, end=0x1d248
.long     0x434f4c42    # at addr 0x1bfa4  "BLOC"
.long     0x5a49534b    # at addr 0x1bfa8  "KSIZ"
.byte     0x45    # "E"
.byte     0x00    # "E"
Var0x1bfae:       # next=0x1bfbe, start=0x18000, end=0x1d248
.long     0x49534f50    # at addr 0x1bfae  "POSI"
.long     0x5f594c58    # at addr 0x1bfb2  "XLY_"
.long     0x52524f43    # at addr 0x1bfb6  "CORR"
.long     0x00544345    # at addr 0x1bfba  "ECT."
Var0x1bfbe:       # next=0x1bfd0, start=0x18000, end=0x1d248
.long     0x47674565    # at addr 0x1bfbe  "eEgG"
.long     0x4d6d4b6b    # at addr 0x1bfc2  "kKmM"
.long     0x54745070    # at addr 0x1bfc6  "pPtT"
.long     0x5a7a5979    # at addr 0x1bfca  "yYzZ"
.byte     0x30    # "0"
.byte     0x00    # "0"
Var0x1bfd0:       # next=0x1bfd8, start=0x18000, end=0x1d248
.long     0x000000b0    # at addr 0x1bfd0  "...."
.long     0x00000090    # at addr 0x1bfd4  "...."
Var0x1bfd8:       # next=0x1bfe4, start=0x18000, end=0x1d248
.long     0x474d4b00    # at addr 0x1bfd8  ".KMG"
.long     0x5a455054    # at addr 0x1bfdc  "TPEZ"
.long     0x00000059    # at addr 0x1bfe0  "Y..."
Var0x1bfe4:       # next=0x1bff0, start=0x18000, end=0x1d248
.long     0x41200000    # at addr 0x1bfe4  ".. A"
.long     0x00000000    # at addr 0x1bfe8  "...."
.long     0x00000000    # at addr 0x1bfec  "...."
Var0x1bff0:       # next=0x1c000, start=0x18000, end=0x1d248
.long     0xffffffff    # at addr 0x1bff0  "...."
.long     0xffffffff    # at addr 0x1bff4  "...."
.long     0x0000403e    # at addr 0x1bff8  ">@.."
.long     0x00000000    # at addr 0x1bffc  "...."
Var0x1c000:       # next=0x1c009, start=0x18000, end=0x1d248
.long     0x253a4825    # at addr 0x1c000  "%H:%"
.long     0x53253a4d    # at addr 0x1c004  "M:%S"
.byte     0x00    # "."
Var0x1c009:       # next=0x1c012, start=0x18000, end=0x1d248
.long     0x252f6d25    # at addr 0x1c009  "%m/%"
.long     0x79252f64    # at addr 0x1c00d  "d/%y"
.byte     0x00    # "."
Var0x1c012:       # next=0x1c01c, start=0x18000, end=0x1d248
.long     0x252d5925    # at addr 0x1c012  "%Y-%"
.long     0x64252d6d    # at addr 0x1c016  "m-%d"
.byte     0x00    # "."
.byte     0x00    # "."
Var0x1c01c:       # next=0x1c208, start=0x18000, end=0x1d248
.long     0xffff68bc    # at addr 0x1c01c  ".h.."
.long     0xffff5bb4    # at addr 0x1c020  ".[.."
.long     0xffff5bb4    # at addr 0x1c024  ".[.."
.long     0xffff5bb4    # at addr 0x1c028  ".[.."
.long     0xffff5bb4    # at addr 0x1c02c  ".[.."
.long     0xffff5bb4    # at addr 0x1c030  ".[.."
.long     0xffff5bb4    # at addr 0x1c034  ".[.."
.long     0xffff5bb4    # at addr 0x1c038  ".[.."
.long     0xffff5bb4    # at addr 0x1c03c  ".[.."
.long     0xffff5bb4    # at addr 0x1c040  ".[.."
.long     0xffff5bb4    # at addr 0x1c044  ".[.."
.long     0xffff5bb4    # at addr 0x1c048  ".[.."
.long     0xffff5bb4    # at addr 0x1c04c  ".[.."
.long     0xffff5bb4    # at addr 0x1c050  ".[.."
.long     0xffff5bb4    # at addr 0x1c054  ".[.."
.long     0xffff5bb4    # at addr 0x1c058  ".[.."
.long     0xffff5bb4    # at addr 0x1c05c  ".[.."
.long     0xffff5bb4    # at addr 0x1c060  ".[.."
.long     0xffff5bb4    # at addr 0x1c064  ".[.."
.long     0xffff5bb4    # at addr 0x1c068  ".[.."
.long     0xffff5bb4    # at addr 0x1c06c  ".[.."
.long     0xffff5bb4    # at addr 0x1c070  ".[.."
.long     0xffff5bb4    # at addr 0x1c074  ".[.."
.long     0xffff5bb4    # at addr 0x1c078  ".[.."
.long     0xffff5bb4    # at addr 0x1c07c  ".[.."
.long     0xffff5bb4    # at addr 0x1c080  ".[.."
.long     0xffff5bb4    # at addr 0x1c084  ".[.."
.long     0xffff5bb4    # at addr 0x1c088  ".[.."
.long     0xffff5bb4    # at addr 0x1c08c  ".[.."
.long     0xffff5bb4    # at addr 0x1c090  ".[.."
.long     0xffff5bb4    # at addr 0x1c094  ".[.."
.long     0xffff5bb4    # at addr 0x1c098  ".[.."
.long     0xffff5bb4    # at addr 0x1c09c  ".[.."
.long     0xffff5bb4    # at addr 0x1c0a0  ".[.."
.long     0xffff5bb4    # at addr 0x1c0a4  ".[.."
.long     0xffff5bb4    # at addr 0x1c0a8  ".[.."
.long     0xffff5bb4    # at addr 0x1c0ac  ".[.."
.long     0xffff68fc    # at addr 0x1c0b0  ".h.."
.long     0xffff5bb4    # at addr 0x1c0b4  ".[.."
.long     0xffff5bb4    # at addr 0x1c0b8  ".[.."
.long     0xffff5bb4    # at addr 0x1c0bc  ".[.."
.long     0xffff5bb4    # at addr 0x1c0c0  ".[.."
.long     0xffff5bb4    # at addr 0x1c0c4  ".[.."
.long     0xffff5bb4    # at addr 0x1c0c8  ".[.."
.long     0xffff5bb4    # at addr 0x1c0cc  ".[.."
.long     0xffff5bb4    # at addr 0x1c0d0  ".[.."
.long     0xffff5bb4    # at addr 0x1c0d4  ".[.."
.long     0xffff5bb4    # at addr 0x1c0d8  ".[.."
.long     0xffff5bb4    # at addr 0x1c0dc  ".[.."
.long     0xffff5bb4    # at addr 0x1c0e0  ".[.."
.long     0xffff5bb4    # at addr 0x1c0e4  ".[.."
.long     0xffff5bb4    # at addr 0x1c0e8  ".[.."
.long     0xffff5bb4    # at addr 0x1c0ec  ".[.."
.long     0xffff5bb4    # at addr 0x1c0f0  ".[.."
.long     0xffff5bb4    # at addr 0x1c0f4  ".[.."
.long     0xffff5bb4    # at addr 0x1c0f8  ".[.."
.long     0xffff5bb4    # at addr 0x1c0fc  ".[.."
.long     0xffff5bb4    # at addr 0x1c100  ".[.."
.long     0xffff6acc    # at addr 0x1c104  ".j.."
.long     0xffff5bb4    # at addr 0x1c108  ".[.."
.long     0xffff5bb4    # at addr 0x1c10c  ".[.."
.long     0xffff5bb4    # at addr 0x1c110  ".[.."
.long     0xffff5bb4    # at addr 0x1c114  ".[.."
.long     0xffff5bb4    # at addr 0x1c118  ".[.."
.long     0xffff5bb4    # at addr 0x1c11c  ".[.."
.long     0xffff6012    # at addr 0x1c120  ".`.."
.long     0xffff6724    # at addr 0x1c124  "$g.."
.long     0xffff673d    # at addr 0x1c128  "=g.."
.long     0xffff6795    # at addr 0x1c12c  ".g.."
.long     0xffff5bb4    # at addr 0x1c130  ".[.."
.long     0xffff68a2    # at addr 0x1c134  ".h.."
.long     0xffff5e63    # at addr 0x1c138  "c^.."
.long     0xffff6974    # at addr 0x1c13c  "ti.."
.long     0xffff66f0    # at addr 0x1c140  ".f.."
.long     0xffff5bb4    # at addr 0x1c144  ".[.."
.long     0xffff5bb4    # at addr 0x1c148  ".[.."
.long     0xffff5bb4    # at addr 0x1c14c  ".[.."
.long     0xffff6708    # at addr 0x1c150  ".g.."
.long     0xffff6300    # at addr 0x1c154  ".c.."
.long     0xffff5bb4    # at addr 0x1c158  ".[.."
.long     0xffff6bed    # at addr 0x1c15c  ".k.."
.long     0xffff5bb4    # at addr 0x1c160  ".[.."
.long     0xffff6bcb    # at addr 0x1c164  ".k.."
.long     0xffff632b    # at addr 0x1c168  "+c.."
.long     0xffff6bdc    # at addr 0x1c16c  ".k.."
.long     0xffff659b    # at addr 0x1c170  ".e.."
.long     0xffff5e63    # at addr 0x1c174  "c^.."
.long     0xffff65d5    # at addr 0x1c178  ".e.."
.long     0xffff5d22    # at addr 0x1c17c  ""].."
.long     0xffff605b    # at addr 0x1c180  "[`.."
.long     0xffff661e    # at addr 0x1c184  ".f.."
.long     0xffff5bb4    # at addr 0x1c188  ".[.."
.long     0xffff5bb4    # at addr 0x1c18c  ".[.."
.long     0xffff5bb4    # at addr 0x1c190  ".[.."
.long     0xffff5bb4    # at addr 0x1c194  ".[.."
.long     0xffff5bb4    # at addr 0x1c198  ".[.."
.long     0xffff5bb4    # at addr 0x1c19c  ".[.."
.long     0xffff6012    # at addr 0x1c1a0  ".`.."
.long     0xffff6045    # at addr 0x1c1a4  "E`.."
.long     0xffff5d22    # at addr 0x1c1a8  ""].."
.long     0xffff6990    # at addr 0x1c1ac  ".i.."
.long     0xffff69ac    # at addr 0x1c1b0  ".i.."
.long     0xffff5bb4    # at addr 0x1c1b4  ".[.."
.long     0xffff5e63    # at addr 0x1c1b8  "c^.."
.long     0xffff6045    # at addr 0x1c1bc  "E`.."
.long     0xffff5bb4    # at addr 0x1c1c0  ".[.."
.long     0xffff69e2    # at addr 0x1c1c4  ".i.."
.long     0xffff6a0e    # at addr 0x1c1c8  ".j.."
.long     0xffff6a22    # at addr 0x1c1cc  ""j.."
.long     0xffff6a32    # at addr 0x1c1d0  "2j.."
.long     0xffff6a5e    # at addr 0x1c1d4  "^j.."
.long     0xffff5bb4    # at addr 0x1c1d8  ".[.."
.long     0xffff6bae    # at addr 0x1c1dc  ".k.."
.long     0xffff6413    # at addr 0x1c1e0  ".d.."
.long     0xffff5d2c    # at addr 0x1c1e4  ",].."
.long     0xffff6445    # at addr 0x1c1e8  "Ed.."
.long     0xffff6346    # at addr 0x1c1ec  "Fc.."
.long     0xffff63b6    # at addr 0x1c1f0  ".c.."
.long     0xffff5bb4    # at addr 0x1c1f4  ".[.."
.long     0xffff63f7    # at addr 0x1c1f8  ".c.."
.long     0xffff5d22    # at addr 0x1c1fc  ""].."
.long     0xffff654d    # at addr 0x1c200  "Me.."
.long     0xffff6ba3    # at addr 0x1c204  ".k.."
Var0x1c208:       # next=0x1c240, start=0x18000, end=0x1d248
.long     0x554e2041    # at addr 0x1c208  "A NU"
.long     0x61204c4c    # at addr 0x1c20c  "LL a"
.long     0x5b766772    # at addr 0x1c210  "rgv["
.long     0x77205d30    # at addr 0x1c214  "0] w"
.long     0x70207361    # at addr 0x1c218  "as p"
.long     0x65737361    # at addr 0x1c21c  "asse"
.long     0x68742064    # at addr 0x1c220  "d th"
.long     0x67756f72    # at addr 0x1c224  "roug"
.long     0x6e612068    # at addr 0x1c228  "h an"
.long     0x65786520    # at addr 0x1c22c  " exe"
.long     0x79732063    # at addr 0x1c230  "c sy"
.long     0x6d657473    # at addr 0x1c234  "stem"
.long     0x6c616320    # at addr 0x1c238  " cal"
.long     0x000a2e6c    # at addr 0x1c23c  "l..."
Var0x1c240:       # next=0x1c248, start=0x18000, end=0x1d248
.long     0x696c2e2f    # at addr 0x1c240  "/.li"
.long     0x002f7362    # at addr 0x1c244  "bs/."
Var0x1c248:       # next=0x1c24a, start=0x18000, end=0x1d248
.byte     0x22    # """
.byte     0x00    # """
Var0x1c24a:       # next=0x1c24e, start=0x18000, end=0x1d248
.long     0x009980e2    # at addr 0x1c24a  "...."
Var0x1c24e:       # next=0x1c252, start=0x18000, end=0x1d248
.long     0x006507a1    # at addr 0x1c24e  "..e."
Var0x1c252:       # next=0x1c255, start=0x18000, end=0x1d248
.byte     0xa1    # "."
.byte     0xaf    # "."
.byte     0x00    # "."
Var0x1c255:       # next=0x1c259, start=0x18000, end=0x1d248
.long     0x009880e2    # at addr 0x1c255  "...."
Var0x1c259:       # next=0x1c2a0, start=0x18000, end=0x1d248
.long     0x68730060    # at addr 0x1c259  "`.sh"
.long     0x006c6c65    # at addr 0x1c25d  "ell."
.long     0x6c656873    # at addr 0x1c261  "shel"
.long     0x6c612d6c    # at addr 0x1c265  "l-al"
.long     0x73796177    # at addr 0x1c269  "ways"
.long     0x65687300    # at addr 0x1c26d  ".she"
.long     0x652d6c6c    # at addr 0x1c271  "ll-e"
.long     0x70616373    # at addr 0x1c275  "scap"
.long     0x68730065    # at addr 0x1c279  "e.sh"
.long     0x2d6c6c65    # at addr 0x1c27d  "ell-"
.long     0x61637365    # at addr 0x1c281  "esca"
.long     0x612d6570    # at addr 0x1c285  "pe-a"
.long     0x7961776c    # at addr 0x1c289  "lway"
.long     0x2d630073    # at addr 0x1c28d  "s.c-"
.long     0x6279616d    # at addr 0x1c291  "mayb"
.long     0x6c630065    # at addr 0x1c295  "e.cl"
.long     0x6c61636f    # at addr 0x1c299  "ocal"
.byte     0x65    # "e"
.byte     0x00    # "e"
.byte     0x00    # "e"
Var0x1c2a0:       # next=0x1c2cc, start=0x18000, end=0x1d248
.long     0xffff7767    # at addr 0x1c2a0  "gw.."
.long     0xffff75ec    # at addr 0x1c2a4  ".u.."
.long     0xffff77cc    # at addr 0x1c2a8  ".w.."
.long     0xffff77a4    # at addr 0x1c2ac  ".w.."
.long     0xffff768a    # at addr 0x1c2b0  ".v.."
.long     0xffff7632    # at addr 0x1c2b4  "2v.."
.long     0xffff76e4    # at addr 0x1c2b8  ".v.."
.long     0xffff772a    # at addr 0x1c2bc  "*w.."
.long     0xffff7278    # at addr 0x1c2c0  "xr.."
.long     0xffff7278    # at addr 0x1c2c4  "xr.."
.long     0xffff7278    # at addr 0x1c2c8  "xr.."
Var0x1c2cc:       # next=0x1c4c8, start=0x18000, end=0x1d248
.long     0xffff79a0    # at addr 0x1c2cc  ".y.."
.long     0xffff7547    # at addr 0x1c2d0  "Gu.."
.long     0xffff7547    # at addr 0x1c2d4  "Gu.."
.long     0xffff7547    # at addr 0x1c2d8  "Gu.."
.long     0xffff7547    # at addr 0x1c2dc  "Gu.."
.long     0xffff7547    # at addr 0x1c2e0  "Gu.."
.long     0xffff7547    # at addr 0x1c2e4  "Gu.."
.long     0xffff7934    # at addr 0x1c2e8  "4y.."
.long     0xffff798b    # at addr 0x1c2ec  ".y.."
.long     0xffff7a04    # at addr 0x1c2f0  ".z.."
.long     0xffff7984    # at addr 0x1c2f4  ".y.."
.long     0xffff7a13    # at addr 0x1c2f8  ".z.."
.long     0xffff797d    # at addr 0x1c2fc  "}y.."
.long     0xffff794f    # at addr 0x1c300  "Oy.."
.long     0xffff7547    # at addr 0x1c304  "Gu.."
.long     0xffff7547    # at addr 0x1c308  "Gu.."
.long     0xffff7547    # at addr 0x1c30c  "Gu.."
.long     0xffff7547    # at addr 0x1c310  "Gu.."
.long     0xffff7547    # at addr 0x1c314  "Gu.."
.long     0xffff7547    # at addr 0x1c318  "Gu.."
.long     0xffff7547    # at addr 0x1c31c  "Gu.."
.long     0xffff7547    # at addr 0x1c320  "Gu.."
.long     0xffff7547    # at addr 0x1c324  "Gu.."
.long     0xffff7547    # at addr 0x1c328  "Gu.."
.long     0xffff7547    # at addr 0x1c32c  "Gu.."
.long     0xffff7547    # at addr 0x1c330  "Gu.."
.long     0xffff7547    # at addr 0x1c334  "Gu.."
.long     0xffff7547    # at addr 0x1c338  "Gu.."
.long     0xffff7547    # at addr 0x1c33c  "Gu.."
.long     0xffff7547    # at addr 0x1c340  "Gu.."
.long     0xffff7547    # at addr 0x1c344  "Gu.."
.long     0xffff7547    # at addr 0x1c348  "Gu.."
.long     0xffff80f6    # at addr 0x1c34c  "...."
.long     0xffff7507    # at addr 0x1c350  ".u.."
.long     0xffff7507    # at addr 0x1c354  ".u.."
.long     0xffff80ee    # at addr 0x1c358  "...."
.long     0xffff7507    # at addr 0x1c35c  ".u.."
.long     0xffff743c    # at addr 0x1c360  "<t.."
.long     0xffff7507    # at addr 0x1c364  ".u.."
.long     0xffff78c6    # at addr 0x1c368  ".x.."
.long     0xffff7507    # at addr 0x1c36c  ".u.."
.long     0xffff7507    # at addr 0x1c370  ".u.."
.long     0xffff7507    # at addr 0x1c374  ".u.."
.long     0xffff743c    # at addr 0x1c378  "<t.."
.long     0xffff743c    # at addr 0x1c37c  "<t.."
.long     0xffff743c    # at addr 0x1c380  "<t.."
.long     0xffff743c    # at addr 0x1c384  "<t.."
.long     0xffff743c    # at addr 0x1c388  "<t.."
.long     0xffff743c    # at addr 0x1c38c  "<t.."
.long     0xffff743c    # at addr 0x1c390  "<t.."
.long     0xffff743c    # at addr 0x1c394  "<t.."
.long     0xffff743c    # at addr 0x1c398  "<t.."
.long     0xffff743c    # at addr 0x1c39c  "<t.."
.long     0xffff743c    # at addr 0x1c3a0  "<t.."
.long     0xffff743c    # at addr 0x1c3a4  "<t.."
.long     0xffff743c    # at addr 0x1c3a8  "<t.."
.long     0xffff743c    # at addr 0x1c3ac  "<t.."
.long     0xffff743c    # at addr 0x1c3b0  "<t.."
.long     0xffff743c    # at addr 0x1c3b4  "<t.."
.long     0xffff7507    # at addr 0x1c3b8  ".u.."
.long     0xffff7507    # at addr 0x1c3bc  ".u.."
.long     0xffff7507    # at addr 0x1c3c0  ".u.."
.long     0xffff7507    # at addr 0x1c3c4  ".u.."
.long     0xffff787b    # at addr 0x1c3c8  "{x.."
.long     0xffff7547    # at addr 0x1c3cc  "Gu.."
.long     0xffff743c    # at addr 0x1c3d0  "<t.."
.long     0xffff743c    # at addr 0x1c3d4  "<t.."
.long     0xffff743c    # at addr 0x1c3d8  "<t.."
.long     0xffff743c    # at addr 0x1c3dc  "<t.."
.long     0xffff743c    # at addr 0x1c3e0  "<t.."
.long     0xffff743c    # at addr 0x1c3e4  "<t.."
.long     0xffff743c    # at addr 0x1c3e8  "<t.."
.long     0xffff743c    # at addr 0x1c3ec  "<t.."
.long     0xffff743c    # at addr 0x1c3f0  "<t.."
.long     0xffff743c    # at addr 0x1c3f4  "<t.."
.long     0xffff743c    # at addr 0x1c3f8  "<t.."
.long     0xffff743c    # at addr 0x1c3fc  "<t.."
.long     0xffff743c    # at addr 0x1c400  "<t.."
.long     0xffff743c    # at addr 0x1c404  "<t.."
.long     0xffff743c    # at addr 0x1c408  "<t.."
.long     0xffff743c    # at addr 0x1c40c  "<t.."
.long     0xffff743c    # at addr 0x1c410  "<t.."
.long     0xffff743c    # at addr 0x1c414  "<t.."
.long     0xffff743c    # at addr 0x1c418  "<t.."
.long     0xffff743c    # at addr 0x1c41c  "<t.."
.long     0xffff743c    # at addr 0x1c420  "<t.."
.long     0xffff743c    # at addr 0x1c424  "<t.."
.long     0xffff743c    # at addr 0x1c428  "<t.."
.long     0xffff743c    # at addr 0x1c42c  "<t.."
.long     0xffff743c    # at addr 0x1c430  "<t.."
.long     0xffff743c    # at addr 0x1c434  "<t.."
.long     0xffff7507    # at addr 0x1c438  ".u.."
.long     0xffff78ec    # at addr 0x1c43c  ".x.."
.long     0xffff743c    # at addr 0x1c440  "<t.."
.long     0xffff7507    # at addr 0x1c444  ".u.."
.long     0xffff743c    # at addr 0x1c448  "<t.."
.long     0xffff7507    # at addr 0x1c44c  ".u.."
.long     0xffff743c    # at addr 0x1c450  "<t.."
.long     0xffff743c    # at addr 0x1c454  "<t.."
.long     0xffff743c    # at addr 0x1c458  "<t.."
.long     0xffff743c    # at addr 0x1c45c  "<t.."
.long     0xffff743c    # at addr 0x1c460  "<t.."
.long     0xffff743c    # at addr 0x1c464  "<t.."
.long     0xffff743c    # at addr 0x1c468  "<t.."
.long     0xffff743c    # at addr 0x1c46c  "<t.."
.long     0xffff743c    # at addr 0x1c470  "<t.."
.long     0xffff743c    # at addr 0x1c474  "<t.."
.long     0xffff743c    # at addr 0x1c478  "<t.."
.long     0xffff743c    # at addr 0x1c47c  "<t.."
.long     0xffff743c    # at addr 0x1c480  "<t.."
.long     0xffff743c    # at addr 0x1c484  "<t.."
.long     0xffff743c    # at addr 0x1c488  "<t.."
.long     0xffff743c    # at addr 0x1c48c  "<t.."
.long     0xffff743c    # at addr 0x1c490  "<t.."
.long     0xffff743c    # at addr 0x1c494  "<t.."
.long     0xffff743c    # at addr 0x1c498  "<t.."
.long     0xffff743c    # at addr 0x1c49c  "<t.."
.long     0xffff743c    # at addr 0x1c4a0  "<t.."
.long     0xffff743c    # at addr 0x1c4a4  "<t.."
.long     0xffff743c    # at addr 0x1c4a8  "<t.."
.long     0xffff743c    # at addr 0x1c4ac  "<t.."
.long     0xffff743c    # at addr 0x1c4b0  "<t.."
.long     0xffff743c    # at addr 0x1c4b4  "<t.."
.long     0xffff77b7    # at addr 0x1c4b8  ".w.."
.long     0xffff7507    # at addr 0x1c4bc  ".u.."
.long     0xffff77b7    # at addr 0x1c4c0  ".w.."
.long     0xffff80ee    # at addr 0x1c4c4  "...."
Var0x1c4c8:       # next=0x1c6c4, start=0x18000, end=0x1d248
.long     0xffff7918    # at addr 0x1c4c8  ".y.."
.long     0xffff734b    # at addr 0x1c4cc  "Ks.."
.long     0xffff734b    # at addr 0x1c4d0  "Ks.."
.long     0xffff734b    # at addr 0x1c4d4  "Ks.."
.long     0xffff734b    # at addr 0x1c4d8  "Ks.."
.long     0xffff734b    # at addr 0x1c4dc  "Ks.."
.long     0xffff734b    # at addr 0x1c4e0  "Ks.."
.long     0xffff7963    # at addr 0x1c4e4  "cy.."
.long     0xffff7909    # at addr 0x1c4e8  ".y.."
.long     0xffff78e6    # at addr 0x1c4ec  ".x.."
.long     0xffff7957    # at addr 0x1c4f0  "Wy.."
.long     0xffff7948    # at addr 0x1c4f4  "Hy.."
.long     0xffff78d7    # at addr 0x1c4f8  ".x.."
.long     0xffff793c    # at addr 0x1c4fc  "<y.."
.long     0xffff734b    # at addr 0x1c500  "Ks.."
.long     0xffff734b    # at addr 0x1c504  "Ks.."
.long     0xffff734b    # at addr 0x1c508  "Ks.."
.long     0xffff734b    # at addr 0x1c50c  "Ks.."
.long     0xffff734b    # at addr 0x1c510  "Ks.."
.long     0xffff734b    # at addr 0x1c514  "Ks.."
.long     0xffff734b    # at addr 0x1c518  "Ks.."
.long     0xffff734b    # at addr 0x1c51c  "Ks.."
.long     0xffff734b    # at addr 0x1c520  "Ks.."
.long     0xffff734b    # at addr 0x1c524  "Ks.."
.long     0xffff734b    # at addr 0x1c528  "Ks.."
.long     0xffff734b    # at addr 0x1c52c  "Ks.."
.long     0xffff734b    # at addr 0x1c530  "Ks.."
.long     0xffff734b    # at addr 0x1c534  "Ks.."
.long     0xffff734b    # at addr 0x1c538  "Ks.."
.long     0xffff734b    # at addr 0x1c53c  "Ks.."
.long     0xffff734b    # at addr 0x1c540  "Ks.."
.long     0xffff734b    # at addr 0x1c544  "Ks.."
.long     0xffff78c6    # at addr 0x1c548  ".x.."
.long     0xffff7850    # at addr 0x1c54c  "Px.."
.long     0xffff7850    # at addr 0x1c550  "Px.."
.long     0xffff785f    # at addr 0x1c554  "_x.."
.long     0xffff7850    # at addr 0x1c558  "Px.."
.long     0xffff73b8    # at addr 0x1c55c  ".s.."
.long     0xffff7850    # at addr 0x1c560  "Px.."
.long     0xffff76ca    # at addr 0x1c564  ".v.."
.long     0xffff7850    # at addr 0x1c568  "Px.."
.long     0xffff7850    # at addr 0x1c56c  "Px.."
.long     0xffff7850    # at addr 0x1c570  "Px.."
.long     0xffff73b8    # at addr 0x1c574  ".s.."
.long     0xffff73b8    # at addr 0x1c578  ".s.."
.long     0xffff73b8    # at addr 0x1c57c  ".s.."
.long     0xffff73b8    # at addr 0x1c580  ".s.."
.long     0xffff73b8    # at addr 0x1c584  ".s.."
.long     0xffff73b8    # at addr 0x1c588  ".s.."
.long     0xffff73b8    # at addr 0x1c58c  ".s.."
.long     0xffff73b8    # at addr 0x1c590  ".s.."
.long     0xffff73b8    # at addr 0x1c594  ".s.."
.long     0xffff73b8    # at addr 0x1c598  ".s.."
.long     0xffff73b8    # at addr 0x1c59c  ".s.."
.long     0xffff73b8    # at addr 0x1c5a0  ".s.."
.long     0xffff73b8    # at addr 0x1c5a4  ".s.."
.long     0xffff73b8    # at addr 0x1c5a8  ".s.."
.long     0xffff73b8    # at addr 0x1c5ac  ".s.."
.long     0xffff73b8    # at addr 0x1c5b0  ".s.."
.long     0xffff7850    # at addr 0x1c5b4  "Px.."
.long     0xffff7850    # at addr 0x1c5b8  "Px.."
.long     0xffff7850    # at addr 0x1c5bc  "Px.."
.long     0xffff7850    # at addr 0x1c5c0  "Px.."
.long     0xffff767f    # at addr 0x1c5c4  "v.."
.long     0xffff734b    # at addr 0x1c5c8  "Ks.."
.long     0xffff73b8    # at addr 0x1c5cc  ".s.."
.long     0xffff73b8    # at addr 0x1c5d0  ".s.."
.long     0xffff73b8    # at addr 0x1c5d4  ".s.."
.long     0xffff73b8    # at addr 0x1c5d8  ".s.."
.long     0xffff73b8    # at addr 0x1c5dc  ".s.."
.long     0xffff73b8    # at addr 0x1c5e0  ".s.."
.long     0xffff73b8    # at addr 0x1c5e4  ".s.."
.long     0xffff73b8    # at addr 0x1c5e8  ".s.."
.long     0xffff73b8    # at addr 0x1c5ec  ".s.."
.long     0xffff73b8    # at addr 0x1c5f0  ".s.."
.long     0xffff73b8    # at addr 0x1c5f4  ".s.."
.long     0xffff73b8    # at addr 0x1c5f8  ".s.."
.long     0xffff73b8    # at addr 0x1c5fc  ".s.."
.long     0xffff73b8    # at addr 0x1c600  ".s.."
.long     0xffff73b8    # at addr 0x1c604  ".s.."
.long     0xffff73b8    # at addr 0x1c608  ".s.."
.long     0xffff73b8    # at addr 0x1c60c  ".s.."
.long     0xffff73b8    # at addr 0x1c610  ".s.."
.long     0xffff73b8    # at addr 0x1c614  ".s.."
.long     0xffff73b8    # at addr 0x1c618  ".s.."
.long     0xffff73b8    # at addr 0x1c61c  ".s.."
.long     0xffff73b8    # at addr 0x1c620  ".s.."
.long     0xffff73b8    # at addr 0x1c624  ".s.."
.long     0xffff73b8    # at addr 0x1c628  ".s.."
.long     0xffff73b8    # at addr 0x1c62c  ".s.."
.long     0xffff73b8    # at addr 0x1c630  ".s.."
.long     0xffff7850    # at addr 0x1c634  "Px.."
.long     0xffff786b    # at addr 0x1c638  "kx.."
.long     0xffff73b8    # at addr 0x1c63c  ".s.."
.long     0xffff7850    # at addr 0x1c640  "Px.."
.long     0xffff73b8    # at addr 0x1c644  ".s.."
.long     0xffff7850    # at addr 0x1c648  "Px.."
.long     0xffff73b8    # at addr 0x1c64c  ".s.."
.long     0xffff73b8    # at addr 0x1c650  ".s.."
.long     0xffff73b8    # at addr 0x1c654  ".s.."
.long     0xffff73b8    # at addr 0x1c658  ".s.."
.long     0xffff73b8    # at addr 0x1c65c  ".s.."
.long     0xffff73b8    # at addr 0x1c660  ".s.."
.long     0xffff73b8    # at addr 0x1c664  ".s.."
.long     0xffff73b8    # at addr 0x1c668  ".s.."
.long     0xffff73b8    # at addr 0x1c66c  ".s.."
.long     0xffff73b8    # at addr 0x1c670  ".s.."
.long     0xffff73b8    # at addr 0x1c674  ".s.."
.long     0xffff73b8    # at addr 0x1c678  ".s.."
.long     0xffff73b8    # at addr 0x1c67c  ".s.."
.long     0xffff73b8    # at addr 0x1c680  ".s.."
.long     0xffff73b8    # at addr 0x1c684  ".s.."
.long     0xffff73b8    # at addr 0x1c688  ".s.."
.long     0xffff73b8    # at addr 0x1c68c  ".s.."
.long     0xffff73b8    # at addr 0x1c690  ".s.."
.long     0xffff73b8    # at addr 0x1c694  ".s.."
.long     0xffff73b8    # at addr 0x1c698  ".s.."
.long     0xffff73b8    # at addr 0x1c69c  ".s.."
.long     0xffff73b8    # at addr 0x1c6a0  ".s.."
.long     0xffff73b8    # at addr 0x1c6a4  ".s.."
.long     0xffff73b8    # at addr 0x1c6a8  ".s.."
.long     0xffff73b8    # at addr 0x1c6ac  ".s.."
.long     0xffff73b8    # at addr 0x1c6b0  ".s.."
.long     0xffff75bb    # at addr 0x1c6b4  ".u.."
.long     0xffff7850    # at addr 0x1c6b8  "Px.."
.long     0xffff75bb    # at addr 0x1c6bc  ".u.."
.long     0xffff785f    # at addr 0x1c6c0  "_x.."
Var0x1c6c4:       # next=0x1c8c0, start=0x18000, end=0x1d248
.long     0xffff759a    # at addr 0x1c6c4  ".u.."
.long     0xffff714c    # at addr 0x1c6c8  "Lq.."
.long     0xffff714c    # at addr 0x1c6cc  "Lq.."
.long     0xffff714c    # at addr 0x1c6d0  "Lq.."
.long     0xffff714c    # at addr 0x1c6d4  "Lq.."
.long     0xffff714c    # at addr 0x1c6d8  "Lq.."
.long     0xffff714c    # at addr 0x1c6dc  "Lq.."
.long     0xffff753c    # at addr 0x1c6e0  "<u.."
.long     0xffff7593    # at addr 0x1c6e4  ".u.."
.long     0xffff7609    # at addr 0x1c6e8  ".v.."
.long     0xffff758c    # at addr 0x1c6ec  ".u.."
.long     0xffff761b    # at addr 0x1c6f0  ".v.."
.long     0xffff7585    # at addr 0x1c6f4  ".u.."
.long     0xffff7557    # at addr 0x1c6f8  "Wu.."
.long     0xffff714c    # at addr 0x1c6fc  "Lq.."
.long     0xffff714c    # at addr 0x1c700  "Lq.."
.long     0xffff714c    # at addr 0x1c704  "Lq.."
.long     0xffff714c    # at addr 0x1c708  "Lq.."
.long     0xffff714c    # at addr 0x1c70c  "Lq.."
.long     0xffff714c    # at addr 0x1c710  "Lq.."
.long     0xffff714c    # at addr 0x1c714  "Lq.."
.long     0xffff714c    # at addr 0x1c718  "Lq.."
.long     0xffff714c    # at addr 0x1c71c  "Lq.."
.long     0xffff714c    # at addr 0x1c720  "Lq.."
.long     0xffff714c    # at addr 0x1c724  "Lq.."
.long     0xffff714c    # at addr 0x1c728  "Lq.."
.long     0xffff714c    # at addr 0x1c72c  "Lq.."
.long     0xffff714c    # at addr 0x1c730  "Lq.."
.long     0xffff714c    # at addr 0x1c734  "Lq.."
.long     0xffff714c    # at addr 0x1c738  "Lq.."
.long     0xffff714c    # at addr 0x1c73c  "Lq.."
.long     0xffff714c    # at addr 0x1c740  "Lq.."
.long     0xffff77c3    # at addr 0x1c744  ".w.."
.long     0xffff710c    # at addr 0x1c748  ".q.."
.long     0xffff710c    # at addr 0x1c74c  ".q.."
.long     0xffff77ab    # at addr 0x1c750  ".w.."
.long     0xffff710c    # at addr 0x1c754  ".q.."
.long     0xffff77a4    # at addr 0x1c758  ".w.."
.long     0xffff710c    # at addr 0x1c75c  ".q.."
.long     0xffff74cb    # at addr 0x1c760  ".t.."
.long     0xffff710c    # at addr 0x1c764  ".q.."
.long     0xffff710c    # at addr 0x1c768  ".q.."
.long     0xffff710c    # at addr 0x1c76c  ".q.."
.long     0xffff77a4    # at addr 0x1c770  ".w.."
.long     0xffff77a4    # at addr 0x1c774  ".w.."
.long     0xffff77a4    # at addr 0x1c778  ".w.."
.long     0xffff77a4    # at addr 0x1c77c  ".w.."
.long     0xffff77a4    # at addr 0x1c780  ".w.."
.long     0xffff77a4    # at addr 0x1c784  ".w.."
.long     0xffff77a4    # at addr 0x1c788  ".w.."
.long     0xffff77a4    # at addr 0x1c78c  ".w.."
.long     0xffff77a4    # at addr 0x1c790  ".w.."
.long     0xffff77a4    # at addr 0x1c794  ".w.."
.long     0xffff77a4    # at addr 0x1c798  ".w.."
.long     0xffff77a4    # at addr 0x1c79c  ".w.."
.long     0xffff77a4    # at addr 0x1c7a0  ".w.."
.long     0xffff77a4    # at addr 0x1c7a4  ".w.."
.long     0xffff77a4    # at addr 0x1c7a8  ".w.."
.long     0xffff77a4    # at addr 0x1c7ac  ".w.."
.long     0xffff710c    # at addr 0x1c7b0  ".q.."
.long     0xffff710c    # at addr 0x1c7b4  ".q.."
.long     0xffff710c    # at addr 0x1c7b8  ".q.."
.long     0xffff710c    # at addr 0x1c7bc  ".q.."
.long     0xffff7480    # at addr 0x1c7c0  ".t.."
.long     0xffff714c    # at addr 0x1c7c4  "Lq.."
.long     0xffff77a4    # at addr 0x1c7c8  ".w.."
.long     0xffff77a4    # at addr 0x1c7cc  ".w.."
.long     0xffff77a4    # at addr 0x1c7d0  ".w.."
.long     0xffff77a4    # at addr 0x1c7d4  ".w.."
.long     0xffff77a4    # at addr 0x1c7d8  ".w.."
.long     0xffff77a4    # at addr 0x1c7dc  ".w.."
.long     0xffff77a4    # at addr 0x1c7e0  ".w.."
.long     0xffff77a4    # at addr 0x1c7e4  ".w.."
.long     0xffff77a4    # at addr 0x1c7e8  ".w.."
.long     0xffff77a4    # at addr 0x1c7ec  ".w.."
.long     0xffff77a4    # at addr 0x1c7f0  ".w.."
.long     0xffff77a4    # at addr 0x1c7f4  ".w.."
.long     0xffff77a4    # at addr 0x1c7f8  ".w.."
.long     0xffff77a4    # at addr 0x1c7fc  ".w.."
.long     0xffff77a4    # at addr 0x1c800  ".w.."
.long     0xffff77a4    # at addr 0x1c804  ".w.."
.long     0xffff77a4    # at addr 0x1c808  ".w.."
.long     0xffff77a4    # at addr 0x1c80c  ".w.."
.long     0xffff77a4    # at addr 0x1c810  ".w.."
.long     0xffff77a4    # at addr 0x1c814  ".w.."
.long     0xffff77a4    # at addr 0x1c818  ".w.."
.long     0xffff77a4    # at addr 0x1c81c  ".w.."
.long     0xffff77a4    # at addr 0x1c820  ".w.."
.long     0xffff77a4    # at addr 0x1c824  ".w.."
.long     0xffff77a4    # at addr 0x1c828  ".w.."
.long     0xffff77a4    # at addr 0x1c82c  ".w.."
.long     0xffff710c    # at addr 0x1c830  ".q.."
.long     0xffff74ec    # at addr 0x1c834  ".t.."
.long     0xffff77a4    # at addr 0x1c838  ".w.."
.long     0xffff710c    # at addr 0x1c83c  ".q.."
.long     0xffff77a4    # at addr 0x1c840  ".w.."
.long     0xffff710c    # at addr 0x1c844  ".q.."
.long     0xffff77a4    # at addr 0x1c848  ".w.."
.long     0xffff77a4    # at addr 0x1c84c  ".w.."
.long     0xffff77a4    # at addr 0x1c850  ".w.."
.long     0xffff77a4    # at addr 0x1c854  ".w.."
.long     0xffff77a4    # at addr 0x1c858  ".w.."
.long     0xffff77a4    # at addr 0x1c85c  ".w.."
.long     0xffff77a4    # at addr 0x1c860  ".w.."
.long     0xffff77a4    # at addr 0x1c864  ".w.."
.long     0xffff77a4    # at addr 0x1c868  ".w.."
.long     0xffff77a4    # at addr 0x1c86c  ".w.."
.long     0xffff77a4    # at addr 0x1c870  ".w.."
.long     0xffff77a4    # at addr 0x1c874  ".w.."
.long     0xffff77a4    # at addr 0x1c878  ".w.."
.long     0xffff77a4    # at addr 0x1c87c  ".w.."
.long     0xffff77a4    # at addr 0x1c880  ".w.."
.long     0xffff77a4    # at addr 0x1c884  ".w.."
.long     0xffff77a4    # at addr 0x1c888  ".w.."
.long     0xffff77a4    # at addr 0x1c88c  ".w.."
.long     0xffff77a4    # at addr 0x1c890  ".w.."
.long     0xffff77a4    # at addr 0x1c894  ".w.."
.long     0xffff77a4    # at addr 0x1c898  ".w.."
.long     0xffff77a4    # at addr 0x1c89c  ".w.."
.long     0xffff77a4    # at addr 0x1c8a0  ".w.."
.long     0xffff77a4    # at addr 0x1c8a4  ".w.."
.long     0xffff77a4    # at addr 0x1c8a8  ".w.."
.long     0xffff77a4    # at addr 0x1c8ac  ".w.."
.long     0xffff73bc    # at addr 0x1c8b0  ".s.."
.long     0xffff710c    # at addr 0x1c8b4  ".q.."
.long     0xffff73bc    # at addr 0x1c8b8  ".s.."
.long     0xffff77ab    # at addr 0x1c8bc  ".w.."
Var0x1c8c0:       # next=0x1c940, start=0x18000, end=0x1d248
.long     0xffff7ba1    # at addr 0x1c8c0  ".{.."
.long     0xffff72c0    # at addr 0x1c8c4  ".r.."
.long     0xffff72c0    # at addr 0x1c8c8  ".r.."
.long     0xffff72c0    # at addr 0x1c8cc  ".r.."
.long     0xffff72c0    # at addr 0x1c8d0  ".r.."
.long     0xffff72c0    # at addr 0x1c8d4  ".r.."
.long     0xffff7ba1    # at addr 0x1c8d8  ".{.."
.long     0xffff7ba1    # at addr 0x1c8dc  ".{.."
.long     0xffff7ba1    # at addr 0x1c8e0  ".{.."
.long     0xffff72c0    # at addr 0x1c8e4  ".r.."
.long     0xffff72c0    # at addr 0x1c8e8  ".r.."
.long     0xffff72c0    # at addr 0x1c8ec  ".r.."
.long     0xffff7ba1    # at addr 0x1c8f0  ".{.."
.long     0xffff72c0    # at addr 0x1c8f4  ".r.."
.long     0xffff7ba1    # at addr 0x1c8f8  ".{.."
.long     0xffff72c0    # at addr 0x1c8fc  ".r.."
.long     0xffff72c0    # at addr 0x1c900  ".r.."
.long     0xffff72c0    # at addr 0x1c904  ".r.."
.long     0xffff72c0    # at addr 0x1c908  ".r.."
.long     0xffff72c0    # at addr 0x1c90c  ".r.."
.long     0xffff72c0    # at addr 0x1c910  ".r.."
.long     0xffff72c0    # at addr 0x1c914  ".r.."
.long     0xffff72c0    # at addr 0x1c918  ".r.."
.long     0xffff72c0    # at addr 0x1c91c  ".r.."
.long     0xffff72c0    # at addr 0x1c920  ".r.."
.long     0xffff72c0    # at addr 0x1c924  ".r.."
.long     0xffff72c0    # at addr 0x1c928  ".r.."
.long     0xffff7ba1    # at addr 0x1c92c  ".{.."
.long     0xffff7ba1    # at addr 0x1c930  ".{.."
.long     0xffff7ba1    # at addr 0x1c934  ".{.."
.long     0x00000000    # at addr 0x1c938  "...."
.long     0x00000000    # at addr 0x1c93c  "...."
Var0x1c940:       # next=0x1c968, start=0x18000, end=0x1d248
.long     0x00000000    # at addr 0x1c940  "...."
.long     0x00000001    # at addr 0x1c944  "...."
.long     0x00000002    # at addr 0x1c948  "...."
.long     0x00000003    # at addr 0x1c94c  "...."
.long     0x00000004    # at addr 0x1c950  "...."
.long     0x00000005    # at addr 0x1c954  "...."
.long     0x00000006    # at addr 0x1c958  "...."
.long     0x00000007    # at addr 0x1c95c  "...."
.long     0x00000008    # at addr 0x1c960  "...."
.long     0x00000009    # at addr 0x1c964  "...."
Var0x1c968:       # next=0x1c970, start=0x18000, end=0x1d248
.long     0x28207325    # at addr 0x1c968  "%s ("
.long     0x20297325    # at addr 0x1c96c  "%s) "
Var0x1c970:       # next=0x1c974, start=0x18000, end=0x1d248
.long     0x000a7325    # at addr 0x1c970  "%s.."
Var0x1c974:       # next=0x1c97b, start=0x18000, end=0x1d248
.long     0x25207325    # at addr 0x1c974  "%s %"
.byte     0x73    # "s"
.byte     0x0a    # "s"
.byte     0x00    # "s"
Var0x1c97b:       # next=0x1c97f, start=0x18000, end=0x1d248
.long     0x00294328    # at addr 0x1c97b  "(C)."
Var0x1c97f:       # next=0x1c98f, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1c97f  "Writ"
.long     0x206e6574    # at addr 0x1c983  "ten "
.long     0x25207962    # at addr 0x1c987  "by %"
.long     0x000a2e73    # at addr 0x1c98b  "s..."
Var0x1c98f:       # next=0x1c9a6, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1c98f  "Writ"
.long     0x206e6574    # at addr 0x1c993  "ten "
.long     0x25207962    # at addr 0x1c997  "by %"
.long     0x6e612073    # at addr 0x1c99b  "s an"
.long     0x73252064    # at addr 0x1c99f  "d %s"
.byte     0x2e    # "."
.byte     0x0a    # "."
.byte     0x00    # "."
Var0x1c9a6:       # next=0x1c9c2, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1c9a6  "Writ"
.long     0x206e6574    # at addr 0x1c9aa  "ten "
.long     0x25207962    # at addr 0x1c9ae  "by %"
.long     0x25202c73    # at addr 0x1c9b2  "s, %"
.long     0x61202c73    # at addr 0x1c9b6  "s, a"
.long     0x2520646e    # at addr 0x1c9ba  "nd %"
.long     0x000a2e73    # at addr 0x1c9be  "s..."
Var0x1c9c2:       # next=0x1c9d7, start=0x18000, end=0x1d248
.long     0x7065520a    # at addr 0x1c9c2  ".Rep"
.long     0x2074726f    # at addr 0x1c9c6  "ort "
.long     0x73677562    # at addr 0x1c9ca  "bugs"
.long     0x3a6f7420    # at addr 0x1c9ce  " to:"
.long     0x0a732520    # at addr 0x1c9d2  " %s."
.byte     0x00    # "."
Var0x1c9d7:       # next=0x1c9ed, start=0x18000, end=0x1d248
.long     0x2d677562    # at addr 0x1c9d7  "bug-"
.long     0x65726f63    # at addr 0x1c9db  "core"
.long     0x6c697475    # at addr 0x1c9df  "util"
.long     0x6e674073    # at addr 0x1c9e3  "s@gn"
.long     0x726f2e75    # at addr 0x1c9e7  "u.or"
.byte     0x67    # "g"
.byte     0x00    # "g"
Var0x1c9ed:       # next=0x1ca08, start=0x18000, end=0x1d248
.long     0x68207325    # at addr 0x1c9ed  "%s h"
.long     0x20656d6f    # at addr 0x1c9f1  "ome "
.long     0x65676170    # at addr 0x1c9f5  "page"
.long     0x253c203a    # at addr 0x1c9f9  ": <%"
.long     0x000a3e73    # at addr 0x1c9fd  "s>.."
.long     0x00000000    # at addr 0x1ca01  "...."
.byte     0x00    # "."
.byte     0x00    # "."
.byte     0x00    # "."
Var0x1ca08:       # next=0x1cad8, start=0x18000, end=0x1d248
.long     0x63694c0a    # at addr 0x1ca08  ".Lic"
.long     0x65736e65    # at addr 0x1ca0c  "ense"
.long     0x4c504720    # at addr 0x1ca10  " GPL"
.long     0x3a2b3376    # at addr 0x1ca14  "v3+:"
.long     0x554e4720    # at addr 0x1ca18  " GNU"
.long     0x4c504720    # at addr 0x1ca1c  " GPL"
.long     0x72657620    # at addr 0x1ca20  " ver"
.long     0x6e6f6973    # at addr 0x1ca24  "sion"
.long     0x6f203320    # at addr 0x1ca28  " 3 o"
.long     0x616c2072    # at addr 0x1ca2c  "r la"
.long     0x20726574    # at addr 0x1ca30  "ter "
.long     0x7474683c    # at addr 0x1ca34  "<htt"
.long     0x2f3a7370    # at addr 0x1ca38  "ps:/"
.long     0x756e672f    # at addr 0x1ca3c  "/gnu"
.long     0x67726f2e    # at addr 0x1ca40  ".org"
.long     0x63696c2f    # at addr 0x1ca44  "/lic"
.long     0x65736e65    # at addr 0x1ca48  "ense"
.long     0x70672f73    # at addr 0x1ca4c  "s/gp"
.long     0x74682e6c    # at addr 0x1ca50  "l.ht"
.long     0x2e3e6c6d    # at addr 0x1ca54  "ml>."
.long     0x6968540a    # at addr 0x1ca58  ".Thi"
.long     0x73692073    # at addr 0x1ca5c  "s is"
.long     0x65726620    # at addr 0x1ca60  " fre"
.long     0x6f732065    # at addr 0x1ca64  "e so"
.long     0x61777466    # at addr 0x1ca68  "ftwa"
.long     0x203a6572    # at addr 0x1ca6c  "re: "
.long     0x20756f79    # at addr 0x1ca70  "you "
.long     0x20657261    # at addr 0x1ca74  "are "
.long     0x65657266    # at addr 0x1ca78  "free"
.long     0x206f7420    # at addr 0x1ca7c  " to "
.long     0x6e616863    # at addr 0x1ca80  "chan"
.long     0x61206567    # at addr 0x1ca84  "ge a"
.long     0x7220646e    # at addr 0x1ca88  "nd r"
.long     0x73696465    # at addr 0x1ca8c  "edis"
.long     0x62697274    # at addr 0x1ca90  "trib"
.long     0x20657475    # at addr 0x1ca94  "ute "
.long     0x0a2e7469    # at addr 0x1ca98  "it.."
.long     0x72656854    # at addr 0x1ca9c  "Ther"
.long     0x73692065    # at addr 0x1caa0  "e is"
.long     0x204f4e20    # at addr 0x1caa4  " NO "
.long     0x52524157    # at addr 0x1caa8  "WARR"
.long     0x59544e41    # at addr 0x1caac  "ANTY"
.long     0x6f74202c    # at addr 0x1cab0  ", to"
.long     0x65687420    # at addr 0x1cab4  " the"
.long     0x74786520    # at addr 0x1cab8  " ext"
.long     0x20746e65    # at addr 0x1cabc  "ent "
.long     0x6d726570    # at addr 0x1cac0  "perm"
.long     0x65747469    # at addr 0x1cac4  "itte"
.long     0x79622064    # at addr 0x1cac8  "d by"
.long     0x77616c20    # at addr 0x1cacc  " law"
.long     0x000a0a2e    # at addr 0x1cad0  "...."
.long     0x00000000    # at addr 0x1cad4  "...."
Var0x1cad8:       # next=0x1caf8, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1cad8  "Writ"
.long     0x206e6574    # at addr 0x1cadc  "ten "
.long     0x25207962    # at addr 0x1cae0  "by %"
.long     0x25202c73    # at addr 0x1cae4  "s, %"
.long     0x25202c73    # at addr 0x1cae8  "s, %"
.long     0x610a2c73    # at addr 0x1caec  "s,.a"
.long     0x2520646e    # at addr 0x1caf0  "nd %"
.long     0x000a2e73    # at addr 0x1caf4  "s..."
Var0x1caf8:       # next=0x1cb20, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1caf8  "Writ"
.long     0x206e6574    # at addr 0x1cafc  "ten "
.long     0x25207962    # at addr 0x1cb00  "by %"
.long     0x25202c73    # at addr 0x1cb04  "s, %"
.long     0x25202c73    # at addr 0x1cb08  "s, %"
.long     0x250a2c73    # at addr 0x1cb0c  "s,.%"
.long     0x61202c73    # at addr 0x1cb10  "s, a"
.long     0x2520646e    # at addr 0x1cb14  "nd %"
.long     0x000a2e73    # at addr 0x1cb18  "s..."
.long     0x00000000    # at addr 0x1cb1c  "...."
Var0x1cb20:       # next=0x1cb48, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1cb20  "Writ"
.long     0x206e6574    # at addr 0x1cb24  "ten "
.long     0x25207962    # at addr 0x1cb28  "by %"
.long     0x25202c73    # at addr 0x1cb2c  "s, %"
.long     0x25202c73    # at addr 0x1cb30  "s, %"
.long     0x250a2c73    # at addr 0x1cb34  "s,.%"
.long     0x25202c73    # at addr 0x1cb38  "s, %"
.long     0x61202c73    # at addr 0x1cb3c  "s, a"
.long     0x2520646e    # at addr 0x1cb40  "nd %"
.long     0x000a2e73    # at addr 0x1cb44  "s..."
Var0x1cb48:       # next=0x1cb78, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1cb48  "Writ"
.long     0x206e6574    # at addr 0x1cb4c  "ten "
.long     0x25207962    # at addr 0x1cb50  "by %"
.long     0x25202c73    # at addr 0x1cb54  "s, %"
.long     0x25202c73    # at addr 0x1cb58  "s, %"
.long     0x250a2c73    # at addr 0x1cb5c  "s,.%"
.long     0x25202c73    # at addr 0x1cb60  "s, %"
.long     0x25202c73    # at addr 0x1cb64  "s, %"
.long     0x61202c73    # at addr 0x1cb68  "s, a"
.long     0x2520646e    # at addr 0x1cb6c  "nd %"
.long     0x000a2e73    # at addr 0x1cb70  "s..."
.long     0x00000000    # at addr 0x1cb74  "...."
Var0x1cb78:       # next=0x1cba8, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1cb78  "Writ"
.long     0x206e6574    # at addr 0x1cb7c  "ten "
.long     0x25207962    # at addr 0x1cb80  "by %"
.long     0x25202c73    # at addr 0x1cb84  "s, %"
.long     0x25202c73    # at addr 0x1cb88  "s, %"
.long     0x250a2c73    # at addr 0x1cb8c  "s,.%"
.long     0x25202c73    # at addr 0x1cb90  "s, %"
.long     0x25202c73    # at addr 0x1cb94  "s, %"
.long     0x25202c73    # at addr 0x1cb98  "s, %"
.long     0x610a2c73    # at addr 0x1cb9c  "s,.a"
.long     0x2520646e    # at addr 0x1cba0  "nd %"
.long     0x000a2e73    # at addr 0x1cba4  "s..."
Var0x1cba8:       # next=0x1cbe0, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1cba8  "Writ"
.long     0x206e6574    # at addr 0x1cbac  "ten "
.long     0x25207962    # at addr 0x1cbb0  "by %"
.long     0x25202c73    # at addr 0x1cbb4  "s, %"
.long     0x25202c73    # at addr 0x1cbb8  "s, %"
.long     0x250a2c73    # at addr 0x1cbbc  "s,.%"
.long     0x25202c73    # at addr 0x1cbc0  "s, %"
.long     0x25202c73    # at addr 0x1cbc4  "s, %"
.long     0x25202c73    # at addr 0x1cbc8  "s, %"
.long     0x250a2c73    # at addr 0x1cbcc  "s,.%"
.long     0x61202c73    # at addr 0x1cbd0  "s, a"
.long     0x2520646e    # at addr 0x1cbd4  "nd %"
.long     0x000a2e73    # at addr 0x1cbd8  "s..."
.long     0x00000000    # at addr 0x1cbdc  "...."
Var0x1cbe0:       # next=0x1cc20, start=0x18000, end=0x1d248
.long     0x74697257    # at addr 0x1cbe0  "Writ"
.long     0x206e6574    # at addr 0x1cbe4  "ten "
.long     0x25207962    # at addr 0x1cbe8  "by %"
.long     0x25202c73    # at addr 0x1cbec  "s, %"
.long     0x25202c73    # at addr 0x1cbf0  "s, %"
.long     0x250a2c73    # at addr 0x1cbf4  "s,.%"
.long     0x25202c73    # at addr 0x1cbf8  "s, %"
.long     0x25202c73    # at addr 0x1cbfc  "s, %"
.long     0x25202c73    # at addr 0x1cc00  "s, %"
.long     0x250a2c73    # at addr 0x1cc04  "s,.%"
.long     0x25202c73    # at addr 0x1cc08  "s, %"
.long     0x61202c73    # at addr 0x1cc0c  "s, a"
.long     0x6f20646e    # at addr 0x1cc10  "nd o"
.long     0x72656874    # at addr 0x1cc14  "ther"
.long     0x000a2e73    # at addr 0x1cc18  "s..."
.long     0x00000000    # at addr 0x1cc1c  "...."
Var0x1cc20:       # next=0x1cc64, start=0x18000, end=0x1d248
.long     0x656e6547    # at addr 0x1cc20  "Gene"
.long     0x206c6172    # at addr 0x1cc24  "ral "
.long     0x706c6568    # at addr 0x1cc28  "help"
.long     0x69737520    # at addr 0x1cc2c  " usi"
.long     0x4720676e    # at addr 0x1cc30  "ng G"
.long     0x7320554e    # at addr 0x1cc34  "NU s"
.long     0x7774666f    # at addr 0x1cc38  "oftw"
.long     0x3a657261    # at addr 0x1cc3c  "are:"
.long     0x74683c20    # at addr 0x1cc40  " <ht"
.long     0x3a737074    # at addr 0x1cc44  "tps:"
.long     0x77772f2f    # at addr 0x1cc48  "//ww"
.long     0x6e672e77    # at addr 0x1cc4c  "w.gn"
.long     0x726f2e75    # at addr 0x1cc50  "u.or"
.long     0x65672f67    # at addr 0x1cc54  "g/ge"
.long     0x6c656874    # at addr 0x1cc58  "thel"
.long     0x0a3e2f70    # at addr 0x1cc5c  "p/>."
.long     0x00000000    # at addr 0x1cc60  "...."
Var0x1cc64:       # next=0x1cca0, start=0x18000, end=0x1d248
.long     0xfffe817d    # at addr 0x1cc64  "}..."
.long     0xffff87bc    # at addr 0x1cc68  "...."
.long     0xffff87fc    # at addr 0x1cc6c  "...."
.long     0xffff883c    # at addr 0x1cc70  "<..."
.long     0xffff888c    # at addr 0x1cc74  "...."
.long     0xffff88e4    # at addr 0x1cc78  "...."
.long     0xffff891c    # at addr 0x1cc7c  "...."
.long     0xffff8994    # at addr 0x1cc80  "...."
.long     0xffff86bc    # at addr 0x1cc84  "...."
.long     0xffff8754    # at addr 0x1cc88  "T..."
.long     0x00000000    # at addr 0x1cc8c  "...."
.long     0x00000000    # at addr 0x1cc90  "...."
.long     0x00000000    # at addr 0x1cc94  "...."
.long     0x00000000    # at addr 0x1cc98  "...."
.long     0x00000000    # at addr 0x1cc9c  "...."
Var0x1cca0:       # next=0x1cccf, start=0x18000, end=0x1d248
.long     0x79706f43    # at addr 0x1cca0  "Copy"
.long     0x68676972    # at addr 0x1cca4  "righ"
.long     0x73252074    # at addr 0x1cca8  "t %s"
.long     0x20642520    # at addr 0x1ccac  " %d "
.long     0x65657246    # at addr 0x1ccb0  "Free"
.long     0x666f5320    # at addr 0x1ccb4  " Sof"
.long     0x72617774    # at addr 0x1ccb8  "twar"
.long     0x6f462065    # at addr 0x1ccbc  "e Fo"
.long     0x61646e75    # at addr 0x1ccc0  "unda"
.long     0x6e6f6974    # at addr 0x1ccc4  "tion"
.long     0x6e49202c    # at addr 0x1ccc8  ", In"
.byte     0x63    # "c"
.byte     0x2e    # "c"
.byte     0x00    # "c"
Var0x1cccf:       # next=0x1cce0, start=0x18000, end=0x1d248
.long     0x6f6d656d    # at addr 0x1cccf  "memo"
.long     0x65207972    # at addr 0x1ccd3  "ry e"
.long     0x75616878    # at addr 0x1ccd7  "xhau"
.long     0x64657473    # at addr 0x1ccdb  "sted"
.byte     0x00    # "."
Var0x1cce0:       # next=0x1ccf0, start=0x18000, end=0x1d248
.long     0x2f62696c    # at addr 0x1cce0  "lib/"
.long     0x72747378    # at addr 0x1cce4  "xstr"
.long     0x2e6c6f74    # at addr 0x1cce8  "tol."
.long     0x00000063    # at addr 0x1ccec  "c..."
Var0x1ccf0:       # next=0x1cd18, start=0x18000, end=0x1d248
.long     0x3d3c2030    # at addr 0x1ccf0  "0 <="
.long     0x72747320    # at addr 0x1ccf4  " str"
.long     0x5f6c6f74    # at addr 0x1ccf8  "tol_"
.long     0x65736162    # at addr 0x1ccfc  "base"
.long     0x20262620    # at addr 0x1cd00  " && "
.long     0x74727473    # at addr 0x1cd04  "strt"
.long     0x625f6c6f    # at addr 0x1cd08  "ol_b"
.long     0x20657361    # at addr 0x1cd0c  "ase "
.long     0x33203d3c    # at addr 0x1cd10  "<= 3"
.long     0x00000036    # at addr 0x1cd14  "6..."
Var0x1cd18:       # next=0x1cdd8, start=0x18000, end=0x1d248
.long     0xffff920e    # at addr 0x1cd18  "...."
.long     0xffff91e4    # at addr 0x1cd1c  "...."
.long     0xffff920e    # at addr 0x1cd20  "...."
.long     0xffff91e4    # at addr 0x1cd24  "...."
.long     0xffff91e4    # at addr 0x1cd28  "...."
.long     0xffff91e4    # at addr 0x1cd2c  "...."
.long     0xffff920e    # at addr 0x1cd30  "...."
.long     0xffff91e4    # at addr 0x1cd34  "...."
.long     0xffff920e    # at addr 0x1cd38  "...."
.long     0xffff91e4    # at addr 0x1cd3c  "...."
.long     0xffff91e4    # at addr 0x1cd40  "...."
.long     0xffff920e    # at addr 0x1cd44  "...."
.long     0xffff91e4    # at addr 0x1cd48  "...."
.long     0xffff91e4    # at addr 0x1cd4c  "...."
.long     0xffff91e4    # at addr 0x1cd50  "...."
.long     0xffff920e    # at addr 0x1cd54  "...."
.long     0xffff91e4    # at addr 0x1cd58  "...."
.long     0xffff91e4    # at addr 0x1cd5c  "...."
.long     0xffff91e4    # at addr 0x1cd60  "...."
.long     0xffff91e4    # at addr 0x1cd64  "...."
.long     0xffff920e    # at addr 0x1cd68  "...."
.long     0xffff920e    # at addr 0x1cd6c  "...."
.long     0xffff91e4    # at addr 0x1cd70  "...."
.long     0xffff91e4    # at addr 0x1cd74  "...."
.long     0xffff91e4    # at addr 0x1cd78  "...."
.long     0xffff91e4    # at addr 0x1cd7c  "...."
.long     0xffff91e4    # at addr 0x1cd80  "...."
.long     0xffff91e4    # at addr 0x1cd84  "...."
.long     0xffff91e4    # at addr 0x1cd88  "...."
.long     0xffff91e4    # at addr 0x1cd8c  "...."
.long     0xffff91e4    # at addr 0x1cd90  "...."
.long     0xffff91e4    # at addr 0x1cd94  "...."
.long     0xffff91e4    # at addr 0x1cd98  "...."
.long     0xffff91e4    # at addr 0x1cd9c  "...."
.long     0xffff920e    # at addr 0x1cda0  "...."
.long     0xffff91e4    # at addr 0x1cda4  "...."
.long     0xffff91e4    # at addr 0x1cda8  "...."
.long     0xffff91e4    # at addr 0x1cdac  "...."
.long     0xffff920e    # at addr 0x1cdb0  "...."
.long     0xffff91e4    # at addr 0x1cdb4  "...."
.long     0xffff920e    # at addr 0x1cdb8  "...."
.long     0xffff91e4    # at addr 0x1cdbc  "...."
.long     0xffff91e4    # at addr 0x1cdc0  "...."
.long     0xffff91e4    # at addr 0x1cdc4  "...."
.long     0xffff91e4    # at addr 0x1cdc8  "...."
.long     0xffff91e4    # at addr 0x1cdcc  "...."
.long     0xffff91e4    # at addr 0x1cdd0  "...."
.long     0xffff920e    # at addr 0x1cdd4  "...."
Var0x1cdd8:       # next=0x1ceb0, start=0x18000, end=0x1d248
.long     0xffff93a4    # at addr 0x1cdd8  "...."
.long     0xffff91c7    # at addr 0x1cddc  "...."
.long     0xffff91c7    # at addr 0x1cde0  "...."
.long     0xffff93f9    # at addr 0x1cde4  "...."
.long     0xffff91c7    # at addr 0x1cde8  "...."
.long     0xffff939c    # at addr 0x1cdec  "...."
.long     0xffff91c7    # at addr 0x1cdf0  "...."
.long     0xffff91c7    # at addr 0x1cdf4  "...."
.long     0xffff91c7    # at addr 0x1cdf8  "...."
.long     0xffff9397    # at addr 0x1cdfc  "...."
.long     0xffff91c7    # at addr 0x1ce00  "...."
.long     0xffff938f    # at addr 0x1ce04  "...."
.long     0xffff91c7    # at addr 0x1ce08  "...."
.long     0xffff91c7    # at addr 0x1ce0c  "...."
.long     0xffff93f1    # at addr 0x1ce10  "...."
.long     0xffff91c7    # at addr 0x1ce14  "...."
.long     0xffff91c7    # at addr 0x1ce18  "...."
.long     0xffff91c7    # at addr 0x1ce1c  "...."
.long     0xffff9387    # at addr 0x1ce20  "...."
.long     0xffff91c7    # at addr 0x1ce24  "...."
.long     0xffff91c7    # at addr 0x1ce28  "...."
.long     0xffff91c7    # at addr 0x1ce2c  "...."
.long     0xffff91c7    # at addr 0x1ce30  "...."
.long     0xffff93e9    # at addr 0x1ce34  "...."
.long     0xffff93e1    # at addr 0x1ce38  "...."
.long     0xffff91c7    # at addr 0x1ce3c  "...."
.long     0xffff91c7    # at addr 0x1ce40  "...."
.long     0xffff91c7    # at addr 0x1ce44  "...."
.long     0xffff91c7    # at addr 0x1ce48  "...."
.long     0xffff91c7    # at addr 0x1ce4c  "...."
.long     0xffff91c7    # at addr 0x1ce50  "...."
.long     0xffff91c7    # at addr 0x1ce54  "...."
.long     0xffff93d9    # at addr 0x1ce58  "...."
.long     0xffff93d1    # at addr 0x1ce5c  "...."
.long     0xffff91c7    # at addr 0x1ce60  "...."
.long     0xffff91c7    # at addr 0x1ce64  "...."
.long     0xffff91c7    # at addr 0x1ce68  "...."
.long     0xffff939c    # at addr 0x1ce6c  "...."
.long     0xffff91c7    # at addr 0x1ce70  "...."
.long     0xffff91c7    # at addr 0x1ce74  "...."
.long     0xffff91c7    # at addr 0x1ce78  "...."
.long     0xffff9397    # at addr 0x1ce7c  "...."
.long     0xffff91c7    # at addr 0x1ce80  "...."
.long     0xffff938f    # at addr 0x1ce84  "...."
.long     0xffff91c7    # at addr 0x1ce88  "...."
.long     0xffff91c7    # at addr 0x1ce8c  "...."
.long     0xffff91c7    # at addr 0x1ce90  "...."
.long     0xffff91c7    # at addr 0x1ce94  "...."
.long     0xffff91c7    # at addr 0x1ce98  "...."
.long     0xffff91c7    # at addr 0x1ce9c  "...."
.long     0xffff9387    # at addr 0x1cea0  "...."
.long     0xffff91c7    # at addr 0x1cea4  "...."
.long     0xffff91c7    # at addr 0x1cea8  "...."
.long     0xffff93bd    # at addr 0x1ceac  "...."
Var0x1ceb0:       # next=0x1cf70, start=0x18000, end=0x1d248
.long     0xffff924b    # at addr 0x1ceb0  "K..."
.long     0xffff90ef    # at addr 0x1ceb4  "...."
.long     0xffff9219    # at addr 0x1ceb8  "...."
.long     0xffff90ef    # at addr 0x1cebc  "...."
.long     0xffff90ef    # at addr 0x1cec0  "...."
.long     0xffff90ef    # at addr 0x1cec4  "...."
.long     0xffff9279    # at addr 0x1cec8  "y..."
.long     0xffff90ef    # at addr 0x1cecc  "...."
.long     0xffff91d9    # at addr 0x1ced0  "...."
.long     0xffff90ef    # at addr 0x1ced4  "...."
.long     0xffff90ef    # at addr 0x1ced8  "...."
.long     0xffff91a6    # at addr 0x1cedc  "...."
.long     0xffff90ef    # at addr 0x1cee0  "...."
.long     0xffff90ef    # at addr 0x1cee4  "...."
.long     0xffff90ef    # at addr 0x1cee8  "...."
.long     0xffff9176    # at addr 0x1ceec  "v..."
.long     0xffff90ef    # at addr 0x1cef0  "...."
.long     0xffff90ef    # at addr 0x1cef4  "...."
.long     0xffff90ef    # at addr 0x1cef8  "...."
.long     0xffff90ef    # at addr 0x1cefc  "...."
.long     0xffff914c    # at addr 0x1cf00  "L..."
.long     0xffff9116    # at addr 0x1cf04  "...."
.long     0xffff90ef    # at addr 0x1cf08  "...."
.long     0xffff90ef    # at addr 0x1cf0c  "...."
.long     0xffff90ef    # at addr 0x1cf10  "...."
.long     0xffff90ef    # at addr 0x1cf14  "...."
.long     0xffff90ef    # at addr 0x1cf18  "...."
.long     0xffff90ef    # at addr 0x1cf1c  "...."
.long     0xffff90ef    # at addr 0x1cf20  "...."
.long     0xffff90fb    # at addr 0x1cf24  "...."
.long     0xffff91fb    # at addr 0x1cf28  "...."
.long     0xffff90ef    # at addr 0x1cf2c  "...."
.long     0xffff90ef    # at addr 0x1cf30  "...."
.long     0xffff90ef    # at addr 0x1cf34  "...."
.long     0xffff9219    # at addr 0x1cf38  "...."
.long     0xffff90ef    # at addr 0x1cf3c  "...."
.long     0xffff90ef    # at addr 0x1cf40  "...."
.long     0xffff90ef    # at addr 0x1cf44  "...."
.long     0xffff9279    # at addr 0x1cf48  "y..."
.long     0xffff90ef    # at addr 0x1cf4c  "...."
.long     0xffff91d9    # at addr 0x1cf50  "...."
.long     0xffff90ef    # at addr 0x1cf54  "...."
.long     0xffff90ef    # at addr 0x1cf58  "...."
.long     0xffff90ef    # at addr 0x1cf5c  "...."
.long     0xffff90ef    # at addr 0x1cf60  "...."
.long     0xffff90ef    # at addr 0x1cf64  "...."
.long     0xffff90ef    # at addr 0x1cf68  "...."
.long     0xffff9176    # at addr 0x1cf6c  "v..."
Var0x1cf70:       # next=0x1cf80, start=0x18000, end=0x1d248
.long     0x72747378    # at addr 0x1cf70  "xstr"
.long     0x6c756f74    # at addr 0x1cf74  "toul"
.long     0x00000000    # at addr 0x1cf78  "...."
.long     0x00000000    # at addr 0x1cf7c  "...."
Var0x1cf80:       # next=0x1cfa5, start=0x18000, end=0x1d248
.long     0x61766e69    # at addr 0x1cf80  "inva"
.long     0x2064696c    # at addr 0x1cf84  "lid "
.long     0x66667573    # at addr 0x1cf88  "suff"
.long     0x69207869    # at addr 0x1cf8c  "ix i"
.long     0x7325206e    # at addr 0x1cf90  "n %s"
.long     0x61207325    # at addr 0x1cf94  "%s a"
.long     0x6d756772    # at addr 0x1cf98  "rgum"
.long     0x20746e65    # at addr 0x1cf9c  "ent "
.long     0x27732527    # at addr 0x1cfa0  "'%s'"
.byte     0x00    # "."
Var0x1cfa5:       # next=0x1cfc2, start=0x18000, end=0x1d248
.long     0x73257325    # at addr 0x1cfa5  "%s%s"
.long     0x67726120    # at addr 0x1cfa9  " arg"
.long     0x6e656d75    # at addr 0x1cfad  "umen"
.long     0x25272074    # at addr 0x1cfb1  "t '%"
.long     0x74202773    # at addr 0x1cfb5  "s' t"
.long     0x6c206f6f    # at addr 0x1cfb9  "oo l"
.long     0x65677261    # at addr 0x1cfbd  "arge"
.byte     0x00    # "."
Var0x1cfc2:       # next=0x1cfdb, start=0x18000, end=0x1d248
.long     0x61766e69    # at addr 0x1cfc2  "inva"
.long     0x2064696c    # at addr 0x1cfc6  "lid "
.long     0x73257325    # at addr 0x1cfca  "%s%s"
.long     0x67726120    # at addr 0x1cfce  " arg"
.long     0x6e656d75    # at addr 0x1cfd2  "umen"
.long     0x25272074    # at addr 0x1cfd6  "t '%"
.byte     0x73    # "s"
Var0x1cfdb:       # next=0x1cfdd, start=0x18000, end=0x1d248
.byte     0x27    # "'"
.byte     0x00    # "'"
Var0x1cfdd:       # next=0x1cfe0, start=0x18000, end=0x1d248
.byte     0x2d    # "-"
.byte     0x2d    # "-"
.byte     0x00    # "-"
Var0x1cfe0:       # next=0x1d0a0, start=0x18000, end=0x1d248
.long     0xffff94d6    # at addr 0x1cfe0  "...."
.long     0xffff94ac    # at addr 0x1cfe4  "...."
.long     0xffff94d6    # at addr 0x1cfe8  "...."
.long     0xffff94ac    # at addr 0x1cfec  "...."
.long     0xffff94ac    # at addr 0x1cff0  "...."
.long     0xffff94ac    # at addr 0x1cff4  "...."
.long     0xffff94d6    # at addr 0x1cff8  "...."
.long     0xffff94ac    # at addr 0x1cffc  "...."
.long     0xffff94d6    # at addr 0x1d000  "...."
.long     0xffff94ac    # at addr 0x1d004  "...."
.long     0xffff94ac    # at addr 0x1d008  "...."
.long     0xffff94d6    # at addr 0x1d00c  "...."
.long     0xffff94ac    # at addr 0x1d010  "...."
.long     0xffff94ac    # at addr 0x1d014  "...."
.long     0xffff94ac    # at addr 0x1d018  "...."
.long     0xffff94d6    # at addr 0x1d01c  "...."
.long     0xffff94ac    # at addr 0x1d020  "...."
.long     0xffff94ac    # at addr 0x1d024  "...."
.long     0xffff94ac    # at addr 0x1d028  "...."
.long     0xffff94ac    # at addr 0x1d02c  "...."
.long     0xffff94d6    # at addr 0x1d030  "...."
.long     0xffff94d6    # at addr 0x1d034  "...."
.long     0xffff94ac    # at addr 0x1d038  "...."
.long     0xffff94ac    # at addr 0x1d03c  "...."
.long     0xffff94ac    # at addr 0x1d040  "...."
.long     0xffff94ac    # at addr 0x1d044  "...."
.long     0xffff94ac    # at addr 0x1d048  "...."
.long     0xffff94ac    # at addr 0x1d04c  "...."
.long     0xffff94ac    # at addr 0x1d050  "...."
.long     0xffff94ac    # at addr 0x1d054  "...."
.long     0xffff94ac    # at addr 0x1d058  "...."
.long     0xffff94ac    # at addr 0x1d05c  "...."
.long     0xffff94ac    # at addr 0x1d060  "...."
.long     0xffff94ac    # at addr 0x1d064  "...."
.long     0xffff94d6    # at addr 0x1d068  "...."
.long     0xffff94ac    # at addr 0x1d06c  "...."
.long     0xffff94ac    # at addr 0x1d070  "...."
.long     0xffff94ac    # at addr 0x1d074  "...."
.long     0xffff94d6    # at addr 0x1d078  "...."
.long     0xffff94ac    # at addr 0x1d07c  "...."
.long     0xffff94d6    # at addr 0x1d080  "...."
.long     0xffff94ac    # at addr 0x1d084  "...."
.long     0xffff94ac    # at addr 0x1d088  "...."
.long     0xffff94ac    # at addr 0x1d08c  "...."
.long     0xffff94ac    # at addr 0x1d090  "...."
.long     0xffff94ac    # at addr 0x1d094  "...."
.long     0xffff94ac    # at addr 0x1d098  "...."
.long     0xffff94d6    # at addr 0x1d09c  "...."
Var0x1d0a0:       # next=0x1d178, start=0x18000, end=0x1d248
.long     0xffff966c    # at addr 0x1d0a0  "l..."
.long     0xffff948f    # at addr 0x1d0a4  "...."
.long     0xffff948f    # at addr 0x1d0a8  "...."
.long     0xffff96c1    # at addr 0x1d0ac  "...."
.long     0xffff948f    # at addr 0x1d0b0  "...."
.long     0xffff9664    # at addr 0x1d0b4  "d..."
.long     0xffff948f    # at addr 0x1d0b8  "...."
.long     0xffff948f    # at addr 0x1d0bc  "...."
.long     0xffff948f    # at addr 0x1d0c0  "...."
.long     0xffff965f    # at addr 0x1d0c4  "_..."
.long     0xffff948f    # at addr 0x1d0c8  "...."
.long     0xffff9657    # at addr 0x1d0cc  "W..."
.long     0xffff948f    # at addr 0x1d0d0  "...."
.long     0xffff948f    # at addr 0x1d0d4  "...."
.long     0xffff96b9    # at addr 0x1d0d8  "...."
.long     0xffff948f    # at addr 0x1d0dc  "...."
.long     0xffff948f    # at addr 0x1d0e0  "...."
.long     0xffff948f    # at addr 0x1d0e4  "...."
.long     0xffff964f    # at addr 0x1d0e8  "O..."
.long     0xffff948f    # at addr 0x1d0ec  "...."
.long     0xffff948f    # at addr 0x1d0f0  "...."
.long     0xffff948f    # at addr 0x1d0f4  "...."
.long     0xffff948f    # at addr 0x1d0f8  "...."
.long     0xffff96b1    # at addr 0x1d0fc  "...."
.long     0xffff96a9    # at addr 0x1d100  "...."
.long     0xffff948f    # at addr 0x1d104  "...."
.long     0xffff948f    # at addr 0x1d108  "...."
.long     0xffff948f    # at addr 0x1d10c  "...."
.long     0xffff948f    # at addr 0x1d110  "...."
.long     0xffff948f    # at addr 0x1d114  "...."
.long     0xffff948f    # at addr 0x1d118  "...."
.long     0xffff948f    # at addr 0x1d11c  "...."
.long     0xffff96a1    # at addr 0x1d120  "...."
.long     0xffff9699    # at addr 0x1d124  "...."
.long     0xffff948f    # at addr 0x1d128  "...."
.long     0xffff948f    # at addr 0x1d12c  "...."
.long     0xffff948f    # at addr 0x1d130  "...."
.long     0xffff9664    # at addr 0x1d134  "d..."
.long     0xffff948f    # at addr 0x1d138  "...."
.long     0xffff948f    # at addr 0x1d13c  "...."
.long     0xffff948f    # at addr 0x1d140  "...."
.long     0xffff965f    # at addr 0x1d144  "_..."
.long     0xffff948f    # at addr 0x1d148  "...."
.long     0xffff9657    # at addr 0x1d14c  "W..."
.long     0xffff948f    # at addr 0x1d150  "...."
.long     0xffff948f    # at addr 0x1d154  "...."
.long     0xffff948f    # at addr 0x1d158  "...."
.long     0xffff948f    # at addr 0x1d15c  "...."
.long     0xffff948f    # at addr 0x1d160  "...."
.long     0xffff948f    # at addr 0x1d164  "...."
.long     0xffff964f    # at addr 0x1d168  "O..."
.long     0xffff948f    # at addr 0x1d16c  "...."
.long     0xffff948f    # at addr 0x1d170  "...."
.long     0xffff9685    # at addr 0x1d174  "...."
Var0x1d178:       # next=0x1d238, start=0x18000, end=0x1d248
.long     0xffff9513    # at addr 0x1d178  "...."
.long     0xffff93b7    # at addr 0x1d17c  "...."
.long     0xffff94e1    # at addr 0x1d180  "...."
.long     0xffff93b7    # at addr 0x1d184  "...."
.long     0xffff93b7    # at addr 0x1d188  "...."
.long     0xffff93b7    # at addr 0x1d18c  "...."
.long     0xffff9541    # at addr 0x1d190  "A..."
.long     0xffff93b7    # at addr 0x1d194  "...."
.long     0xffff94a1    # at addr 0x1d198  "...."
.long     0xffff93b7    # at addr 0x1d19c  "...."
.long     0xffff93b7    # at addr 0x1d1a0  "...."
.long     0xffff946e    # at addr 0x1d1a4  "n..."
.long     0xffff93b7    # at addr 0x1d1a8  "...."
.long     0xffff93b7    # at addr 0x1d1ac  "...."
.long     0xffff93b7    # at addr 0x1d1b0  "...."
.long     0xffff943e    # at addr 0x1d1b4  ">..."
.long     0xffff93b7    # at addr 0x1d1b8  "...."
.long     0xffff93b7    # at addr 0x1d1bc  "...."
.long     0xffff93b7    # at addr 0x1d1c0  "...."
.long     0xffff93b7    # at addr 0x1d1c4  "...."
.long     0xffff9414    # at addr 0x1d1c8  "...."
.long     0xffff93de    # at addr 0x1d1cc  "...."
.long     0xffff93b7    # at addr 0x1d1d0  "...."
.long     0xffff93b7    # at addr 0x1d1d4  "...."
.long     0xffff93b7    # at addr 0x1d1d8  "...."
.long     0xffff93b7    # at addr 0x1d1dc  "...."
.long     0xffff93b7    # at addr 0x1d1e0  "...."
.long     0xffff93b7    # at addr 0x1d1e4  "...."
.long     0xffff93b7    # at addr 0x1d1e8  "...."
.long     0xffff93c3    # at addr 0x1d1ec  "...."
.long     0xffff94c3    # at addr 0x1d1f0  "...."
.long     0xffff93b7    # at addr 0x1d1f4  "...."
.long     0xffff93b7    # at addr 0x1d1f8  "...."
.long     0xffff93b7    # at addr 0x1d1fc  "...."
.long     0xffff94e1    # at addr 0x1d200  "...."
.long     0xffff93b7    # at addr 0x1d204  "...."
.long     0xffff93b7    # at addr 0x1d208  "...."
.long     0xffff93b7    # at addr 0x1d20c  "...."
.long     0xffff9541    # at addr 0x1d210  "A..."
.long     0xffff93b7    # at addr 0x1d214  "...."
.long     0xffff94a1    # at addr 0x1d218  "...."
.long     0xffff93b7    # at addr 0x1d21c  "...."
.long     0xffff93b7    # at addr 0x1d220  "...."
.long     0xffff93b7    # at addr 0x1d224  "...."
.long     0xffff93b7    # at addr 0x1d228  "...."
.long     0xffff93b7    # at addr 0x1d22c  "...."
.long     0xffff93b7    # at addr 0x1d230  "...."
.long     0xffff943e    # at addr 0x1d234  ">..."
Var0x1d238:       # next=0x1d243, start=0x18000, end=0x1d248
.long     0x72747378    # at addr 0x1d238  "xstr"
.long     0x6d756f74    # at addr 0x1d23c  "toum"
.byte     0x61    # "a"
.byte     0x78    # "a"
.byte     0x00    # "a"
Var0x1d243:       # next=0x2000e, start=0x18000, end=0x1d248
.long     0x49435341    # at addr 0x1d243  "ASCI"
.byte     0x49    # "I"
.byte     0x00    # "I"

.p2align 2

# Data section .eh_frame_hdr (size 2348)  0x0001d24c - 0x0001db77

.section .eh_frame_hdr
Var0x1d24c:       # next=0x2000e, start=0x1d24c, end=0x1db77
.long     0x3b031b01    # at addr 0x1d24c  "...;"
.long     0x00000928    # at addr 0x1d250  "(..."
.long     0x00000124    # at addr 0x1d254  "$..."
.long     0xfffe6dd4    # at addr 0x1d258  ".m.."
.long     0x0000095c    # at addr 0x1d25c  "\..."
.long     0xfffe7484    # at addr 0x1d260  ".t.."
.long     0x00000984    # at addr 0x1d264  "...."
.long     0xfffe74b4    # at addr 0x1d268  ".t.."
.long     0x0000099c    # at addr 0x1d26c  "...."
.long     0xfffe7b54    # at addr 0x1d270  "T{.."
.long     0x000011b0    # at addr 0x1d274  "...."
.long     0xfffe7b59    # at addr 0x1d278  "Y{.."
.long     0x000018c8    # at addr 0x1d27c  "...."
.long     0xfffe7b5e    # at addr 0x1d280  "^{.."
.long     0x00001e5c    # at addr 0x1d284  "\..."
.long     0xfffe7b63    # at addr 0x1d288  "c{.."
.long     0x00002068    # at addr 0x1d28c  "h .."
.long     0xfffe7b68    # at addr 0x1d290  "h{.."
.long     0x00002240    # at addr 0x1d294  "@".."
.long     0xfffe7b6d    # at addr 0x1d298  "m{.."
.long     0x000022b0    # at addr 0x1d29c  ".".."
.long     0xfffe7b72    # at addr 0x1d2a0  "r{.."
.long     0x00002944    # at addr 0x1d2a4  "D).."
.long     0xfffe7b77    # at addr 0x1d2a8  "w{.."
.long     0x000029e8    # at addr 0x1d2ac  ".).."
.long     0xfffe7b7c    # at addr 0x1d2b0  "|{.."
.long     0x00002a90    # at addr 0x1d2b4  ".*.."
.long     0xfffe7b81    # at addr 0x1d2b8  ".{.."
.long     0x00002c24    # at addr 0x1d2bc  "$,.."
.long     0xfffe7b86    # at addr 0x1d2c0  ".{.."
.long     0x00002c54    # at addr 0x1d2c4  "T,.."
.long     0xfffe7b8b    # at addr 0x1d2c8  ".{.."
.long     0x00002d04    # at addr 0x1d2cc  ".-.."
.long     0xfffe7b90    # at addr 0x1d2d0  ".{.."
.long     0x00002d34    # at addr 0x1d2d4  "4-.."
.long     0xfffe7b95    # at addr 0x1d2d8  ".{.."
.long     0x00002fb8    # at addr 0x1d2dc  "./.."
.long     0xfffe7b9a    # at addr 0x1d2e0  ".{.."
.long     0x000032cc    # at addr 0x1d2e4  ".2.."
.long     0xfffe7b9f    # at addr 0x1d2e8  ".{.."
.long     0x0000353c    # at addr 0x1d2ec  "<5.."
.long     0xfffe7ba4    # at addr 0x1d2f0  ".{.."
.long     0x00001834    # at addr 0x1d2f4  "4..."
.long     0xfffe9584    # at addr 0x1d2f8  "...."
.long     0x00000944    # at addr 0x1d2fc  "D..."
.long     0xfffe9674    # at addr 0x1d300  "t..."
.long     0x000009b4    # at addr 0x1d304  "...."
.long     0xfffe9684    # at addr 0x1d308  "...."
.long     0x000009c8    # at addr 0x1d30c  "...."
.long     0xfffe96a4    # at addr 0x1d310  "...."
.long     0x000009dc    # at addr 0x1d314  "...."
.long     0xfffe96c4    # at addr 0x1d318  "...."
.long     0x000009f0    # at addr 0x1d31c  "...."
.long     0xfffe98e4    # at addr 0x1d320  "...."
.long     0x00000a20    # at addr 0x1d324  " ..."
.long     0xfffe98f4    # at addr 0x1d328  "...."
.long     0x00000a34    # at addr 0x1d32c  "4..."
.long     0xfffe9964    # at addr 0x1d330  "d..."
.long     0x00000a48    # at addr 0x1d334  "H..."
.long     0xfffe99e4    # at addr 0x1d338  "...."
.long     0x00000a64    # at addr 0x1d33c  "d..."
.long     0xfffe9c34    # at addr 0x1d340  "4..."
.long     0x00000ac8    # at addr 0x1d344  "...."
.long     0xfffe9ca4    # at addr 0x1d348  "...."
.long     0x00000b00    # at addr 0x1d34c  "...."
.long     0xfffe9cb4    # at addr 0x1d350  "...."
.long     0x00000b14    # at addr 0x1d354  "...."
.long     0xfffe9cd4    # at addr 0x1d358  "...."
.long     0x00000b28    # at addr 0x1d35c  "(..."
.long     0xfffe9d24    # at addr 0x1d360  "$..."
.long     0x00000b48    # at addr 0x1d364  "H..."
.long     0xfffe9dd4    # at addr 0x1d368  "...."
.long     0x00000b64    # at addr 0x1d36c  "d..."
.long     0xfffe9e54    # at addr 0x1d370  "T..."
.long     0x00000b90    # at addr 0x1d374  "...."
.long     0xfffe9f34    # at addr 0x1d378  "4..."
.long     0x00000bd0    # at addr 0x1d37c  "...."
.long     0xfffea0c4    # at addr 0x1d380  "...."
.long     0x00000bf0    # at addr 0x1d384  "...."
.long     0xfffea0f4    # at addr 0x1d388  "...."
.long     0x00000c18    # at addr 0x1d38c  "...."
.long     0xfffea104    # at addr 0x1d390  "...."
.long     0x00000c2c    # at addr 0x1d394  ",..."
.long     0xfffea114    # at addr 0x1d398  "...."
.long     0x00000c40    # at addr 0x1d39c  "@..."
.long     0xfffea134    # at addr 0x1d3a0  "4..."
.long     0x00000c54    # at addr 0x1d3a4  "T..."
.long     0xfffea144    # at addr 0x1d3a8  "D..."
.long     0x00000c68    # at addr 0x1d3ac  "h..."
.long     0xfffea2d4    # at addr 0x1d3b0  "...."
.long     0x00000cb8    # at addr 0x1d3b4  "...."
.long     0xfffea3a4    # at addr 0x1d3b8  "...."
.long     0x00000cec    # at addr 0x1d3bc  "...."
.long     0xfffea474    # at addr 0x1d3c0  "t..."
.long     0x00000d24    # at addr 0x1d3c4  "$..."
.long     0xfffea534    # at addr 0x1d3c8  "4..."
.long     0x00000d50    # at addr 0x1d3cc  "P..."
.long     0xfffea584    # at addr 0x1d3d0  "...."
.long     0x00000d74    # at addr 0x1d3d4  "t..."
.long     0xfffea5a4    # at addr 0x1d3d8  "...."
.long     0x00000d88    # at addr 0x1d3dc  "...."
.long     0xfffea614    # at addr 0x1d3e0  "...."
.long     0x00000dc0    # at addr 0x1d3e4  "...."
.long     0xfffea654    # at addr 0x1d3e8  "T..."
.long     0x00000dd4    # at addr 0x1d3ec  "...."
.long     0xfffea6b4    # at addr 0x1d3f0  "...."
.long     0x00000de8    # at addr 0x1d3f4  "...."
.long     0xfffea714    # at addr 0x1d3f8  "...."
.long     0x00000dfc    # at addr 0x1d3fc  "...."
.long     0xfffea784    # at addr 0x1d400  "...."
.long     0x00000e10    # at addr 0x1d404  "...."
.long     0xfffea7f4    # at addr 0x1d408  "...."
.long     0x00000e24    # at addr 0x1d40c  "$..."
.long     0xfffea8e4    # at addr 0x1d410  "...."
.long     0x00000e38    # at addr 0x1d414  "8..."
.long     0xfffea934    # at addr 0x1d418  "4..."
.long     0x00000e54    # at addr 0x1d41c  "T..."
.long     0xfffea9b4    # at addr 0x1d420  "...."
.long     0x00000e68    # at addr 0x1d424  "h..."
.long     0xfffeaa24    # at addr 0x1d428  "$..."
.long     0x00000e7c    # at addr 0x1d42c  "|..."
.long     0xfffeaa84    # at addr 0x1d430  "...."
.long     0x00000e90    # at addr 0x1d434  "...."
.long     0xfffeab74    # at addr 0x1d438  "t..."
.long     0x00000ee0    # at addr 0x1d43c  "...."
.long     0xfffead44    # at addr 0x1d440  "D..."
.long     0x00000f2c    # at addr 0x1d444  ",..."
.long     0xfffeada4    # at addr 0x1d448  "...."
.long     0x00000f44    # at addr 0x1d44c  "D..."
.long     0xfffeae14    # at addr 0x1d450  "...."
.long     0x00000f70    # at addr 0x1d454  "p..."
.long     0xfffeae44    # at addr 0x1d458  "D..."
.long     0x00000f88    # at addr 0x1d45c  "...."
.long     0xfffeaf24    # at addr 0x1d460  "$..."
.long     0x00000fb4    # at addr 0x1d464  "...."
.long     0xfffeaf94    # at addr 0x1d468  "...."
.long     0x00000fd4    # at addr 0x1d46c  "...."
.long     0xfffeb404    # at addr 0x1d470  "...."
.long     0x00001024    # at addr 0x1d474  "$..."
.long     0xfffeb814    # at addr 0x1d478  "...."
.long     0x0000107c    # at addr 0x1d47c  "|..."
.long     0xfffebc64    # at addr 0x1d480  "d..."
.long     0x000010e0    # at addr 0x1d484  "...."
.long     0xfffebe04    # at addr 0x1d488  "...."
.long     0x00001110    # at addr 0x1d48c  "...."
.long     0xfffec864    # at addr 0x1d490  "d..."
.long     0x000011c4    # at addr 0x1d494  "...."
.long     0xfffec904    # at addr 0x1d498  "...."
.long     0x000011f8    # at addr 0x1d49c  "...."
.long     0xfffecab4    # at addr 0x1d4a0  "...."
.long     0x00001224    # at addr 0x1d4a4  "$..."
.long     0xfffecd94    # at addr 0x1d4a8  "...."
.long     0x00001260    # at addr 0x1d4ac  "`..."
.long     0xfffecf54    # at addr 0x1d4b0  "T..."
.long     0x000012c4    # at addr 0x1d4b4  "...."
.long     0xfffed2e4    # at addr 0x1d4b8  "...."
.long     0x0000134c    # at addr 0x1d4bc  "L..."
.long     0xfffed364    # at addr 0x1d4c0  "d..."
.long     0x00001360    # at addr 0x1d4c4  "`..."
.long     0xfffed3a4    # at addr 0x1d4c8  "...."
.long     0x00001374    # at addr 0x1d4cc  "t..."
.long     0xfffed424    # at addr 0x1d4d0  "$..."
.long     0x00001388    # at addr 0x1d4d4  "...."
.long     0xfffed4a4    # at addr 0x1d4d8  "...."
.long     0x0000139c    # at addr 0x1d4dc  "...."
.long     0xfffed524    # at addr 0x1d4e0  "$..."
.long     0x000013b0    # at addr 0x1d4e4  "...."
.long     0xfffed564    # at addr 0x1d4e8  "d..."
.long     0x000013c4    # at addr 0x1d4ec  "...."
.long     0xfffed5a4    # at addr 0x1d4f0  "...."
.long     0x000013d8    # at addr 0x1d4f4  "...."
.long     0xfffed634    # at addr 0x1d4f8  "4..."
.long     0x000013ec    # at addr 0x1d4fc  "...."
.long     0xfffed6b4    # at addr 0x1d500  "...."
.long     0x00001400    # at addr 0x1d504  "...."
.long     0xfffed784    # at addr 0x1d508  "...."
.long     0x0000142c    # at addr 0x1d50c  ",..."
.long     0xfffee674    # at addr 0x1d510  "t..."
.long     0x0000145c    # at addr 0x1d514  "\..."
.long     0xfffeed74    # at addr 0x1d518  "t..."
.long     0x000014bc    # at addr 0x1d51c  "...."
.long     0xfffeedc4    # at addr 0x1d520  "...."
.long     0x000014d0    # at addr 0x1d524  "...."
.long     0xfffeee14    # at addr 0x1d528  "...."
.long     0x000014e4    # at addr 0x1d52c  "...."
.long     0xfffeee64    # at addr 0x1d530  "d..."
.long     0x000014f8    # at addr 0x1d534  "...."
.long     0xfffeeea4    # at addr 0x1d538  "...."
.long     0x0000150c    # at addr 0x1d53c  "...."
.long     0xfffeeef4    # at addr 0x1d540  "...."
.long     0x00001520    # at addr 0x1d544  " ..."
.long     0xfffeef34    # at addr 0x1d548  "4..."
.long     0x00001534    # at addr 0x1d54c  "4..."
.long     0xfffeefc4    # at addr 0x1d550  "...."
.long     0x00001548    # at addr 0x1d554  "H..."
.long     0xfffef044    # at addr 0x1d558  "D..."
.long     0x0000155c    # at addr 0x1d55c  "\..."
.long     0xfffef0d4    # at addr 0x1d560  "...."
.long     0x00001570    # at addr 0x1d564  "p..."
.long     0xfffef164    # at addr 0x1d568  "d..."
.long     0x00001584    # at addr 0x1d56c  "...."
.long     0xfffef204    # at addr 0x1d570  "...."
.long     0x00001598    # at addr 0x1d574  "...."
.long     0xfffef284    # at addr 0x1d578  "...."
.long     0x000015ac    # at addr 0x1d57c  "...."
.long     0xfffef2c4    # at addr 0x1d580  "...."
.long     0x000015c0    # at addr 0x1d584  "...."
.long     0xfffef314    # at addr 0x1d588  "...."
.long     0x000015d4    # at addr 0x1d58c  "...."
.long     0xfffef364    # at addr 0x1d590  "d..."
.long     0x000015e8    # at addr 0x1d594  "...."
.long     0xfffef3b4    # at addr 0x1d598  "...."
.long     0x000015fc    # at addr 0x1d59c  "...."
.long     0xfffef3f4    # at addr 0x1d5a0  "...."
.long     0x00001610    # at addr 0x1d5a4  "...."
.long     0xfffef444    # at addr 0x1d5a8  "D..."
.long     0x00001624    # at addr 0x1d5ac  "$..."
.long     0xfffef4d4    # at addr 0x1d5b0  "...."
.long     0x00001638    # at addr 0x1d5b4  "8..."
.long     0xfffef564    # at addr 0x1d5b8  "d..."
.long     0x0000164c    # at addr 0x1d5bc  "L..."
.long     0xfffef604    # at addr 0x1d5c0  "...."
.long     0x00001660    # at addr 0x1d5c4  "`..."
.long     0xfffef674    # at addr 0x1d5c8  "t..."
.long     0x00001698    # at addr 0x1d5cc  "...."
.long     0xfffef6e4    # at addr 0x1d5d0  "...."
.long     0x000016d0    # at addr 0x1d5d4  "...."
.long     0xfffef7a4    # at addr 0x1d5d8  "...."
.long     0x0000170c    # at addr 0x1d5dc  "...."
.long     0xfffef864    # at addr 0x1d5e0  "d..."
.long     0x00001748    # at addr 0x1d5e4  "H..."
.long     0xfffef8e4    # at addr 0x1d5e8  "...."
.long     0x00001780    # at addr 0x1d5ec  "...."
.long     0xfffef964    # at addr 0x1d5f0  "d..."
.long     0x000017b8    # at addr 0x1d5f4  "...."
.long     0xfffefa54    # at addr 0x1d5f8  "T..."
.long     0x00001808    # at addr 0x1d5fc  "...."
.long     0xffff0194    # at addr 0x1d600  "...."
.long     0x000018dc    # at addr 0x1d604  "...."
.long     0xffff0284    # at addr 0x1d608  "...."
.long     0x0000192c    # at addr 0x1d60c  ",..."
.long     0xffff0294    # at addr 0x1d610  "...."
.long     0x00001940    # at addr 0x1d614  "@..."
.long     0xffff03a4    # at addr 0x1d618  "...."
.long     0x0000198c    # at addr 0x1d61c  "...."
.long     0xffff0434    # at addr 0x1d620  "4..."
.long     0x000019c8    # at addr 0x1d624  "...."
.long     0xffff0564    # at addr 0x1d628  "d..."
.long     0x00001a28    # at addr 0x1d62c  "(..."
.long     0xffff05e4    # at addr 0x1d630  "...."
.long     0x00001a74    # at addr 0x1d634  "t..."
.long     0xffff0644    # at addr 0x1d638  "D..."
.long     0x00001ab4    # at addr 0x1d63c  "...."
.long     0xffff06b4    # at addr 0x1d640  "...."
.long     0x00001acc    # at addr 0x1d644  "...."
.long     0xffff0d74    # at addr 0x1d648  "t..."
.long     0x00001b1c    # at addr 0x1d64c  "...."
.long     0xffff0d84    # at addr 0x1d650  "...."
.long     0x00001b30    # at addr 0x1d654  "0..."
.long     0xffff0d94    # at addr 0x1d658  "...."
.long     0x00001b44    # at addr 0x1d65c  "D..."
.long     0xffff0e44    # at addr 0x1d660  "D..."
.long     0x00001b74    # at addr 0x1d664  "t..."
.long     0xffff0e84    # at addr 0x1d668  "...."
.long     0x00001b9c    # at addr 0x1d66c  "...."
.long     0xffff0ef4    # at addr 0x1d670  "...."
.long     0x00001bcc    # at addr 0x1d674  "...."
.long     0xffff0f54    # at addr 0x1d678  "T..."
.long     0x00001be0    # at addr 0x1d67c  "...."
.long     0xffff0f84    # at addr 0x1d680  "...."
.long     0x00001bfc    # at addr 0x1d684  "...."
.long     0xffff1044    # at addr 0x1d688  "D..."
.long     0x00001c44    # at addr 0x1d68c  "D..."
.long     0xffff10d4    # at addr 0x1d690  "...."
.long     0x00001ca4    # at addr 0x1d694  "...."
.long     0xffff1134    # at addr 0x1d698  "4..."
.long     0x00001cc4    # at addr 0x1d69c  "...."
.long     0xffff12b4    # at addr 0x1d6a0  "...."
.long     0x00001cd8    # at addr 0x1d6a4  "...."
.long     0xffff12c4    # at addr 0x1d6a8  "...."
.long     0x00001cec    # at addr 0x1d6ac  "...."
.long     0xffff12e4    # at addr 0x1d6b0  "...."
.long     0x00001d0c    # at addr 0x1d6b4  "...."
.long     0xffff13e4    # at addr 0x1d6b8  "...."
.long     0x00001d5c    # at addr 0x1d6bc  "\..."
.long     0xffff1494    # at addr 0x1d6c0  "...."
.long     0x00001d70    # at addr 0x1d6c4  "p..."
.long     0xffff1894    # at addr 0x1d6c8  "...."
.long     0x00001db4    # at addr 0x1d6cc  "...."
.long     0xffff1904    # at addr 0x1d6d0  "...."
.long     0x00001ddc    # at addr 0x1d6d4  "...."
.long     0xffff1954    # at addr 0x1d6d8  "T..."
.long     0x00001dfc    # at addr 0x1d6dc  "...."
.long     0xffff1974    # at addr 0x1d6e0  "t..."
.long     0x00001e10    # at addr 0x1d6e4  "...."
.long     0xffff1984    # at addr 0x1d6e8  "...."
.long     0x00001e24    # at addr 0x1d6ec  "$..."
.long     0xffff19b4    # at addr 0x1d6f0  "...."
.long     0x00001e70    # at addr 0x1d6f4  "p..."
.long     0xffff1ab4    # at addr 0x1d6f8  "...."
.long     0x00001ed4    # at addr 0x1d6fc  "...."
.long     0xffff1b34    # at addr 0x1d700  "4..."
.long     0x00001ee8    # at addr 0x1d704  "...."
.long     0xffff1c64    # at addr 0x1d708  "d..."
.long     0x00001efc    # at addr 0x1d70c  "...."
.long     0xffff1db4    # at addr 0x1d710  "...."
.long     0x00001f5c    # at addr 0x1d714  "\..."
.long     0xffff1dc4    # at addr 0x1d718  "...."
.long     0x00001f70    # at addr 0x1d71c  "p..."
.long     0xffff1dd4    # at addr 0x1d720  "...."
.long     0x00001f84    # at addr 0x1d724  "...."
.long     0xffff1de4    # at addr 0x1d728  "...."
.long     0x00001f98    # at addr 0x1d72c  "...."
.long     0xffff1e44    # at addr 0x1d730  "D..."
.long     0x00001fac    # at addr 0x1d734  "...."
.long     0xffff1eb4    # at addr 0x1d738  "...."
.long     0x00001fc0    # at addr 0x1d73c  "...."
.long     0xffff2014    # at addr 0x1d740  ". .."
.long     0x00001ffc    # at addr 0x1d744  "...."
.long     0xffff2074    # at addr 0x1d748  "t .."
.long     0x00002034    # at addr 0x1d74c  "4 .."
.long     0xffff20c4    # at addr 0x1d750  ". .."
.long     0x0000207c    # at addr 0x1d754  "| .."
.long     0xffff2134    # at addr 0x1d758  "4!.."
.long     0x000020b0    # at addr 0x1d75c  ". .."
.long     0xffff2184    # at addr 0x1d760  ".!.."
.long     0x000020c4    # at addr 0x1d764  ". .."
.long     0xffff2204    # at addr 0x1d768  ".".."
.long     0x00002110    # at addr 0x1d76c  ".!.."
.long     0xffff2244    # at addr 0x1d770  "D".."
.long     0x00002124    # at addr 0x1d774  "$!.."
.long     0xffff2274    # at addr 0x1d778  "t".."
.long     0x00002138    # at addr 0x1d77c  "8!.."
.long     0xffff2384    # at addr 0x1d780  ".#.."
.long     0x00002184    # at addr 0x1d784  ".!.."
.long     0xffff2434    # at addr 0x1d788  "4$.."
.long     0x000021b0    # at addr 0x1d78c  ".!.."
.long     0xffff2524    # at addr 0x1d790  "$%.."
.long     0x000021dc    # at addr 0x1d794  ".!.."
.long     0xffff26b4    # at addr 0x1d798  ".&.."
.long     0x00002254    # at addr 0x1d79c  "T".."
.long     0xffff2954    # at addr 0x1d7a0  "T).."
.long     0x000022c4    # at addr 0x1d7a4  ".".."
.long     0xffff29b4    # at addr 0x1d7a8  ".).."
.long     0x000022e8    # at addr 0x1d7ac  ".".."
.long     0xffff2bb4    # at addr 0x1d7b0  ".+.."
.long     0x0000231c    # at addr 0x1d7b4  ".#.."
.long     0xffff2be4    # at addr 0x1d7b8  ".+.."
.long     0x00002344    # at addr 0x1d7bc  "D#.."
.long     0xffff2c04    # at addr 0x1d7c0  ".,.."
.long     0x00002358    # at addr 0x1d7c4  "X#.."
.long     0xffff2c34    # at addr 0x1d7c8  "4,.."
.long     0x0000236c    # at addr 0x1d7cc  "l#.."
.long     0xffff2c74    # at addr 0x1d7d0  "t,.."
.long     0x00002384    # at addr 0x1d7d4  ".#.."
.long     0xffff2c94    # at addr 0x1d7d8  ".,.."
.long     0x000023a4    # at addr 0x1d7dc  ".#.."
.long     0xffff2d54    # at addr 0x1d7e0  "T-.."
.long     0x000023b8    # at addr 0x1d7e4  ".#.."
.long     0xffff3794    # at addr 0x1d7e8  ".7.."
.long     0x00002460    # at addr 0x1d7ec  "`$.."
.long     0xffff3974    # at addr 0x1d7f0  "t9.."
.long     0x0000249c    # at addr 0x1d7f4  ".$.."
.long     0xffff3a14    # at addr 0x1d7f8  ".:.."
.long     0x000024c8    # at addr 0x1d7fc  ".$.."
.long     0xffff3b24    # at addr 0x1d800  "$;.."
.long     0x0000250c    # at addr 0x1d804  ".%.."
.long     0xffff3bc4    # at addr 0x1d808  ".;.."
.long     0x00002538    # at addr 0x1d80c  "8%.."
.long     0xffff3cd4    # at addr 0x1d810  ".<.."
.long     0x0000257c    # at addr 0x1d814  "|%.."
.long     0xffff3d74    # at addr 0x1d818  "t=.."
.long     0x00002594    # at addr 0x1d81c  ".%.."
.long     0xffff3dd4    # at addr 0x1d820  ".=.."
.long     0x000025ac    # at addr 0x1d824  ".%.."
.long     0xffff41b4    # at addr 0x1d828  ".A.."
.long     0x000025f8    # at addr 0x1d82c  ".%.."
.long     0xffff4264    # at addr 0x1d830  "dB.."
.long     0x00002644    # at addr 0x1d834  "D&.."
.long     0xffff4484    # at addr 0x1d838  ".D.."
.long     0x00002690    # at addr 0x1d83c  ".&.."
.long     0xffff44b4    # at addr 0x1d840  ".D.."
.long     0x000026bc    # at addr 0x1d844  ".&.."
.long     0xffff46f4    # at addr 0x1d848  ".F.."
.long     0x00002738    # at addr 0x1d84c  "8'.."
.long     0xffff4704    # at addr 0x1d850  ".G.."
.long     0x0000274c    # at addr 0x1d854  "L'.."
.long     0xffff4754    # at addr 0x1d858  "TG.."
.long     0x00002778    # at addr 0x1d85c  "x'.."
.long     0xffff47a4    # at addr 0x1d860  ".G.."
.long     0x000027a4    # at addr 0x1d864  ".'.."
.long     0xffff6034    # at addr 0x1d868  "4`.."
.long     0x00002814    # at addr 0x1d86c  ".(.."
.long     0xffff6084    # at addr 0x1d870  ".`.."
.long     0x0000283c    # at addr 0x1d874  "<(.."
.long     0xffff6144    # at addr 0x1d878  "Da.."
.long     0x00002864    # at addr 0x1d87c  "d(.."
.long     0xffff6224    # at addr 0x1d880  "$b.."
.long     0x000028a4    # at addr 0x1d884  ".(.."
.long     0xffff7474    # at addr 0x1d888  "tt.."
.long     0x00002958    # at addr 0x1d88c  "X).."
.long     0xffff7614    # at addr 0x1d890  ".v.."
.long     0x000029fc    # at addr 0x1d894  ".).."
.long     0xffff7654    # at addr 0x1d898  "Tv.."
.long     0x00002a28    # at addr 0x1d89c  "(*.."
.long     0xffff7674    # at addr 0x1d8a0  "tv.."
.long     0x00002a3c    # at addr 0x1d8a4  "<*.."
.long     0xffff7694    # at addr 0x1d8a8  ".v.."
.long     0x00002a50    # at addr 0x1d8ac  "P*.."
.long     0xffff76d4    # at addr 0x1d8b0  ".v.."
.long     0x00002a64    # at addr 0x1d8b4  "d*.."
.long     0xffff76f4    # at addr 0x1d8b8  ".v.."
.long     0x00002a78    # at addr 0x1d8bc  "x*.."
.long     0xffff7734    # at addr 0x1d8c0  "4w.."
.long     0x00002aa4    # at addr 0x1d8c4  ".*.."
.long     0xffff77b4    # at addr 0x1d8c8  ".w.."
.long     0x00002af8    # at addr 0x1d8cc  ".*.."
.long     0xffff78a4    # at addr 0x1d8d0  ".x.."
.long     0x00002b60    # at addr 0x1d8d4  "`+.."
.long     0xffff78b4    # at addr 0x1d8d8  ".x.."
.long     0x00002b74    # at addr 0x1d8dc  "t+.."
.long     0xffff7954    # at addr 0x1d8e0  "Ty.."
.long     0x00002ba0    # at addr 0x1d8e4  ".+.."
.long     0xffff7974    # at addr 0x1d8e8  "ty.."
.long     0x00002bb4    # at addr 0x1d8ec  ".+.."
.long     0xffff7984    # at addr 0x1d8f0  ".y.."
.long     0x00002bc8    # at addr 0x1d8f4  ".+.."
.long     0xffff79a4    # at addr 0x1d8f8  ".y.."
.long     0x00002bdc    # at addr 0x1d8fc  ".+.."
.long     0xffff79c4    # at addr 0x1d900  ".y.."
.long     0x00002bf0    # at addr 0x1d904  ".+.."
.long     0xffff7a64    # at addr 0x1d908  "dz.."
.long     0x00002c38    # at addr 0x1d90c  "8,.."
.long     0xffff7af4    # at addr 0x1d910  ".z.."
.long     0x00002c68    # at addr 0x1d914  "h,.."
.long     0xffff7b04    # at addr 0x1d918  ".{.."
.long     0x00002c7c    # at addr 0x1d91c  "|,.."
.long     0xffff7b24    # at addr 0x1d920  "${.."
.long     0x00002c90    # at addr 0x1d924  ".,.."
.long     0xffff7bc4    # at addr 0x1d928  ".{.."
.long     0x00002cac    # at addr 0x1d92c  ".,.."
.long     0xffff7be4    # at addr 0x1d930  ".{.."
.long     0x00002cc0    # at addr 0x1d934  ".,.."
.long     0xffff7c04    # at addr 0x1d938  ".|.."
.long     0x00002cd4    # at addr 0x1d93c  ".,.."
.long     0xffff7c14    # at addr 0x1d940  ".|.."
.long     0x00002ce8    # at addr 0x1d944  ".,.."
.long     0xffff7cb4    # at addr 0x1d948  ".|.."
.long     0x00002d18    # at addr 0x1d94c  ".-.."
.long     0xffff7d54    # at addr 0x1d950  "T}.."
.long     0x00002d48    # at addr 0x1d954  "H-.."
.long     0xffff7d64    # at addr 0x1d958  "d}.."
.long     0x00002d5c    # at addr 0x1d95c  "\-.."
.long     0xffff7d84    # at addr 0x1d960  ".}.."
.long     0x00002d70    # at addr 0x1d964  "p-.."
.long     0xffff7da4    # at addr 0x1d968  ".}.."
.long     0x00002d84    # at addr 0x1d96c  ".-.."
.long     0xffff7db4    # at addr 0x1d970  ".}.."
.long     0x00002d98    # at addr 0x1d974  ".-.."
.long     0xffff7dd4    # at addr 0x1d978  ".}.."
.long     0x00002dac    # at addr 0x1d97c  ".-.."
.long     0xffff7df4    # at addr 0x1d980  ".}.."
.long     0x00002dc0    # at addr 0x1d984  ".-.."
.long     0xffff7e14    # at addr 0x1d988  ".~.."
.long     0x00002dd4    # at addr 0x1d98c  ".-.."
.long     0xffff7f44    # at addr 0x1d990  "D.."
.long     0x00002e10    # at addr 0x1d994  "...."
.long     0xffff7fe4    # at addr 0x1d998  "..."
.long     0x00002e70    # at addr 0x1d99c  "p..."
.long     0xffff8004    # at addr 0x1d9a0  "...."
.long     0x00002e84    # at addr 0x1d9a4  "...."
.long     0xffff8454    # at addr 0x1d9a8  "T..."
.long     0x00002fcc    # at addr 0x1d9ac  "./.."
.long     0xffff8474    # at addr 0x1d9b0  "t..."
.long     0x00002fe0    # at addr 0x1d9b4  "./.."
.long     0xffff8504    # at addr 0x1d9b8  "...."
.long     0x00002ffc    # at addr 0x1d9bc  "./.."
.long     0xffff85e4    # at addr 0x1d9c0  "...."
.long     0x00003020    # at addr 0x1d9c4  " 0.."
.long     0xffff8674    # at addr 0x1d9c8  "t..."
.long     0x0000303c    # at addr 0x1d9cc  "<0.."
.long     0xffff8694    # at addr 0x1d9d0  "...."
.long     0x00003058    # at addr 0x1d9d4  "X0.."
.long     0xffff86c4    # at addr 0x1d9d8  "...."
.long     0x0000306c    # at addr 0x1d9dc  "l0.."
.long     0xffff86d4    # at addr 0x1d9e0  "...."
.long     0x00003080    # at addr 0x1d9e4  ".0.."
.long     0xffff8714    # at addr 0x1d9e8  "...."
.long     0x000030a4    # at addr 0x1d9ec  ".0.."
.long     0xffff8744    # at addr 0x1d9f0  "D..."
.long     0x000030b8    # at addr 0x1d9f4  ".0.."
.long     0xffff87d4    # at addr 0x1d9f8  "...."
.long     0x000030d0    # at addr 0x1d9fc  ".0.."
.long     0xffff8834    # at addr 0x1da00  "4..."
.long     0x000030e8    # at addr 0x1da04  ".0.."
.long     0xffff8854    # at addr 0x1da08  "T..."
.long     0x00003104    # at addr 0x1da0c  ".1.."
.long     0xffff8894    # at addr 0x1da10  "...."
.long     0x00003120    # at addr 0x1da14  " 1.."
.long     0xffff88c4    # at addr 0x1da18  "...."
.long     0x00003148    # at addr 0x1da1c  "H1.."
.long     0xffff88e4    # at addr 0x1da20  "...."
.long     0x00003164    # at addr 0x1da24  "d1.."
.long     0xffff8924    # at addr 0x1da28  "$..."
.long     0x00003184    # at addr 0x1da2c  ".1.."
.long     0xffff8a24    # at addr 0x1da30  "$..."
.long     0x000031d0    # at addr 0x1da34  ".1.."
.long     0xffff8a54    # at addr 0x1da38  "T..."
.long     0x000031ec    # at addr 0x1da3c  ".1.."
.long     0xffff8a84    # at addr 0x1da40  "...."
.long     0x0000320c    # at addr 0x1da44  ".2.."
.long     0xffff8b64    # at addr 0x1da48  "d..."
.long     0x00003254    # at addr 0x1da4c  "T2.."
.long     0xffff9024    # at addr 0x1da50  "$..."
.long     0x000032a4    # at addr 0x1da54  ".2.."
.long     0xffff90f4    # at addr 0x1da58  "...."
.long     0x000032e4    # at addr 0x1da5c  ".2.."
.long     0xffff95b4    # at addr 0x1da60  "...."
.long     0x00003334    # at addr 0x1da64  "43.."
.long     0xffff9624    # at addr 0x1da68  "$..."
.long     0x0000335c    # at addr 0x1da6c  "\3.."
.long     0xffff9644    # at addr 0x1da70  "D..."
.long     0x00003378    # at addr 0x1da74  "x3.."
.long     0xffff9664    # at addr 0x1da78  "d..."
.long     0x00003394    # at addr 0x1da7c  ".3.."
.long     0xffff9684    # at addr 0x1da80  "...."
.long     0x000033b4    # at addr 0x1da84  ".3.."
.long     0xffff9714    # at addr 0x1da88  "...."
.long     0x000033f4    # at addr 0x1da8c  ".3.."
.long     0xffff9764    # at addr 0x1da90  "d..."
.long     0x00003410    # at addr 0x1da94  ".4.."
.long     0xffff9784    # at addr 0x1da98  "...."
.long     0x00003424    # at addr 0x1da9c  "$4.."
.long     0xffff97a4    # at addr 0x1daa0  "...."
.long     0x00003438    # at addr 0x1daa4  "84.."
.long     0xffff9834    # at addr 0x1daa8  "4..."
.long     0x00003468    # at addr 0x1daac  "h4.."
.long     0xffff9854    # at addr 0x1dab0  "T..."
.long     0x0000347c    # at addr 0x1dab4  "|4.."
.long     0xffff9874    # at addr 0x1dab8  "t..."
.long     0x00003490    # at addr 0x1dabc  ".4.."
.long     0xffff9964    # at addr 0x1dac0  "d..."
.long     0x000034d0    # at addr 0x1dac4  ".4.."
.long     0xffff99a4    # at addr 0x1dac8  "...."
.long     0x000034e4    # at addr 0x1dacc  ".4.."
.long     0xffff9a14    # at addr 0x1dad0  "...."
.long     0x00003550    # at addr 0x1dad4  "P5.."
.long     0xffff9a44    # at addr 0x1dad8  "D..."
.long     0x00003564    # at addr 0x1dadc  "d5.."
.long     0xffff9a74    # at addr 0x1dae0  "t..."
.long     0x00003578    # at addr 0x1dae4  "x5.."
.long     0xffff9aa4    # at addr 0x1dae8  "...."
.long     0x00003594    # at addr 0x1daec  ".5.."
.long     0xffff9b04    # at addr 0x1daf0  "...."
.long     0x000035d0    # at addr 0x1daf4  ".5.."
.long     0xffff9ba4    # at addr 0x1daf8  "...."
.long     0x00003608    # at addr 0x1dafc  ".6.."
.long     0xffff9d04    # at addr 0x1db00  "...."
.long     0x0000366c    # at addr 0x1db04  "l6.."
.long     0xffff9dc4    # at addr 0x1db08  "...."
.long     0x000036bc    # at addr 0x1db0c  ".6.."
.long     0xffff9de4    # at addr 0x1db10  "...."
.long     0x000036d0    # at addr 0x1db14  ".6.."
.long     0xffff9e94    # at addr 0x1db18  "...."
.long     0x0000372c    # at addr 0x1db1c  ",7.."
.long     0xffff9fe4    # at addr 0x1db20  "...."
.long     0x00003764    # at addr 0x1db24  "d7.."
.long     0xffffa024    # at addr 0x1db28  "$..."
.long     0x0000377c    # at addr 0x1db2c  "|7.."
.long     0xffffa094    # at addr 0x1db30  "...."
.long     0x000037ac    # at addr 0x1db34  ".7.."
.long     0xffffa0b4    # at addr 0x1db38  "...."
.long     0x000037cc    # at addr 0x1db3c  ".7.."
.long     0xffffa0f4    # at addr 0x1db40  "...."
.long     0x000037e4    # at addr 0x1db44  ".7.."
.long     0xffffa134    # at addr 0x1db48  "4..."
.long     0x00003804    # at addr 0x1db4c  ".8.."
.long     0xffffa1c4    # at addr 0x1db50  "...."
.long     0x0000383c    # at addr 0x1db54  "<8.."
.long     0xffffa214    # at addr 0x1db58  "...."
.long     0x0000385c    # at addr 0x1db5c  "\8.."
.long     0xffffa294    # at addr 0x1db60  "...."
.long     0x0000388c    # at addr 0x1db64  ".8.."
.long     0xffffa304    # at addr 0x1db68  "...."
.long     0x000038d4    # at addr 0x1db6c  ".8.."
.long     0xffffa314    # at addr 0x1db70  "...."
.long     0x000038ec    # at addr 0x1db74  ".8.."

.p2align 3

# Data section .eh_frame (size 12248)  0x0001db78 - 0x00020b4f

.section .eh_frame
Var0x1db78:       # next=0x2000e, start=0x1db78, end=0x20b4f
.long     0x00000014    # at addr 0x1db78  "...."
.long     0x00000000    # at addr 0x1db7c  "...."
.long     0x00527a01    # at addr 0x1db80  ".zR."
.long     0x01107801    # at addr 0x1db84  ".x.."
.long     0x08070c1b    # at addr 0x1db88  "...."
.long     0x00000190    # at addr 0x1db8c  "...."
.long     0x00000014    # at addr 0x1db90  "...."
.long     0x0000001c    # at addr 0x1db94  "...."
.long     0xfffe8c38    # at addr 0x1db98  "8..."
.long     0x0000002f    # at addr 0x1db9c  "/..."
.long     0x10074400    # at addr 0x1dba0  ".D.."
.long     0x00000000    # at addr 0x1dba4  "...."
.long     0x00000024    # at addr 0x1dba8  "$..."
.long     0x00000034    # at addr 0x1dbac  "4..."
.long     0xfffe6470    # at addr 0x1dbb0  "pd.."
.long     0x000006b0    # at addr 0x1dbb4  "...."
.long     0x46100e00    # at addr 0x1dbb8  "...F"
.long     0x0f4a180e    # at addr 0x1dbbc  "..J."
.long     0x8008770b    # at addr 0x1dbc0  ".w.."
.long     0x3a1a3f00    # at addr 0x1dbc4  ".?.:"
.long     0x2224332a    # at addr 0x1dbc8  "*3$""
.long     0x00000000    # at addr 0x1dbcc  "...."
.long     0x00000014    # at addr 0x1dbd0  "...."
.long     0x0000005c    # at addr 0x1dbd4  "\..."
.long     0xfffe6af8    # at addr 0x1dbd8  ".j.."
.long     0x00000030    # at addr 0x1dbdc  "0..."
.long     0x00000000    # at addr 0x1dbe0  "...."
.long     0x00000000    # at addr 0x1dbe4  "...."
.long     0x00000014    # at addr 0x1dbe8  "...."
.long     0x00000074    # at addr 0x1dbec  "t..."
.long     0xfffe6b10    # at addr 0x1dbf0  ".k.."
.long     0x000006a0    # at addr 0x1dbf4  "...."
.long     0x00000000    # at addr 0x1dbf8  "...."
.long     0x00000000    # at addr 0x1dbfc  "...."
.long     0x00000010    # at addr 0x1dc00  "...."
.long     0x0000008c    # at addr 0x1dc04  "...."
.long     0xfffe8cb8    # at addr 0x1dc08  "...."
.long     0x00000010    # at addr 0x1dc0c  "...."
.long     0x00000000    # at addr 0x1dc10  "...."
.long     0x00000010    # at addr 0x1dc14  "...."
.long     0x000000a0    # at addr 0x1dc18  "...."
.long     0xfffe8cb4    # at addr 0x1dc1c  "...."
.long     0x0000001c    # at addr 0x1dc20  "...."
.long     0x00000000    # at addr 0x1dc24  "...."
.long     0x00000010    # at addr 0x1dc28  "...."
.long     0x000000b4    # at addr 0x1dc2c  "...."
.long     0xfffe8cc0    # at addr 0x1dc30  "...."
.long     0x00000015    # at addr 0x1dc34  "...."
.long     0x00000000    # at addr 0x1dc38  "...."
.long     0x0000002c    # at addr 0x1dc3c  ",..."
.long     0x000000c8    # at addr 0x1dc40  "...."
.long     0xfffe8ccc    # at addr 0x1dc44  "...."
.long     0x00000214    # at addr 0x1dc48  "...."
.long     0x100e4800    # at addr 0x1dc4c  ".H.."
.long     0x0e43028c    # at addr 0x1dc50  "..C."
.long     0x48038618    # at addr 0x1dc54  "...H"
.long     0x0483200e    # at addr 0x1dc58  ". .."
.long     0x0e0ab602    # at addr 0x1dc5c  "...."
.long     0x100e4418    # at addr 0x1dc60  ".D.."
.long     0x44080e45    # at addr 0x1dc64  "E..D"
.long     0x0000000b    # at addr 0x1dc68  "...."
.long     0x00000010    # at addr 0x1dc6c  "...."
.long     0x000000f8    # at addr 0x1dc70  "...."
.long     0xfffe8ebc    # at addr 0x1dc74  "...."
.long     0x00000009    # at addr 0x1dc78  "...."
.long     0x00000000    # at addr 0x1dc7c  "...."
.long     0x00000010    # at addr 0x1dc80  "...."
.long     0x0000010c    # at addr 0x1dc84  "...."
.long     0xfffe8eb8    # at addr 0x1dc88  "...."
.long     0x00000061    # at addr 0x1dc8c  "a..."
.long     0x00000000    # at addr 0x1dc90  "...."
.long     0x00000018    # at addr 0x1dc94  "...."
.long     0x00000120    # at addr 0x1dc98  " ..."
.long     0xfffe8f14    # at addr 0x1dc9c  "...."
.long     0x00000077    # at addr 0x1dca0  "w..."
.long     0x200e4400    # at addr 0x1dca4  ".D. "
.long     0x0e0a5002    # at addr 0x1dca8  ".P.."
.long     0x000b4408    # at addr 0x1dcac  ".D.."
.long     0x00000060    # at addr 0x1dcb0  "`..."
.long     0x0000013c    # at addr 0x1dcb4  "<..."
.long     0xfffe8f78    # at addr 0x1dcb8  "x..."
.long     0x0000024f    # at addr 0x1dcbc  "O..."
.long     0x100e4200    # at addr 0x1dcc0  ".B.."
.long     0x0e44028f    # at addr 0x1dcc4  "..D."
.long     0x42038e18    # at addr 0x1dcc8  "...B"
.long     0x048d200e    # at addr 0x1dccc  ". .."
.long     0x8c280e42    # at addr 0x1dcd0  "B.(."
.long     0x300e4105    # at addr 0x1dcd4  ".A.0"
.long     0x0e410686    # at addr 0x1dcd8  "..A."
.long     0x47078338    # at addr 0x1dcdc  "8..G"
.long     0x030d900e    # at addr 0x1dce0  "...."
.long     0x0e0a013f    # at addr 0x1dce4  "?..."
.long     0x300e4138    # at addr 0x1dce8  "8A.0"
.long     0x42280e41    # at addr 0x1dcec  "A.(B"
.long     0x0e42200e    # at addr 0x1dcf0  ". B."
.long     0x100e4218    # at addr 0x1dcf4  ".B.."
.long     0x41080e42    # at addr 0x1dcf8  "B..A"
.long     0x0e64020b    # at addr 0x1dcfc  "..d."
.long     0x0e4d0d98    # at addr 0x1dd00  "..M."
.long     0x0e510da0    # at addr 0x1dd04  "..Q."
.long     0x0e4a0da8    # at addr 0x1dd08  "..J."
.long     0x0e490db0    # at addr 0x1dd0c  "..I."
.long     0x00000d90    # at addr 0x1dd10  "...."
.long     0x00000034    # at addr 0x1dd14  "4..."
.long     0x000001a0    # at addr 0x1dd18  "...."
.long     0xfffe9164    # at addr 0x1dd1c  "d..."
.long     0x00000068    # at addr 0x1dd20  "h..."
.long     0x100e4200    # at addr 0x1dd24  ".B.."
.long     0x0e45028d    # at addr 0x1dd28  "..E."
.long     0x44038c18    # at addr 0x1dd2c  "...D"
.long     0x0486200e    # at addr 0x1dd30  ". .."
.long     0x83280e49    # at addr 0x1dd34  "I.(."
.long     0x300e4405    # at addr 0x1dd38  ".D.0"
.long     0x280e4902    # at addr 0x1dd3c  ".I.("
.long     0x41200e41    # at addr 0x1dd40  "A. A"
.long     0x0e42180e    # at addr 0x1dd44  "..B."
.long     0x080e4210    # at addr 0x1dd48  ".B.."
.long     0x00000010    # at addr 0x1dd4c  "...."
.long     0x000001d8    # at addr 0x1dd50  "...."
.long     0xfffe919c    # at addr 0x1dd54  "...."
.long     0x0000000f    # at addr 0x1dd58  "...."
.long     0x00000000    # at addr 0x1dd5c  "...."
.long     0x00000010    # at addr 0x1dd60  "...."
.long     0x000001ec    # at addr 0x1dd64  "...."
.long     0xfffe9198    # at addr 0x1dd68  "...."
.long     0x00000012    # at addr 0x1dd6c  "...."
.long     0x00000000    # at addr 0x1dd70  "...."
.long     0x0000001c    # at addr 0x1dd74  "...."
.long     0x00000200    # at addr 0x1dd78  "...."
.long     0xfffe91a4    # at addr 0x1dd7c  "...."
.long     0x00000042    # at addr 0x1dd80  "B..."
.long     0x100e4100    # at addr 0x1dd84  ".A.."
.long     0x0a710283    # at addr 0x1dd88  "..q."
.long     0x0b4e080e    # at addr 0x1dd8c  "..N."
.long     0x00080e41    # at addr 0x1dd90  "A..."
.long     0x00000018    # at addr 0x1dd94  "...."
.long     0x00000220    # at addr 0x1dd98  " ..."
.long     0xfffe91d4    # at addr 0x1dd9c  "...."
.long     0x000000ac    # at addr 0x1dda0  "...."
.long     0x100e4900    # at addr 0x1dda4  ".I.."
.long     0x0e700283    # at addr 0x1dda8  "..p."
.long     0x00000008    # at addr 0x1ddac  "...."
.long     0x00000028    # at addr 0x1ddb0  "(..."
.long     0x0000023c    # at addr 0x1ddb4  "<..."
.long     0xfffe9268    # at addr 0x1ddb8  "h..."
.long     0x00000078    # at addr 0x1ddbc  "x..."
.long     0x100e4100    # at addr 0x1ddc0  ".A.."
.long     0x0e500286    # at addr 0x1ddc4  "..P."
.long     0x47038318    # at addr 0x1ddc8  "...G"
.long     0x4402300e    # at addr 0x1ddcc  ".0.D"
.long     0x41180e0a    # at addr 0x1ddd0  "...A"
.long     0x0e41100e    # at addr 0x1ddd4  "..A."
.long     0x000b4208    # at addr 0x1ddd8  ".B.."
.long     0x0000003c    # at addr 0x1dddc  "<..."
.long     0x00000268    # at addr 0x1dde0  "h..."
.long     0xfffe92bc    # at addr 0x1dde4  "...."
.long     0x000000d7    # at addr 0x1dde8  "...."
.long     0x100e4200    # at addr 0x1ddec  ".B.."
.long     0x0e42028e    # at addr 0x1ddf0  "..B."
.long     0x42038d18    # at addr 0x1ddf4  "...B"
.long     0x048c200e    # at addr 0x1ddf8  ". .."
.long     0x86280e44    # at addr 0x1ddfc  "D.(."
.long     0x300e4105    # at addr 0x1de00  ".A.0"
.long     0xae020683    # at addr 0x1de04  "...."
.long     0x41280e0a    # at addr 0x1de08  "..(A"
.long     0x0e42200e    # at addr 0x1de0c  ". B."
.long     0x100e4218    # at addr 0x1de10  ".B.."
.long     0x48080e42    # at addr 0x1de14  "B..H"
.long     0x0000000b    # at addr 0x1de18  "...."
.long     0x0000001c    # at addr 0x1de1c  "...."
.long     0x000002a8    # at addr 0x1de20  "...."
.long     0xfffe935c    # at addr 0x1de24  "\..."
.long     0x0000018d    # at addr 0x1de28  "...."
.long     0x100e4100    # at addr 0x1de2c  ".A.."
.long     0xf8020283    # at addr 0x1de30  "...."
.long     0x47080e0a    # at addr 0x1de34  "...G"
.long     0x0000000b    # at addr 0x1de38  "...."
.long     0x00000024    # at addr 0x1de3c  "$..."
.long     0x000002c8    # at addr 0x1de40  "...."
.long     0xfffe94cc    # at addr 0x1de44  "...."
.long     0x0000002a    # at addr 0x1de48  "*..."
.long     0x100e4200    # at addr 0x1de4c  ".B.."
.long     0x0e44028c    # at addr 0x1de50  "..D."
.long     0x47038618    # at addr 0x1de54  "...G"
.long     0x0e55200e    # at addr 0x1de58  ". U."
.long     0x100e4118    # at addr 0x1de5c  ".A.."
.long     0x00080e42    # at addr 0x1de60  "B..."
.long     0x00000010    # at addr 0x1de64  "...."
.long     0x000002f0    # at addr 0x1de68  "...."
.long     0xfffe94d4    # at addr 0x1de6c  "...."
.long     0x0000000c    # at addr 0x1de70  "...."
.long     0x00000000    # at addr 0x1de74  "...."
.long     0x00000010    # at addr 0x1de78  "...."
.long     0x00000304    # at addr 0x1de7c  "...."
.long     0xfffe94d0    # at addr 0x1de80  "...."
.long     0x0000000f    # at addr 0x1de84  "...."
.long     0x00000000    # at addr 0x1de88  "...."
.long     0x00000010    # at addr 0x1de8c  "...."
.long     0x00000318    # at addr 0x1de90  "...."
.long     0xfffe94cc    # at addr 0x1de94  "...."
.long     0x00000012    # at addr 0x1de98  "...."
.long     0x00000000    # at addr 0x1de9c  "...."
.long     0x00000010    # at addr 0x1dea0  "...."
.long     0x0000032c    # at addr 0x1dea4  ",..."
.long     0xfffe94d8    # at addr 0x1dea8  "...."
.long     0x0000000f    # at addr 0x1deac  "...."
.long     0x00000000    # at addr 0x1deb0  "...."
.long     0x0000004c    # at addr 0x1deb4  "L..."
.long     0x00000340    # at addr 0x1deb8  "@..."
.long     0xfffe94d4    # at addr 0x1debc  "...."
.long     0x00000182    # at addr 0x1dec0  "...."
.long     0x100e4200    # at addr 0x1dec4  ".B.."
.long     0x0e42028e    # at addr 0x1dec8  "..B."
.long     0x46038d18    # at addr 0x1decc  "...F"
.long     0x048c200e    # at addr 0x1ded0  ". .."
.long     0x86280e44    # at addr 0x1ded4  "D.(."
.long     0x300e4105    # at addr 0x1ded8  ".A.0"
.long     0x12030683    # at addr 0x1dedc  "...."
.long     0x280e0a01    # at addr 0x1dee0  "...("
.long     0x49200e41    # at addr 0x1dee4  "A. I"
.long     0x0e42180e    # at addr 0x1dee8  "..B."
.long     0x080e4210    # at addr 0x1deec  ".B.."
.long     0x43020b41    # at addr 0x1def0  "A..C"
.long     0x0e41280e    # at addr 0x1def4  ".(A."
.long     0x180e4920    # at addr 0x1def8  " I.."
.long     0x42100e42    # at addr 0x1defc  "B..B"
.long     0x0000080e    # at addr 0x1df00  "...."
.long     0x00000030    # at addr 0x1df04  "0..."
.long     0x00000390    # at addr 0x1df08  "...."
.long     0xfffe9614    # at addr 0x1df0c  "...."
.long     0x000000c1    # at addr 0x1df10  "...."
.long     0x100e4b00    # at addr 0x1df14  ".K.."
.long     0x0e44028c    # at addr 0x1df18  "..D."
.long     0x41038618    # at addr 0x1df1c  "...A"
.long     0x0483200e    # at addr 0x1df20  ". .."
.long     0x0e0a7e02    # at addr 0x1df24  ".~.."
.long     0x100e4118    # at addr 0x1df28  ".A.."
.long     0x47080e42    # at addr 0x1df2c  "B..G"
.long     0x080e680b    # at addr 0x1df30  ".h.."
.long     0x00ccc6c3    # at addr 0x1df34  "...."
.long     0x00000034    # at addr 0x1df38  "4..."
.long     0x000003c4    # at addr 0x1df3c  "...."
.long     0xfffe96b0    # at addr 0x1df40  "...."
.long     0x000000c3    # at addr 0x1df44  "...."
.long     0x100e4200    # at addr 0x1df48  ".B.."
.long     0x0e41028c    # at addr 0x1df4c  "..A."
.long     0x41038618    # at addr 0x1df50  "...A"
.long     0x0483200e    # at addr 0x1df54  ". .."
.long     0x0e0aa402    # at addr 0x1df58  "...."
.long     0x100e4118    # at addr 0x1df5c  ".A.."
.long     0x41080e42    # at addr 0x1df60  "B..A"
.long     0x180e4a0b    # at addr 0x1df64  ".J.."
.long     0x42100e46    # at addr 0x1df68  "F..B"
.long     0x0000080e    # at addr 0x1df6c  "...."
.long     0x00000028    # at addr 0x1df70  "(..."
.long     0x000003fc    # at addr 0x1df74  "...."
.long     0xfffe9748    # at addr 0x1df78  "H..."
.long     0x000000bb    # at addr 0x1df7c  "...."
.long     0x100e4100    # at addr 0x1df80  ".A.."
.long     0x0e410286    # at addr 0x1df84  "..A."
.long     0x46038318    # at addr 0x1df88  "...F"
.long     0x7b02200e    # at addr 0x1df8c  ". .{"
.long     0x41180e0a    # at addr 0x1df90  "...A"
.long     0x0e41100e    # at addr 0x1df94  "..A."
.long     0x000b4b08    # at addr 0x1df98  ".K.."
.long     0x00000020    # at addr 0x1df9c  " ..."
.long     0x00000428    # at addr 0x1dfa0  "(..."
.long     0xfffe97dc    # at addr 0x1dfa4  "...."
.long     0x0000004c    # at addr 0x1dfa8  "L..."
.long     0x100e4200    # at addr 0x1dfac  ".B.."
.long     0x0e50028c    # at addr 0x1dfb0  "..P."
.long     0x0e0a5420    # at addr 0x1dfb4  " T.."
.long     0x080e4810    # at addr 0x1dfb8  ".H.."
.long     0x00000b4a    # at addr 0x1dfbc  "J..."
.long     0x00000010    # at addr 0x1dfc0  "...."
.long     0x0000044c    # at addr 0x1dfc4  "L..."
.long     0xfffe9808    # at addr 0x1dfc8  "...."
.long     0x0000001e    # at addr 0x1dfcc  "...."
.long     0x00000000    # at addr 0x1dfd0  "...."
.long     0x00000034    # at addr 0x1dfd4  "4..."
.long     0x00000460    # at addr 0x1dfd8  "`..."
.long     0xfffe9814    # at addr 0x1dfdc  "...."
.long     0x00000062    # at addr 0x1dfe0  "b..."
.long     0x100e4200    # at addr 0x1dfe4  ".B.."
.long     0x0e42028d    # at addr 0x1dfe8  "..B."
.long     0x47038c18    # at addr 0x1dfec  "...G"
.long     0x0483200e    # at addr 0x1dff0  ". .."
.long     0x180e0a74    # at addr 0x1dff4  "t..."
.long     0x42100e42    # at addr 0x1dff8  "B..B"
.long     0x0b45080e    # at addr 0x1dffc  "..E."
.long     0x42180e55    # at addr 0x1e000  "U..B"
.long     0x0e42100e    # at addr 0x1e004  "..B."
.long     0x00000008    # at addr 0x1e008  "...."
.long     0x00000010    # at addr 0x1e00c  "...."
.long     0x00000498    # at addr 0x1e010  "...."
.long     0xfffe984c    # at addr 0x1e014  "L..."
.long     0x00000036    # at addr 0x1e018  "6..."
.long     0x00000000    # at addr 0x1e01c  "...."
.long     0x00000010    # at addr 0x1e020  "...."
.long     0x000004ac    # at addr 0x1e024  "...."
.long     0xfffe9878    # at addr 0x1e028  "x..."
.long     0x00000058    # at addr 0x1e02c  "X..."
.long     0x00000000    # at addr 0x1e030  "...."
.long     0x00000010    # at addr 0x1e034  "...."
.long     0x000004c0    # at addr 0x1e038  "...."
.long     0xfffe98c4    # at addr 0x1e03c  "...."
.long     0x00000058    # at addr 0x1e040  "X..."
.long     0x00000000    # at addr 0x1e044  "...."
.long     0x00000010    # at addr 0x1e048  "...."
.long     0x000004d4    # at addr 0x1e04c  "...."
.long     0xfffe9910    # at addr 0x1e050  "...."
.long     0x00000068    # at addr 0x1e054  "h..."
.long     0x00000000    # at addr 0x1e058  "...."
.long     0x00000010    # at addr 0x1e05c  "...."
.long     0x000004e8    # at addr 0x1e060  "...."
.long     0xfffe996c    # at addr 0x1e064  "l..."
.long     0x00000068    # at addr 0x1e068  "h..."
.long     0x00000000    # at addr 0x1e06c  "...."
.long     0x00000010    # at addr 0x1e070  "...."
.long     0x000004fc    # at addr 0x1e074  "...."
.long     0xfffe99c8    # at addr 0x1e078  "...."
.long     0x000000e9    # at addr 0x1e07c  "...."
.long     0x00000000    # at addr 0x1e080  "...."
.long     0x00000018    # at addr 0x1e084  "...."
.long     0x00000510    # at addr 0x1e088  "...."
.long     0xfffe9aa4    # at addr 0x1e08c  "...."
.long     0x0000004a    # at addr 0x1e090  "J..."
.long     0x100e4100    # at addr 0x1e094  ".A.."
.long     0x0a750283    # at addr 0x1e098  "..u."
.long     0x0b4a080e    # at addr 0x1e09c  "..J."
.long     0x00000010    # at addr 0x1e0a0  "...."
.long     0x0000052c    # at addr 0x1e0a4  ",..."
.long     0xfffe9ad8    # at addr 0x1e0a8  "...."
.long     0x00000080    # at addr 0x1e0ac  "...."
.long     0x00000000    # at addr 0x1e0b0  "...."
.long     0x00000010    # at addr 0x1e0b4  "...."
.long     0x00000540    # at addr 0x1e0b8  "@..."
.long     0xfffe9b44    # at addr 0x1e0bc  "D..."
.long     0x00000068    # at addr 0x1e0c0  "h..."
.long     0x00000000    # at addr 0x1e0c4  "...."
.long     0x00000010    # at addr 0x1e0c8  "...."
.long     0x00000554    # at addr 0x1e0cc  "T..."
.long     0xfffe9ba0    # at addr 0x1e0d0  "...."
.long     0x00000058    # at addr 0x1e0d4  "X..."
.long     0x00000000    # at addr 0x1e0d8  "...."
.long     0x0000004c    # at addr 0x1e0dc  "L..."
.long     0x00000568    # at addr 0x1e0e0  "h..."
.long     0xfffe9bec    # at addr 0x1e0e4  "...."
.long     0x000000eb    # at addr 0x1e0e8  "...."
.long     0x100e4600    # at addr 0x1e0ec  ".F.."
.long     0x0e42028d    # at addr 0x1e0f0  "..B."
.long     0x41038c18    # at addr 0x1e0f4  "...A"
.long     0x0486200e    # at addr 0x1e0f8  ". .."
.long     0x83280e41    # at addr 0x1e0fc  "A.(."
.long     0x300e4705    # at addr 0x1e100  ".G.0"
.long     0x0e0a4002    # at addr 0x1e104  ".@.."
.long     0x200e4428    # at addr 0x1e108  "(D. "
.long     0x42180e41    # at addr 0x1e10c  "A..B"
.long     0x0e42100e    # at addr 0x1e110  "..B."
.long     0x020b4608    # at addr 0x1e114  ".F.."
.long     0x280e0a50    # at addr 0x1e118  "P..("
.long     0x41200e47    # at addr 0x1e11c  "G. A"
.long     0x0e42180e    # at addr 0x1e120  "..B."
.long     0x080e4210    # at addr 0x1e124  ".B.."
.long     0x00000b4c    # at addr 0x1e128  "L..."
.long     0x00000048    # at addr 0x1e12c  "H..."
.long     0x000005b8    # at addr 0x1e130  "...."
.long     0xfffe9c8c    # at addr 0x1e134  "...."
.long     0x000001ce    # at addr 0x1e138  "...."
.long     0x100e4200    # at addr 0x1e13c  ".B.."
.long     0x0e42028f    # at addr 0x1e140  "..B."
.long     0x42038e18    # at addr 0x1e144  "...B"
.long     0x048d200e    # at addr 0x1e148  ". .."
.long     0x8c280e42    # at addr 0x1e14c  "B.(."
.long     0x300e4105    # at addr 0x1e150  ".A.0"
.long     0x0e410686    # at addr 0x1e154  "..A."
.long     0x47078338    # at addr 0x1e158  "8..G"
.long     0x0201e00e    # at addr 0x1e15c  "...."
.long     0x380e0a7c    # at addr 0x1e160  "|..8"
.long     0x41300e41    # at addr 0x1e164  "A.0A"
.long     0x0e42280e    # at addr 0x1e168  ".(B."
.long     0x180e4220    # at addr 0x1e16c  " B.."
.long     0x42100e42    # at addr 0x1e170  "B..B"
.long     0x0b49080e    # at addr 0x1e174  "..I."
.long     0x00000014    # at addr 0x1e178  "...."
.long     0x00000604    # at addr 0x1e17c  "...."
.long     0xfffe9e10    # at addr 0x1e180  "...."
.long     0x00000055    # at addr 0x1e184  "U..."
.long     0x100e6b00    # at addr 0x1e188  ".k.."
.long     0x00080e64    # at addr 0x1e18c  "d..."
.long     0x00000028    # at addr 0x1e190  "(..."
.long     0x0000061c    # at addr 0x1e194  "...."
.long     0xfffe9e58    # at addr 0x1e198  "X..."
.long     0x00000069    # at addr 0x1e19c  "i..."
.long     0x100e4100    # at addr 0x1e1a0  ".A.."
.long     0x0e440286    # at addr 0x1e1a4  "..D."
.long     0x47038318    # at addr 0x1e1a8  "...G"
.long     0x0a60200e    # at addr 0x1e1ac  ". `."
.long     0x0e41180e    # at addr 0x1e1b0  "..A."
.long     0x080e4110    # at addr 0x1e1b4  ".A.."
.long     0x00000b4a    # at addr 0x1e1b8  "J..."
.long     0x00000014    # at addr 0x1e1bc  "...."
.long     0x00000648    # at addr 0x1e1c0  "H..."
.long     0xfffe9e9c    # at addr 0x1e1c4  "...."
.long     0x00000028    # at addr 0x1e1c8  "(..."
.long     0x100e4b00    # at addr 0x1e1cc  ".K.."
.long     0x00080e54    # at addr 0x1e1d0  "T..."
.long     0x00000028    # at addr 0x1e1d4  "(..."
.long     0x00000660    # at addr 0x1e1d8  "`..."
.long     0xfffe9eb4    # at addr 0x1e1dc  "...."
.long     0x000000d2    # at addr 0x1e1e0  "...."
.long     0x100e4100    # at addr 0x1e1e4  ".A.."
.long     0x0e410286    # at addr 0x1e1e8  "..A."
.long     0x47038318    # at addr 0x1e1ec  "...G"
.long     0x0201b00e    # at addr 0x1e1f0  "...."
.long     0x180e0ac1    # at addr 0x1e1f4  "...."
.long     0x41100e41    # at addr 0x1e1f8  "A..A"
.long     0x0b41080e    # at addr 0x1e1fc  "..A."
.long     0x0000001c    # at addr 0x1e200  "...."
.long     0x0000068c    # at addr 0x1e204  "...."
.long     0xfffe9f68    # at addr 0x1e208  "h..."
.long     0x00000064    # at addr 0x1e20c  "d..."
.long     0x100e5400    # at addr 0x1e210  ".T.."
.long     0x080e0a52    # at addr 0x1e214  "R..."
.long     0x0e6b0b4a    # at addr 0x1e218  "J.k."
.long     0x00000008    # at addr 0x1e21c  "...."
.long     0x0000004c    # at addr 0x1e220  "L..."
.long     0x000006ac    # at addr 0x1e224  "...."
.long     0xfffe9fb8    # at addr 0x1e228  "...."
.long     0x00000461    # at addr 0x1e22c  "a..."
.long     0x100e4200    # at addr 0x1e230  ".B.."
.long     0x0e42028f    # at addr 0x1e234  "..B."
.long     0x42038e18    # at addr 0x1e238  "...B"
.long     0x048d200e    # at addr 0x1e23c  ". .."
.long     0x8c280e45    # at addr 0x1e240  "E.(."
.long     0x300e4405    # at addr 0x1e244  ".D.0"
.long     0x0e440686    # at addr 0x1e248  "..D."
.long     0x44078338    # at addr 0x1e24c  "8..D"
.long     0x0301a00e    # at addr 0x1e250  "...."
.long     0x0e0a023a    # at addr 0x1e254  ":..."
.long     0x300e4438    # at addr 0x1e258  "8D.0"
.long     0x42280e41    # at addr 0x1e25c  "A.(B"
.long     0x0e42200e    # at addr 0x1e260  ". B."
.long     0x100e4218    # at addr 0x1e264  ".B.."
.long     0x42080e42    # at addr 0x1e268  "B..B"
.long     0x0000000b    # at addr 0x1e26c  "...."
.long     0x00000054    # at addr 0x1e270  "T..."
.long     0x000006fc    # at addr 0x1e274  "...."
.long     0xfffea3d8    # at addr 0x1e278  "...."
.long     0x00000401    # at addr 0x1e27c  "...."
.long     0x100e4200    # at addr 0x1e280  ".B.."
.long     0x0e42028f    # at addr 0x1e284  "..B."
.long     0x42038e18    # at addr 0x1e288  "...B"
.long     0x048d200e    # at addr 0x1e28c  ". .."
.long     0x8c280e42    # at addr 0x1e290  "B.(."
.long     0x300e4105    # at addr 0x1e294  ".A.0"
.long     0x0e410686    # at addr 0x1e298  "..A."
.long     0x47078338    # at addr 0x1e29c  "8..G"
.long     0x4c20b80e    # at addr 0x1e2a0  ".. L"
.long     0x4940b80e    # at addr 0x1e2a4  "..@I"
.long     0x0341800e    # at addr 0x1e2a8  "..A."
.long     0x0e0a0254    # at addr 0x1e2ac  "T..."
.long     0x300e4138    # at addr 0x1e2b0  "8A.0"
.long     0x42280e41    # at addr 0x1e2b4  "A.(B"
.long     0x0e42200e    # at addr 0x1e2b8  ". B."
.long     0x100e4218    # at addr 0x1e2bc  ".B.."
.long     0x44080e42    # at addr 0x1e2c0  "B..D"
.long     0x0000000b    # at addr 0x1e2c4  "...."
.long     0x00000060    # at addr 0x1e2c8  "`..."
.long     0x00000754    # at addr 0x1e2cc  "T..."
.long     0xfffea790    # at addr 0x1e2d0  "...."
.long     0x00000448    # at addr 0x1e2d4  "H..."
.long     0x100e4200    # at addr 0x1e2d8  ".B.."
.long     0x0e45028f    # at addr 0x1e2dc  "..E."
.long     0x45038e18    # at addr 0x1e2e0  "...E"
.long     0x048d200e    # at addr 0x1e2e4  ". .."
.long     0x8c280e42    # at addr 0x1e2e8  "B.(."
.long     0x300e4405    # at addr 0x1e2ec  ".D.0"
.long     0x0e440686    # at addr 0x1e2f0  "..D."
.long     0x44078338    # at addr 0x1e2f4  "8..D"
.long     0x0e5c500e    # at addr 0x1e2f8  ".P\."
.long     0x600e5958    # at addr 0x1e2fc  "XY.`"
.long     0x41580e59    # at addr 0x1e300  "Y.XA"
.long     0x0a44500e    # at addr 0x1e304  ".PD."
.long     0x0e44380e    # at addr 0x1e308  ".8D."
.long     0x280e4130    # at addr 0x1e30c  "0A.("
.long     0x42200e42    # at addr 0x1e310  "B. B"
.long     0x0e42180e    # at addr 0x1e314  "..B."
.long     0x080e4210    # at addr 0x1e318  ".B.."
.long     0xe7020b46    # at addr 0x1e31c  "F..."
.long     0x0e57580e    # at addr 0x1e320  ".XW."
.long     0x580e6560    # at addr 0x1e324  "`e.X"
.long     0x00500e41    # at addr 0x1e328  "A.P."
.long     0x0000002c    # at addr 0x1e32c  ",..."
.long     0x000007b8    # at addr 0x1e330  "...."
.long     0xfffeab7c    # at addr 0x1e334  "|..."
.long     0x00000195    # at addr 0x1e338  "...."
.long     0x100e4200    # at addr 0x1e33c  ".B.."
.long     0x0e44028c    # at addr 0x1e340  "..D."
.long     0x4a038318    # at addr 0x1e344  "...J"
.long     0x0305c00e    # at addr 0x1e348  "...."
.long     0x0e0a010d    # at addr 0x1e34c  "...."
.long     0x100e4418    # at addr 0x1e350  ".D.."
.long     0x45080e42    # at addr 0x1e354  "B..E"
.long     0x0000000b    # at addr 0x1e358  "...."
.long     0x00000074    # at addr 0x1e35c  "t..."
.long     0x000007e8    # at addr 0x1e360  "...."
.long     0xfffeacec    # at addr 0x1e364  "...."
.long     0x00000a51    # at addr 0x1e368  "Q..."
.long     0x100e4200    # at addr 0x1e36c  ".B.."
.long     0x0e42028f    # at addr 0x1e370  "..B."
.long     0x42038e18    # at addr 0x1e374  "...B"
.long     0x048d200e    # at addr 0x1e378  ". .."
.long     0x8c280e42    # at addr 0x1e37c  "B.(."
.long     0x300e4105    # at addr 0x1e380  ".A.0"
.long     0x0e410686    # at addr 0x1e384  "..A."
.long     0x47078338    # at addr 0x1e388  "8..G"
.long     0x4c20b80e    # at addr 0x1e38c  ".. L"
.long     0x0326e00e    # at addr 0x1e390  "..&."
.long     0xe80e0123    # at addr 0x1e394  "#..."
.long     0xf00e5226    # at addr 0x1e398  "&R.."
.long     0xe80e6526    # at addr 0x1e39c  "&e.."
.long     0xe00e4226    # at addr 0x1e3a0  "&B.."
.long     0x01ed0326    # at addr 0x1e3a4  "&..."
.long     0x41380e0a    # at addr 0x1e3a8  "..8A"
.long     0x0e41300e    # at addr 0x1e3ac  ".0A."
.long     0x200e4228    # at addr 0x1e3b0  "(B. "
.long     0x42180e42    # at addr 0x1e3b4  "B..B"
.long     0x0e42100e    # at addr 0x1e3b8  "..B."
.long     0x030b4808    # at addr 0x1e3bc  ".H.."
.long     0xe80e04ff    # at addr 0x1e3c0  "...."
.long     0xf00e4b26    # at addr 0x1e3c4  "&K.."
.long     0xe80e7326    # at addr 0x1e3c8  "&s.."
.long     0xe00e4126    # at addr 0x1e3cc  "&A.."
.long     0x00000026    # at addr 0x1e3d0  "&..."
.long     0x00000024    # at addr 0x1e3d4  "$..."
.long     0x00000000    # at addr 0x1e3d8  "...."
.long     0x00527a01    # at addr 0x1e3dc  ".zR."
.long     0x01107801    # at addr 0x1e3e0  ".x.."
.long     0x08070c1b    # at addr 0x1e3e4  "...."
.long     0xe00e0190    # at addr 0x1e3e8  "...."
.long     0x86078326    # at addr 0x1e3ec  "&..."
.long     0x8d058c06    # at addr 0x1e3f0  "...."
.long     0x8f038e04    # at addr 0x1e3f4  "...."
.long     0x00000002    # at addr 0x1e3f8  "...."
.long     0x00000010    # at addr 0x1e3fc  "...."
.long     0x0000002c    # at addr 0x1e400  ",..."
.long     0xfffe699c    # at addr 0x1e404  ".i.."
.long     0x00000005    # at addr 0x1e408  "...."
.long     0x00000000    # at addr 0x1e40c  "...."
.long     0x00000030    # at addr 0x1e410  "0..."
.long     0x0000089c    # at addr 0x1e414  "...."
.long     0xfffeb698    # at addr 0x1e418  "...."
.long     0x0000009a    # at addr 0x1e41c  "...."
.long     0x100e4100    # at addr 0x1e420  ".A.."
.long     0x0e410286    # at addr 0x1e424  "..A."
.long     0x47038318    # at addr 0x1e428  "...G"
.long     0x4c20980e    # at addr 0x1e42c  ".. L"
.long     0x4940980e    # at addr 0x1e430  "..@I"
.long     0x0240d00e    # at addr 0x1e434  "..@."
.long     0x180e0a74    # at addr 0x1e438  "t..."
.long     0x41100e41    # at addr 0x1e43c  "A..A"
.long     0x0b41080e    # at addr 0x1e440  "..A."
.long     0x00000028    # at addr 0x1e444  "(..."
.long     0x000008d0    # at addr 0x1e448  "...."
.long     0xfffeb704    # at addr 0x1e44c  "...."
.long     0x000001a7    # at addr 0x1e450  "...."
.long     0x100e4100    # at addr 0x1e454  ".A.."
.long     0x0e440286    # at addr 0x1e458  "..D."
.long     0x47038318    # at addr 0x1e45c  "...G"
.long     0x0205c00e    # at addr 0x1e460  "...."
.long     0x180e0ac2    # at addr 0x1e464  "...."
.long     0x41100e44    # at addr 0x1e468  "D..A"
.long     0x0b45080e    # at addr 0x1e46c  "..E."
.long     0x00000038    # at addr 0x1e470  "8..."
.long     0x000008fc    # at addr 0x1e474  "...."
.long     0xfffeb888    # at addr 0x1e478  "...."
.long     0x000002d6    # at addr 0x1e47c  "...."
.long     0x100e4200    # at addr 0x1e480  ".B.."
.long     0x0e42028d    # at addr 0x1e484  "..B."
.long     0x41038c18    # at addr 0x1e488  "...A"
.long     0x0486200e    # at addr 0x1e48c  ". .."
.long     0x83280e43    # at addr 0x1e490  "C.(."
.long     0x300e4405    # at addr 0x1e494  ".D.0"
.long     0x0a028303    # at addr 0x1e498  "...."
.long     0x0e44280e    # at addr 0x1e49c  ".(D."
.long     0x180e4120    # at addr 0x1e4a0  " A.."
.long     0x42100e42    # at addr 0x1e4a4  "B..B"
.long     0x0b41080e    # at addr 0x1e4a8  "..A."
.long     0x00000060    # at addr 0x1e4ac  "`..."
.long     0x00000938    # at addr 0x1e4b0  "8..."
.long     0xfffebb2c    # at addr 0x1e4b4  ",..."
.long     0x000001b8    # at addr 0x1e4b8  "...."
.long     0x100e4200    # at addr 0x1e4bc  ".B.."
.long     0x0e42028f    # at addr 0x1e4c0  "..B."
.long     0x42038e18    # at addr 0x1e4c4  "...B"
.long     0x048d200e    # at addr 0x1e4c8  ". .."
.long     0x8c280e42    # at addr 0x1e4cc  "B.(."
.long     0x300e4105    # at addr 0x1e4d0  ".A.0"
.long     0x0e410686    # at addr 0x1e4d4  "..A."
.long     0x44078338    # at addr 0x1e4d8  "8..D"
.long     0x3a03500e    # at addr 0x1e4dc  ".P.:"
.long     0x380e0a01    # at addr 0x1e4e0  "...8"
.long     0x41300e41    # at addr 0x1e4e4  "A.0A"
.long     0x0e42280e    # at addr 0x1e4e8  ".(B."
.long     0x180e4220    # at addr 0x1e4ec  " B.."
.long     0x42100e42    # at addr 0x1e4f0  "B..B"
.long     0x0b46080e    # at addr 0x1e4f4  "..F."
.long     0x380e4c02    # at addr 0x1e4f8  ".L.8"
.long     0x41300e46    # at addr 0x1e4fc  "F.0A"
.long     0x0e42280e    # at addr 0x1e500  ".(B."
.long     0x180e4220    # at addr 0x1e504  " B.."
.long     0x42100e42    # at addr 0x1e508  "B..B"
.long     0x0000080e    # at addr 0x1e50c  "...."
.long     0x00000084    # at addr 0x1e510  "...."
.long     0x0000099c    # at addr 0x1e514  "...."
.long     0xfffebc88    # at addr 0x1e518  "...."
.long     0x0000038b    # at addr 0x1e51c  "...."
.long     0x100e4f00    # at addr 0x1e520  ".O.."
.long     0x0e49028f    # at addr 0x1e524  "..I."
.long     0x42038e18    # at addr 0x1e528  "...B"
.long     0x048d200e    # at addr 0x1e52c  ". .."
.long     0x8c280e42    # at addr 0x1e530  "B.(."
.long     0x300e4105    # at addr 0x1e534  ".A.0"
.long     0x0e410686    # at addr 0x1e538  "..A."
.long     0x44078338    # at addr 0x1e53c  "8..D"
.long     0x0f03600e    # at addr 0x1e540  ".`.."
.long     0x380e0a01    # at addr 0x1e544  "...8"
.long     0x300ec341    # at addr 0x1e548  "A..0"
.long     0x280ec641    # at addr 0x1e54c  "A..("
.long     0x200ecc42    # at addr 0x1e550  "B.. "
.long     0x180ecd42    # at addr 0x1e554  "B..."
.long     0x100ece42    # at addr 0x1e558  "B..."
.long     0x080ecf42    # at addr 0x1e55c  "B..."
.long     0xab030b45    # at addr 0x1e560  "E..."
.long     0x380e0a01    # at addr 0x1e564  "...8"
.long     0x41300e41    # at addr 0x1e568  "A.0A"
.long     0x0e42280e    # at addr 0x1e56c  ".(B."
.long     0x180e4220    # at addr 0x1e570  " B.."
.long     0x42100e42    # at addr 0x1e574  "B..B"
.long     0x0b4b080e    # at addr 0x1e578  "..K."
.long     0x380e7602    # at addr 0x1e57c  ".v.8"
.long     0x300ec346    # at addr 0x1e580  "F..0"
.long     0x280ec641    # at addr 0x1e584  "A..("
.long     0x200ecc42    # at addr 0x1e588  "B.. "
.long     0x180ecd42    # at addr 0x1e58c  "B..."
.long     0x100ece42    # at addr 0x1e590  "B..."
.long     0x080ecf42    # at addr 0x1e594  "B..."
.long     0x00000010    # at addr 0x1e598  "...."
.long     0x00000a24    # at addr 0x1e59c  "$..."
.long     0xfffebf90    # at addr 0x1e5a0  "...."
.long     0x00000080    # at addr 0x1e5a4  "...."
.long     0x00000000    # at addr 0x1e5a8  "...."
.long     0x00000010    # at addr 0x1e5ac  "...."
.long     0x00000a38    # at addr 0x1e5b0  "8..."
.long     0xfffebffc    # at addr 0x1e5b4  "...."
.long     0x00000036    # at addr 0x1e5b8  "6..."
.long     0x00000000    # at addr 0x1e5bc  "...."
.long     0x00000010    # at addr 0x1e5c0  "...."
.long     0x00000a4c    # at addr 0x1e5c4  "L..."
.long     0xfffec028    # at addr 0x1e5c8  "(..."
.long     0x00000078    # at addr 0x1e5cc  "x..."
.long     0x00000000    # at addr 0x1e5d0  "...."
.long     0x00000010    # at addr 0x1e5d4  "...."
.long     0x00000a60    # at addr 0x1e5d8  "`..."
.long     0xfffec094    # at addr 0x1e5dc  "...."
.long     0x00000078    # at addr 0x1e5e0  "x..."
.long     0x00000000    # at addr 0x1e5e4  "...."
.long     0x00000010    # at addr 0x1e5e8  "...."
.long     0x00000a74    # at addr 0x1e5ec  "t..."
.long     0xfffec100    # at addr 0x1e5f0  "...."
.long     0x00000080    # at addr 0x1e5f4  "...."
.long     0x00000000    # at addr 0x1e5f8  "...."
.long     0x00000010    # at addr 0x1e5fc  "...."
.long     0x00000a88    # at addr 0x1e600  "...."
.long     0xfffec16c    # at addr 0x1e604  "l..."
.long     0x00000036    # at addr 0x1e608  "6..."
.long     0x00000000    # at addr 0x1e60c  "...."
.long     0x00000010    # at addr 0x1e610  "...."
.long     0x00000a9c    # at addr 0x1e614  "...."
.long     0xfffec198    # at addr 0x1e618  "...."
.long     0x00000036    # at addr 0x1e61c  "6..."
.long     0x00000000    # at addr 0x1e620  "...."
.long     0x00000010    # at addr 0x1e624  "...."
.long     0x00000ab0    # at addr 0x1e628  "...."
.long     0xfffec1c4    # at addr 0x1e62c  "...."
.long     0x00000090    # at addr 0x1e630  "...."
.long     0x00000000    # at addr 0x1e634  "...."
.long     0x00000010    # at addr 0x1e638  "...."
.long     0x00000ac4    # at addr 0x1e63c  "...."
.long     0xfffec240    # at addr 0x1e640  "@..."
.long     0x00000080    # at addr 0x1e644  "...."
.long     0x00000000    # at addr 0x1e648  "...."
.long     0x00000028    # at addr 0x1e64c  "(..."
.long     0x00000ad8    # at addr 0x1e650  "...."
.long     0xfffec2ac    # at addr 0x1e654  "...."
.long     0x000000c1    # at addr 0x1e658  "...."
.long     0x100e4100    # at addr 0x1e65c  ".A.."
.long     0x0e410286    # at addr 0x1e660  "..A."
.long     0x46038318    # at addr 0x1e664  "...F"
.long     0x8a02400e    # at addr 0x1e668  ".@.."
.long     0x41180e0a    # at addr 0x1e66c  "...A"
.long     0x0e41100e    # at addr 0x1e670  "..A."
.long     0x000b4408    # at addr 0x1e674  ".D.."
.long     0x0000002c    # at addr 0x1e678  ",..."
.long     0x00000b04    # at addr 0x1e67c  "...."
.long     0xfffec350    # at addr 0x1e680  "P..."
.long     0x00000ee4    # at addr 0x1e684  "...."
.long     0x100e4100    # at addr 0x1e688  ".A.."
.long     0x0d430286    # at addr 0x1e68c  "..C."
.long     0x038f4206    # at addr 0x1e690  ".B.."
.long     0x8d048e47    # at addr 0x1e694  "G..."
.long     0x068c4505    # at addr 0x1e698  ".E.."
.long     0x0307834b    # at addr 0x1e69c  "K..."
.long     0x0c0a022a    # at addr 0x1e6a0  "*..."
.long     0x0b490807    # at addr 0x1e6a4  "..I."
.long     0x0000005c    # at addr 0x1e6a8  "\..."
.long     0x00000b34    # at addr 0x1e6ac  "4..."
.long     0xfffed210    # at addr 0x1e6b0  "...."
.long     0x000006f1    # at addr 0x1e6b4  "...."
.long     0x100e4200    # at addr 0x1e6b8  ".B.."
.long     0x0e42028f    # at addr 0x1e6bc  "..B."
.long     0x45038e18    # at addr 0x1e6c0  "...E"
.long     0x048d200e    # at addr 0x1e6c4  ". .."
.long     0x8c280e45    # at addr 0x1e6c8  "E.(."
.long     0x300e4105    # at addr 0x1e6cc  ".A.0"
.long     0x0e410686    # at addr 0x1e6d0  "..A."
.long     0x47078338    # at addr 0x1e6d4  "8..G"
.long     0x0307900e    # at addr 0x1e6d8  "...."
.long     0x0e0a0138    # at addr 0x1e6dc  "8..."
.long     0x300e4138    # at addr 0x1e6e0  "8A.0"
.long     0x42280e41    # at addr 0x1e6e4  "A.(B"
.long     0x0e42200e    # at addr 0x1e6e8  ". B."
.long     0x100e4218    # at addr 0x1e6ec  ".B.."
.long     0x47080e42    # at addr 0x1e6f0  "B..G"
.long     0x0ed9020b    # at addr 0x1e6f4  "...."
.long     0x0e490798    # at addr 0x1e6f8  "..I."
.long     0x0e7607a0    # at addr 0x1e6fc  "..v."
.long     0x0e410798    # at addr 0x1e700  "..A."
.long     0x00000790    # at addr 0x1e704  "...."
.long     0x00000010    # at addr 0x1e708  "...."
.long     0x00000b94    # at addr 0x1e70c  "...."
.long     0xfffed8b0    # at addr 0x1e710  "...."
.long     0x00000046    # at addr 0x1e714  "F..."
.long     0x00000000    # at addr 0x1e718  "...."
.long     0x00000010    # at addr 0x1e71c  "...."
.long     0x00000ba8    # at addr 0x1e720  "...."
.long     0xfffed8ec    # at addr 0x1e724  "...."
.long     0x00000046    # at addr 0x1e728  "F..."
.long     0x00000000    # at addr 0x1e72c  "...."
.long     0x00000010    # at addr 0x1e730  "...."
.long     0x00000bbc    # at addr 0x1e734  "...."
.long     0xfffed928    # at addr 0x1e738  "(..."
.long     0x00000046    # at addr 0x1e73c  "F..."
.long     0x00000000    # at addr 0x1e740  "...."
.long     0x00000010    # at addr 0x1e744  "...."
.long     0x00000bd0    # at addr 0x1e748  "...."
.long     0xfffed964    # at addr 0x1e74c  "d..."
.long     0x00000036    # at addr 0x1e750  "6..."
.long     0x00000000    # at addr 0x1e754  "...."
.long     0x00000010    # at addr 0x1e758  "...."
.long     0x00000be4    # at addr 0x1e75c  "...."
.long     0xfffed990    # at addr 0x1e760  "...."
.long     0x00000046    # at addr 0x1e764  "F..."
.long     0x00000000    # at addr 0x1e768  "...."
.long     0x00000010    # at addr 0x1e76c  "...."
.long     0x00000bf8    # at addr 0x1e770  "...."
.long     0xfffed9cc    # at addr 0x1e774  "...."
.long     0x00000036    # at addr 0x1e778  "6..."
.long     0x00000000    # at addr 0x1e77c  "...."
.long     0x00000010    # at addr 0x1e780  "...."
.long     0x00000c0c    # at addr 0x1e784  "...."
.long     0xfffed9f8    # at addr 0x1e788  "...."
.long     0x00000088    # at addr 0x1e78c  "...."
.long     0x00000000    # at addr 0x1e790  "...."
.long     0x00000010    # at addr 0x1e794  "...."
.long     0x00000c20    # at addr 0x1e798  " ..."
.long     0xfffeda74    # at addr 0x1e79c  "t..."
.long     0x00000080    # at addr 0x1e7a0  "...."
.long     0x00000000    # at addr 0x1e7a4  "...."
.long     0x00000010    # at addr 0x1e7a8  "...."
.long     0x00000c34    # at addr 0x1e7ac  "4..."
.long     0xfffedae0    # at addr 0x1e7b0  "...."
.long     0x00000090    # at addr 0x1e7b4  "...."
.long     0x00000000    # at addr 0x1e7b8  "...."
.long     0x00000010    # at addr 0x1e7bc  "...."
.long     0x00000c48    # at addr 0x1e7c0  "H..."
.long     0xfffedb5c    # at addr 0x1e7c4  "\..."
.long     0x00000088    # at addr 0x1e7c8  "...."
.long     0x00000000    # at addr 0x1e7cc  "...."
.long     0x00000010    # at addr 0x1e7d0  "...."
.long     0x00000c5c    # at addr 0x1e7d4  "\..."
.long     0xfffedbd8    # at addr 0x1e7d8  "...."
.long     0x00000098    # at addr 0x1e7dc  "...."
.long     0x00000000    # at addr 0x1e7e0  "...."
.long     0x00000010    # at addr 0x1e7e4  "...."
.long     0x00000c70    # at addr 0x1e7e8  "p..."
.long     0xfffedc64    # at addr 0x1e7ec  "d..."
.long     0x00000080    # at addr 0x1e7f0  "...."
.long     0x00000000    # at addr 0x1e7f4  "...."
.long     0x00000010    # at addr 0x1e7f8  "...."
.long     0x00000c84    # at addr 0x1e7fc  "...."
.long     0xfffedcd0    # at addr 0x1e800  "...."
.long     0x00000036    # at addr 0x1e804  "6..."
.long     0x00000000    # at addr 0x1e808  "...."
.long     0x00000010    # at addr 0x1e80c  "...."
.long     0x00000c98    # at addr 0x1e810  "...."
.long     0xfffedcfc    # at addr 0x1e814  "...."
.long     0x00000046    # at addr 0x1e818  "F..."
.long     0x00000000    # at addr 0x1e81c  "...."
.long     0x00000010    # at addr 0x1e820  "...."
.long     0x00000cac    # at addr 0x1e824  "...."
.long     0xfffedd38    # at addr 0x1e828  "8..."
.long     0x00000046    # at addr 0x1e82c  "F..."
.long     0x00000000    # at addr 0x1e830  "...."
.long     0x00000010    # at addr 0x1e834  "...."
.long     0x00000cc0    # at addr 0x1e838  "...."
.long     0xfffedd74    # at addr 0x1e83c  "t..."
.long     0x00000046    # at addr 0x1e840  "F..."
.long     0x00000000    # at addr 0x1e844  "...."
.long     0x00000010    # at addr 0x1e848  "...."
.long     0x00000cd4    # at addr 0x1e84c  "...."
.long     0xfffeddb0    # at addr 0x1e850  "...."
.long     0x00000036    # at addr 0x1e854  "6..."
.long     0x00000000    # at addr 0x1e858  "...."
.long     0x00000010    # at addr 0x1e85c  "...."
.long     0x00000ce8    # at addr 0x1e860  "...."
.long     0xfffedddc    # at addr 0x1e864  "...."
.long     0x00000046    # at addr 0x1e868  "F..."
.long     0x00000000    # at addr 0x1e86c  "...."
.long     0x00000010    # at addr 0x1e870  "...."
.long     0x00000cfc    # at addr 0x1e874  "...."
.long     0xfffede18    # at addr 0x1e878  "...."
.long     0x00000088    # at addr 0x1e87c  "...."
.long     0x00000000    # at addr 0x1e880  "...."
.long     0x00000010    # at addr 0x1e884  "...."
.long     0x00000d10    # at addr 0x1e888  "...."
.long     0xfffede94    # at addr 0x1e88c  "...."
.long     0x00000088    # at addr 0x1e890  "...."
.long     0x00000000    # at addr 0x1e894  "...."
.long     0x00000010    # at addr 0x1e898  "...."
.long     0x00000d24    # at addr 0x1e89c  "$..."
.long     0xfffedf10    # at addr 0x1e8a0  "...."
.long     0x00000098    # at addr 0x1e8a4  "...."
.long     0x00000000    # at addr 0x1e8a8  "...."
.long     0x00000034    # at addr 0x1e8ac  "4..."
.long     0x00000d38    # at addr 0x1e8b0  "8..."
.long     0xfffedf9c    # at addr 0x1e8b4  "...."
.long     0x00000065    # at addr 0x1e8b8  "e..."
.long     0x100e4600    # at addr 0x1e8bc  ".F.."
.long     0x0e44028c    # at addr 0x1e8c0  "..D."
.long     0x41038618    # at addr 0x1e8c4  "...A"
.long     0x0483200e    # at addr 0x1e8c8  ". .."
.long     0x0e0a4c02    # at addr 0x1e8cc  ".L.."
.long     0x100e4118    # at addr 0x1e8d0  ".A.."
.long     0x46080e42    # at addr 0x1e8d4  "B..F"
.long     0x180e410b    # at addr 0x1e8d8  ".A.."
.long     0x42100e41    # at addr 0x1e8dc  "A..B"
.long     0x0000080e    # at addr 0x1e8e0  "...."
.long     0x00000034    # at addr 0x1e8e4  "4..."
.long     0x00000d70    # at addr 0x1e8e8  "p..."
.long     0xfffedfd4    # at addr 0x1e8ec  "...."
.long     0x00000065    # at addr 0x1e8f0  "e..."
.long     0x100e4600    # at addr 0x1e8f4  ".F.."
.long     0x0e49028c    # at addr 0x1e8f8  "..I."
.long     0x41038618    # at addr 0x1e8fc  "...A"
.long     0x0483200e    # at addr 0x1e900  ". .."
.long     0x0e0a4802    # at addr 0x1e904  ".H.."
.long     0x100e4118    # at addr 0x1e908  ".A.."
.long     0x45080e42    # at addr 0x1e90c  "B..E"
.long     0x180e410b    # at addr 0x1e910  ".A.."
.long     0x42100e41    # at addr 0x1e914  "A..B"
.long     0x0000080e    # at addr 0x1e918  "...."
.long     0x00000038    # at addr 0x1e91c  "8..."
.long     0x00000da8    # at addr 0x1e920  "...."
.long     0xfffee00c    # at addr 0x1e924  "...."
.long     0x000000b8    # at addr 0x1e928  "...."
.long     0x100e4600    # at addr 0x1e92c  ".F.."
.long     0x0e41028c    # at addr 0x1e930  "..A."
.long     0x44038618    # at addr 0x1e934  "...D"
.long     0x0483200e    # at addr 0x1e938  ". .."
.long     0x180e0a7c    # at addr 0x1e93c  "|..."
.long     0x42100e44    # at addr 0x1e940  "D..B"
.long     0x0b43080e    # at addr 0x1e944  "..C."
.long     0x0e0a5102    # at addr 0x1e948  ".Q.."
.long     0x100e4118    # at addr 0x1e94c  ".A.."
.long     0x4c080e42    # at addr 0x1e950  "B..L"
.long     0x0000000b    # at addr 0x1e954  "...."
.long     0x00000038    # at addr 0x1e958  "8..."
.long     0x00000de4    # at addr 0x1e95c  "...."
.long     0xfffee090    # at addr 0x1e960  "...."
.long     0x000000b8    # at addr 0x1e964  "...."
.long     0x100e4600    # at addr 0x1e968  ".F.."
.long     0x0e41028c    # at addr 0x1e96c  "..A."
.long     0x44038618    # at addr 0x1e970  "...D"
.long     0x0483200e    # at addr 0x1e974  ". .."
.long     0x180e0a7c    # at addr 0x1e978  "|..."
.long     0x42100e44    # at addr 0x1e97c  "D..B"
.long     0x0b43080e    # at addr 0x1e980  "..C."
.long     0x0e0a5102    # at addr 0x1e984  ".Q.."
.long     0x100e4118    # at addr 0x1e988  ".A.."
.long     0x4c080e42    # at addr 0x1e98c  "B..L"
.long     0x0000000b    # at addr 0x1e990  "...."
.long     0x00000034    # at addr 0x1e994  "4..."
.long     0x00000e20    # at addr 0x1e998  " ..."
.long     0xfffee114    # at addr 0x1e99c  "...."
.long     0x0000007c    # at addr 0x1e9a0  "|..."
.long     0x100e4600    # at addr 0x1e9a4  ".F.."
.long     0x0e4a028d    # at addr 0x1e9a8  "..J."
.long     0x41038c18    # at addr 0x1e9ac  "...A"
.long     0x0486200e    # at addr 0x1e9b0  ". .."
.long     0x0e0a4202    # at addr 0x1e9b4  ".B.."
.long     0x100e4218    # at addr 0x1e9b8  ".B.."
.long     0x49080e42    # at addr 0x1e9bc  "B..I"
.long     0x180e4d0b    # at addr 0x1e9c0  ".M.."
.long     0x42100e48    # at addr 0x1e9c4  "H..B"
.long     0x0000080e    # at addr 0x1e9c8  "...."
.long     0x00000034    # at addr 0x1e9cc  "4..."
.long     0x00000e58    # at addr 0x1e9d0  "X..."
.long     0xfffee15c    # at addr 0x1e9d4  "\..."
.long     0x0000007c    # at addr 0x1e9d8  "|..."
.long     0x100e4600    # at addr 0x1e9dc  ".F.."
.long     0x0e45028d    # at addr 0x1e9e0  "..E."
.long     0x41038c18    # at addr 0x1e9e4  "...A"
.long     0x0486200e    # at addr 0x1e9e8  ". .."
.long     0x0e0a4702    # at addr 0x1e9ec  ".G.."
.long     0x100e4218    # at addr 0x1e9f0  ".B.."
.long     0x49080e42    # at addr 0x1e9f4  "B..I"
.long     0x180e4d0b    # at addr 0x1e9f8  ".M.."
.long     0x42100e48    # at addr 0x1e9fc  "H..B"
.long     0x0000080e    # at addr 0x1ea00  "...."
.long     0x0000004c    # at addr 0x1ea04  "L..."
.long     0x00000e90    # at addr 0x1ea08  "...."
.long     0xfffee1a4    # at addr 0x1ea0c  "...."
.long     0x000000eb    # at addr 0x1ea10  "...."
.long     0x100e4600    # at addr 0x1ea14  ".F.."
.long     0x0e42028d    # at addr 0x1ea18  "..B."
.long     0x41038c18    # at addr 0x1ea1c  "...A"
.long     0x0486200e    # at addr 0x1ea20  ". .."
.long     0x83280e41    # at addr 0x1ea24  "A.(."
.long     0x300e4705    # at addr 0x1ea28  ".G.0"
.long     0x0e0a4002    # at addr 0x1ea2c  ".@.."
.long     0x200e4428    # at addr 0x1ea30  "(D. "
.long     0x42180e41    # at addr 0x1ea34  "A..B"
.long     0x0e42100e    # at addr 0x1ea38  "..B."
.long     0x020b4608    # at addr 0x1ea3c  ".F.."
.long     0x280e0a50    # at addr 0x1ea40  "P..("
.long     0x41200e47    # at addr 0x1ea44  "G. A"
.long     0x0e42180e    # at addr 0x1ea48  "..B."
.long     0x080e4210    # at addr 0x1ea4c  ".B.."
.long     0x00000b4c    # at addr 0x1ea50  "L..."
.long     0x00000028    # at addr 0x1ea54  "(..."
.long     0x00000ee0    # at addr 0x1ea58  "...."
.long     0xfffee244    # at addr 0x1ea5c  "D..."
.long     0x00000734    # at addr 0x1ea60  "4..."
.long     0x100e4600    # at addr 0x1ea64  ".F.."
.long     0x0e47028d    # at addr 0x1ea68  "..G."
.long     0x41038c18    # at addr 0x1ea6c  "...A"
.long     0x0486200e    # at addr 0x1ea70  ". .."
.long     0x83280e43    # at addr 0x1ea74  "C.(."
.long     0xb00e4705    # at addr 0x1ea78  ".G.."
.long     0x00000001    # at addr 0x1ea7c  "...."
.long     0x00000068    # at addr 0x1ea80  "h..."
.long     0x00000f0c    # at addr 0x1ea84  "...."
.long     0xfffe6368    # at addr 0x1ea88  "hc.."
.long     0x000019dd    # at addr 0x1ea8c  "...."
.long     0x100e4600    # at addr 0x1ea90  ".F.."
.long     0x0e42028f    # at addr 0x1ea94  "..B."
.long     0x42038e18    # at addr 0x1ea98  "...B"
.long     0x048d200e    # at addr 0x1ea9c  ". .."
.long     0x8c280e42    # at addr 0x1eaa0  "B.(."
.long     0x300e4405    # at addr 0x1eaa4  ".D.0"
.long     0x0e440686    # at addr 0x1eaa8  "..D."
.long     0x44078338    # at addr 0x1eaac  "8..D"
.long     0x0301800e    # at addr 0x1eab0  "...."
.long     0x880e0895    # at addr 0x1eab4  "...."
.long     0x900e4e01    # at addr 0x1eab8  ".N.."
.long     0x880e4601    # at addr 0x1eabc  ".F.."
.long     0x800e4101    # at addr 0x1eac0  ".A.."
.long     0x017f0301    # at addr 0x1eac4  "..."
.long     0x01880e0a    # at addr 0x1eac8  "...."
.long     0x01900e52    # at addr 0x1eacc  "R..."
.long     0x35030b5a    # at addr 0x1ead0  "Z..5"
.long     0x380e0a04    # at addr 0x1ead4  "...8"
.long     0x41300e41    # at addr 0x1ead8  "A.0A"
.long     0x0e42280e    # at addr 0x1eadc  ".(B."
.long     0x180e4220    # at addr 0x1eae0  " B.."
.long     0x42100e42    # at addr 0x1eae4  "B..B"
.long     0x0b41080e    # at addr 0x1eae8  "..A."
.long     0x00000024    # at addr 0x1eaec  "$..."
.long     0x00000000    # at addr 0x1eaf0  "...."
.long     0x00527a01    # at addr 0x1eaf4  ".zR."
.long     0x01107801    # at addr 0x1eaf8  ".x.."
.long     0x08070c1b    # at addr 0x1eafc  "...."
.long     0x800e0190    # at addr 0x1eb00  "...."
.long     0x86078301    # at addr 0x1eb04  "...."
.long     0x8d058c06    # at addr 0x1eb08  "...."
.long     0x8f038e04    # at addr 0x1eb0c  "...."
.long     0x00000002    # at addr 0x1eb10  "...."
.long     0x00000010    # at addr 0x1eb14  "...."
.long     0x0000002c    # at addr 0x1eb18  ",..."
.long     0xfffe6289    # at addr 0x1eb1c  ".b.."
.long     0x00000005    # at addr 0x1eb20  "...."
.long     0x00000000    # at addr 0x1eb24  "...."
.long     0x0000004c    # at addr 0x1eb28  "L..."
.long     0x00000fb4    # at addr 0x1eb2c  "...."
.long     0xfffee8b0    # at addr 0x1eb30  "...."
.long     0x000000ef    # at addr 0x1eb34  "...."
.long     0x100e4600    # at addr 0x1eb38  ".F.."
.long     0x0e47028f    # at addr 0x1eb3c  "..G."
.long     0x4c038e18    # at addr 0x1eb40  "...L"
.long     0x048d200e    # at addr 0x1eb44  ". .."
.long     0x8c280e4c    # at addr 0x1eb48  "L.(."
.long     0x300e4405    # at addr 0x1eb4c  ".D.0"
.long     0x0e410686    # at addr 0x1eb50  "..A."
.long     0x48078338    # at addr 0x1eb54  "8..H"
.long     0x5d02400e    # at addr 0x1eb58  ".@.]"
.long     0x44380e0a    # at addr 0x1eb5c  "..8D"
.long     0x0e41300e    # at addr 0x1eb60  ".0A."
.long     0x200e4228    # at addr 0x1eb64  "(B. "
.long     0x42180e42    # at addr 0x1eb68  "B..B"
.long     0x0e42100e    # at addr 0x1eb6c  "..B."
.long     0x000b4408    # at addr 0x1eb70  ".D.."
.long     0x00000000    # at addr 0x1eb74  "...."
.long     0x00000010    # at addr 0x1eb78  "...."
.long     0x00001004    # at addr 0x1eb7c  "...."
.long     0xfffee950    # at addr 0x1eb80  "P..."
.long     0x0000000e    # at addr 0x1eb84  "...."
.long     0x00000000    # at addr 0x1eb88  "...."
.long     0x00000048    # at addr 0x1eb8c  "H..."
.long     0x00001018    # at addr 0x1eb90  "...."
.long     0xfffee94c    # at addr 0x1eb94  "L..."
.long     0x00000110    # at addr 0x1eb98  "...."
.long     0x100e4600    # at addr 0x1eb9c  ".F.."
.long     0x0e42028f    # at addr 0x1eba0  "..B."
.long     0x45038e18    # at addr 0x1eba4  "...E"
.long     0x048d200e    # at addr 0x1eba8  ". .."
.long     0x8c280e45    # at addr 0x1ebac  "E.(."
.long     0x300e4105    # at addr 0x1ebb0  ".A.0"
.long     0x0e440686    # at addr 0x1ebb4  "..D."
.long     0x47078338    # at addr 0x1ebb8  "8..G"
.long     0xcf02600e    # at addr 0x1ebbc  ".`.."
.long     0x41380e0a    # at addr 0x1ebc0  "..8A"
.long     0x0e41300e    # at addr 0x1ebc4  ".0A."
.long     0x200e4228    # at addr 0x1ebc8  "(B. "
.long     0x42180e42    # at addr 0x1ebcc  "B..B"
.long     0x0e42100e    # at addr 0x1ebd0  "..B."
.long     0x000b4908    # at addr 0x1ebd4  ".I.."
.long     0x00000038    # at addr 0x1ebd8  "8..."
.long     0x00001064    # at addr 0x1ebdc  "d..."
.long     0xfffeea10    # at addr 0x1ebe0  "...."
.long     0x00000083    # at addr 0x1ebe4  "...."
.long     0x100e4600    # at addr 0x1ebe8  ".F.."
.long     0x0e45028d    # at addr 0x1ebec  "..E."
.long     0x41038c18    # at addr 0x1ebf0  "...A"
.long     0x0486200e    # at addr 0x1ebf4  ". .."
.long     0x83280e44    # at addr 0x1ebf8  "D.(."
.long     0x300e4405    # at addr 0x1ebfc  ".D.0"
.long     0x280e0a7f    # at addr 0x1ec00  "..("
.long     0x44200e47    # at addr 0x1ec04  "G. D"
.long     0x0e44180e    # at addr 0x1ec08  "..D."
.long     0x080e4610    # at addr 0x1ec0c  ".F.."
.long     0x00000b48    # at addr 0x1ec10  "H..."
.long     0x0000005c    # at addr 0x1ec14  "\..."
.long     0x000010a0    # at addr 0x1ec18  "...."
.long     0xfffeea64    # at addr 0x1ec1c  "d..."
.long     0x00000128    # at addr 0x1ec20  "(..."
.long     0x100e4600    # at addr 0x1ec24  ".F.."
.long     0x0e49028f    # at addr 0x1ec28  "..I."
.long     0x45038e18    # at addr 0x1ec2c  "...E"
.long     0x048d200e    # at addr 0x1ec30  ". .."
.long     0x8c280e4a    # at addr 0x1ec34  "J.(."
.long     0x300e4105    # at addr 0x1ec38  ".A.0"
.long     0x0e4b0686    # at addr 0x1ec3c  "..K."
.long     0x47078338    # at addr 0x1ec40  "8..G"
.long     0xcf02500e    # at addr 0x1ec44  ".P.."
.long     0x41380e0a    # at addr 0x1ec48  "..8A"
.long     0x0e41300e    # at addr 0x1ec4c  ".0A."
.long     0x200e4228    # at addr 0x1ec50  "(B. "
.long     0x42180e42    # at addr 0x1ec54  "B..B"
.long     0x0e42100e    # at addr 0x1ec58  "..B."
.long     0x440b4608    # at addr 0x1ec5c  ".F.D"
.long     0x0e46380e    # at addr 0x1ec60  ".8F."
.long     0x280e4130    # at addr 0x1ec64  "0A.("
.long     0x42200e42    # at addr 0x1ec68  "B. B"
.long     0x0e42180e    # at addr 0x1ec6c  "..B."
.long     0x080e4210    # at addr 0x1ec70  ".B.."
.long     0x00000048    # at addr 0x1ec74  "H..."
.long     0x00001100    # at addr 0x1ec78  "...."
.long     0xfffeeb34    # at addr 0x1ec7c  "4..."
.long     0x00000077    # at addr 0x1ec80  "w..."
.long     0x100e4600    # at addr 0x1ec84  ".F.."
.long     0x0e45028f    # at addr 0x1ec88  "..E."
.long     0x45038e18    # at addr 0x1ec8c  "...E"
.long     0x048d200e    # at addr 0x1ec90  ". .."
.long     0x8c280e48    # at addr 0x1ec94  "H.(."
.long     0x300e4705    # at addr 0x1ec98  ".G.0"
.long     0x0e470686    # at addr 0x1ec9c  "..G."
.long     0x4a078338    # at addr 0x1eca0  "8..J"
.long     0x0a4e400e    # at addr 0x1eca4  ".@N."
.long     0x0e41380e    # at addr 0x1eca8  ".8A."
.long     0x280e4130    # at addr 0x1ecac  "0A.("
.long     0x42200e42    # at addr 0x1ecb0  "B. B"
.long     0x0e42180e    # at addr 0x1ecb4  "..B."
.long     0x080e4210    # at addr 0x1ecb8  ".B.."
.long     0x00000b48    # at addr 0x1ecbc  "H..."
.long     0x0000003c    # at addr 0x1ecc0  "<..."
.long     0x0000114c    # at addr 0x1ecc4  "L..."
.long     0xfffeeb68    # at addr 0x1ecc8  "h..."
.long     0x00000055    # at addr 0x1eccc  "U..."
.long     0x100e4600    # at addr 0x1ecd0  ".F.."
.long     0x0e42028e    # at addr 0x1ecd4  "..B."
.long     0x42038d18    # at addr 0x1ecd8  "...B"
.long     0x048c200e    # at addr 0x1ecdc  ". .."
.long     0x86280e41    # at addr 0x1ece0  "A.(."
.long     0x300e4105    # at addr 0x1ece4  ".A.0"
.long     0x0e7e0683    # at addr 0x1ece8  "..~."
.long     0x200e4428    # at addr 0x1ecec  "(D. "
.long     0x42180e42    # at addr 0x1ecf0  "B..B"
.long     0x0e42100e    # at addr 0x1ecf4  "..B."
.long     0x00000008    # at addr 0x1ecf8  "...."
.long     0x00000000    # at addr 0x1ecfc  "...."
.long     0x00000014    # at addr 0x1ed00  "...."
.long     0x0000118c    # at addr 0x1ed04  "...."
.long     0xfffeeb88    # at addr 0x1ed08  "...."
.long     0x0000006b    # at addr 0x1ed0c  "k..."
.long     0x00000000    # at addr 0x1ed10  "...."
.long     0x00000000    # at addr 0x1ed14  "...."
.long     0x0000004c    # at addr 0x1ed18  "L..."
.long     0x000011a4    # at addr 0x1ed1c  "...."
.long     0xfffeebe0    # at addr 0x1ed20  "...."
.long     0x000006be    # at addr 0x1ed24  "...."
.long     0x100e4600    # at addr 0x1ed28  ".F.."
.long     0x0e42028f    # at addr 0x1ed2c  "..B."
.long     0x42038e18    # at addr 0x1ed30  "...B"
.long     0x048d200e    # at addr 0x1ed34  ". .."
.long     0x8c280e42    # at addr 0x1ed38  "B.(."
.long     0x300e4105    # at addr 0x1ed3c  ".A.0"
.long     0x0e460686    # at addr 0x1ed40  "..F."
.long     0x47078338    # at addr 0x1ed44  "8..G"
.long     0x0302a00e    # at addr 0x1ed48  "...."
.long     0x0e0a0254    # at addr 0x1ed4c  "T..."
.long     0x300e4438    # at addr 0x1ed50  "8D.0"
.long     0x42280e41    # at addr 0x1ed54  "A.(B"
.long     0x0e42200e    # at addr 0x1ed58  ". B."
.long     0x100e4218    # at addr 0x1ed5c  ".B.."
.long     0x41080e42    # at addr 0x1ed60  "B..A"
.long     0x0000000b    # at addr 0x1ed64  "...."
.long     0x00000010    # at addr 0x1ed68  "...."
.long     0x000011f4    # at addr 0x1ed6c  "...."
.long     0xfffef250    # at addr 0x1ed70  "P..."
.long     0x0000000c    # at addr 0x1ed74  "...."
.long     0x00000000    # at addr 0x1ed78  "...."
.long     0x00000010    # at addr 0x1ed7c  "...."
.long     0x00001208    # at addr 0x1ed80  "...."
.long     0xfffef24c    # at addr 0x1ed84  "L..."
.long     0x0000000c    # at addr 0x1ed88  "...."
.long     0x00000000    # at addr 0x1ed8c  "...."
.long     0x0000002c    # at addr 0x1ed90  ",..."
.long     0x0000121c    # at addr 0x1ed94  "...."
.long     0xfffef248    # at addr 0x1ed98  "H..."
.long     0x000000aa    # at addr 0x1ed9c  "...."
.long     0x100e4600    # at addr 0x1eda0  ".F.."
.long     0x0e41028c    # at addr 0x1eda4  "..A."
.long     0x44038318    # at addr 0x1eda8  "...D"
.long     0x0a7a200e    # at addr 0x1edac  ". z."
.long     0x0e41180e    # at addr 0x1edb0  "..A."
.long     0x080e4210    # at addr 0x1edb4  ".B.."
.long     0x00000b41    # at addr 0x1edb8  "A..."
.long     0x00000000    # at addr 0x1edbc  "...."
.long     0x00000024    # at addr 0x1edc0  "$..."
.long     0x0000124c    # at addr 0x1edc4  "L..."
.long     0xfffef2c8    # at addr 0x1edc8  "...."
.long     0x0000003a    # at addr 0x1edcc  ":..."
.long     0x100e4500    # at addr 0x1edd0  ".E.."
.long     0x0e430286    # at addr 0x1edd4  "..C."
.long     0x47038318    # at addr 0x1edd8  "...G"
.long     0x0e68200e    # at addr 0x1eddc  ". h."
.long     0x100e4118    # at addr 0x1ede0  ".A.."
.long     0x00080e41    # at addr 0x1ede4  "A..."
.long     0x0000002c    # at addr 0x1ede8  ",..."
.long     0x00001274    # at addr 0x1edec  "t..."
.long     0xfffef2e0    # at addr 0x1edf0  "...."
.long     0x00000062    # at addr 0x1edf4  "b..."
.long     0x100e4500    # at addr 0x1edf8  ".E.."
.long     0x0e440286    # at addr 0x1edfc  "..D."
.long     0x44038318    # at addr 0x1ee00  "...D"
.long     0x4202200e    # at addr 0x1ee04  ". .B"
.long     0x44180e0a    # at addr 0x1ee08  "...D"
.long     0x0e41100e    # at addr 0x1ee0c  "..A."
.long     0x000b4408    # at addr 0x1ee10  ".D.."
.long     0x00000000    # at addr 0x1ee14  "...."
.long     0x00000010    # at addr 0x1ee18  "...."
.long     0x000012a4    # at addr 0x1ee1c  "...."
.long     0xfffef320    # at addr 0x1ee20  " ..."
.long     0x0000005d    # at addr 0x1ee24  "]..."
.long     0x00000000    # at addr 0x1ee28  "...."
.long     0x00000018    # at addr 0x1ee2c  "...."
.long     0x000012b8    # at addr 0x1ee30  "...."
.long     0xfffef36c    # at addr 0x1ee34  "l..."
.long     0x00000025    # at addr 0x1ee38  "%..."
.long     0x100e4500    # at addr 0x1ee3c  ".E.."
.long     0x0a5a0283    # at addr 0x1ee40  "..Z."
.long     0x0b41080e    # at addr 0x1ee44  "..A."
.long     0x00000044    # at addr 0x1ee48  "D..."
.long     0x000012d4    # at addr 0x1ee4c  "...."
.long     0xfffef380    # at addr 0x1ee50  "...."
.long     0x000000be    # at addr 0x1ee54  "...."
.long     0x100e6100    # at addr 0x1ee58  ".a.."
.long     0x0e480286    # at addr 0x1ee5c  "..H."
.long     0x4e038318    # at addr 0x1ee60  "...N"
.long     0x0a50200e    # at addr 0x1ee64  ". P."
.long     0x0e46180e    # at addr 0x1ee68  "..F."
.long     0x080e4110    # at addr 0x1ee6c  ".A.."
.long     0x0a550b42    # at addr 0x1ee70  "B.U."
.long     0x0e44180e    # at addr 0x1ee74  "..D."
.long     0x080e4110    # at addr 0x1ee78  ".A.."
.long     0x0a550b46    # at addr 0x1ee7c  "F.U."
.long     0x0e41180e    # at addr 0x1ee80  "..A."
.long     0x080e4110    # at addr 0x1ee84  ".A.."
.long     0x00000b49    # at addr 0x1ee88  "I..."
.long     0x00000000    # at addr 0x1ee8c  "...."
.long     0x0000005c    # at addr 0x1ee90  "\..."
.long     0x0000131c    # at addr 0x1ee94  "...."
.long     0xfffef3f8    # at addr 0x1ee98  "...."
.long     0x00000086    # at addr 0x1ee9c  "...."
.long     0x100e4b00    # at addr 0x1eea0  ".K.."
.long     0x0e45028d    # at addr 0x1eea4  "..E."
.long     0x49038c18    # at addr 0x1eea8  "...I"
.long     0x0486200e    # at addr 0x1eeac  ". .."
.long     0x83280e41    # at addr 0x1eeb0  "A.(."
.long     0x300e4705    # at addr 0x1eeb4  ".G.0"
.long     0x280e0a7c    # at addr 0x1eeb8  "|..("
.long     0x200ec344    # at addr 0x1eebc  "D.. "
.long     0x180ec641    # at addr 0x1eec0  "A..."
.long     0x100ecc42    # at addr 0x1eec4  "B..."
.long     0x080ecd42    # at addr 0x1eec8  "B..."
.long     0x0e440b4a    # at addr 0x1eecc  "J.D."
.long     0x200e4128    # at addr 0x1eed0  "(A. "
.long     0x42180e41    # at addr 0x1eed4  "A..B"
.long     0x0e42100e    # at addr 0x1eed8  "..B."
.long     0xc6c34608    # at addr 0x1eedc  ".F.."
.long     0x0e41cdcc    # at addr 0x1eee0  "..A."
.long     0x86058330    # at addr 0x1eee4  "0..."
.long     0x8d038c04    # at addr 0x1eee8  "...."
.long     0x00000002    # at addr 0x1eeec  "...."
.long     0x0000001c    # at addr 0x1eef0  "...."
.long     0x0000137c    # at addr 0x1eef4  "|..."
.long     0xfffef428    # at addr 0x1eef8  "(..."
.long     0x0000005a    # at addr 0x1eefc  "Z..."
.long     0x300e4800    # at addr 0x1ef00  ".H.0"
.long     0x0e0a4c02    # at addr 0x1ef04  ".L.."
.long     0x000b4108    # at addr 0x1ef08  ".A.."
.long     0x00000000    # at addr 0x1ef0c  "...."
.long     0x00000010    # at addr 0x1ef10  "...."
.long     0x0000139c    # at addr 0x1ef14  "...."
.long     0xfffef468    # at addr 0x1ef18  "h..."
.long     0x00000173    # at addr 0x1ef1c  "s..."
.long     0x00000000    # at addr 0x1ef20  "...."
.long     0x00000010    # at addr 0x1ef24  "...."
.long     0x000013b0    # at addr 0x1ef28  "...."
.long     0xfffef5d4    # at addr 0x1ef2c  "...."
.long     0x0000000c    # at addr 0x1ef30  "...."
.long     0x00000000    # at addr 0x1ef34  "...."
.long     0x0000001c    # at addr 0x1ef38  "...."
.long     0x000013c4    # at addr 0x1ef3c  "...."
.long     0xfffef5d0    # at addr 0x1ef40  "...."
.long     0x0000001c    # at addr 0x1ef44  "...."
.long     0x100e4800    # at addr 0x1ef48  ".H.."
.long     0x080e0a4e    # at addr 0x1ef4c  "N..."
.long     0x00000b41    # at addr 0x1ef50  "A..."
.long     0x00000000    # at addr 0x1ef54  "...."
.long     0x0000004c    # at addr 0x1ef58  "L..."
.long     0x000013e4    # at addr 0x1ef5c  "...."
.long     0xfffef5d0    # at addr 0x1ef60  "...."
.long     0x000000f9    # at addr 0x1ef64  "...."
.long     0x100e4600    # at addr 0x1ef68  ".F.."
.long     0x0e42028f    # at addr 0x1ef6c  "..B."
.long     0x42038e18    # at addr 0x1ef70  "...B"
.long     0x048d200e    # at addr 0x1ef74  ". .."
.long     0x8c280e42    # at addr 0x1ef78  "B.(."
.long     0x300e4405    # at addr 0x1ef7c  ".D.0"
.long     0x0e440686    # at addr 0x1ef80  "..D."
.long     0x44078338    # at addr 0x1ef84  "8..D"
.long     0xc902500e    # at addr 0x1ef88  ".P.."
.long     0x44380e0a    # at addr 0x1ef8c  "..8D"
.long     0x0e41300e    # at addr 0x1ef90  ".0A."
.long     0x200e4228    # at addr 0x1ef94  "(B. "
.long     0x42180e42    # at addr 0x1ef98  "B..B"
.long     0x0e42100e    # at addr 0x1ef9c  "..B."
.long     0x000b4208    # at addr 0x1efa0  ".B.."
.long     0x00000000    # at addr 0x1efa4  "...."
.long     0x00000010    # at addr 0x1efa8  "...."
.long     0x00001434    # at addr 0x1efac  "4..."
.long     0xfffef680    # at addr 0x1efb0  "...."
.long     0x000000a7    # at addr 0x1efb4  "...."
.long     0x00000000    # at addr 0x1efb8  "...."
.long     0x00000040    # at addr 0x1efbc  "@..."
.long     0x00001448    # at addr 0x1efc0  "H..."
.long     0xfffef71c    # at addr 0x1efc4  "...."
.long     0x000003f8    # at addr 0x1efc8  "...."
.long     0x100e4600    # at addr 0x1efcc  ".F.."
.long     0x0e42028e    # at addr 0x1efd0  "..B."
.long     0x42038d18    # at addr 0x1efd4  "...B"
.long     0x048c200e    # at addr 0x1efd8  ". .."
.long     0x86280e41    # at addr 0x1efdc  "A.(."
.long     0x300e4405    # at addr 0x1efe0  ".D.0"
.long     0x0e470683    # at addr 0x1efe4  "..G."
.long     0x0a680250    # at addr 0x1efe8  "P.h."
.long     0x0e44300e    # at addr 0x1efec  ".0D."
.long     0x200e4128    # at addr 0x1eff0  "(A. "
.long     0x42180e42    # at addr 0x1eff4  "B..B"
.long     0x0e42100e    # at addr 0x1eff8  "..B."
.long     0x000b4708    # at addr 0x1effc  ".G.."
.long     0x00000024    # at addr 0x1f000  "$..."
.long     0x0000148c    # at addr 0x1f004  "...."
.long     0xfffefad8    # at addr 0x1f008  "...."
.long     0x00000063    # at addr 0x1f00c  "c..."
.long     0x100e4500    # at addr 0x1f010  ".E.."
.long     0x0e4c0283    # at addr 0x1f014  "..L."
.long     0x0a4b0230    # at addr 0x1f018  "0.K."
.long     0x0e41100e    # at addr 0x1f01c  "..A."
.long     0x000b4108    # at addr 0x1f020  ".A.."
.long     0x00000000    # at addr 0x1f024  "...."
.long     0x0000001c    # at addr 0x1f028  "...."
.long     0x000014b4    # at addr 0x1f02c  "...."
.long     0xfffefb20    # at addr 0x1f030  " ..."
.long     0x0000004d    # at addr 0x1f034  "M..."
.long     0x100e4a00    # at addr 0x1f038  ".J.."
.long     0x080e0a73    # at addr 0x1f03c  "s..."
.long     0x0e4c0b43    # at addr 0x1f040  "C.L."
.long     0x00000008    # at addr 0x1f044  "...."
.long     0x00000010    # at addr 0x1f048  "...."
.long     0x000014d4    # at addr 0x1f04c  "...."
.long     0xfffefb50    # at addr 0x1f050  "P..."
.long     0x00000014    # at addr 0x1f054  "...."
.long     0x00000000    # at addr 0x1f058  "...."
.long     0x00000010    # at addr 0x1f05c  "...."
.long     0x000014e8    # at addr 0x1f060  "...."
.long     0xfffefb5c    # at addr 0x1f064  "\..."
.long     0x0000000b    # at addr 0x1f068  "...."
.long     0x00000000    # at addr 0x1f06c  "...."
.long     0x00000018    # at addr 0x1f070  "...."
.long     0x000014fc    # at addr 0x1f074  "...."
.long     0xfffefb58    # at addr 0x1f078  "X..."
.long     0x00000021    # at addr 0x1f07c  "!..."
.long     0x100e4100    # at addr 0x1f080  ".A.."
.long     0x0e5f0283    # at addr 0x1f084  ".._."
.long     0x00000008    # at addr 0x1f088  "...."
.long     0x00000018    # at addr 0x1f08c  "...."
.long     0x00000000    # at addr 0x1f090  "...."
.long     0x00527a01    # at addr 0x1f094  ".zR."
.long     0x01107801    # at addr 0x1f098  ".x.."
.long     0x08070c1b    # at addr 0x1f09c  "...."
.long     0x100e0190    # at addr 0x1f0a0  "...."
.long     0x00000283    # at addr 0x1f0a4  "...."
.long     0x00000010    # at addr 0x1f0a8  "...."
.long     0x00000020    # at addr 0x1f0ac  " ..."
.long     0xfffe5cfa    # at addr 0x1f0b0  ".\.."
.long     0x00000005    # at addr 0x1f0b4  "...."
.long     0x00000000    # at addr 0x1f0b8  "...."
.long     0x00000060    # at addr 0x1f0bc  "`..."
.long     0x00001548    # at addr 0x1f0c0  "H..."
.long     0xfffefb3c    # at addr 0x1f0c4  "<..."
.long     0x00000100    # at addr 0x1f0c8  "...."
.long     0x100e4200    # at addr 0x1f0cc  ".B.."
.long     0x0e45028e    # at addr 0x1f0d0  "..E."
.long     0x45038d18    # at addr 0x1f0d4  "...E"
.long     0x048c200e    # at addr 0x1f0d8  ". .."
.long     0x86280e44    # at addr 0x1f0dc  "D.(."
.long     0x300e4405    # at addr 0x1f0e0  ".D.0"
.long     0x55020683    # at addr 0x1f0e4  "...U"
.long     0x46280e0a    # at addr 0x1f0e8  "..(F"
.long     0x0e42200e    # at addr 0x1f0ec  ". B."
.long     0x100e4218    # at addr 0x1f0f0  ".B.."
.long     0x4b080e42    # at addr 0x1f0f4  "B..K"
.long     0x0e0a640b    # at addr 0x1f0f8  ".d.."
.long     0x200e4128    # at addr 0x1f0fc  "(A. "
.long     0x42180e42    # at addr 0x1f100  "B..B"
.long     0x0e42100e    # at addr 0x1f104  "..B."
.long     0x650b4508    # at addr 0x1f108  ".E.e"
.long     0x46280e0a    # at addr 0x1f10c  "..(F"
.long     0x0e42200e    # at addr 0x1f110  ". B."
.long     0x100e4218    # at addr 0x1f114  ".B.."
.long     0x47080e42    # at addr 0x1f118  "B..G"
.long     0x0000000b    # at addr 0x1f11c  "...."
.long     0x00000010    # at addr 0x1f120  "...."
.long     0x000015ac    # at addr 0x1f124  "...."
.long     0xfffefbd8    # at addr 0x1f128  "...."
.long     0x0000007e    # at addr 0x1f12c  "~..."
.long     0x00000000    # at addr 0x1f130  "...."
.long     0x00000010    # at addr 0x1f134  "...."
.long     0x000015c0    # at addr 0x1f138  "...."
.long     0xfffefc44    # at addr 0x1f13c  "D..."
.long     0x0000012b    # at addr 0x1f140  "+..."
.long     0x00000000    # at addr 0x1f144  "...."
.long     0x0000005c    # at addr 0x1f148  "\..."
.long     0x000015d4    # at addr 0x1f14c  "...."
.long     0xfffefd60    # at addr 0x1f150  "`..."
.long     0x0000014a    # at addr 0x1f154  "J..."
.long     0x100e4200    # at addr 0x1f158  ".B.."
.long     0x0e42028f    # at addr 0x1f15c  "..B."
.long     0x45038e18    # at addr 0x1f160  "...E"
.long     0x048d200e    # at addr 0x1f164  ". .."
.long     0x8c280e45    # at addr 0x1f168  "E.(."
.long     0x300e4405    # at addr 0x1f16c  ".D.0"
.long     0x0e410686    # at addr 0x1f170  "..A."
.long     0x44078338    # at addr 0x1f174  "8..D"
.long     0xef02400e    # at addr 0x1f178  ".@.."
.long     0x46380e0a    # at addr 0x1f17c  "..8F"
.long     0x0e41300e    # at addr 0x1f180  ".0A."
.long     0x200e4228    # at addr 0x1f184  "(B. "
.long     0x42180e42    # at addr 0x1f188  "B..B"
.long     0x0e42100e    # at addr 0x1f18c  "..B."
.long     0x5d0b4b08    # at addr 0x1f190  ".K.]"
.long     0x0e43380e    # at addr 0x1f194  ".8C."
.long     0x280e4130    # at addr 0x1f198  "0A.("
.long     0x42200e42    # at addr 0x1f19c  "B. B"
.long     0x0e42180e    # at addr 0x1f1a0  "..B."
.long     0x080e4210    # at addr 0x1f1a4  ".B.."
.long     0x00000010    # at addr 0x1f1a8  "...."
.long     0x00001634    # at addr 0x1f1ac  "4..."
.long     0xfffefe50    # at addr 0x1f1b0  "P..."
.long     0x00000009    # at addr 0x1f1b4  "...."
.long     0x00000000    # at addr 0x1f1b8  "...."
.long     0x00000010    # at addr 0x1f1bc  "...."
.long     0x00001648    # at addr 0x1f1c0  "H..."
.long     0xfffefe4c    # at addr 0x1f1c4  "L..."
.long     0x00000009    # at addr 0x1f1c8  "...."
.long     0x00000000    # at addr 0x1f1cc  "...."
.long     0x00000010    # at addr 0x1f1d0  "...."
.long     0x0000165c    # at addr 0x1f1d4  "\..."
.long     0xfffefe48    # at addr 0x1f1d8  "H..."
.long     0x00000009    # at addr 0x1f1dc  "...."
.long     0x00000000    # at addr 0x1f1e0  "...."
.long     0x00000010    # at addr 0x1f1e4  "...."
.long     0x00001670    # at addr 0x1f1e8  "p..."
.long     0xfffefe44    # at addr 0x1f1ec  "D..."
.long     0x00000059    # at addr 0x1f1f0  "Y..."
.long     0x00000000    # at addr 0x1f1f4  "...."
.long     0x00000010    # at addr 0x1f1f8  "...."
.long     0x00001684    # at addr 0x1f1fc  "...."
.long     0xfffefe90    # at addr 0x1f200  "...."
.long     0x00000067    # at addr 0x1f204  "g..."
.long     0x00000000    # at addr 0x1f208  "...."
.long     0x00000038    # at addr 0x1f20c  "8..."
.long     0x00001698    # at addr 0x1f210  "...."
.long     0xfffefeec    # at addr 0x1f214  "...."
.long     0x00000157    # at addr 0x1f218  "W..."
.long     0x100e4600    # at addr 0x1f21c  ".F.."
.long     0x0e42028d    # at addr 0x1f220  "..B."
.long     0x44038c18    # at addr 0x1f224  "...D"
.long     0x0486200e    # at addr 0x1f228  ". .."
.long     0x83280e44    # at addr 0x1f22c  "D.(."
.long     0x300e4405    # at addr 0x1f230  ".D.0"
.long     0x0e0ad302    # at addr 0x1f234  "...."
.long     0x200e4728    # at addr 0x1f238  "(G. "
.long     0x47180e48    # at addr 0x1f23c  "H..G"
.long     0x0e44100e    # at addr 0x1f240  "..D."
.long     0x000b4f08    # at addr 0x1f244  ".O.."
.long     0x00000034    # at addr 0x1f248  "4..."
.long     0x000016d4    # at addr 0x1f24c  "...."
.long     0xffff0010    # at addr 0x1f250  "...."
.long     0x00000053    # at addr 0x1f254  "S..."
.long     0x100e4600    # at addr 0x1f258  ".F.."
.long     0x0e44028c    # at addr 0x1f25c  "..D."
.long     0x44038618    # at addr 0x1f260  "...D"
.long     0x0483200e    # at addr 0x1f264  ". .."
.long     0x180e0a70    # at addr 0x1f268  "p..."
.long     0x42100e43    # at addr 0x1f26c  "C..B"
.long     0x0b45080e    # at addr 0x1f270  "..E."
.long     0x41180e47    # at addr 0x1f274  "G..A"
.long     0x0e42100e    # at addr 0x1f278  "..B."
.long     0x00000008    # at addr 0x1f27c  "...."
.long     0x00000018    # at addr 0x1f280  "...."
.long     0x0000170c    # at addr 0x1f284  "...."
.long     0xffff0038    # at addr 0x1f288  "8..."
.long     0x0000004c    # at addr 0x1f28c  "L..."
.long     0x100e4f00    # at addr 0x1f290  ".O.."
.long     0x4f080e69    # at addr 0x1f294  "i..O"
.long     0x0000100e    # at addr 0x1f298  "...."
.long     0x00000014    # at addr 0x1f29c  "...."
.long     0x00000000    # at addr 0x1f2a0  "...."
.long     0x00527a01    # at addr 0x1f2a4  ".zR."
.long     0x01107801    # at addr 0x1f2a8  ".x.."
.long     0x08070c1b    # at addr 0x1f2ac  "...."
.long     0x100e0190    # at addr 0x1f2b0  "...."
.long     0x00000010    # at addr 0x1f2b4  "...."
.long     0x0000001c    # at addr 0x1f2b8  "...."
.long     0xfffe5af3    # at addr 0x1f2bc  ".Z.."
.long     0x00000005    # at addr 0x1f2c0  "...."
.long     0x00000000    # at addr 0x1f2c4  "...."
.long     0x00000030    # at addr 0x1f2c8  "0..."
.long     0x00001754    # at addr 0x1f2cc  "T..."
.long     0xffff0040    # at addr 0x1f2d0  "@..."
.long     0x0000006d    # at addr 0x1f2d4  "m..."
.long     0x100e4500    # at addr 0x1f2d8  ".E.."
.long     0x0e440286    # at addr 0x1f2dc  "..D."
.long     0x47038318    # at addr 0x1f2e0  "...G"
.long     0x4802200e    # at addr 0x1f2e4  ". .H"
.long     0x44180e0a    # at addr 0x1f2e8  "...D"
.long     0x0e41100e    # at addr 0x1f2ec  "..A."
.long     0x470b4308    # at addr 0x1f2f0  ".C.G"
.long     0x0e41180e    # at addr 0x1f2f4  "..A."
.long     0x080e4110    # at addr 0x1f2f8  ".A.."
.long     0x00000010    # at addr 0x1f2fc  "...."
.long     0x00001788    # at addr 0x1f300  "...."
.long     0xffff007c    # at addr 0x1f304  "|..."
.long     0x00000043    # at addr 0x1f308  "C..."
.long     0x00000000    # at addr 0x1f30c  "...."
.long     0x00000048    # at addr 0x1f310  "H..."
.long     0x0000179c    # at addr 0x1f314  "...."
.long     0xffff00b8    # at addr 0x1f318  "...."
.long     0x00000078    # at addr 0x1f31c  "x..."
.long     0x100e4600    # at addr 0x1f320  ".F.."
.long     0x0e42028f    # at addr 0x1f324  "..B."
.long     0x42038e18    # at addr 0x1f328  "...B"
.long     0x048d200e    # at addr 0x1f32c  ". .."
.long     0x8c280e42    # at addr 0x1f330  "B.(."
.long     0x300e4105    # at addr 0x1f334  ".A.0"
.long     0x0e410686    # at addr 0x1f338  "..A."
.long     0x44078338    # at addr 0x1f33c  "8..D"
.long     0x0a6b400e    # at addr 0x1f340  ".@k."
.long     0x0e44380e    # at addr 0x1f344  ".8D."
.long     0x280e4130    # at addr 0x1f348  "0A.("
.long     0x42200e42    # at addr 0x1f34c  "B. B"
.long     0x0e42180e    # at addr 0x1f350  "..B."
.long     0x080e4210    # at addr 0x1f354  ".B.."
.long     0x00000b46    # at addr 0x1f358  "F..."
.long     0x00000010    # at addr 0x1f35c  "...."
.long     0x000017e8    # at addr 0x1f360  "...."
.long     0xffff00ec    # at addr 0x1f364  "...."
.long     0x00000031    # at addr 0x1f368  "1..."
.long     0x00000000    # at addr 0x1f36c  "...."
.long     0x00000010    # at addr 0x1f370  "...."
.long     0x000017fc    # at addr 0x1f374  "...."
.long     0xffff0118    # at addr 0x1f378  "...."
.long     0x00000024    # at addr 0x1f37c  "$..."
.long     0x00000000    # at addr 0x1f380  "...."
.long     0x00000048    # at addr 0x1f384  "H..."
.long     0x00001810    # at addr 0x1f388  "...."
.long     0xffff0134    # at addr 0x1f38c  "4..."
.long     0x0000010d    # at addr 0x1f390  "...."
.long     0x100e4600    # at addr 0x1f394  ".F.."
.long     0x0e4c028f    # at addr 0x1f398  "..L."
.long     0x45038e18    # at addr 0x1f39c  "...E"
.long     0x048d200e    # at addr 0x1f3a0  ". .."
.long     0x8c280e4a    # at addr 0x1f3a4  "J.(."
.long     0x300e4105    # at addr 0x1f3a8  ".A.0"
.long     0x0e440686    # at addr 0x1f3ac  "..D."
.long     0x47078338    # at addr 0x1f3b0  "8..G"
.long     0xbb02400e    # at addr 0x1f3b4  ".@.."
.long     0x44380e0a    # at addr 0x1f3b8  "..8D"
.long     0x0e41300e    # at addr 0x1f3bc  ".0A."
.long     0x200e4228    # at addr 0x1f3c0  "(B. "
.long     0x42180e42    # at addr 0x1f3c4  "B..B"
.long     0x0e42100e    # at addr 0x1f3c8  "..B."
.long     0x000b4b08    # at addr 0x1f3cc  ".K.."
.long     0x00000028    # at addr 0x1f3d0  "(..."
.long     0x0000185c    # at addr 0x1f3d4  "\..."
.long     0xffff01f8    # at addr 0x1f3d8  "...."
.long     0x000000b0    # at addr 0x1f3dc  "...."
.long     0x100e4600    # at addr 0x1f3e0  ".F.."
.long     0x0e41028c    # at addr 0x1f3e4  "..A."
.long     0x44038618    # at addr 0x1f3e8  "...D"
.long     0x0483200e    # at addr 0x1f3ec  ". .."
.long     0x180e9102    # at addr 0x1f3f0  "...."
.long     0x42100e51    # at addr 0x1f3f4  "Q..B"
.long     0x0000080e    # at addr 0x1f3f8  "...."
.long     0x00000028    # at addr 0x1f3fc  "(..."
.long     0x00001888    # at addr 0x1f400  "...."
.long     0xffff027c    # at addr 0x1f404  "|..."
.long     0x000000e6    # at addr 0x1f408  "...."
.long     0x100e4600    # at addr 0x1f40c  ".F.."
.long     0x0e44028c    # at addr 0x1f410  "..D."
.long     0x41038618    # at addr 0x1f414  "...A"
.long     0x0483200e    # at addr 0x1f418  ". .."
.long     0x180ed002    # at addr 0x1f41c  "...."
.long     0x42100e44    # at addr 0x1f420  "D..B"
.long     0x0000080e    # at addr 0x1f424  "...."
.long     0x0000003c    # at addr 0x1f428  "<..."
.long     0x000018b4    # at addr 0x1f42c  "...."
.long     0xffff0340    # at addr 0x1f430  "@..."
.long     0x00000184    # at addr 0x1f434  "...."
.long     0x100e4600    # at addr 0x1f438  ".F.."
.long     0x0e42028d    # at addr 0x1f43c  "..B."
.long     0x41038c18    # at addr 0x1f440  "...A"
.long     0x0486200e    # at addr 0x1f444  ". .."
.long     0x83280e47    # at addr 0x1f448  "G.(."
.long     0x900e4405    # at addr 0x1f44c  ".D.."
.long     0x010c0301    # at addr 0x1f450  "...."
.long     0x44280e0a    # at addr 0x1f454  "..(D"
.long     0x0e41200e    # at addr 0x1f458  ". A."
.long     0x100e4218    # at addr 0x1f45c  ".B.."
.long     0x47080e42    # at addr 0x1f460  "B..G"
.long     0x0000000b    # at addr 0x1f464  "...."
.long     0x00000020    # at addr 0x1f468  " ..."
.long     0x00000000    # at addr 0x1f46c  "...."
.long     0x00527a01    # at addr 0x1f470  ".zR."
.long     0x01107801    # at addr 0x1f474  ".x.."
.long     0x08070c1b    # at addr 0x1f478  "...."
.long     0x900e0190    # at addr 0x1f47c  "...."
.long     0x86058301    # at addr 0x1f480  "...."
.long     0x8d038c04    # at addr 0x1f484  "...."
.long     0x00000002    # at addr 0x1f488  "...."
.long     0x00000010    # at addr 0x1f48c  "...."
.long     0x00000028    # at addr 0x1f490  "(..."
.long     0xfffe5920    # at addr 0x1f494  " Y.."
.long     0x00000005    # at addr 0x1f498  "...."
.long     0x00000000    # at addr 0x1f49c  "...."
.long     0x00000038    # at addr 0x1f4a0  "8..."
.long     0x0000192c    # at addr 0x1f4a4  ",..."
.long     0xffff0458    # at addr 0x1f4a8  "X..."
.long     0x00000299    # at addr 0x1f4ac  "...."
.long     0x100e4600    # at addr 0x1f4b0  ".F.."
.long     0x0e42028d    # at addr 0x1f4b4  "..B."
.long     0x41038c18    # at addr 0x1f4b8  "...A"
.long     0x0486200e    # at addr 0x1f4bc  ". .."
.long     0x83280e41    # at addr 0x1f4c0  "A.(."
.long     0x400e4405    # at addr 0x1f4c4  ".D.@"
.long     0x0e0a5802    # at addr 0x1f4c8  ".X.."
.long     0x200e4428    # at addr 0x1f4cc  "(D. "
.long     0x42180e41    # at addr 0x1f4d0  "A..B"
.long     0x0e42100e    # at addr 0x1f4d4  "..B."
.long     0x000b4108    # at addr 0x1f4d8  ".A.."
.long     0x0000001c    # at addr 0x1f4dc  "...."
.long     0x00000000    # at addr 0x1f4e0  "...."
.long     0x00527a01    # at addr 0x1f4e4  ".zR."
.long     0x01107801    # at addr 0x1f4e8  ".x.."
.long     0x08070c1b    # at addr 0x1f4ec  "...."
.long     0x400e0190    # at addr 0x1f4f0  "...@"
.long     0x04860583    # at addr 0x1f4f4  "...."
.long     0x028d038c    # at addr 0x1f4f8  "...."
.long     0x00000010    # at addr 0x1f4fc  "...."
.long     0x00000024    # at addr 0x1f500  "$..."
.long     0xfffe58b5    # at addr 0x1f504  ".X.."
.long     0x00000005    # at addr 0x1f508  "...."
.long     0x00000000    # at addr 0x1f50c  "...."
.long     0x00000020    # at addr 0x1f510  " ..."
.long     0x0000199c    # at addr 0x1f514  "...."
.long     0xffff0688    # at addr 0x1f518  "...."
.long     0x00000059    # at addr 0x1f51c  "Y..."
.long     0x100e4500    # at addr 0x1f520  ".E.."
.long     0x0e470283    # at addr 0x1f524  "..G."
.long     0x0e0a7b20    # at addr 0x1f528  " {.."
.long     0x080e4110    # at addr 0x1f52c  ".A.."
.long     0x00000b48    # at addr 0x1f530  "H..."
.long     0x00000030    # at addr 0x1f534  "0..."
.long     0x000019c0    # at addr 0x1f538  "...."
.long     0xffff06c4    # at addr 0x1f53c  "...."
.long     0x000001fc    # at addr 0x1f540  "...."
.long     0x100e4600    # at addr 0x1f544  ".F.."
.long     0x0e46028c    # at addr 0x1f548  "..F."
.long     0x41038618    # at addr 0x1f54c  "...A"
.long     0x0483200e    # at addr 0x1f550  ". .."
.long     0x02300e47    # at addr 0x1f554  "G.0."
.long     0x200e0a47    # at addr 0x1f558  "G.. "
.long     0x41180e44    # at addr 0x1f55c  "D..A"
.long     0x0e42100e    # at addr 0x1f560  "..B."
.long     0x000b4608    # at addr 0x1f564  ".F.."
.long     0x00000024    # at addr 0x1f568  "$..."
.long     0x000019f4    # at addr 0x1f56c  "...."
.long     0xffff0890    # at addr 0x1f570  "...."
.long     0x0000002b    # at addr 0x1f574  "+..."
.long     0x100e4500    # at addr 0x1f578  ".E.."
.long     0x0e440286    # at addr 0x1f57c  "..D."
.long     0x47038318    # at addr 0x1f580  "...G"
.long     0x0e52200e    # at addr 0x1f584  ". R."
.long     0x100e4418    # at addr 0x1f588  ".D.."
.long     0x00080e41    # at addr 0x1f58c  "A..."
.long     0x00000010    # at addr 0x1f590  "...."
.long     0x00001a1c    # at addr 0x1f594  "...."
.long     0xffff0898    # at addr 0x1f598  "...."
.long     0x00000011    # at addr 0x1f59c  "...."
.long     0x00000000    # at addr 0x1f5a0  "...."
.long     0x00000010    # at addr 0x1f5a4  "...."
.long     0x00001a30    # at addr 0x1f5a8  "0..."
.long     0xffff08a4    # at addr 0x1f5ac  "...."
.long     0x0000002d    # at addr 0x1f5b0  "-..."
.long     0x00000000    # at addr 0x1f5b4  "...."
.long     0x00000014    # at addr 0x1f5b8  "...."
.long     0x00001a44    # at addr 0x1f5bc  "D..."
.long     0xffff08c0    # at addr 0x1f5c0  "...."
.long     0x0000003b    # at addr 0x1f5c4  ";..."
.long     0x100e6600    # at addr 0x1f5c8  ".f.."
.long     0x00080e54    # at addr 0x1f5cc  "T..."
.long     0x0000001c    # at addr 0x1f5d0  "...."
.long     0x00001a5c    # at addr 0x1f5d4  "\..."
.long     0xffff08e8    # at addr 0x1f5d8  "...."
.long     0x00000019    # at addr 0x1f5dc  "...."
.long     0x100e4500    # at addr 0x1f5e0  ".E.."
.long     0x0e4f0286    # at addr 0x1f5e4  "..O."
.long     0x00000008    # at addr 0x1f5e8  "...."
.long     0x00000000    # at addr 0x1f5ec  "...."
.long     0x00000010    # at addr 0x1f5f0  "...."
.long     0x00001a7c    # at addr 0x1f5f4  "|..."
.long     0xffff08e8    # at addr 0x1f5f8  "...."
.long     0x000000b7    # at addr 0x1f5fc  "...."
.long     0x00000000    # at addr 0x1f600  "...."
.long     0x000000a4    # at addr 0x1f604  "...."
.long     0x00001a90    # at addr 0x1f608  "...."
.long     0xffff0994    # at addr 0x1f60c  "...."
.long     0x00000a39    # at addr 0x1f610  "9..."
.long     0x100e4600    # at addr 0x1f614  ".F.."
.long     0x0e42028f    # at addr 0x1f618  "..B."
.long     0x42038e18    # at addr 0x1f61c  "...B"
.long     0x048d200e    # at addr 0x1f620  ". .."
.long     0x8c280e45    # at addr 0x1f624  "E.(."
.long     0x300e4105    # at addr 0x1f628  ".A.0"
.long     0x0e440686    # at addr 0x1f62c  "..D."
.long     0x4a078338    # at addr 0x1f630  "8..J"
.long     0x0301d00e    # at addr 0x1f634  "...."
.long     0xe00e019d    # at addr 0x1f638  "...."
.long     0xd80e5d01    # at addr 0x1f63c  ".].."
.long     0xd00e4101    # at addr 0x1f640  ".A.."
.long     0xe00e6a01    # at addr 0x1f644  ".j.."
.long     0xd80e4d01    # at addr 0x1f648  ".M.."
.long     0xd00e4101    # at addr 0x1f64c  ".A.."
.long     0xe00e4a01    # at addr 0x1f650  ".J.."
.long     0xd80e6a01    # at addr 0x1f654  ".j.."
.long     0xd00e4201    # at addr 0x1f658  ".B.."
.long     0x01f40301    # at addr 0x1f65c  "...."
.long     0x6f01e00e    # at addr 0x1f660  "...o"
.long     0x4201d80e    # at addr 0x1f664  "...B"
.long     0x0201d00e    # at addr 0x1f668  "...."
.long     0x380e0a71    # at addr 0x1f66c  "q..8"
.long     0x41300e44    # at addr 0x1f670  "D.0A"
.long     0x0e42280e    # at addr 0x1f674  ".(B."
.long     0x180e4220    # at addr 0x1f678  " B.."
.long     0x42100e42    # at addr 0x1f67c  "B..B"
.long     0x0b46080e    # at addr 0x1f680  "..F."
.long     0xe00ed402    # at addr 0x1f684  "...."
.long     0xd80e4a01    # at addr 0x1f688  ".J.."
.long     0xd00e4201    # at addr 0x1f68c  ".B.."
.long     0xe00e4c01    # at addr 0x1f690  ".L.."
.long     0xd80e4f01    # at addr 0x1f694  ".O.."
.long     0xd00e4101    # at addr 0x1f698  ".A.."
.long     0x01080301    # at addr 0x1f69c  "...."
.long     0x7201e00e    # at addr 0x1f6a0  "...r"
.long     0x4101d80e    # at addr 0x1f6a4  "...A"
.long     0x0001d00e    # at addr 0x1f6a8  "...."
.long     0x00000038    # at addr 0x1f6ac  "8..."
.long     0x00001b38    # at addr 0x1f6b0  "8..."
.long     0xffff132c    # at addr 0x1f6b4  ",..."
.long     0x000001e0    # at addr 0x1f6b8  "...."
.long     0x100e4600    # at addr 0x1f6bc  ".F.."
.long     0x0e45028d    # at addr 0x1f6c0  "..E."
.long     0x41038c18    # at addr 0x1f6c4  "...A"
.long     0x0486200e    # at addr 0x1f6c8  ". .."
.long     0x83280e44    # at addr 0x1f6cc  "D.(."
.long     0x400e4705    # at addr 0x1f6d0  ".G.@"
.long     0x0e0a7d02    # at addr 0x1f6d4  ".}.."
.long     0x200e4128    # at addr 0x1f6d8  "(A. "
.long     0x42180e41    # at addr 0x1f6dc  "A..B"
.long     0x0e42100e    # at addr 0x1f6e0  "..B."
.long     0x000b4608    # at addr 0x1f6e4  ".F.."
.long     0x00000028    # at addr 0x1f6e8  "(..."
.long     0x00001b74    # at addr 0x1f6ec  "t..."
.long     0xffff14d0    # at addr 0x1f6f0  "...."
.long     0x00000095    # at addr 0x1f6f4  "...."
.long     0x100e4600    # at addr 0x1f6f8  ".F.."
.long     0x0e41028c    # at addr 0x1f6fc  "..A."
.long     0x43038618    # at addr 0x1f700  "...C"
.long     0x0483200e    # at addr 0x1f704  ". .."
.long     0x180e0a70    # at addr 0x1f708  "p..."
.long     0x42100e41    # at addr 0x1f70c  "A..B"
.long     0x0b43080e    # at addr 0x1f710  "..C."
.long     0x00000040    # at addr 0x1f714  "@..."
.long     0x00001ba0    # at addr 0x1f718  "...."
.long     0xffff1544    # at addr 0x1f71c  "D..."
.long     0x0000010a    # at addr 0x1f720  "...."
.long     0x100e4600    # at addr 0x1f724  ".F.."
.long     0x0e41028c    # at addr 0x1f728  "..A."
.long     0x44038618    # at addr 0x1f72c  "...D"
.long     0x0483200e    # at addr 0x1f730  ". .."
.long     0x180e0a78    # at addr 0x1f734  "x..."
.long     0x45100e41    # at addr 0x1f738  "A..E"
.long     0x0b47080e    # at addr 0x1f73c  "..G."
.long     0x180e0a7b    # at addr 0x1f740  "{..."
.long     0x45100e41    # at addr 0x1f744  "A..E"
.long     0x0b47080e    # at addr 0x1f748  "..G."
.long     0x180e6e02    # at addr 0x1f74c  ".n.."
.long     0x42100e41    # at addr 0x1f750  "A..B"
.long     0x0000080e    # at addr 0x1f754  "...."
.long     0x00000028    # at addr 0x1f758  "(..."
.long     0x00001be4    # at addr 0x1f75c  "...."
.long     0xffff1610    # at addr 0x1f760  "...."
.long     0x00000095    # at addr 0x1f764  "...."
.long     0x100e4600    # at addr 0x1f768  ".F.."
.long     0x0e41028c    # at addr 0x1f76c  "..A."
.long     0x43038618    # at addr 0x1f770  "...C"
.long     0x0483200e    # at addr 0x1f774  ". .."
.long     0x180e0a70    # at addr 0x1f778  "p..."
.long     0x42100e41    # at addr 0x1f77c  "A..B"
.long     0x0b43080e    # at addr 0x1f780  "..C."
.long     0x00000040    # at addr 0x1f784  "@..."
.long     0x00001c10    # at addr 0x1f788  "...."
.long     0xffff1684    # at addr 0x1f78c  "...."
.long     0x0000010a    # at addr 0x1f790  "...."
.long     0x100e4600    # at addr 0x1f794  ".F.."
.long     0x0e41028c    # at addr 0x1f798  "..A."
.long     0x44038618    # at addr 0x1f79c  "...D"
.long     0x0483200e    # at addr 0x1f7a0  ". .."
.long     0x180e0a78    # at addr 0x1f7a4  "x..."
.long     0x45100e41    # at addr 0x1f7a8  "A..E"
.long     0x0b47080e    # at addr 0x1f7ac  "..G."
.long     0x180e0a7b    # at addr 0x1f7b0  "{..."
.long     0x45100e41    # at addr 0x1f7b4  "A..E"
.long     0x0b47080e    # at addr 0x1f7b8  "..G."
.long     0x180e6e02    # at addr 0x1f7bc  ".n.."
.long     0x42100e41    # at addr 0x1f7c0  "A..B"
.long     0x0000080e    # at addr 0x1f7c4  "...."
.long     0x00000014    # at addr 0x1f7c8  "...."
.long     0x00001c54    # at addr 0x1f7cc  "T..."
.long     0xffff1750    # at addr 0x1f7d0  "P..."
.long     0x0000009c    # at addr 0x1f7d4  "...."
.long     0x00000000    # at addr 0x1f7d8  "...."
.long     0x00000000    # at addr 0x1f7dc  "...."
.long     0x00000014    # at addr 0x1f7e0  "...."
.long     0x00001c6c    # at addr 0x1f7e4  "l..."
.long     0xffff17d8    # at addr 0x1f7e8  "...."
.long     0x00000054    # at addr 0x1f7ec  "T..."
.long     0x00000000    # at addr 0x1f7f0  "...."
.long     0x00000000    # at addr 0x1f7f4  "...."
.long     0x00000048    # at addr 0x1f7f8  "H..."
.long     0x00001c84    # at addr 0x1f7fc  "...."
.long     0xffff1820    # at addr 0x1f800  " ..."
.long     0x000003dc    # at addr 0x1f804  "...."
.long     0x100e4600    # at addr 0x1f808  ".F.."
.long     0x0e42028f    # at addr 0x1f80c  "..B."
.long     0x42038e18    # at addr 0x1f810  "...B"
.long     0x048d200e    # at addr 0x1f814  ". .."
.long     0x8c280e45    # at addr 0x1f818  "E.(."
.long     0x300e4105    # at addr 0x1f81c  ".A.0"
.long     0x0e440686    # at addr 0x1f820  "..D."
.long     0x47078338    # at addr 0x1f824  "8..G"
.long     0x2703700e    # at addr 0x1f828  ".p.'"
.long     0x380e0a01    # at addr 0x1f82c  "...8"
.long     0x41300e44    # at addr 0x1f830  "D.0A"
.long     0x0e42280e    # at addr 0x1f834  ".(B."
.long     0x180e4220    # at addr 0x1f838  " B.."
.long     0x42100e42    # at addr 0x1f83c  "B..B"
.long     0x0b41080e    # at addr 0x1f840  "..A."
.long     0x00000048    # at addr 0x1f844  "H..."
.long     0x00001cd0    # at addr 0x1f848  "...."
.long     0xffff1bb4    # at addr 0x1f84c  "...."
.long     0x000000a7    # at addr 0x1f850  "...."
.long     0x100e4600    # at addr 0x1f854  ".F.."
.long     0x0e42028f    # at addr 0x1f858  "..B."
.long     0x45038e18    # at addr 0x1f85c  "...E"
.long     0x048d200e    # at addr 0x1f860  ". .."
.long     0x8c280e45    # at addr 0x1f864  "E.(."
.long     0x300e4405    # at addr 0x1f868  ".D.0"
.long     0x0e410686    # at addr 0x1f86c  "..A."
.long     0x47078338    # at addr 0x1f870  "8..G"
.long     0x5b02500e    # at addr 0x1f874  ".P.["
.long     0x44380e0a    # at addr 0x1f878  "..8D"
.long     0x0e41300e    # at addr 0x1f87c  ".0A."
.long     0x200e4228    # at addr 0x1f880  "(B. "
.long     0x42180e42    # at addr 0x1f884  "B..B"
.long     0x0e42100e    # at addr 0x1f888  "..B."
.long     0x000b4a08    # at addr 0x1f88c  ".J.."
.long     0x00000048    # at addr 0x1f890  "H..."
.long     0x00001d1c    # at addr 0x1f894  "...."
.long     0xffff1c18    # at addr 0x1f898  "...."
.long     0x00000218    # at addr 0x1f89c  "...."
.long     0x100e4600    # at addr 0x1f8a0  ".F.."
.long     0x0e45028f    # at addr 0x1f8a4  "..E."
.long     0x42038e18    # at addr 0x1f8a8  "...B"
.long     0x048d200e    # at addr 0x1f8ac  ". .."
.long     0x8c280e42    # at addr 0x1f8b0  "B.(."
.long     0x300e4105    # at addr 0x1f8b4  ".A.0"
.long     0x0e450686    # at addr 0x1f8b8  "..E."
.long     0x44078338    # at addr 0x1f8bc  "8..D"
.long     0x4703700e    # at addr 0x1f8c0  ".p.G"
.long     0x380e0a01    # at addr 0x1f8c4  "...8"
.long     0x41300e44    # at addr 0x1f8c8  "D.0A"
.long     0x0e42280e    # at addr 0x1f8cc  ".(B."
.long     0x180e4220    # at addr 0x1f8d0  " B.."
.long     0x42100e42    # at addr 0x1f8d4  "B..B"
.long     0x0b43080e    # at addr 0x1f8d8  "..C."
.long     0x00000028    # at addr 0x1f8dc  "(..."
.long     0x00001d68    # at addr 0x1f8e0  "h..."
.long     0xffff1dec    # at addr 0x1f8e4  "...."
.long     0x0000002b    # at addr 0x1f8e8  "+..."
.long     0x100e4600    # at addr 0x1f8ec  ".F.."
.long     0x0e44028c    # at addr 0x1f8f0  "..D."
.long     0x47038618    # at addr 0x1f8f4  "...G"
.long     0x0e49200e    # at addr 0x1f8f8  ". I."
.long     0x100e4a18    # at addr 0x1f8fc  ".J.."
.long     0x00080e42    # at addr 0x1f900  "B..."
.long     0x00000000    # at addr 0x1f904  "...."
.long     0x00000078    # at addr 0x1f908  "x..."
.long     0x00001d94    # at addr 0x1f90c  "...."
.long     0xffff1df0    # at addr 0x1f910  "...."
.long     0x0000023f    # at addr 0x1f914  "?..."
.long     0x100e4200    # at addr 0x1f918  ".B.."
.long     0x0e42028f    # at addr 0x1f91c  "..B."
.long     0x42038e18    # at addr 0x1f920  "...B"
.long     0x048d200e    # at addr 0x1f924  ". .."
.long     0x8c280e42    # at addr 0x1f928  "B.(."
.long     0x300e4105    # at addr 0x1f92c  ".A.0"
.long     0x0e440686    # at addr 0x1f930  "..D."
.long     0x47078338    # at addr 0x1f934  "8..G"
.long     0x0a56700e    # at addr 0x1f938  ".pV."
.long     0x0e41380e    # at addr 0x1f93c  ".8A."
.long     0x280e4130    # at addr 0x1f940  "0A.("
.long     0x42200e42    # at addr 0x1f944  "B. B"
.long     0x0e42180e    # at addr 0x1f948  "..B."
.long     0x080e4210    # at addr 0x1f94c  ".B.."
.long     0x0a5e0b44    # at addr 0x1f950  "D.^."
.long     0x0e41380e    # at addr 0x1f954  ".8A."
.long     0x280e4130    # at addr 0x1f958  "0A.("
.long     0x42200e42    # at addr 0x1f95c  "B. B"
.long     0x0e42180e    # at addr 0x1f960  "..B."
.long     0x080e4210    # at addr 0x1f964  ".B.."
.long     0x7e030b48    # at addr 0x1f968  "H..~"
.long     0x380e0a01    # at addr 0x1f96c  "...8"
.long     0x41300e44    # at addr 0x1f970  "D.0A"
.long     0x0e4a280e    # at addr 0x1f974  ".(J."
.long     0x180e4620    # at addr 0x1f978  " F.."
.long     0x42100e42    # at addr 0x1f97c  "B..B"
.long     0x0b49080e    # at addr 0x1f980  "..I."
.long     0x00000010    # at addr 0x1f984  "...."
.long     0x00001e10    # at addr 0x1f988  "...."
.long     0xffff1fb4    # at addr 0x1f98c  "...."
.long     0x00000010    # at addr 0x1f990  "...."
.long     0x00000000    # at addr 0x1f994  "...."
.long     0x00000028    # at addr 0x1f998  "(..."
.long     0x00001e24    # at addr 0x1f99c  "$..."
.long     0xffff1fb0    # at addr 0x1f9a0  "...."
.long     0x00000041    # at addr 0x1f9a4  "A..."
.long     0x100e4200    # at addr 0x1f9a8  ".B.."
.long     0x0e44028c    # at addr 0x1f9ac  "..D."
.long     0x41038618    # at addr 0x1f9b0  "...A"
.long     0x0483200e    # at addr 0x1f9b4  ". .."
.long     0x41180e76    # at addr 0x1f9b8  "v..A"
.long     0x0e42100e    # at addr 0x1f9bc  "..B."
.long     0x00000008    # at addr 0x1f9c0  "...."
.long     0x00000028    # at addr 0x1f9c4  "(..."
.long     0x00001e50    # at addr 0x1f9c8  "P..."
.long     0xffff1fd4    # at addr 0x1f9cc  "...."
.long     0x00000041    # at addr 0x1f9d0  "A..."
.long     0x100e4200    # at addr 0x1f9d4  ".B.."
.long     0x0e44028c    # at addr 0x1f9d8  "..D."
.long     0x41038618    # at addr 0x1f9dc  "...A"
.long     0x0483200e    # at addr 0x1f9e0  ". .."
.long     0x41180e76    # at addr 0x1f9e4  "v..A"
.long     0x0e42100e    # at addr 0x1f9e8  "..B."
.long     0x00000008    # at addr 0x1f9ec  "...."
.long     0x0000006c    # at addr 0x1f9f0  "l..."
.long     0x00001e7c    # at addr 0x1f9f4  "|..."
.long     0xffff1ff8    # at addr 0x1f9f8  "...."
.long     0x00001886    # at addr 0x1f9fc  "...."
.long     0x100e4200    # at addr 0x1fa00  ".B.."
.long     0x0e45028f    # at addr 0x1fa04  "..E."
.long     0x45038e18    # at addr 0x1fa08  "...E"
.long     0x048d200e    # at addr 0x1fa0c  ". .."
.long     0x8c280e42    # at addr 0x1fa10  "B.(."
.long     0x300e4105    # at addr 0x1fa14  ".A.0"
.long     0x0e410686    # at addr 0x1fa18  "..A."
.long     0x4a078338    # at addr 0x1fa1c  "8..J"
.long     0x020a800e    # at addr 0x1fa20  "...."
.long     0x380e0ae7    # at addr 0x1fa24  "...8"
.long     0x41300e44    # at addr 0x1fa28  "D.0A"
.long     0x0e42280e    # at addr 0x1fa2c  ".(B."
.long     0x180e4220    # at addr 0x1fa30  " B.."
.long     0x42100e42    # at addr 0x1fa34  "B..B"
.long     0x0b42080e    # at addr 0x1fa38  "..B."
.long     0x0e0cdb03    # at addr 0x1fa3c  "...."
.long     0x0e440a88    # at addr 0x1fa40  "..D."
.long     0x0e5e0a90    # at addr 0x1fa44  "..^."
.long     0x0e420a88    # at addr 0x1fa48  "..B."
.long     0x93020a80    # at addr 0x1fa4c  "...."
.long     0x440a880e    # at addr 0x1fa50  "...D"
.long     0x560a900e    # at addr 0x1fa54  "...V"
.long     0x420a880e    # at addr 0x1fa58  "...B"
.long     0x000a800e    # at addr 0x1fa5c  "...."
.long     0x00000024    # at addr 0x1fa60  "$..."
.long     0x00001eec    # at addr 0x1fa64  "...."
.long     0xffff3818    # at addr 0x1fa68  ".8.."
.long     0x0000004a    # at addr 0x1fa6c  "J..."
.long     0x200e4800    # at addr 0x1fa70  ".H. "
.long     0x42280e57    # at addr 0x1fa74  "W.(B"
.long     0x0e4e300e    # at addr 0x1fa78  ".0N."
.long     0x200e4128    # at addr 0x1fa7c  "(A. "
.long     0x080e0a54    # at addr 0x1fa80  "T..."
.long     0x00000b41    # at addr 0x1fa84  "A..."
.long     0x00000024    # at addr 0x1fa88  "$..."
.long     0x00001f14    # at addr 0x1fa8c  "...."
.long     0xffff3840    # at addr 0x1fa90  "@8.."
.long     0x000000b5    # at addr 0x1fa94  "...."
.long     0x100e4500    # at addr 0x1fa98  ".E.."
.long     0x75020283    # at addr 0x1fa9c  "...u"
.long     0x46080e0a    # at addr 0x1faa0  "...F"
.long     0x0e0a520b    # at addr 0x1faa4  ".R.."
.long     0x000b4108    # at addr 0x1faa8  ".A.."
.long     0x00000000    # at addr 0x1faac  "...."
.long     0x0000003c    # at addr 0x1fab0  "<..."
.long     0x00001f3c    # at addr 0x1fab4  "<..."
.long     0xffff38d8    # at addr 0x1fab8  ".8.."
.long     0x000000dd    # at addr 0x1fabc  "...."
.long     0x100e4100    # at addr 0x1fac0  ".A.."
.long     0x0e440286    # at addr 0x1fac4  "..D."
.long     0x46038318    # at addr 0x1fac8  "...F"
.long     0x5402200e    # at addr 0x1facc  ". .T"
.long     0x41180e0a    # at addr 0x1fad0  "...A"
.long     0x0e41100e    # at addr 0x1fad4  "..A."
.long     0x760b4708    # at addr 0x1fad8  ".G.v"
.long     0x41180e0a    # at addr 0x1fadc  "...A"
.long     0x0e41100e    # at addr 0x1fae0  "..A."
.long     0x720b4808    # at addr 0x1fae4  ".H.r"
.long     0x0e41180e    # at addr 0x1fae8  "..A."
.long     0x080e4110    # at addr 0x1faec  ".A.."
.long     0x00000074    # at addr 0x1faf0  "t..."
.long     0x00001f7c    # at addr 0x1faf4  "|..."
.long     0xffff3978    # at addr 0x1faf8  "x9.."
.long     0x0000124e    # at addr 0x1fafc  "N..."
.long     0x100e4200    # at addr 0x1fb00  ".B.."
.long     0x0e45028f    # at addr 0x1fb04  "..E."
.long     0x45038e18    # at addr 0x1fb08  "...E"
.long     0x048d200e    # at addr 0x1fb0c  ". .."
.long     0x8c280e42    # at addr 0x1fb10  "B.(."
.long     0x300e4105    # at addr 0x1fb14  ".A.0"
.long     0x0e410686    # at addr 0x1fb18  "..A."
.long     0x4a078338    # at addr 0x1fb1c  "8..J"
.long     0x0301f00e    # at addr 0x1fb20  "...."
.long     0xf80e0658    # at addr 0x1fb24  "X..."
.long     0x800e4a01    # at addr 0x1fb28  ".J.."
.long     0x880e4d02    # at addr 0x1fb2c  ".M.."
.long     0x900e4202    # at addr 0x1fb30  ".B.."
.long     0xf00e5a02    # at addr 0x1fb34  ".Z.."
.long     0x0e0a6101    # at addr 0x1fb38  ".a.."
.long     0x300e4438    # at addr 0x1fb3c  "8D.0"
.long     0x42280e41    # at addr 0x1fb40  "A.(B"
.long     0x0e42200e    # at addr 0x1fb44  ". B."
.long     0x100e4218    # at addr 0x1fb48  ".B.."
.long     0x41080e42    # at addr 0x1fb4c  "B..A"
.long     0x0acd030b    # at addr 0x1fb50  "...."
.long     0x5001f80e    # at addr 0x1fb54  "...P"
.long     0x4702800e    # at addr 0x1fb58  "...G"
.long     0x4402880e    # at addr 0x1fb5c  "...D"
.long     0x5b02900e    # at addr 0x1fb60  "...["
.long     0x0001f00e    # at addr 0x1fb64  "...."
.long     0x00000024    # at addr 0x1fb68  "$..."
.long     0x00000000    # at addr 0x1fb6c  "...."
.long     0x00527a01    # at addr 0x1fb70  ".zR."
.long     0x01107801    # at addr 0x1fb74  ".x.."
.long     0x08070c1b    # at addr 0x1fb78  "...."
.long     0xf00e0190    # at addr 0x1fb7c  "...."
.long     0x86078301    # at addr 0x1fb80  "...."
.long     0x8d058c06    # at addr 0x1fb84  "...."
.long     0x8f038e04    # at addr 0x1fb88  "...."
.long     0x00000002    # at addr 0x1fb8c  "...."
.long     0x00000010    # at addr 0x1fb90  "...."
.long     0x0000002c    # at addr 0x1fb94  ",..."
.long     0xfffe5226    # at addr 0x1fb98  "&R.."
.long     0x00000005    # at addr 0x1fb9c  "...."
.long     0x00000000    # at addr 0x1fba0  "...."
.long     0x00000068    # at addr 0x1fba4  "h..."
.long     0x00002030    # at addr 0x1fba8  "0 .."
.long     0xffff4b14    # at addr 0x1fbac  ".K.."
.long     0x0000019e    # at addr 0x1fbb0  "...."
.long     0x100e4200    # at addr 0x1fbb4  ".B.."
.long     0x0e42028f    # at addr 0x1fbb8  "..B."
.long     0x42038e18    # at addr 0x1fbbc  "...B"
.long     0x048d200e    # at addr 0x1fbc0  ". .."
.long     0x8c280e45    # at addr 0x1fbc4  "E.(."
.long     0x300e4405    # at addr 0x1fbc8  ".D.0"
.long     0x0e440686    # at addr 0x1fbcc  "..D."
.long     0x47078338    # at addr 0x1fbd0  "8..G"
.long     0x9302600e    # at addr 0x1fbd4  ".`.."
.long     0x0e5d680e    # at addr 0x1fbd8  ".h]."
.long     0x780e4770    # at addr 0x1fbdc  "pG.x"
.long     0x01800e47    # at addr 0x1fbe0  "G..."
.long     0x7b600e56    # at addr 0x1fbe4  "V.`{"
.long     0x0e57680e    # at addr 0x1fbe8  ".hW."
.long     0x780e4670    # at addr 0x1fbec  "pF.x"
.long     0x01800e44    # at addr 0x1fbf0  "D..."
.long     0x4e600e4e    # at addr 0x1fbf4  "N.`N"
.long     0x44380e0a    # at addr 0x1fbf8  "..8D"
.long     0x0e41300e    # at addr 0x1fbfc  ".0A."
.long     0x200e4228    # at addr 0x1fc00  "(B. "
.long     0x42180e42    # at addr 0x1fc04  "B..B"
.long     0x0e42100e    # at addr 0x1fc08  "..B."
.long     0x000b4508    # at addr 0x1fc0c  ".E.."
.long     0x00000020    # at addr 0x1fc10  " ..."
.long     0x00000000    # at addr 0x1fc14  "...."
.long     0x00527a01    # at addr 0x1fc18  ".zR."
.long     0x01107801    # at addr 0x1fc1c  ".x.."
.long     0x08070c1b    # at addr 0x1fc20  "...."
.long     0x600e0190    # at addr 0x1fc24  "...`"
.long     0x06860783    # at addr 0x1fc28  "...."
.long     0x048d058c    # at addr 0x1fc2c  "...."
.long     0x028f038e    # at addr 0x1fc30  "...."
.long     0x00000010    # at addr 0x1fc34  "...."
.long     0x00000028    # at addr 0x1fc38  "(..."
.long     0xfffe5187    # at addr 0x1fc3c  ".Q.."
.long     0x00000005    # at addr 0x1fc40  "...."
.long     0x00000000    # at addr 0x1fc44  "...."
.long     0x00000028    # at addr 0x1fc48  "(..."
.long     0x000020d4    # at addr 0x1fc4c  ". .."
.long     0xffff4c10    # at addr 0x1fc50  ".L.."
.long     0x00000039    # at addr 0x1fc54  "9..."
.long     0x100e4600    # at addr 0x1fc58  ".F.."
.long     0x0e41028c    # at addr 0x1fc5c  "..A."
.long     0x44038618    # at addr 0x1fc60  "...D"
.long     0x0483200e    # at addr 0x1fc64  ". .."
.long     0x41180e6a    # at addr 0x1fc68  "j..A"
.long     0x0e42100e    # at addr 0x1fc6c  "..B."
.long     0x00000008    # at addr 0x1fc70  "...."
.long     0x00000010    # at addr 0x1fc74  "...."
.long     0x00002100    # at addr 0x1fc78  ".!.."
.long     0xffff4c24    # at addr 0x1fc7c  "$L.."
.long     0x00000015    # at addr 0x1fc80  "...."
.long     0x00000000    # at addr 0x1fc84  "...."
.long     0x00000010    # at addr 0x1fc88  "...."
.long     0x00002114    # at addr 0x1fc8c  ".!.."
.long     0xffff4c30    # at addr 0x1fc90  "0L.."
.long     0x00000015    # at addr 0x1fc94  "...."
.long     0x00000000    # at addr 0x1fc98  "...."
.long     0x00000010    # at addr 0x1fc9c  "...."
.long     0x00002128    # at addr 0x1fca0  "(!.."
.long     0xffff4c3c    # at addr 0x1fca4  "<L.."
.long     0x00000039    # at addr 0x1fca8  "9..."
.long     0x00000000    # at addr 0x1fcac  "...."
.long     0x00000010    # at addr 0x1fcb0  "...."
.long     0x0000213c    # at addr 0x1fcb4  "<!.."
.long     0xffff4c68    # at addr 0x1fcb8  "hL.."
.long     0x00000019    # at addr 0x1fcbc  "...."
.long     0x00000000    # at addr 0x1fcc0  "...."
.long     0x00000014    # at addr 0x1fcc4  "...."
.long     0x00002150    # at addr 0x1fcc8  "P!.."
.long     0xffff4c74    # at addr 0x1fccc  "tL.."
.long     0x0000003b    # at addr 0x1fcd0  ";..."
.long     0x100e4800    # at addr 0x1fcd4  ".H.."
.long     0x00080e72    # at addr 0x1fcd8  "r..."
.long     0x00000010    # at addr 0x1fcdc  "...."
.long     0x00000a44    # at addr 0x1fce0  "D..."
.long     0xfffe50e4    # at addr 0x1fce4  ".P.."
.long     0x00000005    # at addr 0x1fce8  "...."
.long     0x00000000    # at addr 0x1fcec  "...."
.long     0x00000050    # at addr 0x1fcf0  "P..."
.long     0x0000217c    # at addr 0x1fcf4  "|!.."
.long     0xffff4c88    # at addr 0x1fcf8  ".L.."
.long     0x00000078    # at addr 0x1fcfc  "x..."
.long     0x100e4600    # at addr 0x1fd00  ".F.."
.long     0x0e49028f    # at addr 0x1fd04  "..I."
.long     0x45038e18    # at addr 0x1fd08  "...E"
.long     0x048d200e    # at addr 0x1fd0c  ". .."
.long     0x8c280e45    # at addr 0x1fd10  "E.(."
.long     0x300e4405    # at addr 0x1fd14  ".D.0"
.long     0x0e410686    # at addr 0x1fd18  "..A."
.long     0x47078338    # at addr 0x1fd1c  "8..G"
.long     0x0e55500e    # at addr 0x1fd20  ".PU."
.long     0x600e5758    # at addr 0x1fd24  "XW.`"
.long     0x41680e49    # at addr 0x1fd28  "I.hA"
.long     0x0e52700e    # at addr 0x1fd2c  ".pR."
.long     0x300e4138    # at addr 0x1fd30  "8A.0"
.long     0x42280e41    # at addr 0x1fd34  "A.(B"
.long     0x0e42200e    # at addr 0x1fd38  ". B."
.long     0x100e4218    # at addr 0x1fd3c  ".B.."
.long     0x00080e42    # at addr 0x1fd40  "B..."
.long     0x00000064    # at addr 0x1fd44  "d..."
.long     0x000021d0    # at addr 0x1fd48  ".!.."
.long     0xffff4cb4    # at addr 0x1fd4c  ".L.."
.long     0x000000e9    # at addr 0x1fd50  "...."
.long     0x100e4600    # at addr 0x1fd54  ".F.."
.long     0x0e49028f    # at addr 0x1fd58  "..I."
.long     0x45038e18    # at addr 0x1fd5c  "...E"
.long     0x048d200e    # at addr 0x1fd60  ". .."
.long     0x8c280e45    # at addr 0x1fd64  "E.(."
.long     0x300e4105    # at addr 0x1fd68  ".A.0"
.long     0x0e440686    # at addr 0x1fd6c  "..D."
.long     0x47078338    # at addr 0x1fd70  "8..G"
.long     0x0e66600e    # at addr 0x1fd74  ".`f."
.long     0x700e5568    # at addr 0x1fd78  "hU.p"
.long     0x42780e43    # at addr 0x1fd7c  "C.xB"
.long     0x5301800e    # at addr 0x1fd80  "...S"
.long     0x0e58600e    # at addr 0x1fd84  ".`X."
.long     0x700e4368    # at addr 0x1fd88  "hC.p"
.long     0x50780e46    # at addr 0x1fd8c  "F.xP"
.long     0x5c01800e    # at addr 0x1fd90  "...\"
.long     0x0e56600e    # at addr 0x1fd94  ".`V."
.long     0x300e4438    # at addr 0x1fd98  "8D.0"
.long     0x42280e41    # at addr 0x1fd9c  "A.(B"
.long     0x0e42200e    # at addr 0x1fda0  ". B."
.long     0x100e4218    # at addr 0x1fda4  ".B.."
.long     0x00080e42    # at addr 0x1fda8  "B..."
.long     0x00000010    # at addr 0x1fdac  "...."
.long     0x00002238    # at addr 0x1fdb0  "8".."
.long     0xffff4d3c    # at addr 0x1fdb4  "<M.."
.long     0x0000000e    # at addr 0x1fdb8  "...."
.long     0x00000000    # at addr 0x1fdbc  "...."
.long     0x00000028    # at addr 0x1fdc0  "(..."
.long     0x0000224c    # at addr 0x1fdc4  "L".."
.long     0xffff4d38    # at addr 0x1fdc8  "8M.."
.long     0x00000093    # at addr 0x1fdcc  "...."
.long     0x100e4c00    # at addr 0x1fdd0  ".L.."
.long     0x0e48028c    # at addr 0x1fdd4  "..H."
.long     0x41038618    # at addr 0x1fdd8  "...A"
.long     0x0483200e    # at addr 0x1fddc  ". .."
.long     0x180e7a02    # at addr 0x1fde0  ".z.."
.long     0x42100e41    # at addr 0x1fde4  "A..B"
.long     0x0000080e    # at addr 0x1fde8  "...."
.long     0x00000010    # at addr 0x1fdec  "...."
.long     0x00002278    # at addr 0x1fdf0  "x".."
.long     0xffff4dac    # at addr 0x1fdf4  ".M.."
.long     0x00000017    # at addr 0x1fdf8  "...."
.long     0x00000000    # at addr 0x1fdfc  "...."
.long     0x00000010    # at addr 0x1fe00  "...."
.long     0x0000228c    # at addr 0x1fe04  ".".."
.long     0xffff4db8    # at addr 0x1fe08  ".M.."
.long     0x00000010    # at addr 0x1fe0c  "...."
.long     0x00000000    # at addr 0x1fe10  "...."
.long     0x00000010    # at addr 0x1fe14  "...."
.long     0x000022a0    # at addr 0x1fe18  ".".."
.long     0xffff4db4    # at addr 0x1fe1c  ".M.."
.long     0x0000001c    # at addr 0x1fe20  "...."
.long     0x00000000    # at addr 0x1fe24  "...."
.long     0x00000010    # at addr 0x1fe28  "...."
.long     0x000022b4    # at addr 0x1fe2c  ".".."
.long     0xffff4dc0    # at addr 0x1fe30  ".M.."
.long     0x00000018    # at addr 0x1fe34  "...."
.long     0x00000000    # at addr 0x1fe38  "...."
.long     0x00000018    # at addr 0x1fe3c  "...."
.long     0x000022c8    # at addr 0x1fe40  ".".."
.long     0xffff4dcc    # at addr 0x1fe44  ".M.."
.long     0x00000091    # at addr 0x1fe48  "...."
.long     0x500e4800    # at addr 0x1fe4c  ".H.P"
.long     0x0e0a8302    # at addr 0x1fe50  "...."
.long     0x000b4108    # at addr 0x1fe54  ".A.."
.long     0x00000014    # at addr 0x1fe58  "...."
.long     0x00000000    # at addr 0x1fe5c  "...."
.long     0x00527a01    # at addr 0x1fe60  ".zR."
.long     0x01107801    # at addr 0x1fe64  ".x.."
.long     0x08070c1b    # at addr 0x1fe68  "...."
.long     0x500e0190    # at addr 0x1fe6c  "...P"
.long     0x00000010    # at addr 0x1fe70  "...."
.long     0x0000001c    # at addr 0x1fe74  "...."
.long     0xfffe4f55    # at addr 0x1fe78  "UO.."
.long     0x00000005    # at addr 0x1fe7c  "...."
.long     0x00000000    # at addr 0x1fe80  "...."
.long     0x00000018    # at addr 0x1fe84  "...."
.long     0x00002310    # at addr 0x1fe88  ".#.."
.long     0xffff4e24    # at addr 0x1fe8c  "$N.."
.long     0x0000008d    # at addr 0x1fe90  "...."
.long     0x500e4800    # at addr 0x1fe94  ".H.P"
.long     0x0e0a7f02    # at addr 0x1fe98  "..."
.long     0x000b4108    # at addr 0x1fe9c  ".A.."
.long     0x00000010    # at addr 0x1fea0  "...."
.long     0x0000004c    # at addr 0x1fea4  "L..."
.long     0xfffe4f2a    # at addr 0x1fea8  "*O.."
.long     0x00000005    # at addr 0x1feac  "...."
.long     0x00000000    # at addr 0x1feb0  "...."
.long     0x00000010    # at addr 0x1feb4  "...."
.long     0x00002340    # at addr 0x1feb8  "@#.."
.long     0xffff4e84    # at addr 0x1febc  ".N.."
.long     0x00000010    # at addr 0x1fec0  "...."
.long     0x00000000    # at addr 0x1fec4  "...."
.long     0x00000010    # at addr 0x1fec8  "...."
.long     0x00002354    # at addr 0x1fecc  "T#.."
.long     0xffff4e80    # at addr 0x1fed0  ".N.."
.long     0x00000013    # at addr 0x1fed4  "...."
.long     0x00000000    # at addr 0x1fed8  "...."
.long     0x00000018    # at addr 0x1fedc  "...."
.long     0x00002368    # at addr 0x1fee0  "h#.."
.long     0xffff4e8c    # at addr 0x1fee4  ".N.."
.long     0x0000009d    # at addr 0x1fee8  "...."
.long     0x500e4800    # at addr 0x1feec  ".H.P"
.long     0x0e0a8f02    # at addr 0x1fef0  "...."
.long     0x000b4108    # at addr 0x1fef4  ".A.."
.long     0x00000010    # at addr 0x1fef8  "...."
.long     0x00002384    # at addr 0x1fefc  ".#.."
.long     0xffff4f10    # at addr 0x1ff00  ".O.."
.long     0x00000014    # at addr 0x1ff04  "...."
.long     0x00000000    # at addr 0x1ff08  "...."
.long     0x00000010    # at addr 0x1ff0c  "...."
.long     0x00002398    # at addr 0x1ff10  ".#.."
.long     0xffff4f1c    # at addr 0x1ff14  ".O.."
.long     0x00000015    # at addr 0x1ff18  "...."
.long     0x00000000    # at addr 0x1ff1c  "...."
.long     0x00000010    # at addr 0x1ff20  "...."
.long     0x000023ac    # at addr 0x1ff24  ".#.."
.long     0xffff4f28    # at addr 0x1ff28  "(O.."
.long     0x0000000e    # at addr 0x1ff2c  "...."
.long     0x00000000    # at addr 0x1ff30  "...."
.long     0x00000018    # at addr 0x1ff34  "...."
.long     0x000023c0    # at addr 0x1ff38  ".#.."
.long     0xffff4f24    # at addr 0x1ff3c  "$O.."
.long     0x00000097    # at addr 0x1ff40  "...."
.long     0x500e4800    # at addr 0x1ff44  ".H.P"
.long     0x0e0a8902    # at addr 0x1ff48  "...."
.long     0x000b4108    # at addr 0x1ff4c  ".A.."
.long     0x00000010    # at addr 0x1ff50  "...."
.long     0x000000fc    # at addr 0x1ff54  "...."
.long     0xfffe4e7f    # at addr 0x1ff58  "N.."
.long     0x00000005    # at addr 0x1ff5c  "...."
.long     0x00000000    # at addr 0x1ff60  "...."
.long     0x00000018    # at addr 0x1ff64  "...."
.long     0x000023f0    # at addr 0x1ff68  ".#.."
.long     0xffff4f94    # at addr 0x1ff6c  ".O.."
.long     0x00000098    # at addr 0x1ff70  "...."
.long     0x500e4800    # at addr 0x1ff74  ".H.P"
.long     0x0e0a8a02    # at addr 0x1ff78  "...."
.long     0x000b4108    # at addr 0x1ff7c  ".A.."
.long     0x00000010    # at addr 0x1ff80  "...."
.long     0x0000012c    # at addr 0x1ff84  ",..."
.long     0xfffe4e54    # at addr 0x1ff88  "TN.."
.long     0x00000005    # at addr 0x1ff8c  "...."
.long     0x00000000    # at addr 0x1ff90  "...."
.long     0x00000010    # at addr 0x1ff94  "...."
.long     0x00002420    # at addr 0x1ff98  " $.."
.long     0xffff5004    # at addr 0x1ff9c  ".P.."
.long     0x00000010    # at addr 0x1ffa0  "...."
.long     0x00000000    # at addr 0x1ffa4  "...."
.long     0x00000010    # at addr 0x1ffa8  "...."
.long     0x00002434    # at addr 0x1ffac  "4$.."
.long     0xffff5000    # at addr 0x1ffb0  ".P.."
.long     0x0000001b    # at addr 0x1ffb4  "...."
.long     0x00000000    # at addr 0x1ffb8  "...."
.long     0x00000010    # at addr 0x1ffbc  "...."
.long     0x00002448    # at addr 0x1ffc0  "H$.."
.long     0xffff500c    # at addr 0x1ffc4  ".P.."
.long     0x00000017    # at addr 0x1ffc8  "...."
.long     0x00000000    # at addr 0x1ffcc  "...."
.long     0x00000010    # at addr 0x1ffd0  "...."
.long     0x0000245c    # at addr 0x1ffd4  "\$.."
.long     0xffff5018    # at addr 0x1ffd8  ".P.."
.long     0x00000010    # at addr 0x1ffdc  "...."
.long     0x00000000    # at addr 0x1ffe0  "...."
.long     0x00000010    # at addr 0x1ffe4  "...."
.long     0x00002470    # at addr 0x1ffe8  "p$.."
.long     0xffff5014    # at addr 0x1ffec  ".P.."
.long     0x00000018    # at addr 0x1fff0  "...."
.long     0x00000000    # at addr 0x1fff4  "...."
.long     0x00000010    # at addr 0x1fff8  "...."
.long     0x00002484    # at addr 0x1fffc  ".$.."
.long     0xffff5020    # at addr 0x20000  " P.."
.long     0x00000017    # at addr 0x20004  "...."
.long     0x00000000    # at addr 0x20008  "...."
.byte     0x10    # "."
.byte     0x00    # "."
Var0x2000e:       # next=0x22010, start=0x1db78, end=0x20b4f
.long     0x24980000    # at addr 0x2000e  "...$"
.long     0x502c0000    # at addr 0x20012  "..,P"
.long     0x001cffff    # at addr 0x20016  "...."
.long     0x00000000    # at addr 0x2001a  "...."
.long     0x00380000    # at addr 0x2001e  "..8."
.long     0x24ac0000    # at addr 0x20022  "...$"
.long     0x50380000    # at addr 0x20026  "..8P"
.long     0x0127ffff    # at addr 0x2002a  "..'."
.long     0x42000000    # at addr 0x2002e  "...B"
.long     0x028e100e    # at addr 0x20032  "...."
.long     0x8d180e48    # at addr 0x20036  "H..."
.long     0x200e4503    # at addr 0x2003a  ".E. "
.long     0x0e44048c    # at addr 0x2003e  "..D."
.long     0x47058628    # at addr 0x20042  "(..G"
.long     0x0202e00e    # at addr 0x20046  "...."
.long     0x280e0ab5    # at addr 0x2004a  "...("
.long     0x42200e44    # at addr 0x2004e  "D. B"
.long     0x0e42180e    # at addr 0x20052  "..B."
.long     0x080e4210    # at addr 0x20056  ".B.."
.long     0x005c0b47    # at addr 0x2005a  "G.\."
.long     0x24e80000    # at addr 0x2005e  "...$"
.long     0x512c0000    # at addr 0x20062  "..,Q"
.long     0x0091ffff    # at addr 0x20066  "...."
.long     0x46000000    # at addr 0x2006a  "...F"
.long     0x028f100e    # at addr 0x2006e  "...."
.long     0x8e180e45    # at addr 0x20072  "E..."
.long     0x200e4503    # at addr 0x20076  ".E. "
.long     0x0e42048d    # at addr 0x2007a  "..B."
.long     0x41058c28    # at addr 0x2007e  "(..A"
.long     0x0686300e    # at addr 0x20082  ".0.."
.long     0x83380e41    # at addr 0x20086  "A.8."
.long     0x500e4607    # at addr 0x2008a  ".F.P"
.long     0x380e0a76    # at addr 0x2008e  "v..8"
.long     0x41300e43    # at addr 0x20092  "C.0A"
.long     0x0e42280e    # at addr 0x20096  ".(B."
.long     0x180e4220    # at addr 0x2009a  " B.."
.long     0x42100e42    # at addr 0x2009e  "B..B"
.long     0x0b44080e    # at addr 0x200a2  "..D."
.long     0x49380e5a    # at addr 0x200a6  "Z.8I"
.long     0x0e41300e    # at addr 0x200aa  ".0A."
.long     0x200e4228    # at addr 0x200ae  "(B. "
.long     0x42180e42    # at addr 0x200b2  "B..B"
.long     0x0e42100e    # at addr 0x200b6  "..B."
.long     0x00100008    # at addr 0x200ba  "...."
.long     0x25480000    # at addr 0x200be  "..H%"
.long     0x516c0000    # at addr 0x200c2  "..lQ"
.long     0x0019ffff    # at addr 0x200c6  "...."
.long     0x00000000    # at addr 0x200ca  "...."
.long     0x010c0000    # at addr 0x200ce  "...."
.long     0x255c0000    # at addr 0x200d2  "..\%"
.long     0x51780000    # at addr 0x200d6  "..xQ"
.long     0x0441ffff    # at addr 0x200da  "..A."
.long     0x46000000    # at addr 0x200de  "...F"
.long     0x028f100e    # at addr 0x200e2  "...."
.long     0x8e180e42    # at addr 0x200e6  "B..."
.long     0x200e4203    # at addr 0x200ea  ".B. "
.long     0x0e42048d    # at addr 0x200ee  "..B."
.long     0x44058c28    # at addr 0x200f2  "(..D"
.long     0x0686300e    # at addr 0x200f6  ".0.."
.long     0x83380e44    # at addr 0x200fa  "D.8."
.long     0x700e4707    # at addr 0x200fe  ".G.p"
.long     0x780eff02    # at addr 0x20102  "...x"
.long     0x01800e54    # at addr 0x20106  "T..."
.long     0x01880e47    # at addr 0x2010a  "G..."
.long     0x01900e4a    # at addr 0x2010e  "J..."
.long     0x01980e49    # at addr 0x20112  "I..."
.long     0x01a00e45    # at addr 0x20116  "E..."
.long     0x44700e49    # at addr 0x2011a  "I.pD"
.long     0x41380e0a    # at addr 0x2011e  "..8A"
.long     0x0e41300e    # at addr 0x20122  ".0A."
.long     0x200e4228    # at addr 0x20126  "(B. "
.long     0x42180e42    # at addr 0x2012a  "B..B"
.long     0x0e42100e    # at addr 0x2012e  "..B."
.long     0x020b4408    # at addr 0x20132  ".D.."
.long     0x780e0a59    # at addr 0x20136  "Y..x"
.long     0x0a5a0b4f    # at addr 0x2013a  "O.Z."
.long     0x0e49380e    # at addr 0x2013e  ".8I."
.long     0x280e4430    # at addr 0x20142  "0D.("
.long     0x42200e47    # at addr 0x20146  "G. B"
.long     0x0e42180e    # at addr 0x2014a  "..B."
.long     0x080e4210    # at addr 0x2014e  ".B.."
.long     0x0a5e0b4c    # at addr 0x20152  "L.^."
.long     0x0e47380e    # at addr 0x20156  ".8G."
.long     0x280e4c30    # at addr 0x2015a  "0L.("
.long     0x42200e44    # at addr 0x2015e  "D. B"
.long     0x0e42180e    # at addr 0x20162  "..B."
.long     0x080e4210    # at addr 0x20166  ".B.."
.long     0x0a620b45    # at addr 0x2016a  "E.b."
.long     0x0e47380e    # at addr 0x2016e  ".8G."
.long     0x280e4f30    # at addr 0x20172  "0O.("
.long     0x42200e44    # at addr 0x20176  "D. B"
.long     0x0e42180e    # at addr 0x2017a  "..B."
.long     0x080e4210    # at addr 0x2017e  ".B.."
.long     0x0e660b4e    # at addr 0x20182  "N.f."
.long     0x800e4578    # at addr 0x20186  "xE.."
.long     0x780e5901    # at addr 0x2018a  ".Y.x"
.long     0x44700e41    # at addr 0x2018e  "A.pD"
.long     0x41380e0a    # at addr 0x20192  "..8A"
.long     0x0e41300e    # at addr 0x20196  ".0A."
.long     0x200e4228    # at addr 0x2019a  "(B. "
.long     0x42180e42    # at addr 0x2019e  "B..B"
.long     0x0e42100e    # at addr 0x201a2  "..B."
.long     0x740b4508    # at addr 0x201a6  ".E.t"
.long     0x44780e0a    # at addr 0x201aa  "..xD"
.long     0x780e780b    # at addr 0x201ae  ".x.x"
.long     0x01800e57    # at addr 0x201b2  "W..."
.long     0x01880e49    # at addr 0x201b6  "I..."
.long     0x01900e45    # at addr 0x201ba  "E..."
.long     0x44700e49    # at addr 0x201be  "I.pD"
.long     0x41380e0a    # at addr 0x201c2  "..8A"
.long     0x0e41300e    # at addr 0x201c6  ".0A."
.long     0x200e4228    # at addr 0x201ca  "(B. "
.long     0x42180e42    # at addr 0x201ce  "B..B"
.long     0x0e42100e    # at addr 0x201d2  "..B."
.long     0x020b4408    # at addr 0x201d6  ".D.."
.long     0x780e0a47    # at addr 0x201da  "G..x"
.long     0x00200b45    # at addr 0x201de  "E. ."
.long     0x00000000    # at addr 0x201e2  "...."
.long     0x7a010000    # at addr 0x201e6  "...z"
.long     0x78010052    # at addr 0x201ea  "R..x"
.long     0x0c1b0110    # at addr 0x201ee  "...."
.long     0x01900807    # at addr 0x201f2  "...."
.long     0x0783700e    # at addr 0x201f6  ".p.."
.long     0x058c0686    # at addr 0x201fa  "...."
.long     0x038e048d    # at addr 0x201fe  "...."
.long     0x0010028f    # at addr 0x20202  "...."
.long     0x00280000    # at addr 0x20206  "..(."
.long     0x4bd50000    # at addr 0x2020a  "...K"
.long     0x0005fffe    # at addr 0x2020e  "...."
.long     0x00000000    # at addr 0x20212  "...."
.long     0x00100000    # at addr 0x20216  "...."
.long     0x26a40000    # at addr 0x2021a  "...&"
.long     0x54800000    # at addr 0x2021e  "...T"
.long     0x0020ffff    # at addr 0x20222  ".. ."
.long     0x00000000    # at addr 0x20226  "...."
.long     0x00180000    # at addr 0x2022a  "...."
.long     0x26b80000    # at addr 0x2022e  "...&"
.long     0x548c0000    # at addr 0x20232  "...T"
.long     0x008fffff    # at addr 0x20236  "...."
.long     0x48000000    # at addr 0x2023a  "...H"
.long     0x8102700e    # at addr 0x2023e  ".p.."
.long     0x41080e0a    # at addr 0x20242  "...A"
.long     0x0020000b    # at addr 0x20246  ".. ."
.long     0x26d40000    # at addr 0x2024a  "...&"
.long     0x55000000    # at addr 0x2024e  "...U"
.long     0x00d3ffff    # at addr 0x20252  "...."
.long     0x45000000    # at addr 0x20256  "...E"
.long     0x0283100e    # at addr 0x2025a  "...."
.long     0x01c00e4d    # at addr 0x2025e  "M..."
.long     0x0e0aba02    # at addr 0x20262  "...."
.long     0x080e4110    # at addr 0x20266  ".A.."
.long     0x00180b41    # at addr 0x2026a  "A..."
.long     0x26f80000    # at addr 0x2026e  "...&"
.long     0x55bc0000    # at addr 0x20272  "...U"
.long     0x0084ffff    # at addr 0x20276  "...."
.long     0x45000000    # at addr 0x2027a  "...E"
.long     0x0286100e    # at addr 0x2027e  "...."
.long     0x080e7702    # at addr 0x20282  ".w.."
.long     0x00180000    # at addr 0x20286  "...."
.long     0x27140000    # at addr 0x2028a  "...'"
.long     0x56300000    # at addr 0x2028e  "..0V"
.long     0x001effff    # at addr 0x20292  "...."
.long     0x45000000    # at addr 0x20296  "...E"
.long     0x0283100e    # at addr 0x2029a  "...."
.long     0x080e0a53    # at addr 0x2029e  "S..."
.long     0x00100b41    # at addr 0x202a2  "A..."
.long     0x27300000    # at addr 0x202a6  "..0'"
.long     0x56340000    # at addr 0x202aa  "..4V"
.long     0x0025ffff    # at addr 0x202ae  "..%."
.long     0x60000000    # at addr 0x202b2  "...`"
.long     0x0010100e    # at addr 0x202b6  "...."
.long     0x27440000    # at addr 0x202ba  "..D'"
.long     0x56500000    # at addr 0x202be  "..PV"
.long     0x0006ffff    # at addr 0x202c2  "...."
.long     0x00000000    # at addr 0x202c6  "...."
.long     0x00200000    # at addr 0x202ca  ".. ."
.long     0x27580000    # at addr 0x202ce  "..X'"
.long     0x564c0000    # at addr 0x202d2  "..LV"
.long     0x003effff    # at addr 0x202d6  "..>."
.long     0x45000000    # at addr 0x202da  "...E"
.long     0x0283100e    # at addr 0x202de  "...."
.long     0x080e0a60    # at addr 0x202e2  "`..."
.long     0x0a480b4b    # at addr 0x202e6  "K.H."
.long     0x0b41080e    # at addr 0x202ea  "..A."
.long     0x00100000    # at addr 0x202ee  "...."
.long     0x277c0000    # at addr 0x202f2  "..|'"
.long     0x56680000    # at addr 0x202f6  "..hV"
.long     0x0025ffff    # at addr 0x202fa  "..%."
.long     0x60000000    # at addr 0x202fe  "...`"
.long     0x0014100e    # at addr 0x20302  "...."
.long     0x27900000    # at addr 0x20306  "...'"
.long     0x56840000    # at addr 0x2030a  "...V"
.long     0x0084ffff    # at addr 0x2030e  "...."
.long     0x02000000    # at addr 0x20312  "...."
.long     0x4c100e5c    # at addr 0x20316  "\..L"
.long     0x0014080e    # at addr 0x2031a  "...."
.long     0x27a80000    # at addr 0x2031e  "...'"
.long     0x56fc0000    # at addr 0x20322  "...V"
.long     0x0058ffff    # at addr 0x20326  "..X."
.long     0x02000000    # at addr 0x2032a  "...."
.long     0x00100e53    # at addr 0x2032e  "S..."
.long     0x00180000    # at addr 0x20332  "...."
.long     0x27c00000    # at addr 0x20336  "...'"
.long     0x57440000    # at addr 0x2033a  "..DW"
.long     0x001dffff    # at addr 0x2033e  "...."
.long     0x46000000    # at addr 0x20342  "...F"
.long     0x028c100e    # at addr 0x20346  "...."
.long     0x00080e4f    # at addr 0x2034a  "O..."
.long     0x00180000    # at addr 0x2034e  "...."
.long     0x27dc0000    # at addr 0x20352  "...'"
.long     0x57480000    # at addr 0x20356  "..HW"
.long     0x0032ffff    # at addr 0x2035a  "..2."
.long     0x4b000000    # at addr 0x2035e  "...K"
.long     0x0a61100e    # at addr 0x20362  "..a."
.long     0x0b41080e    # at addr 0x20366  "..A."
.long     0x00240000    # at addr 0x2036a  "..$."
.long     0x27f80000    # at addr 0x2036e  "...'"
.long     0x576c0000    # at addr 0x20372  "..lW"
.long     0x002effff    # at addr 0x20376  "...."
.long     0x46000000    # at addr 0x2037a  "...F"
.long     0x028c100e    # at addr 0x2037e  "...."
.long     0x86180e44    # at addr 0x20382  "D..."
.long     0x200e4a03    # at addr 0x20386  ".J. "
.long     0x4a180e49    # at addr 0x2038a  "I..J"
.long     0x0e42100e    # at addr 0x2038e  "..B."
.long     0x00180008    # at addr 0x20392  "...."
.long     0x28200000    # at addr 0x20396  ".. ("
.long     0x57740000    # at addr 0x2039a  "..tW"
.long     0x0017ffff    # at addr 0x2039e  "...."
.long     0x45000000    # at addr 0x203a2  "...E"
.long     0x0286100e    # at addr 0x203a6  "...."
.long     0x00080e4c    # at addr 0x203aa  "L..."
.long     0x001c0000    # at addr 0x203ae  "...."
.long     0x283c0000    # at addr 0x203b2  "..<("
.long     0x57780000    # at addr 0x203b6  "..xW"
.long     0x003bffff    # at addr 0x203ba  "..;."
.long     0x45000000    # at addr 0x203be  "...E"
.long     0x0e41100e    # at addr 0x203c2  "..A."
.long     0x100e5208    # at addr 0x203c6  ".R.."
.long     0x00000000    # at addr 0x203ca  "...."
.long     0x00480000    # at addr 0x203ce  "..H."
.long     0x285c0000    # at addr 0x203d2  "..\("
.long     0x57980000    # at addr 0x203d6  "...W"
.long     0x0100ffff    # at addr 0x203da  "...."
.long     0x46000000    # at addr 0x203de  "...F"
.long     0x028f100e    # at addr 0x203e2  "...."
.long     0x8e180e45    # at addr 0x203e6  "E..."
.long     0x200e4503    # at addr 0x203ea  ".E. "
.long     0x0e49048d    # at addr 0x203ee  "..I."
.long     0x44058c28    # at addr 0x203f2  "(..D"
.long     0x0686300e    # at addr 0x203f6  ".0.."
.long     0x83380e41    # at addr 0x203fa  "A.8."
.long     0x500e4407    # at addr 0x203fe  ".D.P"
.long     0x0e0a9c02    # at addr 0x20402  "...."
.long     0x300e4438    # at addr 0x20406  "8D.0"
.long     0x42280e41    # at addr 0x2040a  "A.(B"
.long     0x0e42200e    # at addr 0x2040e  ". B."
.long     0x100e4218    # at addr 0x20412  ".B.."
.long     0x45080e42    # at addr 0x20416  "B..E"
.long     0x0018000b    # at addr 0x2041a  "...."
.long     0x28a80000    # at addr 0x2041e  "...("
.long     0x584c0000    # at addr 0x20422  "..LX"
.long     0x0025ffff    # at addr 0x20426  "..%."
.long     0x48000000    # at addr 0x2042a  "...H"
.long     0x0e42180e    # at addr 0x2042e  "..B."
.long     0x080e5a20    # at addr 0x20432  " Z.."
.long     0x001c0000    # at addr 0x20436  "...."
.long     0x28c40000    # at addr 0x2043a  "...("
.long     0x58600000    # at addr 0x2043e  "..`X"
.long     0x002fffff    # at addr 0x20442  "../."
.long     0x46000000    # at addr 0x20446  "...F"
.long     0x028c100e    # at addr 0x2044a  "...."
.long     0x080e0a56    # at addr 0x2044e  "V..."
.long     0x00000b44    # at addr 0x20452  "D..."
.long     0x00440000    # at addr 0x20456  "..D."
.long     0x28e40000    # at addr 0x2045a  "...("
.long     0x58700000    # at addr 0x2045e  "..pX"
.long     0x00d1ffff    # at addr 0x20462  "...."
.long     0x46000000    # at addr 0x20466  "...F"
.long     0x028e100e    # at addr 0x2046a  "...."
.long     0x8d180e42    # at addr 0x2046e  "B..."
.long     0x200e4c03    # at addr 0x20472  ".L. "
.long     0x0e41048c    # at addr 0x20476  "..A."
.long     0x43058628    # at addr 0x2047a  "(..C"
.long     0x0683300e    # at addr 0x2047e  ".0.."
.long     0x02400e44    # at addr 0x20482  "D.@."
.long     0x300e0a6f    # at addr 0x20486  "o..0"
.long     0x41280e44    # at addr 0x2048a  "D.(A"
.long     0x0e42200e    # at addr 0x2048e  ". B."
.long     0x100e4218    # at addr 0x20492  ".B.."
.long     0x4a080e42    # at addr 0x20496  "B..J"
.long     0x0000000b    # at addr 0x2049a  "...."
.long     0x004c0000    # at addr 0x2049e  "..L."
.long     0x292c0000    # at addr 0x204a2  "..,)"
.long     0x59080000    # at addr 0x204a6  "...Y"
.long     0x04b5ffff    # at addr 0x204aa  "...."
.long     0x46000000    # at addr 0x204ae  "...F"
.long     0x028f100e    # at addr 0x204b2  "...."
.long     0x8e180e42    # at addr 0x204b6  "B..."
.long     0x200e4203    # at addr 0x204ba  ".B. "
.long     0x0e42048d    # at addr 0x204be  "..B."
.long     0x41058c28    # at addr 0x204c2  "(..A"
.long     0x0686300e    # at addr 0x204c6  ".0.."
.long     0x83380e41    # at addr 0x204ca  "A.8."
.long     0x600e4407    # at addr 0x204ce  ".D.`"
.long     0x0e0ac702    # at addr 0x204d2  "...."
.long     0x300e4438    # at addr 0x204d6  "8D.0"
.long     0x42280e41    # at addr 0x204da  "A.(B"
.long     0x0e42200e    # at addr 0x204de  ". B."
.long     0x100e4218    # at addr 0x204e2  ".B.."
.long     0x4a080e42    # at addr 0x204e6  "B..J"
.long     0x0000000b    # at addr 0x204ea  "...."
.long     0x00240000    # at addr 0x204ee  "..$."
.long     0x297c0000    # at addr 0x204f2  "..|)"
.long     0x5d780000    # at addr 0x204f6  "..x]"
.long     0x00c7ffff    # at addr 0x204fa  "...."
.long     0x46000000    # at addr 0x204fe  "...F"
.long     0x028d100e    # at addr 0x20502  "...."
.long     0x8c180e42    # at addr 0x20506  "B..."
.long     0x200e4103    # at addr 0x2050a  ".A. "
.long     0x0e410486    # at addr 0x2050e  "..A."
.long     0x47058328    # at addr 0x20512  "(..G"
.long     0x0014400e    # at addr 0x20516  ".@.."
.long     0x10400000    # at addr 0x2051a  "..@."
.long     0x48c60000    # at addr 0x2051e  "...H"
.long     0x0005fffe    # at addr 0x20522  "...."
.long     0x00000000    # at addr 0x20526  "...."
.long     0x00000000    # at addr 0x2052a  "...."
.long     0x004c0000    # at addr 0x2052e  "..L."
.long     0x29bc0000    # at addr 0x20532  "...)"
.long     0x5e080000    # at addr 0x20536  "...^"
.long     0x04b5ffff    # at addr 0x2053a  "...."
.long     0x46000000    # at addr 0x2053e  "...F"
.long     0x028f100e    # at addr 0x20542  "...."
.long     0x8e180e42    # at addr 0x20546  "B..."
.long     0x200e4203    # at addr 0x2054a  ".B. "
.long     0x0e42048d    # at addr 0x2054e  "..B."
.long     0x41058c28    # at addr 0x20552  "(..A"
.long     0x0686300e    # at addr 0x20556  ".0.."
.long     0x83380e41    # at addr 0x2055a  "A.8."
.long     0x600e4407    # at addr 0x2055e  ".D.`"
.long     0x0e0ac902    # at addr 0x20562  "...."
.long     0x300e4438    # at addr 0x20566  "8D.0"
.long     0x42280e41    # at addr 0x2056a  "A.(B"
.long     0x0e42200e    # at addr 0x2056e  ". B."
.long     0x100e4218    # at addr 0x20572  ".B.."
.long     0x48080e42    # at addr 0x20576  "B..H"
.long     0x0000000b    # at addr 0x2057a  "...."
.long     0x00240000    # at addr 0x2057e  "..$."
.long     0x2a0c0000    # at addr 0x20582  "...*"
.long     0x62780000    # at addr 0x20586  "..xb"
.long     0x006affff    # at addr 0x2058a  "..j."
.long     0x41000000    # at addr 0x2058e  "...A"
.long     0x0283100e    # at addr 0x20592  "...."
.long     0x080e0a4c    # at addr 0x20596  "L..."
.long     0x41020b43    # at addr 0x2059a  "C..A"
.long     0x47080e0a    # at addr 0x2059e  "...G"
.long     0x080e510b    # at addr 0x205a2  ".Q.."
.long     0x00180000    # at addr 0x205a6  "...."
.long     0x2a340000    # at addr 0x205aa  "..4*"
.long     0x62c00000    # at addr 0x205ae  "...b"
.long     0x0018ffff    # at addr 0x205b2  "...."
.long     0x45000000    # at addr 0x205b6  "...E"
.long     0x0286100e    # at addr 0x205ba  "...."
.long     0x00080e4c    # at addr 0x205be  "L..."
.long     0x00180000    # at addr 0x205c2  "...."
.long     0x2a500000    # at addr 0x205c6  "..P*"
.long     0x62c40000    # at addr 0x205ca  "...b"
.long     0x0018ffff    # at addr 0x205ce  "...."
.long     0x45000000    # at addr 0x205d2  "...E"
.long     0x0286100e    # at addr 0x205d6  "...."
.long     0x00080e4c    # at addr 0x205da  "L..."
.long     0x001c0000    # at addr 0x205de  "...."
.long     0x2a6c0000    # at addr 0x205e2  "..l*"
.long     0x62c80000    # at addr 0x205e6  "...b"
.long     0x0018ffff    # at addr 0x205ea  "...."
.long     0x45000000    # at addr 0x205ee  "...E"
.long     0x0286100e    # at addr 0x205f2  "...."
.long     0x00080e4c    # at addr 0x205f6  "L..."
.long     0x00000000    # at addr 0x205fa  "...."
.long     0x003c0000    # at addr 0x205fe  "..<."
.long     0x2a8c0000    # at addr 0x20602  "...*"
.long     0x62c80000    # at addr 0x20606  "...b"
.long     0x008fffff    # at addr 0x2060a  "...."
.long     0x46000000    # at addr 0x2060e  "...F"
.long     0x028d100e    # at addr 0x20612  "...."
.long     0x8c180e45    # at addr 0x20616  "E..."
.long     0x200e4103    # at addr 0x2061a  ".A. "
.long     0x0e440486    # at addr 0x2061e  "..D."
.long     0x47058328    # at addr 0x20622  "(..G"
.long     0x4602400e    # at addr 0x20626  ".@.F"
.long     0x44280e0a    # at addr 0x2062a  "..(D"
.long     0x0e41200e    # at addr 0x2062e  ". A."
.long     0x100e4218    # at addr 0x20632  ".B.."
.long     0x4a080e42    # at addr 0x20636  "B..J"
.long     0x0000000b    # at addr 0x2063a  "...."
.long     0x00180000    # at addr 0x2063e  "...."
.long     0x2acc0000    # at addr 0x20642  "...*"
.long     0x63180000    # at addr 0x20646  "...c"
.long     0x0045ffff    # at addr 0x2064a  "..E."
.long     0x45000000    # at addr 0x2064e  "...E"
.long     0x0e41100e    # at addr 0x20652  "..A."
.long     0x100e5208    # at addr 0x20656  ".R.."
.long     0x00100000    # at addr 0x2065a  "...."
.long     0x2ae80000    # at addr 0x2065e  "...*"
.long     0x634c0000    # at addr 0x20662  "..Lc"
.long     0x0015ffff    # at addr 0x20666  "...."
.long     0x00000000    # at addr 0x2066a  "...."
.long     0x00100000    # at addr 0x2066e  "...."
.long     0x2afc0000    # at addr 0x20672  "...*"
.long     0x63580000    # at addr 0x20676  "..Xc"
.long     0x0015ffff    # at addr 0x2067a  "...."
.long     0x00000000    # at addr 0x2067e  "...."
.long     0x002c0000    # at addr 0x20682  "..,."
.long     0x2b100000    # at addr 0x20686  "...+"
.long     0x63640000    # at addr 0x2068a  "..dc"
.long     0x0083ffff    # at addr 0x2068e  "...."
.long     0x42000000    # at addr 0x20692  "...B"
.long     0x028c100e    # at addr 0x20696  "...."
.long     0x86180e41    # at addr 0x2069a  "A..."
.long     0x200e4103    # at addr 0x2069e  ".A. "
.long     0x65020483    # at addr 0x206a2  "...e"
.long     0x41180e0a    # at addr 0x206a6  "...A"
.long     0x0e42100e    # at addr 0x206aa  "..B."
.long     0x000b4408    # at addr 0x206ae  ".D.."
.long     0x00100000    # at addr 0x206b2  "...."
.long     0x2b400000    # at addr 0x206b6  "..@+"
.long     0x63c40000    # at addr 0x206ba  "...c"
.long     0x0015ffff    # at addr 0x206be  "...."
.long     0x00000000    # at addr 0x206c2  "...."
.long     0x00100000    # at addr 0x206c6  "...."
.long     0x2b540000    # at addr 0x206ca  "..T+"
.long     0x63d00000    # at addr 0x206ce  "...c"
.long     0x0019ffff    # at addr 0x206d2  "...."
.long     0x00000000    # at addr 0x206d6  "...."
.long     0x003c0000    # at addr 0x206da  "..<."
.long     0x2b680000    # at addr 0x206de  "..h+"
.long     0x63dc0000    # at addr 0x206e2  "...c"
.long     0x00ebffff    # at addr 0x206e6  "...."
.long     0x46000000    # at addr 0x206ea  "...F"
.long     0x028e100e    # at addr 0x206ee  "...."
.long     0x8d180e44    # at addr 0x206f2  "D..."
.long     0x200e4203    # at addr 0x206f6  ".B. "
.long     0x0e41048c    # at addr 0x206fa  "..A."
.long     0x41058628    # at addr 0x206fe  "(..A"
.long     0x0683300e    # at addr 0x20702  ".0.."
.long     0x0e0ab702    # at addr 0x20706  "...."
.long     0x200e4128    # at addr 0x2070a  "(A. "
.long     0x42180e42    # at addr 0x2070e  "B..B"
.long     0x0e42100e    # at addr 0x20712  "..B."
.long     0x000b4408    # at addr 0x20716  ".D.."
.long     0x00100000    # at addr 0x2071a  "...."
.long     0x2ba80000    # at addr 0x2071e  "...+"
.long     0x648c0000    # at addr 0x20722  "...d"
.long     0x0037ffff    # at addr 0x20726  "..7."
.long     0x00000000    # at addr 0x2072a  "...."
.long     0x00340000    # at addr 0x2072e  "..4."
.long     0x2bbc0000    # at addr 0x20732  "...+"
.long     0x64b80000    # at addr 0x20736  "...d"
.long     0x006dffff    # at addr 0x2073a  "..m."
.long     0x46000000    # at addr 0x2073e  "...F"
.long     0x028c100e    # at addr 0x20742  "...."
.long     0x86180e44    # at addr 0x20746  "D..."
.long     0x200e4103    # at addr 0x2074a  ".A. "
.long     0x44020483    # at addr 0x2074e  "...D"
.long     0x41180e0a    # at addr 0x20752  "...A"
.long     0x0e42100e    # at addr 0x20756  "..B."
.long     0x510b4608    # at addr 0x2075a  ".F.Q"
.long     0x0e41180e    # at addr 0x2075e  "..A."
.long     0x080e4210    # at addr 0x20762  ".B.."
.long     0x001c0000    # at addr 0x20766  "...."
.long     0x00000000    # at addr 0x2076a  "...."
.long     0x7a010000    # at addr 0x2076e  "...z"
.long     0x78010052    # at addr 0x20772  "R..x"
.long     0x0c1b0110    # at addr 0x20776  "...."
.long     0x01900807    # at addr 0x2077a  "...."
.long     0x0483200e    # at addr 0x2077e  ". .."
.long     0x028c0386    # at addr 0x20782  "...."
.long     0x00100000    # at addr 0x20786  "...."
.long     0x00240000    # at addr 0x2078a  "..$."
.long     0x465b0000    # at addr 0x2078e  "..[F"
.long     0x0005fffe    # at addr 0x20792  "...."
.long     0x00000000    # at addr 0x20796  "...."
.long     0x00100000    # at addr 0x2079a  "...."
.long     0x2c280000    # at addr 0x2079e  "..(,"
.long     0x64bc0000    # at addr 0x207a2  "...d"
.long     0x0026ffff    # at addr 0x207a6  "..&."
.long     0x00000000    # at addr 0x207aa  "...."
.long     0x00100000    # at addr 0x207ae  "...."
.long     0x2c3c0000    # at addr 0x207b2  "..<,"
.long     0x64d80000    # at addr 0x207b6  "...d"
.long     0x002cffff    # at addr 0x207ba  "..,."
.long     0x00000000    # at addr 0x207be  "...."
.long     0x00180000    # at addr 0x207c2  "...."
.long     0x2c500000    # at addr 0x207c6  "..P,"
.long     0x64f40000    # at addr 0x207ca  "...d"
.long     0x0029ffff    # at addr 0x207ce  "..)."
.long     0x46000000    # at addr 0x207d2  "...F"
.long     0x0283100e    # at addr 0x207d6  "...."
.long     0x47080e5b    # at addr 0x207da  "[..G"
.long     0x003800c3    # at addr 0x207de  "..8."
.long     0x2c6c0000    # at addr 0x207e2  "..l,"
.long     0x65080000    # at addr 0x207e6  "...e"
.long     0x005dffff    # at addr 0x207ea  "..]."
.long     0x42000000    # at addr 0x207ee  "...B"
.long     0x028d100e    # at addr 0x207f2  "...."
.long     0x8c180e42    # at addr 0x207f6  "B..."
.long     0x200e4103    # at addr 0x207fa  ".A. "
.long     0x0e440486    # at addr 0x207fe  "..D."
.long     0x44058328    # at addr 0x20802  "(..D"
.long     0x0a75300e    # at addr 0x20806  ".0u."
.long     0x0e44280e    # at addr 0x2080a  ".(D."
.long     0x180e4120    # at addr 0x2080e  " A.."
.long     0x42100e42    # at addr 0x20812  "B..B"
.long     0x0b45080e    # at addr 0x20816  "..E."
.long     0x00340000    # at addr 0x2081a  "..4."
.long     0x2ca80000    # at addr 0x2081e  "...,"
.long     0x652c0000    # at addr 0x20822  "..,e"
.long     0x009affff    # at addr 0x20826  "...."
.long     0x46000000    # at addr 0x2082a  "...F"
.long     0x028c100e    # at addr 0x2082e  "...."
.long     0x86180e41    # at addr 0x20832  "A..."
.long     0x200e4103    # at addr 0x20836  ".A. "
.long     0x5f020483    # at addr 0x2083a  "..._"
.long     0x41180e0a    # at addr 0x2083e  "...A"
.long     0x0e42100e    # at addr 0x20842  "..B."
.long     0x660b4608    # at addr 0x20846  ".F.f"
.long     0x0e41180e    # at addr 0x2084a  "..A."
.long     0x080e4210    # at addr 0x2084e  ".B.."
.long     0x00600000    # at addr 0x20852  "..`."
.long     0x2ce00000    # at addr 0x20856  "...,"
.long     0x65940000    # at addr 0x2085a  "...e"
.long     0x0155ffff    # at addr 0x2085e  "..U."
.long     0x42000000    # at addr 0x20862  "...B"
.long     0x028f100e    # at addr 0x20866  "...."
.long     0x8e180e42    # at addr 0x2086a  "B..."
.long     0x200e4203    # at addr 0x2086e  ".B. "
.long     0x0e42048d    # at addr 0x20872  "..B."
.long     0x41058c28    # at addr 0x20876  "(..A"
.long     0x0686300e    # at addr 0x2087a  ".0.."
.long     0x83380e41    # at addr 0x2087e  "A.8."
.long     0x400e4407    # at addr 0x20882  ".D.@"
.long     0x0e0a9702    # at addr 0x20886  "...."
.long     0x300e4138    # at addr 0x2088a  "8A.0"
.long     0x42280e41    # at addr 0x2088e  "A.(B"
.long     0x0e42200e    # at addr 0x20892  ". B."
.long     0x100e4218    # at addr 0x20896  ".B.."
.long     0x41080e42    # at addr 0x2089a  "B..A"
.long     0x0e0a540b    # at addr 0x2089e  ".T.."
.long     0x300e4638    # at addr 0x208a2  "8F.0"
.long     0x42280e41    # at addr 0x208a6  "A.(B"
.long     0x0e42200e    # at addr 0x208aa  ". B."
.long     0x100e4218    # at addr 0x208ae  ".B.."
.long     0x45080e42    # at addr 0x208b2  "B..E"
.long     0x004c000b    # at addr 0x208b6  "..L."
.long     0x2d440000    # at addr 0x208ba  "..D-"
.long     0x66900000    # at addr 0x208be  "...f"
.long     0x00b5ffff    # at addr 0x208c2  "...."
.long     0x42000000    # at addr 0x208c6  "...B"
.long     0x028c100e    # at addr 0x208ca  "...."
.long     0x86180e41    # at addr 0x208ce  "A..."
.long     0x200e4103    # at addr 0x208d2  ".A. "
.long     0x63020483    # at addr 0x208d6  "...c"
.long     0x41180e0a    # at addr 0x208da  "...A"
.long     0x0e42100e    # at addr 0x208de  "..B."
.long     0x5a0b4608    # at addr 0x208e2  ".F.Z"
.long     0x41180e0a    # at addr 0x208e6  "...A"
.long     0x0e42100e    # at addr 0x208ea  "..B."
.long     0x500b4308    # at addr 0x208ee  ".C.P"
.long     0x41180e0a    # at addr 0x208f2  "...A"
.long     0x0e42100e    # at addr 0x208f6  "..B."
.long     0x490b4508    # at addr 0x208fa  ".E.I"
.long     0x0e41180e    # at addr 0x208fe  "..A."
.long     0x080e4210    # at addr 0x20902  ".B.."
.long     0x00100000    # at addr 0x20906  "...."
.long     0x2d940000    # at addr 0x2090a  "...-"
.long     0x67000000    # at addr 0x2090e  "...g"
.long     0x0011ffff    # at addr 0x20912  "...."
.long     0x00000000    # at addr 0x20916  "...."
.long     0x00580000    # at addr 0x2091a  "..X."
.long     0x2da80000    # at addr 0x2091e  "...-"
.long     0x670c0000    # at addr 0x20922  "...g"
.long     0x00a6ffff    # at addr 0x20926  "...."
.long     0x46000000    # at addr 0x2092a  "...F"
.long     0x028e100e    # at addr 0x2092e  "...."
.long     0x8d180e45    # at addr 0x20932  "E..."
.long     0x200e4203    # at addr 0x20936  ".B. "
.long     0x0e41048c    # at addr 0x2093a  "..A."
.long     0x47058628    # at addr 0x2093e  "(..G"
.long     0x0a7e300e    # at addr 0x20942  ".0~."
.long     0x0e44280e    # at addr 0x20946  ".(D."
.long     0x180e4220    # at addr 0x2094a  " B.."
.long     0x42100e42    # at addr 0x2094e  "B..B"
.long     0x0b43080e    # at addr 0x20952  "..C."
.long     0x280e0a52    # at addr 0x20956  "R..("
.long     0x42200e43    # at addr 0x2095a  "C. B"
.long     0x0e42180e    # at addr 0x2095e  "..B."
.long     0x080e4210    # at addr 0x20962  ".B.."
.long     0x0e540b45    # at addr 0x20966  "E.T."
.long     0x200e4728    # at addr 0x2096a  "(G. "
.long     0x42180e42    # at addr 0x2096e  "B..B"
.long     0x0e42100e    # at addr 0x20972  "..B."
.long     0x00340008    # at addr 0x20976  "..4."
.long     0x2e040000    # at addr 0x2097a  "...."
.long     0x67600000    # at addr 0x2097e  "..`g"
.long     0x0141ffff    # at addr 0x20982  "..A."
.long     0x46000000    # at addr 0x20986  "...F"
.long     0x028d100e    # at addr 0x2098a  "...."
.long     0x8c180e42    # at addr 0x2098e  "B..."
.long     0x200e4103    # at addr 0x20992  ".A. "
.long     0x0e470486    # at addr 0x20996  "..G."
.long     0x0a8b0270    # at addr 0x2099a  "p..."
.long     0x0e41200e    # at addr 0x2099e  ". A."
.long     0x100e4218    # at addr 0x209a2  ".B.."
.long     0x48080e42    # at addr 0x209a6  "B..H"
.long     0x0000000b    # at addr 0x209aa  "...."
.long     0x00140000    # at addr 0x209ae  "...."
.long     0x2e3c0000    # at addr 0x209b2  "..<."
.long     0x68780000    # at addr 0x209b6  "..xh"
.long     0x0033ffff    # at addr 0x209ba  "..3."
.long     0x00000000    # at addr 0x209be  "...."
.long     0x00000000    # at addr 0x209c2  "...."
.long     0x002c0000    # at addr 0x209c6  "..,."
.long     0x2e540000    # at addr 0x209ca  "..T."
.long     0x68a00000    # at addr 0x209ce  "...h"
.long     0x0065ffff    # at addr 0x209d2  "..e."
.long     0x46000000    # at addr 0x209d6  "...F"
.long     0x028c100e    # at addr 0x209da  "...."
.long     0x86180e41    # at addr 0x209de  "A..."
.long     0x200e4403    # at addr 0x209e2  ".D. "
.long     0x0a740483    # at addr 0x209e6  "..t."
.long     0x0e41180e    # at addr 0x209ea  "..A."
.long     0x080e4210    # at addr 0x209ee  ".B.."
.long     0x00000b46    # at addr 0x209f2  "F..."
.long     0x001c0000    # at addr 0x209f6  "...."
.long     0x2e840000    # at addr 0x209fa  "...."
.long     0x68e00000    # at addr 0x209fe  "...h"
.long     0x001cffff    # at addr 0x20a02  "...."
.long     0x48000000    # at addr 0x20a06  "...H"
.long     0x0a4e100e    # at addr 0x20a0a  "..N."
.long     0x0b41080e    # at addr 0x20a0e  "..A."
.long     0x00000000    # at addr 0x20a12  "...."
.long     0x00140000    # at addr 0x20a16  "...."
.long     0x2ea40000    # at addr 0x20a1a  "...."
.long     0x68e00000    # at addr 0x20a1e  "...h"
.long     0x0037ffff    # at addr 0x20a22  "..7."
.long     0x00000000    # at addr 0x20a26  "...."
.long     0x00000000    # at addr 0x20a2a  "...."
.long     0x001c0000    # at addr 0x20a2e  "...."
.long     0x2ebc0000    # at addr 0x20a32  "...."
.long     0x69080000    # at addr 0x20a36  "...i"
.long     0x003cffff    # at addr 0x20a3a  "..<."
.long     0x48000000    # at addr 0x20a3e  "...H"
.long     0x0a61100e    # at addr 0x20a42  "..a."
.long     0x0b47080e    # at addr 0x20a46  "..G."
.long     0x00080e4b    # at addr 0x20a4a  "K..."
.long     0x00340000    # at addr 0x20a4e  "..4."
.long     0x2edc0000    # at addr 0x20a52  "...."
.long     0x69280000    # at addr 0x20a56  "..(i"
.long     0x008affff    # at addr 0x20a5a  "...."
.long     0x46000000    # at addr 0x20a5e  "...F"
.long     0x028c100e    # at addr 0x20a62  "...."
.long     0x86180e41    # at addr 0x20a66  "A..."
.long     0x200e4403    # at addr 0x20a6a  ".D. "
.long     0x0a7a0483    # at addr 0x20a6e  "..z."
.long     0x0e41180e    # at addr 0x20a72  "..A."
.long     0x080e4210    # at addr 0x20a76  ".B.."
.long     0x0a600b48    # at addr 0x20a7a  "H.`."
.long     0x0e41180e    # at addr 0x20a7e  "..A."
.long     0x080e4210    # at addr 0x20a82  ".B.."
.long     0x001c0b4d    # at addr 0x20a86  "M..."
.long     0x2f140000    # at addr 0x20a8a  ".../"
.long     0x69800000    # at addr 0x20a8e  "...i"
.long     0x0048ffff    # at addr 0x20a92  "..H."
.long     0x45000000    # at addr 0x20a96  "...E"
.long     0x0286100e    # at addr 0x20a9a  "...."
.long     0x080e0a5e    # at addr 0x20a9e  "^..."
.long     0x0e530b4d    # at addr 0x20aa2  "M.S."
.long     0x002c0008    # at addr 0x20aa6  "..,."
.long     0x2f340000    # at addr 0x20aaa  "..4/"
.long     0x69b00000    # at addr 0x20aae  "...i"
.long     0x0073ffff    # at addr 0x20ab2  "..s."
.long     0x45000000    # at addr 0x20ab6  "...E"
.long     0x0286100e    # at addr 0x20aba  "...."
.long     0x4e200e47    # at addr 0x20abe  "G. N"
.long     0x44100e0a    # at addr 0x20ac2  "...D"
.long     0x0b4a080e    # at addr 0x20ac6  "..J."
.long     0x0e0a4402    # at addr 0x20aca  ".D.."
.long     0x080e4110    # at addr 0x20ace  ".A.."
.long     0x00000b41    # at addr 0x20ad2  "A..."
.long     0x00440000    # at addr 0x20ad6  "..D."
.long     0x2f640000    # at addr 0x20ada  "..d/"
.long     0x6a000000    # at addr 0x20ade  "...j"
.long     0x0065ffff    # at addr 0x20ae2  "..e."
.long     0x46000000    # at addr 0x20ae6  "...F"
.long     0x028f100e    # at addr 0x20aea  "...."
.long     0x8e180e49    # at addr 0x20aee  "I..."
.long     0x200e4503    # at addr 0x20af2  ".E. "
.long     0x0e45048d    # at addr 0x20af6  "..E."
.long     0x44058c28    # at addr 0x20afa  "(..D"
.long     0x0686300e    # at addr 0x20afe  ".0.."
.long     0x83380e48    # at addr 0x20b02  "H.8."
.long     0x400e4707    # at addr 0x20b06  ".G.@"
.long     0x41380e6e    # at addr 0x20b0a  "n.8A"
.long     0x0e41300e    # at addr 0x20b0e  ".0A."
.long     0x200e4228    # at addr 0x20b12  "(B. "
.long     0x42180e42    # at addr 0x20b16  "B..B"
.long     0x0e42100e    # at addr 0x20b1a  "..B."
.long     0x00140008    # at addr 0x20b1e  "...."
.long     0x2fac0000    # at addr 0x20b22  ".../"
.long     0x6a280000    # at addr 0x20b26  "..(j"
.long     0x0005ffff    # at addr 0x20b2a  "...."
.long     0x00000000    # at addr 0x20b2e  "...."
.long     0x00000000    # at addr 0x20b32  "...."
.long     0x00100000    # at addr 0x20b36  "...."
.long     0x2fc40000    # at addr 0x20b3a  ".../"
.long     0x6a200000    # at addr 0x20b3e  ".. j"
.long     0x0012ffff    # at addr 0x20b42  "...."
.long     0x00000000    # at addr 0x20b46  "...."
.long     0x00000000    # at addr 0x20b4a  "...."
.byte     0x00    # "."
.byte     0x00    # "."

.p2align 3

# Data section .init_array (size 8)  0x00022010 - 0x00022017

.section .init_array
Var0x22010:       # next=0x22018, start=0x22010, end=0x22017
.long     0x000068b0    # at addr 0x22010  ".h.."
.long     0x00000000    # at addr 0x22014  "...."

.p2align 3

# Data section .fini_array (size 8)  0x00022018 - 0x0002201f

.section .fini_array
Var0x22018:       # next=0x22020, start=0x22018, end=0x2201f
.long     0x00006870    # at addr 0x22018  "ph.."
.long     0x00000000    # at addr 0x2201c  "...."

.p2align 5

# Data section .data.rel.ro (size 2616)  0x00022020 - 0x00022a57

.section .data.rel.ro
Var0x22020:       # next=0x221e0, start=0x22020, end=0x22a57
.long     0x00007340    # at addr 0x22020  "@s.."
.long     0x00000000    # at addr 0x22024  "...."
.long     0x000078a0    # at addr 0x22028  ".x.."
.long     0x00000000    # at addr 0x2202c  "...."
.long     0x00007350    # at addr 0x22030  "Ps.."
.long     0x00000000    # at addr 0x22034  "...."
.long     0x00007960    # at addr 0x22038  "`y.."
.long     0x00000000    # at addr 0x2203c  "...."
.long     0x00006ef0    # at addr 0x22040  ".n.."
.long     0x00000000    # at addr 0x22044  "...."
.long     0x00007900    # at addr 0x22048  ".y.."
.long     0x00000000    # at addr 0x2204c  "...."
.long     0x00006f00    # at addr 0x22050  ".o.."
.long     0x00000000    # at addr 0x22054  "...."
.long     0x000079d0    # at addr 0x22058  ".y.."
.long     0x00000000    # at addr 0x2205c  "...."
.long     0x0000c850    # at addr 0x22060  "P..."
.long     0x00000000    # at addr 0x22064  "...."
.long     0x0000c930    # at addr 0x22068  "0..."
.long     0x00000000    # at addr 0x2206c  "...."
.long     0x0000c8c0    # at addr 0x22070  "...."
.long     0x00000000    # at addr 0x22074  "...."
.long     0x0000c9f0    # at addr 0x22078  "...."
.long     0x00000000    # at addr 0x2207c  "...."
.long     0x0000cab0    # at addr 0x22080  "...."
.long     0x00000000    # at addr 0x22084  "...."
.long     0x0000cbb0    # at addr 0x22088  "...."
.long     0x00000000    # at addr 0x2208c  "...."
.long     0x0000cb30    # at addr 0x22090  "0..."
.long     0x00000000    # at addr 0x22094  "...."
.long     0x00007cd0    # at addr 0x22098  ".|.."
.long     0x00000000    # at addr 0x2209c  "...."
.long     0x0000a5b0    # at addr 0x220a0  "...."
.long     0x00000000    # at addr 0x220a4  "...."
.long     0x0000a5f0    # at addr 0x220a8  "...."
.long     0x00000000    # at addr 0x220ac  "...."
.long     0x0000a770    # at addr 0x220b0  "p..."
.long     0x00000000    # at addr 0x220b4  "...."
.long     0x0000a6f0    # at addr 0x220b8  "...."
.long     0x00000000    # at addr 0x220bc  "...."
.long     0x00007860    # at addr 0x220c0  "`x.."
.long     0x00000000    # at addr 0x220c4  "...."
.long     0x0000a670    # at addr 0x220c8  "p..."
.long     0x00000000    # at addr 0x220cc  "...."
.long     0x0000a7b0    # at addr 0x220d0  "...."
.long     0x00000000    # at addr 0x220d4  "...."
.long     0x0000a530    # at addr 0x220d8  "0..."
.long     0x00000000    # at addr 0x220dc  "...."
.long     0x00007380    # at addr 0x220e0  ".s.."
.long     0x00000000    # at addr 0x220e4  "...."
.long     0x00007c70    # at addr 0x220e8  "p|.."
.long     0x00000000    # at addr 0x220ec  "...."
.long     0x00007360    # at addr 0x220f0  "`s.."
.long     0x00000000    # at addr 0x220f4  "...."
.long     0x00007c00    # at addr 0x220f8  ".|.."
.long     0x00000000    # at addr 0x220fc  "...."
.long     0x00000000    # at addr 0x22100  "...."
.long     0x00000000    # at addr 0x22104  "...."
.long     0x00000000    # at addr 0x22108  "...."
.long     0x00000000    # at addr 0x2210c  "...."
.long     0x00000000    # at addr 0x22110  "...."
.long     0x00000000    # at addr 0x22114  "...."
.long     0x00000000    # at addr 0x22118  "...."
.long     0x00000000    # at addr 0x2211c  "...."
.long     0x0000c0b0    # at addr 0x22120  "...."
.long     0x00000000    # at addr 0x22124  "...."
.long     0x0000c210    # at addr 0x22128  "...."
.long     0x00000000    # at addr 0x2212c  "...."
.long     0x0000c0f0    # at addr 0x22130  "...."
.long     0x00000000    # at addr 0x22134  "...."
.long     0x0000c320    # at addr 0x22138  " ..."
.long     0x00000000    # at addr 0x2213c  "...."
.long     0x0000c4d0    # at addr 0x22140  "...."
.long     0x00000000    # at addr 0x22144  "...."
.long     0x0000a880    # at addr 0x22148  "...."
.long     0x00000000    # at addr 0x2214c  "...."
.long     0x0000c510    # at addr 0x22150  "...."
.long     0x00000000    # at addr 0x22154  "...."
.long     0x0000c720    # at addr 0x22158  " ..."
.long     0x00000000    # at addr 0x2215c  "...."
.long     0x0000c060    # at addr 0x22160  "`..."
.long     0x00000000    # at addr 0x22164  "...."
.long     0x0000c290    # at addr 0x22168  "...."
.long     0x00000000    # at addr 0x2216c  "...."
.long     0x0000bfc0    # at addr 0x22170  "...."
.long     0x00000000    # at addr 0x22174  "...."
.long     0x0000c3b0    # at addr 0x22178  "...."
.long     0x00000000    # at addr 0x2217c  "...."
.long     0x0000c560    # at addr 0x22180  "`..."
.long     0x00000000    # at addr 0x22184  "...."
.long     0x0000a7f0    # at addr 0x22188  "...."
.long     0x00000000    # at addr 0x2218c  "...."
.long     0x0000c640    # at addr 0x22190  "@..."
.long     0x00000000    # at addr 0x22194  "...."
.long     0x0000c7b0    # at addr 0x22198  "...."
.long     0x00000000    # at addr 0x2219c  "...."
.long     0x0000c140    # at addr 0x221a0  "@..."
.long     0x00000000    # at addr 0x221a4  "...."
.long     0x0000c450    # at addr 0x221a8  "P..."
.long     0x00000000    # at addr 0x221ac  "...."
.long     0x0000c010    # at addr 0x221b0  "...."
.long     0x00000000    # at addr 0x221b4  "...."
.long     0x0000c180    # at addr 0x221b8  "...."
.long     0x00000000    # at addr 0x221bc  "...."
.long     0x0000c600    # at addr 0x221c0  "...."
.long     0x00000000    # at addr 0x221c4  "...."
.long     0x00007b80    # at addr 0x221c8  ".{.."
.long     0x00000000    # at addr 0x221cc  "...."
.long     0x0000c5b0    # at addr 0x221d0  "...."
.long     0x00000000    # at addr 0x221d4  "...."
.long     0x0000c690    # at addr 0x221d8  "...."
.long     0x00000000    # at addr 0x221dc  "...."
Var0x221e0:       # next=0x22240, start=0x22020, end=0x22a57
.long     0x0001c288    # at addr 0x221e0  "...."
.long     0x00000000    # at addr 0x221e4  "...."
.long     0x00019b12    # at addr 0x221e8  "...."
.long     0x00000000    # at addr 0x221ec  "...."
.long     0x00019b16    # at addr 0x221f0  "...."
.long     0x00000000    # at addr 0x221f4  "...."
.long     0x00019b1c    # at addr 0x221f8  "...."
.long     0x00000000    # at addr 0x221fc  "...."
.long     0x00019b22    # at addr 0x22200  ""..."
.long     0x00000000    # at addr 0x22204  "...."
.long     0x00019b25    # at addr 0x22208  "%..."
.long     0x00000000    # at addr 0x2220c  "...."
.long     0x00019b2a    # at addr 0x22210  "*..."
.long     0x00000000    # at addr 0x22214  "...."
.long     0x00019b32    # at addr 0x22218  "2..."
.long     0x00000000    # at addr 0x2221c  "...."
.long     0x00019b2f    # at addr 0x22220  "/..."
.long     0x00000000    # at addr 0x22224  "...."
.long     0x00000000    # at addr 0x22228  "...."
.long     0x00000000    # at addr 0x2222c  "...."
.long     0x00000000    # at addr 0x22230  "...."
.long     0x00000000    # at addr 0x22234  "...."
.long     0x00000000    # at addr 0x22238  "...."
.long     0x00000000    # at addr 0x2223c  "...."
Var0x22240:       # next=0x22280, start=0x22020, end=0x22a57
.long     0x00019b36    # at addr 0x22240  "6..."
.long     0x00000000    # at addr 0x22244  "...."
.long     0x0001bebc    # at addr 0x22248  "...."
.long     0x00000000    # at addr 0x2224c  "...."
.long     0x00019b3c    # at addr 0x22250  "<..."
.long     0x00000000    # at addr 0x22254  "...."
.long     0x00019b40    # at addr 0x22258  "@..."
.long     0x00000000    # at addr 0x2225c  "...."
.long     0x00019b46    # at addr 0x22260  "F..."
.long     0x00000000    # at addr 0x22264  "...."
.long     0x00000000    # at addr 0x22268  "...."
.long     0x00000000    # at addr 0x2226c  "...."
.long     0x00000000    # at addr 0x22270  "...."
.long     0x00000000    # at addr 0x22274  "...."
.long     0x00000000    # at addr 0x22278  "...."
.long     0x00000000    # at addr 0x2227c  "...."
Var0x22280:       # next=0x222c0, start=0x22020, end=0x22a57
.long     0x00019b25    # at addr 0x22280  "%..."
.long     0x00000000    # at addr 0x22284  "...."
.long     0x000199b1    # at addr 0x22288  "...."
.long     0x00000000    # at addr 0x2228c  "...."
.long     0x000199a3    # at addr 0x22290  "...."
.long     0x00000000    # at addr 0x22294  "...."
.long     0x00019b4d    # at addr 0x22298  "M..."
.long     0x00000000    # at addr 0x2229c  "...."
.long     0x000197cf    # at addr 0x222a0  "...."
.long     0x00000000    # at addr 0x222a4  "...."
.long     0x00000000    # at addr 0x222a8  "...."
.long     0x00000000    # at addr 0x222ac  "...."
.long     0x00000000    # at addr 0x222b0  "...."
.long     0x00000000    # at addr 0x222b4  "...."
.long     0x00000000    # at addr 0x222b8  "...."
.long     0x00000000    # at addr 0x222bc  "...."
Var0x222c0:       # next=0x22300, start=0x22020, end=0x22a57
.long     0x00019b57    # at addr 0x222c0  "W..."
.long     0x00000000    # at addr 0x222c4  "...."
.long     0x00019b5f    # at addr 0x222c8  "_..."
.long     0x00000000    # at addr 0x222cc  "...."
.long     0x00019b64    # at addr 0x222d0  "d..."
.long     0x00000000    # at addr 0x222d4  "...."
.long     0x00019b6b    # at addr 0x222d8  "k..."
.long     0x00000000    # at addr 0x222dc  "...."
.long     0x00019b76    # at addr 0x222e0  "v..."
.long     0x00000000    # at addr 0x222e4  "...."
.long     0x00019b7d    # at addr 0x222e8  "}..."
.long     0x00000000    # at addr 0x222ec  "...."
.long     0x00019b86    # at addr 0x222f0  "...."
.long     0x00000000    # at addr 0x222f4  "...."
.long     0x00000000    # at addr 0x222f8  "...."
.long     0x00000000    # at addr 0x222fc  "...."
Var0x22300:       # next=0x22880, start=0x22020, end=0x22a57
.long     0x00019c20    # at addr 0x22300  " ..."
.long     0x00000000    # at addr 0x22304  "...."
.long     0x00000000    # at addr 0x22308  "...."
.long     0x00000000    # at addr 0x2230c  "...."
.long     0x00000000    # at addr 0x22310  "...."
.long     0x00000000    # at addr 0x22314  "...."
.long     0x00000061    # at addr 0x22318  "a..."
.long     0x00000000    # at addr 0x2231c  "...."
.long     0x0001c274    # at addr 0x22320  "t..."
.long     0x00000000    # at addr 0x22324  "...."
.long     0x00000000    # at addr 0x22328  "...."
.long     0x00000000    # at addr 0x2232c  "...."
.long     0x00000000    # at addr 0x22330  "...."
.long     0x00000000    # at addr 0x22334  "...."
.long     0x00000062    # at addr 0x22338  "b..."
.long     0x00000000    # at addr 0x2233c  "...."
.long     0x00019b94    # at addr 0x22340  "...."
.long     0x00000000    # at addr 0x22344  "...."
.long     0x00000000    # at addr 0x22348  "...."
.long     0x00000000    # at addr 0x2234c  "...."
.long     0x00000000    # at addr 0x22350  "...."
.long     0x00000000    # at addr 0x22354  "...."
.long     0x00000064    # at addr 0x22358  "d..."
.long     0x00000000    # at addr 0x2235c  "...."
.long     0x00019b9e    # at addr 0x22360  "...."
.long     0x00000000    # at addr 0x22364  "...."
.long     0x00000000    # at addr 0x22368  "...."
.long     0x00000000    # at addr 0x2236c  "...."
.long     0x00000000    # at addr 0x22370  "...."
.long     0x00000000    # at addr 0x22374  "...."
.long     0x00000044    # at addr 0x22378  "D..."
.long     0x00000000    # at addr 0x2237c  "...."
.long     0x00019ba4    # at addr 0x22380  "...."
.long     0x00000000    # at addr 0x22384  "...."
.long     0x00000000    # at addr 0x22388  "...."
.long     0x00000000    # at addr 0x2238c  "...."
.long     0x00000000    # at addr 0x22390  "...."
.long     0x00000000    # at addr 0x22394  "...."
.long     0x00000086    # at addr 0x22398  "...."
.long     0x00000000    # at addr 0x2239c  "...."
.long     0x00019bae    # at addr 0x223a0  "...."
.long     0x00000000    # at addr 0x223a4  "...."
.long     0x00000000    # at addr 0x223a8  "...."
.long     0x00000000    # at addr 0x223ac  "...."
.long     0x00000000    # at addr 0x223b0  "...."
.long     0x00000000    # at addr 0x223b4  "...."
.long     0x00000087    # at addr 0x223b8  "...."
.long     0x00000000    # at addr 0x223bc  "...."
.long     0x00019bc6    # at addr 0x223c0  "...."
.long     0x00000000    # at addr 0x223c4  "...."
.long     0x00000000    # at addr 0x223c8  "...."
.long     0x00000000    # at addr 0x223cc  "...."
.long     0x00000000    # at addr 0x223d0  "...."
.long     0x00000000    # at addr 0x223d4  "...."
.long     0x00000068    # at addr 0x223d8  "h..."
.long     0x00000000    # at addr 0x223dc  "...."
.long     0x00019bd5    # at addr 0x223e0  "...."
.long     0x00000000    # at addr 0x223e4  "...."
.long     0x00000000    # at addr 0x223e8  "...."
.long     0x00000000    # at addr 0x223ec  "...."
.long     0x00000000    # at addr 0x223f0  "...."
.long     0x00000000    # at addr 0x223f4  "...."
.long     0x00000069    # at addr 0x223f8  "i..."
.long     0x00000000    # at addr 0x223fc  "...."
.long     0x00019bdb    # at addr 0x22400  "...."
.long     0x00000000    # at addr 0x22404  "...."
.long     0x00000000    # at addr 0x22408  "...."
.long     0x00000000    # at addr 0x2240c  "...."
.long     0x00000000    # at addr 0x22410  "...."
.long     0x00000000    # at addr 0x22414  "...."
.long     0x0000006b    # at addr 0x22418  "k..."
.long     0x00000000    # at addr 0x2241c  "...."
.long     0x00019be5    # at addr 0x22420  "...."
.long     0x00000000    # at addr 0x22424  "...."
.long     0x00000000    # at addr 0x22428  "...."
.long     0x00000000    # at addr 0x2242c  "...."
.long     0x00000000    # at addr 0x22430  "...."
.long     0x00000000    # at addr 0x22434  "...."
.long     0x0000006e    # at addr 0x22438  "n..."
.long     0x00000000    # at addr 0x2243c  "...."
.long     0x00019bf5    # at addr 0x22440  "...."
.long     0x00000000    # at addr 0x22444  "...."
.long     0x00000000    # at addr 0x22448  "...."
.long     0x00000000    # at addr 0x2244c  "...."
.long     0x00000000    # at addr 0x22450  "...."
.long     0x00000000    # at addr 0x22454  "...."
.long     0x00000047    # at addr 0x22458  "G..."
.long     0x00000000    # at addr 0x2245c  "...."
.long     0x00019bfe    # at addr 0x22460  "...."
.long     0x00000000    # at addr 0x22464  "...."
.long     0x00000000    # at addr 0x22468  "...."
.long     0x00000000    # at addr 0x2246c  "...."
.long     0x00000000    # at addr 0x22470  "...."
.long     0x00000000    # at addr 0x22474  "...."
.long     0x00000071    # at addr 0x22478  "q..."
.long     0x00000000    # at addr 0x2247c  "...."
.long     0x00019c11    # at addr 0x22480  "...."
.long     0x00000000    # at addr 0x22484  "...."
.long     0x00000000    # at addr 0x22488  "...."
.long     0x00000000    # at addr 0x2248c  "...."
.long     0x00000000    # at addr 0x22490  "...."
.long     0x00000000    # at addr 0x22494  "...."
.long     0x00000072    # at addr 0x22498  "r..."
.long     0x00000000    # at addr 0x2249c  "...."
.long     0x000199a3    # at addr 0x224a0  "...."
.long     0x00000000    # at addr 0x224a4  "...."
.long     0x00000000    # at addr 0x224a8  "...."
.long     0x00000000    # at addr 0x224ac  "...."
.long     0x00000000    # at addr 0x224b0  "...."
.long     0x00000000    # at addr 0x224b4  "...."
.long     0x00000073    # at addr 0x224b8  "s..."
.long     0x00000000    # at addr 0x224bc  "...."
.long     0x00019986    # at addr 0x224c0  "...."
.long     0x00000000    # at addr 0x224c4  "...."
.long     0x00000001    # at addr 0x224c8  "...."
.long     0x00000000    # at addr 0x224cc  "...."
.long     0x00000000    # at addr 0x224d0  "...."
.long     0x00000000    # at addr 0x224d4  "...."
.long     0x00000077    # at addr 0x224d8  "w..."
.long     0x00000000    # at addr 0x224dc  "...."
.long     0x00019c19    # at addr 0x224e0  "...."
.long     0x00000000    # at addr 0x224e4  "...."
.long     0x00000000    # at addr 0x224e8  "...."
.long     0x00000000    # at addr 0x224ec  "...."
.long     0x00000000    # at addr 0x224f0  "...."
.long     0x00000000    # at addr 0x224f4  "...."
.long     0x00000041    # at addr 0x224f8  "A..."
.long     0x00000000    # at addr 0x224fc  "...."
.long     0x00019c24    # at addr 0x22500  "$..."
.long     0x00000000    # at addr 0x22504  "...."
.long     0x00000000    # at addr 0x22508  "...."
.long     0x00000000    # at addr 0x2250c  "...."
.long     0x00000000    # at addr 0x22510  "...."
.long     0x00000000    # at addr 0x22514  "...."
.long     0x00000042    # at addr 0x22518  "B..."
.long     0x00000000    # at addr 0x2251c  "...."
.long     0x00019c33    # at addr 0x22520  "3..."
.long     0x00000000    # at addr 0x22524  "...."
.long     0x00000000    # at addr 0x22528  "...."
.long     0x00000000    # at addr 0x2252c  "...."
.long     0x00000000    # at addr 0x22530  "...."
.long     0x00000000    # at addr 0x22534  "...."
.long     0x00000046    # at addr 0x22538  "F..."
.long     0x00000000    # at addr 0x2253c  "...."
.long     0x00019c3c    # at addr 0x22540  "<..."
.long     0x00000000    # at addr 0x22544  "...."
.long     0x00000000    # at addr 0x22548  "...."
.long     0x00000000    # at addr 0x2254c  "...."
.long     0x00000000    # at addr 0x22550  "...."
.long     0x00000000    # at addr 0x22554  "...."
.long     0x00000084    # at addr 0x22558  "...."
.long     0x00000000    # at addr 0x2255c  "...."
.long     0x00019c46    # at addr 0x22560  "F..."
.long     0x00000000    # at addr 0x22564  "...."
.long     0x00000000    # at addr 0x22568  "...."
.long     0x00000000    # at addr 0x2256c  "...."
.long     0x00000000    # at addr 0x22570  "...."
.long     0x00000000    # at addr 0x22574  "...."
.long     0x0000008d    # at addr 0x22578  "...."
.long     0x00000000    # at addr 0x2257c  "...."
.long     0x00019c49    # at addr 0x22580  "I..."
.long     0x00000000    # at addr 0x22584  "...."
.long     0x00000000    # at addr 0x22588  "...."
.long     0x00000000    # at addr 0x2258c  "...."
.long     0x00000000    # at addr 0x22590  "...."
.long     0x00000000    # at addr 0x22594  "...."
.long     0x00000048    # at addr 0x22598  "H..."
.long     0x00000000    # at addr 0x2259c  "...."
.long     0x0001be18    # at addr 0x225a0  "...."
.long     0x00000000    # at addr 0x225a4  "...."
.long     0x00000000    # at addr 0x225a8  "...."
.long     0x00000000    # at addr 0x225ac  "...."
.long     0x00000000    # at addr 0x225b0  "...."
.long     0x00000000    # at addr 0x225b4  "...."
.long     0x00000083    # at addr 0x225b8  "...."
.long     0x00000000    # at addr 0x225bc  "...."
.long     0x00019c62    # at addr 0x225c0  "b..."
.long     0x00000000    # at addr 0x225c4  "...."
.long     0x00000001    # at addr 0x225c8  "...."
.long     0x00000000    # at addr 0x225cc  "...."
.long     0x00000000    # at addr 0x225d0  "...."
.long     0x00000000    # at addr 0x225d4  "...."
.long     0x00000088    # at addr 0x225d8  "...."
.long     0x00000000    # at addr 0x225dc  "...."
.long     0x00019c67    # at addr 0x225e0  "g..."
.long     0x00000000    # at addr 0x225e4  "...."
.long     0x00000001    # at addr 0x225e8  "...."
.long     0x00000000    # at addr 0x225ec  "...."
.long     0x00000000    # at addr 0x225f0  "...."
.long     0x00000000    # at addr 0x225f4  "...."
.long     0x00000049    # at addr 0x225f8  "I..."
.long     0x00000000    # at addr 0x225fc  "...."
.long     0x000199d5    # at addr 0x22600  "...."
.long     0x00000000    # at addr 0x22604  "...."
.long     0x00000001    # at addr 0x22608  "...."
.long     0x00000000    # at addr 0x2260c  "...."
.long     0x00000000    # at addr 0x22610  "...."
.long     0x00000000    # at addr 0x22614  "...."
.long     0x0000008a    # at addr 0x22618  "...."
.long     0x00000000    # at addr 0x2261c  "...."
.long     0x00019c6e    # at addr 0x22620  "n..."
.long     0x00000000    # at addr 0x22624  "...."
.long     0x00000000    # at addr 0x22628  "...."
.long     0x00000000    # at addr 0x2262c  "...."
.long     0x00000000    # at addr 0x22630  "...."
.long     0x00000000    # at addr 0x22634  "...."
.long     0x0000004c    # at addr 0x22638  "L..."
.long     0x00000000    # at addr 0x2263c  "...."
.long     0x00019c7a    # at addr 0x22640  "z..."
.long     0x00000000    # at addr 0x22644  "...."
.long     0x00000000    # at addr 0x22648  "...."
.long     0x00000000    # at addr 0x2264c  "...."
.long     0x00000000    # at addr 0x22650  "...."
.long     0x00000000    # at addr 0x22654  "...."
.long     0x0000004e    # at addr 0x22658  "N..."
.long     0x00000000    # at addr 0x2265c  "...."
.long     0x00019c82    # at addr 0x22660  "...."
.long     0x00000000    # at addr 0x22664  "...."
.long     0x00000000    # at addr 0x22668  "...."
.long     0x00000000    # at addr 0x2266c  "...."
.long     0x00000000    # at addr 0x22670  "...."
.long     0x00000000    # at addr 0x22674  "...."
.long     0x00000051    # at addr 0x22678  "Q..."
.long     0x00000000    # at addr 0x2267c  "...."
.long     0x000199e7    # at addr 0x22680  "...."
.long     0x00000000    # at addr 0x22684  "...."
.long     0x00000001    # at addr 0x22688  "...."
.long     0x00000000    # at addr 0x2268c  "...."
.long     0x00000000    # at addr 0x22690  "...."
.long     0x00000000    # at addr 0x22694  "...."
.long     0x0000008b    # at addr 0x22698  "...."
.long     0x00000000    # at addr 0x2269c  "...."
.long     0x00019c8d    # at addr 0x226a0  "...."
.long     0x00000000    # at addr 0x226a4  "...."
.long     0x00000000    # at addr 0x226a8  "...."
.long     0x00000000    # at addr 0x226ac  "...."
.long     0x00000000    # at addr 0x226b0  "...."
.long     0x00000000    # at addr 0x226b4  "...."
.long     0x00000052    # at addr 0x226b8  "R..."
.long     0x00000000    # at addr 0x226bc  "...."
.long     0x000199b8    # at addr 0x226c0  "...."
.long     0x00000000    # at addr 0x226c4  "...."
.long     0x00000001    # at addr 0x226c8  "...."
.long     0x00000000    # at addr 0x226cc  "...."
.long     0x00000000    # at addr 0x226d0  "...."
.long     0x00000000    # at addr 0x226d4  "...."
.long     0x00000085    # at addr 0x226d8  "...."
.long     0x00000000    # at addr 0x226dc  "...."
.long     0x00019c97    # at addr 0x226e0  "...."
.long     0x00000000    # at addr 0x226e4  "...."
.long     0x00000000    # at addr 0x226e8  "...."
.long     0x00000000    # at addr 0x226ec  "...."
.long     0x00000000    # at addr 0x226f0  "...."
.long     0x00000000    # at addr 0x226f4  "...."
.long     0x0000008c    # at addr 0x226f8  "...."
.long     0x00000000    # at addr 0x226fc  "...."
.long     0x000199aa    # at addr 0x22700  "...."
.long     0x00000000    # at addr 0x22704  "...."
.long     0x00000001    # at addr 0x22708  "...."
.long     0x00000000    # at addr 0x2270c  "...."
.long     0x00000000    # at addr 0x22710  "...."
.long     0x00000000    # at addr 0x22714  "...."
.long     0x0000008e    # at addr 0x22718  "...."
.long     0x00000000    # at addr 0x2271c  "...."
.long     0x00019caa    # at addr 0x22720  "...."
.long     0x00000000    # at addr 0x22724  "...."
.long     0x00000001    # at addr 0x22728  "...."
.long     0x00000000    # at addr 0x2272c  "...."
.long     0x00000000    # at addr 0x22730  "...."
.long     0x00000000    # at addr 0x22734  "...."
.long     0x00000054    # at addr 0x22738  "T..."
.long     0x00000000    # at addr 0x2273c  "...."
.long     0x000199b1    # at addr 0x22740  "...."
.long     0x00000000    # at addr 0x22744  "...."
.long     0x00000001    # at addr 0x22748  "...."
.long     0x00000000    # at addr 0x2274c  "...."
.long     0x00000000    # at addr 0x22750  "...."
.long     0x00000000    # at addr 0x22754  "...."
.long     0x0000008f    # at addr 0x22758  "...."
.long     0x00000000    # at addr 0x2275c  "...."
.long     0x00019cb2    # at addr 0x22760  "...."
.long     0x00000000    # at addr 0x22764  "...."
.long     0x00000001    # at addr 0x22768  "...."
.long     0x00000000    # at addr 0x2276c  "...."
.long     0x00000000    # at addr 0x22770  "...."
.long     0x00000000    # at addr 0x22774  "...."
.long     0x00000090    # at addr 0x22778  "...."
.long     0x00000000    # at addr 0x2277c  "...."
.long     0x000199c1    # at addr 0x22780  "...."
.long     0x00000000    # at addr 0x22784  "...."
.long     0x00000002    # at addr 0x22788  "...."
.long     0x00000000    # at addr 0x2278c  "...."
.long     0x00000000    # at addr 0x22790  "...."
.long     0x00000000    # at addr 0x22794  "...."
.long     0x00000082    # at addr 0x22798  "...."
.long     0x00000000    # at addr 0x2279c  "...."
.long     0x000199c9    # at addr 0x227a0  "...."
.long     0x00000000    # at addr 0x227a4  "...."
.long     0x00000002    # at addr 0x227a8  "...."
.long     0x00000000    # at addr 0x227ac  "...."
.long     0x00000000    # at addr 0x227b0  "...."
.long     0x00000000    # at addr 0x227b4  "...."
.long     0x00000089    # at addr 0x227b8  "...."
.long     0x00000000    # at addr 0x227bc  "...."
.long     0x00019cbd    # at addr 0x227c0  "...."
.long     0x00000000    # at addr 0x227c4  "...."
.long     0x00000001    # at addr 0x227c8  "...."
.long     0x00000000    # at addr 0x227cc  "...."
.long     0x00000000    # at addr 0x227d0  "...."
.long     0x00000000    # at addr 0x227d4  "...."
.long     0x00000081    # at addr 0x227d8  "...."
.long     0x00000000    # at addr 0x227dc  "...."
.long     0x00019cc8    # at addr 0x227e0  "...."
.long     0x00000000    # at addr 0x227e4  "...."
.long     0x00000000    # at addr 0x227e8  "...."
.long     0x00000000    # at addr 0x227ec  "...."
.long     0x00000000    # at addr 0x227f0  "...."
.long     0x00000000    # at addr 0x227f4  "...."
.long     0x0000005a    # at addr 0x227f8  "Z..."
.long     0x00000000    # at addr 0x227fc  "...."
.long     0x00019cd0    # at addr 0x22800  "...."
.long     0x00000000    # at addr 0x22804  "...."
.long     0x00000000    # at addr 0x22808  "...."
.long     0x00000000    # at addr 0x2280c  "...."
.long     0x00000000    # at addr 0x22810  "...."
.long     0x00000000    # at addr 0x22814  "...."
.long     0x00000080    # at addr 0x22818  "...."
.long     0x00000000    # at addr 0x2281c  "...."
.long     0x00019cd7    # at addr 0x22820  "...."
.long     0x00000000    # at addr 0x22824  "...."
.long     0x00000000    # at addr 0x22828  "...."
.long     0x00000000    # at addr 0x2282c  "...."
.long     0x00000000    # at addr 0x22830  "...."
.long     0x00000000    # at addr 0x22834  "...."
.long     0xffffff7e    # at addr 0x22838  "~..."
.long     0x00000000    # at addr 0x2283c  "...."
.long     0x000197cf    # at addr 0x22840  "...."
.long     0x00000000    # at addr 0x22844  "...."
.long     0x00000000    # at addr 0x22848  "...."
.long     0x00000000    # at addr 0x2284c  "...."
.long     0x00000000    # at addr 0x22850  "...."
.long     0x00000000    # at addr 0x22854  "...."
.long     0xffffff7d    # at addr 0x22858  "}..."
.long     0x00000000    # at addr 0x2285c  "...."
.long     0x00000000    # at addr 0x22860  "...."
.long     0x00000000    # at addr 0x22864  "...."
.long     0x00000000    # at addr 0x22868  "...."
.long     0x00000000    # at addr 0x2286c  "...."
.long     0x00000000    # at addr 0x22870  "...."
.long     0x00000000    # at addr 0x22874  "...."
.long     0x00000000    # at addr 0x22878  "...."
.long     0x00000000    # at addr 0x2287c  "...."
Var0x22880:       # next=0x22960, start=0x22020, end=0x22a57
.long     0x00019946    # at addr 0x22880  "F..."
.long     0x00000000    # at addr 0x22884  "...."
.long     0x00019d3b    # at addr 0x22888  ";..."
.long     0x00000000    # at addr 0x2288c  "...."
.long     0x00019d3e    # at addr 0x22890  ">..."
.long     0x00000000    # at addr 0x22894  "...."
.long     0x00019c0e    # at addr 0x22898  "...."
.long     0x00000000    # at addr 0x2289c  "...."
.long     0x00019b22    # at addr 0x228a0  ""..."
.long     0x00000000    # at addr 0x228a4  "...."
.long     0x00019d41    # at addr 0x228a8  "A..."
.long     0x00000000    # at addr 0x228ac  "...."
.long     0x00019d44    # at addr 0x228b0  "D..."
.long     0x00000000    # at addr 0x228b4  "...."
.long     0x00019d47    # at addr 0x228b8  "G..."
.long     0x00000000    # at addr 0x228bc  "...."
.long     0x00019d4a    # at addr 0x228c0  "J..."
.long     0x00000000    # at addr 0x228c4  "...."
.long     0x00019d7d    # at addr 0x228c8  "}..."
.long     0x00000000    # at addr 0x228cc  "...."
.long     0x00019d4d    # at addr 0x228d0  "M..."
.long     0x00000000    # at addr 0x228d4  "...."
.long     0x00019d50    # at addr 0x228d8  "P..."
.long     0x00000000    # at addr 0x228dc  "...."
.long     0x00019d53    # at addr 0x228e0  "S..."
.long     0x00000000    # at addr 0x228e4  "...."
.long     0x00019cd4    # at addr 0x228e8  "...."
.long     0x00000000    # at addr 0x228ec  "...."
.long     0x00019d56    # at addr 0x228f0  "V..."
.long     0x00000000    # at addr 0x228f4  "...."
.long     0x00019d59    # at addr 0x228f8  "Y..."
.long     0x00000000    # at addr 0x228fc  "...."
.long     0x00019d5c    # at addr 0x22900  "\..."
.long     0x00000000    # at addr 0x22904  "...."
.long     0x00019d5f    # at addr 0x22908  "_..."
.long     0x00000000    # at addr 0x2290c  "...."
.long     0x00019bc3    # at addr 0x22910  "...."
.long     0x00000000    # at addr 0x22914  "...."
.long     0x00019d62    # at addr 0x22918  "b..."
.long     0x00000000    # at addr 0x2291c  "...."
.long     0x00019d65    # at addr 0x22920  "e..."
.long     0x00000000    # at addr 0x22924  "...."
.long     0x00019d68    # at addr 0x22928  "h..."
.long     0x00000000    # at addr 0x2292c  "...."
.long     0x00019d6b    # at addr 0x22930  "k..."
.long     0x00000000    # at addr 0x22934  "...."
.long     0x00019d6e    # at addr 0x22938  "n..."
.long     0x00000000    # at addr 0x2293c  "...."
.long     0x00000000    # at addr 0x22940  "...."
.long     0x00000000    # at addr 0x22944  "...."
.long     0x00000000    # at addr 0x22948  "...."
.long     0x00000000    # at addr 0x2294c  "...."
.long     0x00000000    # at addr 0x22950  "...."
.long     0x00000000    # at addr 0x22954  "...."
.long     0x00000000    # at addr 0x22958  "...."
.long     0x00000000    # at addr 0x2295c  "...."
Var0x22960:       # next=0x229a0, start=0x22020, end=0x22a57
.long     0x00019b25    # at addr 0x22960  "%..."
.long     0x00000000    # at addr 0x22964  "...."
.long     0x00019d71    # at addr 0x22968  "q..."
.long     0x00000000    # at addr 0x2296c  "...."
.long     0x00019c3c    # at addr 0x22970  "<..."
.long     0x00000000    # at addr 0x22974  "...."
.long     0x00019c33    # at addr 0x22978  "3..."
.long     0x00000000    # at addr 0x2297c  "...."
.long     0x00000000    # at addr 0x22980  "...."
.long     0x00000000    # at addr 0x22984  "...."
.long     0x00000000    # at addr 0x22988  "...."
.long     0x00000000    # at addr 0x2298c  "...."
.long     0x00000000    # at addr 0x22990  "...."
.long     0x00000000    # at addr 0x22994  "...."
.long     0x00000000    # at addr 0x22998  "...."
.long     0x00000000    # at addr 0x2299c  "...."
Var0x229a0:       # next=0x229d0, start=0x22020, end=0x22a57
.long     0x0001993d    # at addr 0x229a0  "=..."
.long     0x00000000    # at addr 0x229a4  "...."
.long     0x00019d77    # at addr 0x229a8  "w..."
.long     0x00000000    # at addr 0x229ac  "...."
.long     0x00019d7c    # at addr 0x229b0  "|..."
.long     0x00000000    # at addr 0x229b4  "...."
.long     0x00019954    # at addr 0x229b8  "T..."
.long     0x00000000    # at addr 0x229bc  "...."
.long     0x00000000    # at addr 0x229c0  "...."
.long     0x00000000    # at addr 0x229c4  "...."
.long     0x00000000    # at addr 0x229c8  "...."
.long     0x00000000    # at addr 0x229cc  "...."
Var0x229d0:       # next=0x22a00, start=0x22020, end=0x22a57
.long     0x00019bc6    # at addr 0x229d0  "...."
.long     0x00000000    # at addr 0x229d4  "...."
.long     0x00019c46    # at addr 0x229d8  "F..."
.long     0x00000000    # at addr 0x229dc  "...."
.long     0x00000000    # at addr 0x229e0  "...."
.long     0x00000000    # at addr 0x229e4  "...."
.long     0x00000000    # at addr 0x229e8  "...."
.long     0x00000000    # at addr 0x229ec  "...."
.long     0x00000000    # at addr 0x229f0  "...."
.long     0x00000000    # at addr 0x229f4  "...."
.long     0x00000000    # at addr 0x229f8  "...."
.long     0x00000000    # at addr 0x229fc  "...."
Var0x22a00:       # next=0x22c60, start=0x22020, end=0x22a57
.long     0x00019c7a    # at addr 0x22a00  "z..."
.long     0x00000000    # at addr 0x22a04  "...."
.long     0x0001c25b    # at addr 0x22a08  "[..."
.long     0x00000000    # at addr 0x22a0c  "...."
.long     0x0001c261    # at addr 0x22a10  "a..."
.long     0x00000000    # at addr 0x22a14  "...."
.long     0x0001c26e    # at addr 0x22a18  "n..."
.long     0x00000000    # at addr 0x22a1c  "...."
.long     0x0001c27b    # at addr 0x22a20  "{..."
.long     0x00000000    # at addr 0x22a24  "...."
.long     0x0001ccec    # at addr 0x22a28  "...."
.long     0x00000000    # at addr 0x22a2c  "...."
.long     0x0001c28f    # at addr 0x22a30  "...."
.long     0x00000000    # at addr 0x22a34  "...."
.long     0x0001c274    # at addr 0x22a38  "t..."
.long     0x00000000    # at addr 0x22a3c  "...."
.long     0x00019954    # at addr 0x22a40  "T..."
.long     0x00000000    # at addr 0x22a44  "...."
.long     0x0001c297    # at addr 0x22a48  "...."
.long     0x00000000    # at addr 0x22a4c  "...."
.long     0x00000000    # at addr 0x22a50  "...."
.long     0x00000000    # at addr 0x22a54  "...."

.p2align 3

# Data section .dynamic (size 512)  0x00022a58 - 0x00022c57

.section .dynamic
Var0x22a58:       # next=0x22c60, start=0x22a58, end=0x22c57
.long     0x00000001    # at addr 0x22a58  "...."
.long     0x00000000    # at addr 0x22a5c  "...."
.long     0x00000001    # at addr 0x22a60  "...."
.long     0x00000000    # at addr 0x22a64  "...."
.long     0x00000001    # at addr 0x22a68  "...."
.long     0x00000000    # at addr 0x22a6c  "...."
.long     0x00000076    # at addr 0x22a70  "v..."
.long     0x00000000    # at addr 0x22a74  "...."
.long     0x0000000c    # at addr 0x22a78  "...."
.long     0x00000000    # at addr 0x22a7c  "...."
.long     0x00004000    # at addr 0x22a80  ".@.."
.long     0x00000000    # at addr 0x22a84  "...."
.long     0x0000000d    # at addr 0x22a88  "...."
.long     0x00000000    # at addr 0x22a8c  "...."
.long     0x00017574    # at addr 0x22a90  "tu.."
.long     0x00000000    # at addr 0x22a94  "...."
.long     0x00000019    # at addr 0x22a98  "...."
.long     0x00000000    # at addr 0x22a9c  "...."
.long     0x00022010    # at addr 0x22aa0  ". .."
.long     0x00000000    # at addr 0x22aa4  "...."
.long     0x0000001b    # at addr 0x22aa8  "...."
.long     0x00000000    # at addr 0x22aac  "...."
.long     0x00000008    # at addr 0x22ab0  "...."
.long     0x00000000    # at addr 0x22ab4  "...."
.long     0x0000001a    # at addr 0x22ab8  "...."
.long     0x00000000    # at addr 0x22abc  "...."
.long     0x00022018    # at addr 0x22ac0  ". .."
.long     0x00000000    # at addr 0x22ac4  "...."
.long     0x0000001c    # at addr 0x22ac8  "...."
.long     0x00000000    # at addr 0x22acc  "...."
.long     0x00000008    # at addr 0x22ad0  "...."
.long     0x00000000    # at addr 0x22ad4  "...."
.long     0x6ffffef5    # at addr 0x22ad8  "...o"
.long     0x00000000    # at addr 0x22adc  "...."
.long     0x000003a0    # at addr 0x22ae0  "...."
.long     0x00000000    # at addr 0x22ae4  "...."
.long     0x00000005    # at addr 0x22ae8  "...."
.long     0x00000000    # at addr 0x22aec  "...."
.long     0x00001190    # at addr 0x22af0  "...."
.long     0x00000000    # at addr 0x22af4  "...."
.long     0x00000006    # at addr 0x22af8  "...."
.long     0x00000000    # at addr 0x22afc  "...."
.long     0x00000488    # at addr 0x22b00  "...."
.long     0x00000000    # at addr 0x22b04  "...."
.long     0x0000000a    # at addr 0x22b08  "...."
.long     0x00000000    # at addr 0x22b0c  "...."
.long     0x0000064c    # at addr 0x22b10  "L..."
.long     0x00000000    # at addr 0x22b14  "...."
.long     0x0000000b    # at addr 0x22b18  "...."
.long     0x00000000    # at addr 0x22b1c  "...."
.long     0x00000018    # at addr 0x22b20  "...."
.long     0x00000000    # at addr 0x22b24  "...."
.long     0x00000015    # at addr 0x22b28  "...."
.long     0x00000000    # at addr 0x22b2c  "...."
.long     0x00000000    # at addr 0x22b30  "...."
.long     0x00000000    # at addr 0x22b34  "...."
.long     0x00000003    # at addr 0x22b38  "...."
.long     0x00000000    # at addr 0x22b3c  "...."
.long     0x00022c58    # at addr 0x22b40  "X,.."
.long     0x00000000    # at addr 0x22b44  "...."
.long     0x00000002    # at addr 0x22b48  "...."
.long     0x00000000    # at addr 0x22b4c  "...."
.long     0x000009f0    # at addr 0x22b50  "...."
.long     0x00000000    # at addr 0x22b54  "...."
.long     0x00000014    # at addr 0x22b58  "...."
.long     0x00000000    # at addr 0x22b5c  "...."
.long     0x00000007    # at addr 0x22b60  "...."
.long     0x00000000    # at addr 0x22b64  "...."
.long     0x00000017    # at addr 0x22b68  "...."
.long     0x00000000    # at addr 0x22b6c  "...."
.long     0x00002cb8    # at addr 0x22b70  ".,.."
.long     0x00000000    # at addr 0x22b74  "...."
.long     0x00000007    # at addr 0x22b78  "...."
.long     0x00000000    # at addr 0x22b7c  "...."
.long     0x00001968    # at addr 0x22b80  "h..."
.long     0x00000000    # at addr 0x22b84  "...."
.long     0x00000008    # at addr 0x22b88  "...."
.long     0x00000000    # at addr 0x22b8c  "...."
.long     0x00001350    # at addr 0x22b90  "P..."
.long     0x00000000    # at addr 0x22b94  "...."
.long     0x00000009    # at addr 0x22b98  "...."
.long     0x00000000    # at addr 0x22b9c  "...."
.long     0x00000018    # at addr 0x22ba0  "...."
.long     0x00000000    # at addr 0x22ba4  "...."
.long     0x0000001e    # at addr 0x22ba8  "...."
.long     0x00000000    # at addr 0x22bac  "...."
.long     0x00000008    # at addr 0x22bb0  "...."
.long     0x00000000    # at addr 0x22bb4  "...."
.long     0x6ffffffb    # at addr 0x22bb8  "...o"
.long     0x00000000    # at addr 0x22bbc  "...."
.long     0x08000001    # at addr 0x22bc0  "...."
.long     0x00000000    # at addr 0x22bc4  "...."
.long     0x6ffffffe    # at addr 0x22bc8  "...o"
.long     0x00000000    # at addr 0x22bcc  "...."
.long     0x000018f8    # at addr 0x22bd0  "...."
.long     0x00000000    # at addr 0x22bd4  "...."
.long     0x6fffffff    # at addr 0x22bd8  "...o"
.long     0x00000000    # at addr 0x22bdc  "...."
.long     0x00000001    # at addr 0x22be0  "...."
.long     0x00000000    # at addr 0x22be4  "...."
.long     0x6ffffff0    # at addr 0x22be8  "...o"
.long     0x00000000    # at addr 0x22bec  "...."
.long     0x000017dc    # at addr 0x22bf0  "...."
.long     0x00000000    # at addr 0x22bf4  "...."
.long     0x6ffffff9    # at addr 0x22bf8  "...o"
.long     0x00000000    # at addr 0x22bfc  "...."
.long     0x000000c1    # at addr 0x22c00  "...."
.long     0x00000000    # at addr 0x22c04  "...."
.long     0x00000000    # at addr 0x22c08  "...."
.long     0x00000000    # at addr 0x22c0c  "...."
.long     0x00000000    # at addr 0x22c10  "...."
.long     0x00000000    # at addr 0x22c14  "...."
.long     0x00000000    # at addr 0x22c18  "...."
.long     0x00000000    # at addr 0x22c1c  "...."
.long     0x00000000    # at addr 0x22c20  "...."
.long     0x00000000    # at addr 0x22c24  "...."
.long     0x00000000    # at addr 0x22c28  "...."
.long     0x00000000    # at addr 0x22c2c  "...."
.long     0x00000000    # at addr 0x22c30  "...."
.long     0x00000000    # at addr 0x22c34  "...."
.long     0x00000000    # at addr 0x22c38  "...."
.long     0x00000000    # at addr 0x22c3c  "...."
.long     0x00000000    # at addr 0x22c40  "...."
.long     0x00000000    # at addr 0x22c44  "...."
.long     0x00000000    # at addr 0x22c48  "...."
.long     0x00000000    # at addr 0x22c4c  "...."
.long     0x00000000    # at addr 0x22c50  "...."
.long     0x00000000    # at addr 0x22c54  "...."

.p2align 3

# Data section .got (size 928)  0x00022c58 - 0x00022ff7

.section .got
Var0x22c58:       # next=0x22c60, start=0x22c58, end=0x22ff7
.long     0x00022a58    # at addr 0x22c58  "X*.."
.long     0x00000000    # at addr 0x22c5c  "...."
Var0x22c60:       # next=0x22c68, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22c60  "...."
.long     0x00000000    # at addr 0x22c64  "...."
Var0x22c68:       # next=0x22c70, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22c68  "...."
.long     0x00000000    # at addr 0x22c6c  "...."
Var0x22c70:       # next=0x22c78, start=0x22c58, end=0x22ff7
.long     0x00004030    # at addr 0x22c70  "0@.."
.long     0x00000000    # at addr 0x22c74  "...."
Var0x22c78:       # next=0x22c80, start=0x22c58, end=0x22ff7
.long     0x00004040    # at addr 0x22c78  "@@.."
.long     0x00000000    # at addr 0x22c7c  "...."
Var0x22c80:       # next=0x22c88, start=0x22c58, end=0x22ff7
.long     0x00004050    # at addr 0x22c80  "P@.."
.long     0x00000000    # at addr 0x22c84  "...."
Var0x22c88:       # next=0x22c90, start=0x22c58, end=0x22ff7
.long     0x00004060    # at addr 0x22c88  "`@.."
.long     0x00000000    # at addr 0x22c8c  "...."
Var0x22c90:       # next=0x22c98, start=0x22c58, end=0x22ff7
.long     0x00004070    # at addr 0x22c90  "p@.."
.long     0x00000000    # at addr 0x22c94  "...."
Var0x22c98:       # next=0x22ca0, start=0x22c58, end=0x22ff7
.long     0x00004080    # at addr 0x22c98  ".@.."
.long     0x00000000    # at addr 0x22c9c  "...."
Var0x22ca0:       # next=0x22ca8, start=0x22c58, end=0x22ff7
.long     0x00004090    # at addr 0x22ca0  ".@.."
.long     0x00000000    # at addr 0x22ca4  "...."
Var0x22ca8:       # next=0x22cb0, start=0x22c58, end=0x22ff7
.long     0x000040a0    # at addr 0x22ca8  ".@.."
.long     0x00000000    # at addr 0x22cac  "...."
Var0x22cb0:       # next=0x22cb8, start=0x22c58, end=0x22ff7
.long     0x000040b0    # at addr 0x22cb0  ".@.."
.long     0x00000000    # at addr 0x22cb4  "...."
Var0x22cb8:       # next=0x22cc0, start=0x22c58, end=0x22ff7
.long     0x000040c0    # at addr 0x22cb8  ".@.."
.long     0x00000000    # at addr 0x22cbc  "...."
Var0x22cc0:       # next=0x22cc8, start=0x22c58, end=0x22ff7
.long     0x000040d0    # at addr 0x22cc0  ".@.."
.long     0x00000000    # at addr 0x22cc4  "...."
Var0x22cc8:       # next=0x22cd0, start=0x22c58, end=0x22ff7
.long     0x000040e0    # at addr 0x22cc8  ".@.."
.long     0x00000000    # at addr 0x22ccc  "...."
Var0x22cd0:       # next=0x22cd8, start=0x22c58, end=0x22ff7
.long     0x000040f0    # at addr 0x22cd0  ".@.."
.long     0x00000000    # at addr 0x22cd4  "...."
Var0x22cd8:       # next=0x22ce0, start=0x22c58, end=0x22ff7
.long     0x00004100    # at addr 0x22cd8  ".A.."
.long     0x00000000    # at addr 0x22cdc  "...."
Var0x22ce0:       # next=0x22ce8, start=0x22c58, end=0x22ff7
.long     0x00004110    # at addr 0x22ce0  ".A.."
.long     0x00000000    # at addr 0x22ce4  "...."
Var0x22ce8:       # next=0x22cf0, start=0x22c58, end=0x22ff7
.long     0x00004120    # at addr 0x22ce8  " A.."
.long     0x00000000    # at addr 0x22cec  "...."
Var0x22cf0:       # next=0x22cf8, start=0x22c58, end=0x22ff7
.long     0x00004130    # at addr 0x22cf0  "0A.."
.long     0x00000000    # at addr 0x22cf4  "...."
Var0x22cf8:       # next=0x22d00, start=0x22c58, end=0x22ff7
.long     0x00004140    # at addr 0x22cf8  "@A.."
.long     0x00000000    # at addr 0x22cfc  "...."
Var0x22d00:       # next=0x22d08, start=0x22c58, end=0x22ff7
.long     0x00004150    # at addr 0x22d00  "PA.."
.long     0x00000000    # at addr 0x22d04  "...."
Var0x22d08:       # next=0x22d10, start=0x22c58, end=0x22ff7
.long     0x00004160    # at addr 0x22d08  "`A.."
.long     0x00000000    # at addr 0x22d0c  "...."
Var0x22d10:       # next=0x22d18, start=0x22c58, end=0x22ff7
.long     0x00004170    # at addr 0x22d10  "pA.."
.long     0x00000000    # at addr 0x22d14  "...."
Var0x22d18:       # next=0x22d20, start=0x22c58, end=0x22ff7
.long     0x00004180    # at addr 0x22d18  ".A.."
.long     0x00000000    # at addr 0x22d1c  "...."
Var0x22d20:       # next=0x22d28, start=0x22c58, end=0x22ff7
.long     0x00004190    # at addr 0x22d20  ".A.."
.long     0x00000000    # at addr 0x22d24  "...."
Var0x22d28:       # next=0x22d30, start=0x22c58, end=0x22ff7
.long     0x000041a0    # at addr 0x22d28  ".A.."
.long     0x00000000    # at addr 0x22d2c  "...."
Var0x22d30:       # next=0x22d38, start=0x22c58, end=0x22ff7
.long     0x000041b0    # at addr 0x22d30  ".A.."
.long     0x00000000    # at addr 0x22d34  "...."
Var0x22d38:       # next=0x22d40, start=0x22c58, end=0x22ff7
.long     0x000041c0    # at addr 0x22d38  ".A.."
.long     0x00000000    # at addr 0x22d3c  "...."
Var0x22d40:       # next=0x22d48, start=0x22c58, end=0x22ff7
.long     0x000041d0    # at addr 0x22d40  ".A.."
.long     0x00000000    # at addr 0x22d44  "...."
Var0x22d48:       # next=0x22d50, start=0x22c58, end=0x22ff7
.long     0x000041e0    # at addr 0x22d48  ".A.."
.long     0x00000000    # at addr 0x22d4c  "...."
Var0x22d50:       # next=0x22d58, start=0x22c58, end=0x22ff7
.long     0x000041f0    # at addr 0x22d50  ".A.."
.long     0x00000000    # at addr 0x22d54  "...."
Var0x22d58:       # next=0x22d60, start=0x22c58, end=0x22ff7
.long     0x00004200    # at addr 0x22d58  ".B.."
.long     0x00000000    # at addr 0x22d5c  "...."
Var0x22d60:       # next=0x22d68, start=0x22c58, end=0x22ff7
.long     0x00004210    # at addr 0x22d60  ".B.."
.long     0x00000000    # at addr 0x22d64  "...."
Var0x22d68:       # next=0x22d70, start=0x22c58, end=0x22ff7
.long     0x00004220    # at addr 0x22d68  " B.."
.long     0x00000000    # at addr 0x22d6c  "...."
Var0x22d70:       # next=0x22d78, start=0x22c58, end=0x22ff7
.long     0x00004230    # at addr 0x22d70  "0B.."
.long     0x00000000    # at addr 0x22d74  "...."
Var0x22d78:       # next=0x22d80, start=0x22c58, end=0x22ff7
.long     0x00004240    # at addr 0x22d78  "@B.."
.long     0x00000000    # at addr 0x22d7c  "...."
Var0x22d80:       # next=0x22d88, start=0x22c58, end=0x22ff7
.long     0x00004250    # at addr 0x22d80  "PB.."
.long     0x00000000    # at addr 0x22d84  "...."
Var0x22d88:       # next=0x22d90, start=0x22c58, end=0x22ff7
.long     0x00004260    # at addr 0x22d88  "`B.."
.long     0x00000000    # at addr 0x22d8c  "...."
Var0x22d90:       # next=0x22d98, start=0x22c58, end=0x22ff7
.long     0x00004270    # at addr 0x22d90  "pB.."
.long     0x00000000    # at addr 0x22d94  "...."
Var0x22d98:       # next=0x22da0, start=0x22c58, end=0x22ff7
.long     0x00004280    # at addr 0x22d98  ".B.."
.long     0x00000000    # at addr 0x22d9c  "...."
Var0x22da0:       # next=0x22da8, start=0x22c58, end=0x22ff7
.long     0x00004290    # at addr 0x22da0  ".B.."
.long     0x00000000    # at addr 0x22da4  "...."
Var0x22da8:       # next=0x22db0, start=0x22c58, end=0x22ff7
.long     0x000042a0    # at addr 0x22da8  ".B.."
.long     0x00000000    # at addr 0x22dac  "...."
Var0x22db0:       # next=0x22db8, start=0x22c58, end=0x22ff7
.long     0x000042b0    # at addr 0x22db0  ".B.."
.long     0x00000000    # at addr 0x22db4  "...."
Var0x22db8:       # next=0x22dc0, start=0x22c58, end=0x22ff7
.long     0x000042c0    # at addr 0x22db8  ".B.."
.long     0x00000000    # at addr 0x22dbc  "...."
Var0x22dc0:       # next=0x22dc8, start=0x22c58, end=0x22ff7
.long     0x000042d0    # at addr 0x22dc0  ".B.."
.long     0x00000000    # at addr 0x22dc4  "...."
Var0x22dc8:       # next=0x22dd0, start=0x22c58, end=0x22ff7
.long     0x000042e0    # at addr 0x22dc8  ".B.."
.long     0x00000000    # at addr 0x22dcc  "...."
Var0x22dd0:       # next=0x22dd8, start=0x22c58, end=0x22ff7
.long     0x000042f0    # at addr 0x22dd0  ".B.."
.long     0x00000000    # at addr 0x22dd4  "...."
Var0x22dd8:       # next=0x22de0, start=0x22c58, end=0x22ff7
.long     0x00004300    # at addr 0x22dd8  ".C.."
.long     0x00000000    # at addr 0x22ddc  "...."
Var0x22de0:       # next=0x22de8, start=0x22c58, end=0x22ff7
.long     0x00004310    # at addr 0x22de0  ".C.."
.long     0x00000000    # at addr 0x22de4  "...."
Var0x22de8:       # next=0x22df0, start=0x22c58, end=0x22ff7
.long     0x00004320    # at addr 0x22de8  " C.."
.long     0x00000000    # at addr 0x22dec  "...."
Var0x22df0:       # next=0x22df8, start=0x22c58, end=0x22ff7
.long     0x00004330    # at addr 0x22df0  "0C.."
.long     0x00000000    # at addr 0x22df4  "...."
Var0x22df8:       # next=0x22e00, start=0x22c58, end=0x22ff7
.long     0x00004340    # at addr 0x22df8  "@C.."
.long     0x00000000    # at addr 0x22dfc  "...."
Var0x22e00:       # next=0x22e08, start=0x22c58, end=0x22ff7
.long     0x00004350    # at addr 0x22e00  "PC.."
.long     0x00000000    # at addr 0x22e04  "...."
Var0x22e08:       # next=0x22e10, start=0x22c58, end=0x22ff7
.long     0x00004360    # at addr 0x22e08  "`C.."
.long     0x00000000    # at addr 0x22e0c  "...."
Var0x22e10:       # next=0x22e18, start=0x22c58, end=0x22ff7
.long     0x00004370    # at addr 0x22e10  "pC.."
.long     0x00000000    # at addr 0x22e14  "...."
Var0x22e18:       # next=0x22e20, start=0x22c58, end=0x22ff7
.long     0x00004380    # at addr 0x22e18  ".C.."
.long     0x00000000    # at addr 0x22e1c  "...."
Var0x22e20:       # next=0x22e28, start=0x22c58, end=0x22ff7
.long     0x00004390    # at addr 0x22e20  ".C.."
.long     0x00000000    # at addr 0x22e24  "...."
Var0x22e28:       # next=0x22e30, start=0x22c58, end=0x22ff7
.long     0x000043a0    # at addr 0x22e28  ".C.."
.long     0x00000000    # at addr 0x22e2c  "...."
Var0x22e30:       # next=0x22e38, start=0x22c58, end=0x22ff7
.long     0x000043b0    # at addr 0x22e30  ".C.."
.long     0x00000000    # at addr 0x22e34  "...."
Var0x22e38:       # next=0x22e40, start=0x22c58, end=0x22ff7
.long     0x000043c0    # at addr 0x22e38  ".C.."
.long     0x00000000    # at addr 0x22e3c  "...."
Var0x22e40:       # next=0x22e48, start=0x22c58, end=0x22ff7
.long     0x000043d0    # at addr 0x22e40  ".C.."
.long     0x00000000    # at addr 0x22e44  "...."
Var0x22e48:       # next=0x22e50, start=0x22c58, end=0x22ff7
.long     0x000043e0    # at addr 0x22e48  ".C.."
.long     0x00000000    # at addr 0x22e4c  "...."
Var0x22e50:       # next=0x22e58, start=0x22c58, end=0x22ff7
.long     0x000043f0    # at addr 0x22e50  ".C.."
.long     0x00000000    # at addr 0x22e54  "...."
Var0x22e58:       # next=0x22e60, start=0x22c58, end=0x22ff7
.long     0x00004400    # at addr 0x22e58  ".D.."
.long     0x00000000    # at addr 0x22e5c  "...."
Var0x22e60:       # next=0x22e68, start=0x22c58, end=0x22ff7
.long     0x00004410    # at addr 0x22e60  ".D.."
.long     0x00000000    # at addr 0x22e64  "...."
Var0x22e68:       # next=0x22e70, start=0x22c58, end=0x22ff7
.long     0x00004420    # at addr 0x22e68  " D.."
.long     0x00000000    # at addr 0x22e6c  "...."
Var0x22e70:       # next=0x22e78, start=0x22c58, end=0x22ff7
.long     0x00004430    # at addr 0x22e70  "0D.."
.long     0x00000000    # at addr 0x22e74  "...."
Var0x22e78:       # next=0x22e80, start=0x22c58, end=0x22ff7
.long     0x00004440    # at addr 0x22e78  "@D.."
.long     0x00000000    # at addr 0x22e7c  "...."
Var0x22e80:       # next=0x22e88, start=0x22c58, end=0x22ff7
.long     0x00004450    # at addr 0x22e80  "PD.."
.long     0x00000000    # at addr 0x22e84  "...."
Var0x22e88:       # next=0x22e90, start=0x22c58, end=0x22ff7
.long     0x00004460    # at addr 0x22e88  "`D.."
.long     0x00000000    # at addr 0x22e8c  "...."
Var0x22e90:       # next=0x22e98, start=0x22c58, end=0x22ff7
.long     0x00004470    # at addr 0x22e90  "pD.."
.long     0x00000000    # at addr 0x22e94  "...."
Var0x22e98:       # next=0x22ea0, start=0x22c58, end=0x22ff7
.long     0x00004480    # at addr 0x22e98  ".D.."
.long     0x00000000    # at addr 0x22e9c  "...."
Var0x22ea0:       # next=0x22ea8, start=0x22c58, end=0x22ff7
.long     0x00004490    # at addr 0x22ea0  ".D.."
.long     0x00000000    # at addr 0x22ea4  "...."
Var0x22ea8:       # next=0x22eb0, start=0x22c58, end=0x22ff7
.long     0x000044a0    # at addr 0x22ea8  ".D.."
.long     0x00000000    # at addr 0x22eac  "...."
Var0x22eb0:       # next=0x22eb8, start=0x22c58, end=0x22ff7
.long     0x000044b0    # at addr 0x22eb0  ".D.."
.long     0x00000000    # at addr 0x22eb4  "...."
Var0x22eb8:       # next=0x22ec0, start=0x22c58, end=0x22ff7
.long     0x000044c0    # at addr 0x22eb8  ".D.."
.long     0x00000000    # at addr 0x22ebc  "...."
Var0x22ec0:       # next=0x22ec8, start=0x22c58, end=0x22ff7
.long     0x000044d0    # at addr 0x22ec0  ".D.."
.long     0x00000000    # at addr 0x22ec4  "...."
Var0x22ec8:       # next=0x22ed0, start=0x22c58, end=0x22ff7
.long     0x000044e0    # at addr 0x22ec8  ".D.."
.long     0x00000000    # at addr 0x22ecc  "...."
Var0x22ed0:       # next=0x22ed8, start=0x22c58, end=0x22ff7
.long     0x000044f0    # at addr 0x22ed0  ".D.."
.long     0x00000000    # at addr 0x22ed4  "...."
Var0x22ed8:       # next=0x22ee0, start=0x22c58, end=0x22ff7
.long     0x00004500    # at addr 0x22ed8  ".E.."
.long     0x00000000    # at addr 0x22edc  "...."
Var0x22ee0:       # next=0x22ee8, start=0x22c58, end=0x22ff7
.long     0x00004510    # at addr 0x22ee0  ".E.."
.long     0x00000000    # at addr 0x22ee4  "...."
Var0x22ee8:       # next=0x22ef0, start=0x22c58, end=0x22ff7
.long     0x00004520    # at addr 0x22ee8  " E.."
.long     0x00000000    # at addr 0x22eec  "...."
Var0x22ef0:       # next=0x22ef8, start=0x22c58, end=0x22ff7
.long     0x00004530    # at addr 0x22ef0  "0E.."
.long     0x00000000    # at addr 0x22ef4  "...."
Var0x22ef8:       # next=0x22f00, start=0x22c58, end=0x22ff7
.long     0x00004540    # at addr 0x22ef8  "@E.."
.long     0x00000000    # at addr 0x22efc  "...."
Var0x22f00:       # next=0x22f08, start=0x22c58, end=0x22ff7
.long     0x00004550    # at addr 0x22f00  "PE.."
.long     0x00000000    # at addr 0x22f04  "...."
Var0x22f08:       # next=0x22f10, start=0x22c58, end=0x22ff7
.long     0x00004560    # at addr 0x22f08  "`E.."
.long     0x00000000    # at addr 0x22f0c  "...."
Var0x22f10:       # next=0x22f18, start=0x22c58, end=0x22ff7
.long     0x00004570    # at addr 0x22f10  "pE.."
.long     0x00000000    # at addr 0x22f14  "...."
Var0x22f18:       # next=0x22f20, start=0x22c58, end=0x22ff7
.long     0x00004580    # at addr 0x22f18  ".E.."
.long     0x00000000    # at addr 0x22f1c  "...."
Var0x22f20:       # next=0x22f28, start=0x22c58, end=0x22ff7
.long     0x00004590    # at addr 0x22f20  ".E.."
.long     0x00000000    # at addr 0x22f24  "...."
Var0x22f28:       # next=0x22f30, start=0x22c58, end=0x22ff7
.long     0x000045a0    # at addr 0x22f28  ".E.."
.long     0x00000000    # at addr 0x22f2c  "...."
Var0x22f30:       # next=0x22f38, start=0x22c58, end=0x22ff7
.long     0x000045b0    # at addr 0x22f30  ".E.."
.long     0x00000000    # at addr 0x22f34  "...."
Var0x22f38:       # next=0x22f40, start=0x22c58, end=0x22ff7
.long     0x000045c0    # at addr 0x22f38  ".E.."
.long     0x00000000    # at addr 0x22f3c  "...."
Var0x22f40:       # next=0x22f48, start=0x22c58, end=0x22ff7
.long     0x000045d0    # at addr 0x22f40  ".E.."
.long     0x00000000    # at addr 0x22f44  "...."
Var0x22f48:       # next=0x22f50, start=0x22c58, end=0x22ff7
.long     0x000045e0    # at addr 0x22f48  ".E.."
.long     0x00000000    # at addr 0x22f4c  "...."
Var0x22f50:       # next=0x22f58, start=0x22c58, end=0x22ff7
.long     0x000045f0    # at addr 0x22f50  ".E.."
.long     0x00000000    # at addr 0x22f54  "...."
Var0x22f58:       # next=0x22f60, start=0x22c58, end=0x22ff7
.long     0x00004600    # at addr 0x22f58  ".F.."
.long     0x00000000    # at addr 0x22f5c  "...."
Var0x22f60:       # next=0x22f68, start=0x22c58, end=0x22ff7
.long     0x00004610    # at addr 0x22f60  ".F.."
.long     0x00000000    # at addr 0x22f64  "...."
Var0x22f68:       # next=0x22f70, start=0x22c58, end=0x22ff7
.long     0x00004620    # at addr 0x22f68  " F.."
.long     0x00000000    # at addr 0x22f6c  "...."
Var0x22f70:       # next=0x22f78, start=0x22c58, end=0x22ff7
.long     0x00004630    # at addr 0x22f70  "0F.."
.long     0x00000000    # at addr 0x22f74  "...."
Var0x22f78:       # next=0x22f80, start=0x22c58, end=0x22ff7
.long     0x00004640    # at addr 0x22f78  "@F.."
.long     0x00000000    # at addr 0x22f7c  "...."
Var0x22f80:       # next=0x22f88, start=0x22c58, end=0x22ff7
.long     0x00004650    # at addr 0x22f80  "PF.."
.long     0x00000000    # at addr 0x22f84  "...."
Var0x22f88:       # next=0x22f90, start=0x22c58, end=0x22ff7
.long     0x00004660    # at addr 0x22f88  "`F.."
.long     0x00000000    # at addr 0x22f8c  "...."
Var0x22f90:       # next=0x22f98, start=0x22c58, end=0x22ff7
.long     0x00004670    # at addr 0x22f90  "pF.."
.long     0x00000000    # at addr 0x22f94  "...."
Var0x22f98:       # next=0x22fa0, start=0x22c58, end=0x22ff7
.long     0x00004680    # at addr 0x22f98  ".F.."
.long     0x00000000    # at addr 0x22f9c  "...."
Var0x22fa0:       # next=0x22fa8, start=0x22c58, end=0x22ff7
.long     0x00004690    # at addr 0x22fa0  ".F.."
.long     0x00000000    # at addr 0x22fa4  "...."
Var0x22fa8:       # next=0x22fb0, start=0x22c58, end=0x22ff7
.long     0x000046a0    # at addr 0x22fa8  ".F.."
.long     0x00000000    # at addr 0x22fac  "...."
Var0x22fb0:       # next=0x22fb8, start=0x22c58, end=0x22ff7
.long     0x000046b0    # at addr 0x22fb0  ".F.."
.long     0x00000000    # at addr 0x22fb4  "...."
Var0x22fb8:       # next=0x22fc0, start=0x22c58, end=0x22ff7
.long     0x000046c0    # at addr 0x22fb8  ".F.."
.long     0x00000000    # at addr 0x22fbc  "...."
Var0x22fc0:       # next=0x22fc8, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22fc0  "...."
.long     0x00000000    # at addr 0x22fc4  "...."
Var0x22fc8:       # next=0x22fd0, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22fc8  "...."
.long     0x00000000    # at addr 0x22fcc  "...."
Var0x22fd0:       # next=0x22fd8, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22fd0  "...."
.long     0x00000000    # at addr 0x22fd4  "...."
Var0x22fd8:       # next=0x22fe0, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22fd8  "...."
.long     0x00000000    # at addr 0x22fdc  "...."
Var0x22fe0:       # next=0x22fe8, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22fe0  "...."
.long     0x00000000    # at addr 0x22fe4  "...."
Var0x22fe8:       # next=0x22ff0, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22fe8  "...."
.long     0x00000000    # at addr 0x22fec  "...."
Var0x22ff0:       # next=0x23008, start=0x22c58, end=0x22ff7
.long     0x00000000    # at addr 0x22ff0  "...."
.long     0x00000000    # at addr 0x22ff4  "...."

.p2align 5

# Data section .data (size 616)  0x00023000 - 0x00023267

.section .data
Var0x23000:       # next=0x23008, start=0x23000, end=0x23267
.long     0x00000000    # at addr 0x23000  "...."
.long     0x00000000    # at addr 0x23004  "...."
Var0x23008:       # next=0x23010, start=0x23000, end=0x23267
.long     0x00023008    # at addr 0x23008  ".0.."
.long     0x00000000    # at addr 0x2300c  "...."
Var0x23010:       # next=0x23014, start=0x23000, end=0x23267
.long     0x00000001    # at addr 0x23010  "...."
Var0x23014:       # next=0x23018, start=0x23000, end=0x23267
.long     0xffffffff    # at addr 0x23014  "...."
Var0x23018:       # next=0x23020, start=0x23000, end=0x23267
.long     0x00000001    # at addr 0x23018  "...."
.long     0x00000000    # at addr 0x2301c  "...."
Var0x23020:       # next=0x23021, start=0x23000, end=0x23267
.byte     0x01    # "."
Var0x23021:       # next=0x23022, start=0x23000, end=0x23267
.byte     0x01    # "."
Var0x23022:       # next=0x23040, start=0x23000, end=0x23267
.long     0x0000003f    # at addr 0x23022  "?..."
.long     0x00000000    # at addr 0x23026  "...."
.long     0x00000000    # at addr 0x2302a  "...."
.long     0x00000000    # at addr 0x2302e  "...."
.long     0x00000000    # at addr 0x23032  "...."
.long     0x00000000    # at addr 0x23036  "...."
.long     0x00000000    # at addr 0x2303a  "...."
.byte     0x00    # "."
.byte     0x00    # "."
Var0x23040:       # next=0x23048, start=0x23000, end=0x23267
.long     0x00019cdc    # at addr 0x23040  "...."
.long     0x00000000    # at addr 0x23044  "...."
Var0x23048:       # next=0x23060, start=0x23000, end=0x23267
.long     0x00019ce6    # at addr 0x23048  "...."
.long     0x00000000    # at addr 0x2304c  "...."
.long     0x00000000    # at addr 0x23050  "...."
.long     0x00000000    # at addr 0x23054  "...."
.long     0x00000000    # at addr 0x23058  "...."
.long     0x00000000    # at addr 0x2305c  "...."
Var0x23060:       # next=0x23068, start=0x23000, end=0x23267
.long     0x00000002    # at addr 0x23060  "...."
.long     0x00000000    # at addr 0x23064  "...."
Var0x23068:       # next=0x23070, start=0x23000, end=0x23267
.long     0x00019cf2    # at addr 0x23068  "...."
.long     0x00000000    # at addr 0x2306c  "...."
Var0x23070:       # next=0x23078, start=0x23000, end=0x23267
.long     0x00000001    # at addr 0x23070  "...."
.long     0x00000000    # at addr 0x23074  "...."
Var0x23078:       # next=0x23088, start=0x23000, end=0x23267
.long     0x00019912    # at addr 0x23078  "...."
.long     0x00000000    # at addr 0x2307c  "...."
.long     0x00000000    # at addr 0x23080  "...."
.long     0x00000000    # at addr 0x23084  "...."
Var0x23088:       # next=0x23098, start=0x23000, end=0x23267
.long     0x00000000    # at addr 0x23088  "...."
.long     0x00000000    # at addr 0x2308c  "...."
.long     0x00000001    # at addr 0x23090  "...."
.long     0x00000000    # at addr 0x23094  "...."
Var0x23098:       # next=0x230a8, start=0x23000, end=0x23267
.long     0x0001be43    # at addr 0x23098  "C..."
.long     0x00000000    # at addr 0x2309c  "...."
.long     0x00000000    # at addr 0x230a0  "...."
.long     0x00000000    # at addr 0x230a4  "...."
Var0x230a8:       # next=0x230d0, start=0x23000, end=0x23267
.long     0x00000000    # at addr 0x230a8  "...."
.long     0x00000000    # at addr 0x230ac  "...."
.long     0x00000000    # at addr 0x230b0  "...."
.long     0x00000000    # at addr 0x230b4  "...."
.long     0x00000000    # at addr 0x230b8  "...."
.long     0x00000000    # at addr 0x230bc  "...."
.long     0x00000005    # at addr 0x230c0  "...."
.long     0x00000000    # at addr 0x230c4  "...."
.long     0x00019cf5    # at addr 0x230c8  "...."
.long     0x00000000    # at addr 0x230cc  "...."
Var0x230d0:       # next=0x230d8, start=0x23000, end=0x23267
.long     0x00000005    # at addr 0x230d0  "...."
.long     0x00000000    # at addr 0x230d4  "...."
Var0x230d8:       # next=0x231d8, start=0x23000, end=0x23267
.long     0x00019cfb    # at addr 0x230d8  "...."
.long     0x00000000    # at addr 0x230dc  "...."
.long     0x00000002    # at addr 0x230e0  "...."
.long     0x00000000    # at addr 0x230e4  "...."
.long     0x00019d0a    # at addr 0x230e8  "...."
.long     0x00000000    # at addr 0x230ec  "...."
.long     0x00000005    # at addr 0x230f0  "...."
.long     0x00000000    # at addr 0x230f4  "...."
.long     0x00019d01    # at addr 0x230f8  "...."
.long     0x00000000    # at addr 0x230fc  "...."
.long     0x00000005    # at addr 0x23100  "...."
.long     0x00000000    # at addr 0x23104  "...."
.long     0x00019d07    # at addr 0x23108  "...."
.long     0x00000000    # at addr 0x2310c  "...."
.long     0x00000005    # at addr 0x23110  "...."
.long     0x00000000    # at addr 0x23114  "...."
.long     0x00019d07    # at addr 0x23118  "...."
.long     0x00000000    # at addr 0x2311c  "...."
.long     0x00000000    # at addr 0x23120  "...."
.long     0x00000000    # at addr 0x23124  "...."
.long     0x00000000    # at addr 0x23128  "...."
.long     0x00000000    # at addr 0x2312c  "...."
.long     0x00000000    # at addr 0x23130  "...."
.long     0x00000000    # at addr 0x23134  "...."
.long     0x00000000    # at addr 0x23138  "...."
.long     0x00000000    # at addr 0x2313c  "...."
.long     0x00000005    # at addr 0x23140  "...."
.long     0x00000000    # at addr 0x23144  "...."
.long     0x00019d0d    # at addr 0x23148  "...."
.long     0x00000000    # at addr 0x2314c  "...."
.long     0x00000005    # at addr 0x23150  "...."
.long     0x00000000    # at addr 0x23154  "...."
.long     0x00019d01    # at addr 0x23158  "...."
.long     0x00000000    # at addr 0x2315c  "...."
.long     0x00000005    # at addr 0x23160  "...."
.long     0x00000000    # at addr 0x23164  "...."
.long     0x00019d13    # at addr 0x23168  "...."
.long     0x00000000    # at addr 0x2316c  "...."
.long     0x00000005    # at addr 0x23170  "...."
.long     0x00000000    # at addr 0x23174  "...."
.long     0x00019d19    # at addr 0x23178  "...."
.long     0x00000000    # at addr 0x2317c  "...."
.long     0x00000005    # at addr 0x23180  "...."
.long     0x00000000    # at addr 0x23184  "...."
.long     0x00019d1f    # at addr 0x23188  "...."
.long     0x00000000    # at addr 0x2318c  "...."
.long     0x00000005    # at addr 0x23190  "...."
.long     0x00000000    # at addr 0x23194  "...."
.long     0x00019d25    # at addr 0x23198  "%..."
.long     0x00000000    # at addr 0x2319c  "...."
.long     0x00000005    # at addr 0x231a0  "...."
.long     0x00000000    # at addr 0x231a4  "...."
.long     0x00019d2b    # at addr 0x231a8  "+..."
.long     0x00000000    # at addr 0x231ac  "...."
.long     0x00000005    # at addr 0x231b0  "...."
.long     0x00000000    # at addr 0x231b4  "...."
.long     0x00019d31    # at addr 0x231b8  "1..."
.long     0x00000000    # at addr 0x231bc  "...."
.long     0x00000000    # at addr 0x231c0  "...."
.long     0x00000000    # at addr 0x231c4  "...."
.long     0x00000000    # at addr 0x231c8  "...."
.long     0x00000000    # at addr 0x231cc  "...."
.long     0x00000003    # at addr 0x231d0  "...."
.long     0x00000000    # at addr 0x231d4  "...."
Var0x231d8:       # next=0x231e0, start=0x23000, end=0x23267
.long     0x00019d37    # at addr 0x231d8  "7..."
.long     0x00000000    # at addr 0x231dc  "...."
Var0x231e0:       # next=0x231e8, start=0x23000, end=0x23267
.long     0x00000001    # at addr 0x231e0  "...."
.long     0x00000000    # at addr 0x231e4  "...."
Var0x231e8:       # next=0x231f0, start=0x23000, end=0x23267
.long     0x0001be40    # at addr 0x231e8  "@..."
.long     0x00000000    # at addr 0x231ec  "...."
Var0x231f0:       # next=0x231f8, start=0x23000, end=0x23267
.long     0x0000d4d0    # at addr 0x231f0  "...."
.long     0x00000000    # at addr 0x231f4  "...."
Var0x231f8:       # next=0x23200, start=0x23000, end=0x23267
.long     0x00000001    # at addr 0x231f8  "...."
.long     0x00000000    # at addr 0x231fc  "...."
Var0x23200:       # next=0x23238, start=0x23000, end=0x23267
.long     0x00000008    # at addr 0x23200  "...."
.long     0x00000000    # at addr 0x23204  "...."
.long     0x00000000    # at addr 0x23208  "...."
.long     0x00000000    # at addr 0x2320c  "...."
.long     0x00000000    # at addr 0x23210  "...."
.long     0x00000000    # at addr 0x23214  "...."
.long     0x00000000    # at addr 0x23218  "...."
.long     0x00000000    # at addr 0x2321c  "...."
.long     0x00000000    # at addr 0x23220  "...."
.long     0x00000000    # at addr 0x23224  "...."
.long     0x00000000    # at addr 0x23228  "...."
.long     0x00000000    # at addr 0x2322c  "...."
.long     0x00000000    # at addr 0x23230  "...."
.long     0x00000000    # at addr 0x23234  "...."
Var0x23238:       # next=0x23240, start=0x23000, end=0x23267
.long     0x00000001    # at addr 0x23238  "...."
.long     0x00000000    # at addr 0x2323c  "...."
Var0x23240:       # next=0x23250, start=0x23000, end=0x23267
.long     0x00023250    # at addr 0x23240  "P2.."
.long     0x00000000    # at addr 0x23244  "...."
.long     0x00000000    # at addr 0x23248  "...."
.long     0x00000000    # at addr 0x2324c  "...."
Var0x23250:       # next=0x23258, start=0x23000, end=0x23267
.long     0x00000100    # at addr 0x23250  "...."
.long     0x00000000    # at addr 0x23254  "...."
Var0x23258:       # next=0x23260, start=0x23000, end=0x23267
.long     0x00024420    # at addr 0x23258  " D.."
.long     0x00000000    # at addr 0x2325c  "...."
Var0x23260:       # next=0x23280, start=0x23000, end=0x23267
.long     0x00016960    # at addr 0x23260  "`i.."
.long     0x00000000    # at addr 0x23264  "...."

.p2align 5

# Dynamic Data section .bss (size 4824)  0x00023280 - 0x00024557
.bss
Var0x23280:       # next=0x23288, start=0x23280, end=0x24557
  .skip 0x8
Var0x23288:       # next=0x23290, start=0x23280, end=0x24557
  .skip 0x8
Var0x23290:       # next=0x23298, start=0x23280, end=0x24557
  .skip 0x8
Var0x23298:       # next=0x232a0, start=0x23280, end=0x24557
  .skip 0x8
Var0x232a0:       # next=0x232c0, start=0x23280, end=0x24557
  .skip 0x20
Var0x232c0:       # next=0x232c8, start=0x23280, end=0x24557
  .skip 0x8
Var0x232c8:       # next=0x232e0, start=0x23280, end=0x24557
  .skip 0x18
Var0x232e0:       # next=0x232e8, start=0x23280, end=0x24557
  .skip 0x8
Var0x232e8:       # next=0x232f0, start=0x23280, end=0x24557
  .skip 0x8
Var0x232f0:       # next=0x232f8, start=0x23280, end=0x24557
  .skip 0x8
Var0x232f8:       # next=0x23300, start=0x23280, end=0x24557
  .skip 0x8
Var0x23300:       # next=0x233c8, start=0x23280, end=0x24557
  .skip 0xc8
Var0x233c8:       # next=0x233e0, start=0x23280, end=0x24557
  .skip 0x18
Var0x233e0:       # next=0x23fe0, start=0x23280, end=0x24557
  .skip 0xc00
Var0x23fe0:       # next=0x240e0, start=0x23280, end=0x24557
  .skip 0x100
Var0x240e0:       # next=0x240f0, start=0x23280, end=0x24557
  .skip 0x10
Var0x240f0:       # next=0x240f8, start=0x23280, end=0x24557
  .skip 0x8
Var0x240f8:       # next=0x24100, start=0x23280, end=0x24557
  .skip 0x8
Var0x24100:       # next=0x24140, start=0x23280, end=0x24557
  .skip 0x40
Var0x24140:       # next=0x241a0, start=0x23280, end=0x24557
  .skip 0x60
Var0x241a0:       # next=0x241f8, start=0x23280, end=0x24557
  .skip 0x58
Var0x241f8:       # next=0x24200, start=0x23280, end=0x24557
  .skip 0x8
Var0x24200:       # next=0x24208, start=0x23280, end=0x24557
  .skip 0x8
Var0x24208:       # next=0x24210, start=0x23280, end=0x24557
  .skip 0x8
Var0x24210:       # next=0x24214, start=0x23280, end=0x24557
  .skip 0x4
Var0x24214:       # next=0x24218, start=0x23280, end=0x24557
  .skip 0x4
Var0x24218:       # next=0x24220, start=0x23280, end=0x24557
  .skip 0x8
Var0x24220:       # next=0x24230, start=0x23280, end=0x24557
  .skip 0x10
Var0x24230:       # next=0x24240, start=0x23280, end=0x24557
  .skip 0x10
Var0x24240:       # next=0x24250, start=0x23280, end=0x24557
  .skip 0x10
Var0x24250:       # next=0x24260, start=0x23280, end=0x24557
  .skip 0x10
Var0x24260:       # next=0x24270, start=0x23280, end=0x24557
  .skip 0x10
Var0x24270:       # next=0x24280, start=0x23280, end=0x24557
  .skip 0x10
Var0x24280:       # next=0x24290, start=0x23280, end=0x24557
  .skip 0x10
Var0x24290:       # next=0x242a0, start=0x23280, end=0x24557
  .skip 0x10
Var0x242a0:       # next=0x242a1, start=0x23280, end=0x24557
  .skip 0x1
Var0x242a1:       # next=0x242a8, start=0x23280, end=0x24557
  .skip 0x7
Var0x242a8:       # next=0x242b0, start=0x23280, end=0x24557
  .skip 0x8
Var0x242b0:       # next=0x242b8, start=0x23280, end=0x24557
  .skip 0x8
Var0x242b8:       # next=0x242c0, start=0x23280, end=0x24557
  .skip 0x8
Var0x242c0:       # next=0x242c8, start=0x23280, end=0x24557
  .skip 0x8
Var0x242c8:       # next=0x242d0, start=0x23280, end=0x24557
  .skip 0x8
Var0x242d0:       # next=0x242d8, start=0x23280, end=0x24557
  .skip 0x8
Var0x242d8:       # next=0x242e0, start=0x23280, end=0x24557
  .skip 0x8
Var0x242e0:       # next=0x242e8, start=0x23280, end=0x24557
  .skip 0x8
Var0x242e8:       # next=0x242f0, start=0x23280, end=0x24557
  .skip 0x8
Var0x242f0:       # next=0x242f4, start=0x23280, end=0x24557
  .skip 0x4
Var0x242f4:       # next=0x242f5, start=0x23280, end=0x24557
  .skip 0x1
Var0x242f5:       # next=0x242f6, start=0x23280, end=0x24557
  .skip 0x1
Var0x242f6:       # next=0x242f8, start=0x23280, end=0x24557
  .skip 0x2
Var0x242f8:       # next=0x242fc, start=0x23280, end=0x24557
  .skip 0x4
Var0x242fc:       # next=0x242fd, start=0x23280, end=0x24557
  .skip 0x1
Var0x242fd:       # next=0x24300, start=0x23280, end=0x24557
  .skip 0x3
Var0x24300:       # next=0x24308, start=0x23280, end=0x24557
  .skip 0x8
Var0x24308:       # next=0x24310, start=0x23280, end=0x24557
  .skip 0x8
Var0x24310:       # next=0x24311, start=0x23280, end=0x24557
  .skip 0x1
Var0x24311:       # next=0x24312, start=0x23280, end=0x24557
  .skip 0x1
Var0x24312:       # next=0x24314, start=0x23280, end=0x24557
  .skip 0x2
Var0x24314:       # next=0x24318, start=0x23280, end=0x24557
  .skip 0x4
Var0x24318:       # next=0x2431c, start=0x23280, end=0x24557
  .skip 0x4
Var0x2431c:       # next=0x24320, start=0x23280, end=0x24557
  .skip 0x4
Var0x24320:       # next=0x24328, start=0x23280, end=0x24557
  .skip 0x8
Var0x24328:       # next=0x2432c, start=0x23280, end=0x24557
  .skip 0x4
Var0x2432c:       # next=0x2432d, start=0x23280, end=0x24557
  .skip 0x1
Var0x2432d:       # next=0x2432e, start=0x23280, end=0x24557
  .skip 0x1
Var0x2432e:       # next=0x2432f, start=0x23280, end=0x24557
  .skip 0x1
Var0x2432f:       # next=0x24330, start=0x23280, end=0x24557
  .skip 0x1
Var0x24330:       # next=0x24334, start=0x23280, end=0x24557
  .skip 0x4
Var0x24334:       # next=0x24338, start=0x23280, end=0x24557
  .skip 0x4
Var0x24338:       # next=0x2433c, start=0x23280, end=0x24557
  .skip 0x4
Var0x2433c:       # next=0x24340, start=0x23280, end=0x24557
  .skip 0x4
Var0x24340:       # next=0x24344, start=0x23280, end=0x24557
  .skip 0x4
Var0x24344:       # next=0x24348, start=0x23280, end=0x24557
  .skip 0x4
Var0x24348:       # next=0x2434c, start=0x23280, end=0x24557
  .skip 0x4
Var0x2434c:       # next=0x24350, start=0x23280, end=0x24557
  .skip 0x4
Var0x24350:       # next=0x24354, start=0x23280, end=0x24557
  .skip 0x4
Var0x24354:       # next=0x24358, start=0x23280, end=0x24557
  .skip 0x4
Var0x24358:       # next=0x2435c, start=0x23280, end=0x24557
  .skip 0x4
Var0x2435c:       # next=0x24360, start=0x23280, end=0x24557
  .skip 0x4
Var0x24360:       # next=0x24364, start=0x23280, end=0x24557
  .skip 0x4
Var0x24364:       # next=0x24365, start=0x23280, end=0x24557
  .skip 0x1
Var0x24365:       # next=0x24370, start=0x23280, end=0x24557
  .skip 0xb
Var0x24370:       # next=0x24378, start=0x23280, end=0x24557
  .skip 0x8
Var0x24378:       # next=0x24380, start=0x23280, end=0x24557
  .skip 0x8
Var0x24380:       # next=0x24388, start=0x23280, end=0x24557
  .skip 0x8
Var0x24388:       # next=0x24390, start=0x23280, end=0x24557
  .skip 0x8
Var0x24390:       # next=0x24398, start=0x23280, end=0x24557
  .skip 0x8
Var0x24398:       # next=0x243a0, start=0x23280, end=0x24557
  .skip 0x8
Var0x243a0:       # next=0x243a8, start=0x23280, end=0x24557
  .skip 0x8
Var0x243a8:       # next=0x243a9, start=0x23280, end=0x24557
  .skip 0x1
Var0x243a9:       # next=0x243b0, start=0x23280, end=0x24557
  .skip 0x7
Var0x243b0:       # next=0x243b8, start=0x23280, end=0x24557
  .skip 0x8
Var0x243b8:       # next=0x243c0, start=0x23280, end=0x24557
  .skip 0x8
Var0x243c0:       # next=0x243c8, start=0x23280, end=0x24557
  .skip 0x8
Var0x243c8:       # next=0x243d0, start=0x23280, end=0x24557
  .skip 0x8
Var0x243d0:       # next=0x243d8, start=0x23280, end=0x24557
  .skip 0x8
Var0x243d8:       # next=0x243e0, start=0x23280, end=0x24557
  .skip 0x8
Var0x243e0:       # next=0x243e8, start=0x23280, end=0x24557
  .skip 0x8
Var0x243e8:       # next=0x243f0, start=0x23280, end=0x24557
  .skip 0x8
Var0x243f0:       # next=0x243f8, start=0x23280, end=0x24557
  .skip 0x8
Var0x243f8:       # next=0x24400, start=0x23280, end=0x24557
  .skip 0x8
Var0x24400:       # next=0x24420, start=0x23280, end=0x24557
  .skip 0x20
Var0x24420:       # next=0x24520, start=0x23280, end=0x24557
  .skip 0x100
Var0x24520:       # next=0x24530, start=0x23280, end=0x24557
  .skip 0x10
Var0x24530:       # next=0x24540, start=0x23280, end=0x24557
  .skip 0x10
Var0x24540:       # next=0x24550, start=0x23280, end=0x24557
  .skip 0x10
Var0x24550:       # next=0x24551, start=0x23280, end=0x24557
  .skip 0x1
Var0x24551:       # next=0x24558, start=0x23280, end=0x24557
  .skip 0x7

.p2align 2

# IGNORED Other section .gnu_debuglink (size 52)
#----------------
# possibleFunctions 
#----------------
# 0x4030,   0x4040,   0x4050,   0x4060,   0x4070,   
 # 0x4080,   0x4090,   0x40a0,   0x40b0,   0x40c0,   
 # 0x40d0,   0x40e0,   0x40f0,   0x4100,   0x4110,   
 # 0x4120,   0x4130,   0x4140,   0x4150,   0x4160,   
 # 0x4170,   0x4180,   0x4190,   0x41a0,   0x41b0,   
 # 0x41c0,   0x41d0,   0x41e0,   0x41f0,   0x41ff,   
 # 0x4200,   0x4210,   0x4220,   0x4230,   0x4240,   
 # 0x4250,   0x4260,   0x4270,   0x4280,   0x4290,   
 # 0x42a0,   0x42b0,   0x42c0,   0x42d0,   0x42e0,   
 # 0x42f0,   0x42ff,   0x4300,   0x4310,   0x4320,   
 # 0x4330,   0x4340,   0x4350,   0x4360,   0x4370,   
 # 0x4380,   0x4390,   0x43a0,   0x43b0,   0x43c0,   
 # 0x43d0,   0x43e0,   0x43f0,   0x43ff,   0x4400,   
 # 0x4410,   0x4420,   0x4430,   0x4440,   0x4450,   
 # 0x4460,   0x4470,   0x4480,   0x4490,   0x44a0,   
 # 0x44b0,   0x44c0,   0x44d0,   0x44e0,   0x44f0,   
 # 0x4500,   0x4510,   0x4520,   0x4530,   0x4540,   
 # 0x4550,   0x4560,   0x4570,   0x4580,   0x4590,   
 # 0x45a0,   0x45b0,   0x45c0,   0x45d0,   0x45e0,   
 # 0x45f0,   0x45ff,   0x4600,   0x4610,   0x4620,   
 # 0x4630,   0x4640,   0x4650,   0x4660,   0x4670,   
 # 0x4680,   0x4690,   0x46a0,   0x46b0,   0x46c0,   
 # 0x480b,   0x4dff,   0x4e00,   0x5300,   0x54ff,   
 # 0x5a00,   0x5c0b,   0x600b,   0x63ff,   0x6700,   
 # 0x67ff,   0x6870,   0x68b0,   0x6a00,   0x6c00,   
 # 0x6ef0,   0x6f00,   0x7325,   0x7340,   0x7350,   
 # 0x7360,   0x7380,   0x7400,   0x7860,   0x78a0,   
 # 0x7900,   0x7960,   0x79d0,   0x7b80,   0x7c00,   
 # 0x7c70,   0x7cd0,   0x80ff,   0x8300,   0x8400,   
 # 0x84ff,   0x86ff,   0x8800,   0x8900,   0x8e00,   
 # 0x8f00,   0x95ff,   0x97ff,   0xa000,   0xa530,   
 # 0xa5b0,   0xa5f0,   0xa670,   0xa6f0,   0xa770,   
 # 0xa7b0,   0xa7f0,   0xa880,   0xac00,   0xb5ff,   
 # 0xbeff,   0xbfc0,   0xc010,   0xc060,   0xc0b0,   
 # 0xc0f0,   0xc140,   0xc180,   0xc210,   0xc290,   
 # 0xc320,   0xc3b0,   0xc450,   0xc4d0,   0xc510,   
 # 0xc560,   0xc5b0,   0xc600,   0xc640,   0xc690,   
 # 0xc720,   0xc7b0,   0xc850,   0xc8c0,   0xc930,   
 # 0xc9f0,   0xcab0,   0xcb30,   0xcbb0,   0xd1ff,   
 # 0xd4d0,   0xe6ff,   0x10000,   0x10003,   0x100ff,   
 # 0x10800,   0x10dff,   0x11a00,   0x12400,   0x127ff,   
 # 0x12bff,   0x13000,   0x13c00,   0x15600,   0x16960,   
 # 0x16aa0,   0x16bb0,   0x16bf0,   0x16c60,   0x17574,   
 # 
#----------------
# failedJumpPtrs 
#----------------
# 0x5081,   0x6981,   0x11bac,   0x1350f,   0x13700,   
 # 0x13d10,   0x13e60,   0x152f8,   0x15ef9,   0x15f23,   
 # 0x15f78,   0x16489,   0x164b3,   0x16508,   0x169be,   
 # 0x169c3,   0x169de,   0x169e3,   
#----------------
# codeAddrInMove 
#----------------
# 0x4e20,   0x5413,   0xfffd,   
#----------------
# terminals 
#----------------
# 0x67d0,   0x22c98,   0x22cb8,   0x22d60,   0x22dc8,   
 # 0x22f70,   
#----------------
# jumpedBy 
#----------------
# 0x4016,   0x4020,   0x46d0,   0x4840,   0x4860,   
 # 0x4950,   0x4980,   0x49e0,   0x4a50,   0x4a80,   
 # 0x4ae0,   0x4b70,   0x4ba0,   0x4bd0,   0x4c60,   
 # 0x4c70,   0x4c80,   0x4ca0,   0x4cd0,   0x4d20,   
 # 0x4da0,   0x4da5,   0x4daa,   0x4daf,   0x4db4,   
 # 0x4db9,   0x4dbe,   0x4dc3,   0x4dc8,   0x4dcd,   
 # 0x4dd2,   0x4dd7,   0x4ddc,   0x4de6,   0x4deb,   
 # 0x4ed3,   0x4f96,   0x4fbe,   0x4fea,   0x502f,   
 # 0x5041,   0x5088,   0x50d0,   0x50de,   0x5137,   
 # 0x5434,   0x55ee,   0x5830,   0x585d,   0x5869,   
 # 0x589d,   0x58e1,   0x58e3,   0x5907,   0x5930,   
 # 0x594f,   0x5985,   0x598c,   0x59ab,   0x59af,   
 # 0x59b8,   0x59c8,   0x59cc,   0x59f2,   0x5a06,   
 # 0x5a13,   0x5a6b,   0x5aa1,   0x5aaa,   0x5ac4,   
 # 0x5ad1,   0x5b18,   0x5b43,   0x5b50,   0x5b7e,   
 # 0x5b8e,   0x5c2c,   0x5c42,   0x5c4f,   0x5c74,   
 # 0x5c9d,   0x5caf,   0x5cc6,   0x5ccb,   0x5cdd,   
 # 0x5ce2,   0x5cfd,   0x5d1d,   0x5d2b,   0x5d52,   
 # 0x5d86,   0x5db4,   0x5dce,   0x5df1,   0x5e03,   
 # 0x5e1f,   0x5e24,   0x5e48,   0x5e57,   0x5e6f,   
 # 0x5ec8,   0x5eea,   0x5f0c,   0x5f23,   0x5f49,   
 # 0x5f54,   0x5f9b,   0x6010,   0x6024,   0x6061,   
 # 0x6095,   0x60cb,   0x60d7,   0x60e8,   0x60fa,   
 # 0x613b,   0x6148,   0x6158,   0x6178,   0x6188,   
 # 0x6197,   0x61b4,   0x61c8,   0x61d6,   0x61e2,   
 # 0x6221,   0x6278,   0x6295,   0x629f,   0x62f7,   
 # 0x6301,   0x6318,   0x632e,   0x6368,   0x6374,   
 # 0x639e,   0x63cb,   0x63fa,   0x641e,   0x6473,   
 # 0x6484,   0x6497,   0x64a1,   0x64c4,   0x64c9,   
 # 0x6503,   0x6511,   0x6555,   0x655f,   0x656b,   
 # 0x659f,   0x65d9,   0x65ec,   0x6610,   0x662a,   
 # 0x6644,   0x6665,   0x666d,   0x667c,   0x669b,   
 # 0x66a0,   0x66d2,   0x671e,   0x676f,   0x6774,   
 # 0x678f,   0x67ae,   0x6828,   0x6830,   0x6868,   
 # 0x6897,   0x68a8,   0x68e0,   0x6904,   0x6925,   
 # 0x692f,   0x6941,   0x695a,   0x6988,   0x69ad,   
 # 0x69c0,   0x69cf,   0x69d5,   0x69eb,   0x6a05,   
 # 0x6a0f,   0x6a36,   0x6a58,   0x6a80,   0x6a98,   
 # 0x6aa1,   0x6ab0,   0x6ac0,   0x6b71,   0x6b78,   
 # 0x6b88,   0x6b97,   0x6bf0,   0x6c08,   0x6c10,   
 # 0x6c22,   0x6c60,   0x6c78,   0x6c81,   0x6c83,   
 # 0x6c8b,   0x6c90,   0x6c9e,   0x6cbe,   0x6cd9,   
 # 0x6ce8,   0x6d50,   0x6d5d,   0x6d64,   0x6d8d,   
 # 0x6d9b,   0x6dab,   0x6de0,   0x6e22,   0x6e39,   
 # 0x6e60,   0x6e7a,   0x6eb0,   0x6ec4,   0x6f60,   
 # 0x6f80,   0x6f9d,   0x7068,   0x7080,   0x7093,   
 # 0x7100,   0x7107,   0x710e,   0x711b,   0x7151,   
 # 0x7168,   0x7172,   0x719e,   0x71b8,   0x71cb,   
 # 0x7220,   0x7233,   0x7238,   0x7278,   0x7280,   
 # 0x7290,   0x72e9,   0x72ee,   0x7310,   0x73ba,   
 # 0x73d0,   0x73de,   0x73f9,   0x7417,   0x7448,   
 # 0x7470,   0x7490,   0x74c0,   0x74d8,   0x7500,   
 # 0x7538,   0x7560,   0x7576,   0x7595,   0x75a5,   
 # 0x75ad,   0x75b8,   0x75c8,   0x75e0,   0x7615,   
 # 0x7660,   0x7697,   0x769c,   0x76a5,   0x76c0,   
 # 0x7708,   0x7724,   0x772c,   0x7750,   0x7760,   
 # 0x77a2,   0x77b8,   0x77ed,   0x782e,   0x7838,   
 # 0x7880,   0x7890,   0x78d2,   0x78dc,   0x78e0,   
 # 0x78e4,   0x78f0,   0x7932,   0x793c,   0x7940,   
 # 0x7944,   0x7950,   0x7997,   0x79a1,   0x79a8,   
 # 0x79ac,   0x79c0,   0x7a07,   0x7a11,   0x7a18,   
 # 0x7a1c,   0x7a30,   0x7a62,   0x7a68,   0x7a7d,   
 # 0x7abf,   0x7ac8,   0x7ad8,   0x7af8,   0x7b10,   
 # 0x7b18,   0x7b20,   0x7b28,   0x7b5b,   0x7b63,   
 # 0x7b70,   0x7bb2,   0x7bbc,   0x7bc0,   0x7bc4,   
 # 0x7be8,   0x7bf8,   0x7c37,   0x7c41,   0x7c48,   
 # 0x7c4c,   0x7c60,   0x7ca2,   0x7cac,   0x7cb0,   
 # 0x7cb4,   0x7cc0,   0x7d13,   0x7d1d,   0x7d30,   
 # 0x7d34,   0x7d6d,   0x7d7c,   0x7d98,   0x7db0,   
 # 0x7e08,   0x7e0d,   0x7e13,   0x7e2f,   0x7e60,   
 # 0x7e90,   0x7e97,   0x7eb6,   0x7f48,   0x7f50,   
 # 0x7f7f,   0x7f89,   0x7fb0,   0x7ff0,   0x8005,   
 # 0x8028,   0x8048,   0x80b8,   0x80f3,   0x8109,   
 # 0x811d,   0x8130,   0x8140,   0x815d,   0x8180,   
 # 0x81a0,   0x8244,   0x826f,   0x8291,   0x82a0,   
 # 0x82b0,   0x82f0,   0x830d,   0x8330,   0x8350,   
 # 0x8374,   0x8389,   0x83c0,   0x83d0,   0x83d9,   
 # 0x83dc,   0x83e7,   0x83f5,   0x8404,   0x840c,   
 # 0x8440,   0x8460,   0x8485,   0x8498,   0x84b5,   
 # 0x8508,   0x8531,   0x8540,   0x854c,   0x855c,   
 # 0x8580,   0x8590,   0x85b0,   0x85c0,   0x85d0,   
 # 0x85e0,   0x85f2,   0x8620,   0x8627,   0x8631,   
 # 0x863c,   0x86d8,   0x86ef,   0x871c,   0x8736,   
 # 0x873c,   0x87bf,   0x87dd,   0x87ec,   0x8837,   
 # 0x883f,   0x888f,   0x88a4,   0x88d8,   0x8930,   
 # 0x8950,   0x8960,   0x8972,   0x89a0,   0x89b0,   
 # 0x89e0,   0x8a00,   0x8a10,   0x8a20,   0x8a2f,   
 # 0x8a4c,   0x8a92,   0x8ac9,   0x8ae0,   0x8b10,   
 # 0x8b2f,   0x8b34,   0x8b45,   0x8b66,   0x8b9e,   
 # 0x8ba8,   0x8bc3,   0x8c40,   0x8c53,   0x8cc8,   
 # 0x8ce0,   0x8d00,   0x8d28,   0x8d31,   0x8d40,   
 # 0x8d50,   0x8d70,   0x8d78,   0x8da8,   0x8dc0,   
 # 0x8dd2,   0x8def,   0x8e20,   0x8e30,   0x8e50,   
 # 0x8e80,   0x8e9c,   0x8efe,   0x8f0f,   0x8f22,   
 # 0x8f4a,   0x8f50,   0x8f63,   0x8f84,   0x8f97,   
 # 0x8fb3,   0x8fd8,   0x8ff8,   0x9030,   0x9040,   
 # 0x90ae,   0x90b6,   0x90c5,   0x90e2,   0x9103,   
 # 0x911b,   0x9148,   0x915d,   0x917d,   0x918c,   
 # 0x91d9,   0x9200,   0x9233,   0x9240,   0x9250,   
 # 0x929b,   0x92c8,   0x92dd,   0x92f4,   0x930d,   
 # 0x931d,   0x9349,   0x9398,   0x93c8,   0x93f0,   
 # 0x9409,   0x9436,   0x9480,   0x9490,   0x94de,   
 # 0x9510,   0x9530,   0x9538,   0x95a8,   0x9611,   
 # 0x9643,   0x9660,   0x9669,   0x9680,   0x96a0,   
 # 0x96d0,   0x96f6,   0x9717,   0x9729,   0x9752,   
 # 0x9770,   0x9790,   0x97a8,   0x97e0,   0x97f8,   
 # 0x9808,   0x981c,   0x9835,   0x9840,   0x9850,   
 # 0x9910,   0x993c,   0x9970,   0x99b2,   0x99d6,   
 # 0x99dd,   0x9a00,   0x9a10,   0x9a50,   0x9a6b,   
 # 0x9a86,   0x9a90,   0x9a95,   0x9b1e,   0x9b45,   
 # 0x9ba1,   0x9bac,   0x9baf,   0x9bbc,   0x9c00,   
 # 0x9c28,   0x9c2a,   0x9c88,   0x9c91,   0x9c9c,   
 # 0x9ca8,   0x9cc0,   0x9ce0,   0x9cf2,   0x9d85,   
 # 0x9e10,   0x9e25,   0x9e33,   0x9e50,   0x9e70,   
 # 0x9e89,   0x9e98,   0x9ed8,   0x9ef0,   0x9f25,   
 # 0x9f2e,   0x9f50,   0x9f5d,   0x9f78,   0x9f86,   
 # 0x9f8b,   0x9f99,   0x9fd1,   0x9fe0,   0xa010,   
 # 0xa01c,   0xa038,   0xa086,   0xa090,   0xa09b,   
 # 0xa0bb,   0xa0e0,   0xa0f0,   0xa108,   0xa138,   
 # 0xa148,   0xa170,   0xa180,   0xa240,   0xa263,   
 # 0xa29d,   0xa2cd,   0xa2f0,   0xa325,   0xa350,   
 # 0xa382,   0xa3f0,   0xa400,   0xa412,   0xa471,   
 # 0xa487,   0xa4a0,   0xa4b0,   0xa4c0,   0xa4d0,   
 # 0xa4f0,   0xa500,   0xa512,   0xa52a,   0xa567,   
 # 0xa571,   0xa578,   0xa57c,   0xa598,   0xa5a8,   
 # 0xa5d0,   0xa5e0,   0xa622,   0xa62c,   0xa630,   
 # 0xa634,   0xa650,   0xa660,   0xa6a2,   0xa6ac,   
 # 0xa6b0,   0xa6b4,   0xa6d0,   0xa6e0,   0xa727,   
 # 0xa731,   0xa738,   0xa73c,   0xa758,   0xa768,   
 # 0xa790,   0xa7a0,   0xa7d0,   0xa7e0,   0xa822,   
 # 0xa82c,   0xa830,   0xa834,   0xa868,   0xa878,   
 # 0xa8b2,   0xa8bc,   0xa8c0,   0xa8c4,   0xa8e8,   
 # 0xa8f8,   0xa921,   0xa945,   0xa97e,   0xa998,   
 # 0xa9bc,   0xaa65,   0xaace,   0xaafd,   0xab06,   
 # 0xab22,   0xab3c,   0xab60,   0xab7b,   0xab8e,   
 # 0xaba3,   0xabc4,   0xabd1,   0xabe0,   0xabf3,   
 # 0xac20,   0xac40,   0xac83,   0xad10,   0xad21,   
 # 0xad31,   0xad89,   0xada8,   0xade4,   0xae01,   
 # 0xae0e,   0xae1b,   0xae24,   0xae3c,   0xae70,   
 # 0xaeca,   0xaeff,   0xaf20,   0xaf29,   0xaf46,   
 # 0xaf80,   0xafb0,   0xaff9,   0xb01c,   0xb038,   
 # 0xb08a,   0xb0a0,   0xb0b9,   0xb0d3,   0xb0ee,   
 # 0xb100,   0xb152,   0xb160,   0xb1ab,   0xb1c0,   
 # 0xb1d1,   0xb218,   0xb250,   0xb25d,   0xb279,   
 # 0xb284,   0xb2ad,   0xb2e0,   0xb308,   0xb320,   
 # 0xb330,   0xb368,   0xb378,   0xb38d,   0xb3cb,   
 # 0xb3e8,   0xb3fa,   0xb415,   0xb420,   0xb429,   
 # 0xb44c,   0xb458,   0xb469,   0xb478,   0xb4d0,   
 # 0xb4e0,   0xb4f8,   0xb510,   0xb538,   0xb547,   
 # 0xb568,   0xb576,   0xb588,   0xb5b0,   0xb5c1,   
 # 0xb5e2,   0xb61c,   0xb638,   0xb660,   0xb670,   
 # 0xb684,   0xb6d0,   0xb6e0,   0xb6f0,   0xb6fe,   
 # 0xb730,   0xb740,   0xb75b,   0xb766,   0xb788,   
 # 0xb7ba,   0xb7c8,   0xb830,   0xb860,   0xb880,   
 # 0xb890,   0xb8aa,   0xb8af,   0xb94e,   0xb9f1,   
 # 0xba20,   0xba63,   0xba75,   0xba87,   0xbab0,   
 # 0xbab8,   0xbacc,   0xbadb,   0xbb39,   0xbb48,   
 # 0xbba0,   0xbbad,   0xbbc8,   0xbbd8,   0xbbf0,   
 # 0xbc08,   0xbc40,   0xbc74,   0xbc84,   0xbc96,   
 # 0xbcad,   0xbcba,   0xbd0e,   0xbd7b,   0xbd83,   
 # 0xbda0,   0xbdc0,   0xbdd0,   0xbdd9,   0xbdf8,   
 # 0xbe12,   0xbe70,   0xbe80,   0xbeb0,   0xbef8,   
 # 0xbf28,   0xbf52,   0xbf7a,   0xbf89,   0xbf98,   
 # 0xbfa7,   0xbfac,   0xbff8,   0xbffd,   0xc000,   
 # 0xc040,   0xc045,   0xc050,   0xc090,   0xc095,   
 # 0xc0a0,   0xc0d8,   0xc0dd,   0xc0e0,   0xc120,   
 # 0xc125,   0xc130,   0xc168,   0xc16d,   0xc170,   
 # 0xc1b7,   0xc1c1,   0xc1c8,   0xc1cc,   0xc1f0,   
 # 0xc200,   0xc242,   0xc24c,   0xc250,   0xc254,   
 # 0xc278,   0xc288,   0xc2c2,   0xc2cc,   0xc2d0,   
 # 0xc2d4,   0xc308,   0xc318,   0xc357,   0xc361,   
 # 0xc368,   0xc36c,   0xc390,   0xc3a0,   0xc3e7,   
 # 0xc3f1,   0xc3f8,   0xc3fc,   0xc430,   0xc440,   
 # 0xc482,   0xc48c,   0xc490,   0xc494,   0xc4b8,   
 # 0xc4c8,   0xc4f8,   0xc4fd,   0xc500,   0xc540,   
 # 0xc545,   0xc550,   0xc590,   0xc595,   0xc5a0,   
 # 0xc5e0,   0xc5e5,   0xc5f0,   0xc628,   0xc62d,   
 # 0xc630,   0xc678,   0xc67d,   0xc680,   0xc6c7,   
 # 0xc6d1,   0xc6d8,   0xc6dc,   0xc700,   0xc710,   
 # 0xc757,   0xc761,   0xc768,   0xc76c,   0xc790,   
 # 0xc7a0,   0xc7e7,   0xc7f1,   0xc7f8,   0xc7fc,   
 # 0xc830,   0xc840,   0xc8b0,   0xc920,   0xc96c,   
 # 0xc976,   0xc980,   0xc984,   0xc9e0,   0xca2c,   
 # 0xca36,   0xca40,   0xca44,   0xcaa0,   0xcaf6,   
 # 0xcb10,   0xcb1c,   0xcb76,   0xcb90,   0xcb9c,   
 # 0xcbf3,   0xcbfd,   0xcc10,   0xcc14,   0xcc4d,   
 # 0xcc5c,   0xcc78,   0xcc90,   0xcca0,   0xccfa,   
 # 0xcd01,   0xd19e,   0xd230,   0xd23d,   0xd249,   
 # 0xd2b3,   0xd2f4,   0xd321,   0xd36c,   0xd3a7,   
 # 0xd3aa,   0xd420,   0xd430,   0xd446,   0xd46b,   
 # 0xd480,   0xd498,   0xd4b0,   0xd4c0,   0xd530,   
 # 0xd563,   0xd578,   0xd5a8,   0xd5b0,   0xd5c5,   
 # 0xd5e0,   0xd5e6,   0xd620,   0xd660,   0xd6e0,   
 # 0xd704,   0xd719,   0xd760,   0xd790,   0xd7ea,   
 # 0xd800,   0xd858,   0xd867,   0xd879,   0xd8b0,   
 # 0xd8bd,   0xd8d3,   0xd8ec,   0xd8f1,   0xd8f8,   
 # 0xd989,   0xd995,   0xd9d0,   0xd9e0,   0xd9f6,   
 # 0xda00,   0xda14,   0xda3c,   0xda4a,   0xda8f,   
 # 0xdac3,   0xdacb,   0xdadc,   0xdae3,   0xdaf0,   
 # 0xdaf3,   0xdb07,   0xdb0b,   0xdb2a,   0xdb50,   
 # 0xdb7c,   0xdbc0,   0xdbe6,   0xdc34,   0xdc48,   
 # 0xdc70,   0xdc79,   0xdc88,   0xdca0,   0xdcac,   
 # 0xdd23,   0xdd68,   0xdd75,   0xdd8d,   0xdda7,   
 # 0xddb9,   0xddc8,   0xddf0,   0xde10,   0xde23,   
 # 0xde60,   0xde63,   0xde90,   0xdec8,   0xdedb,   
 # 0xdefa,   0xdf14,   0xdf1c,   0xdf28,   0xdf58,   
 # 0xdf64,   0xdf71,   0xdf90,   0xdfa2,   0xdfb9,   
 # 0xe011,   0xe029,   0xe068,   0xe073,   0xe0b0,   
 # 0xe0be,   0xe0c3,   0xe116,   0xe11b,   0xe128,   
 # 0xe150,   0xe15d,   0xe170,   0xe17a,   0xe186,   
 # 0xe19c,   0xe1ad,   0xe1be,   0xe1c0,   0xe1f0,   
 # 0xe213,   0xe220,   0xe22c,   0xe240,   0xe24f,   
 # 0xe251,   0xe260,   0xe280,   0xe300,   0xe310,   
 # 0xe311,   0xe360,   0xe375,   0xe380,   0xe3ed,   
 # 0xe435,   0xe476,   0xe4c8,   0xe4d8,   0xe4e0,   
 # 0xe527,   0xe5a8,   0xe5c4,   0xe5ff,   0xe60d,   
 # 0xe620,   0xe650,   0xe65c,   0xe66a,   0xe691,   
 # 0xe698,   0xe6a4,   0xe6b0,   0xe6c0,   0xe6d0,   
 # 0xe6e0,   0xe734,   0xe740,   0xe746,   0xe770,   
 # 0xe78c,   0xe796,   0xe7a8,   0xe7ba,   0xe7f3,   
 # 0xe7ff,   0xe803,   0xe811,   0xe81c,   0xe846,   
 # 0xe848,   0xe857,   0xe869,   0xe879,   0xe882,   
 # 0xe88f,   0xe8c6,   0xe8dd,   0xe8ee,   0xe8fb,   
 # 0xe920,   0xe940,   0xe94c,   0xe960,   0xe964,   
 # 0xe978,   0xe987,   0xe9a0,   0xea00,   0xea0d,   
 # 0xea28,   0xea40,   0xea5d,   0xea60,   0xea70,   
 # 0xea81,   0xea90,   0xeab0,   0xeab9,   0xeac1,   
 # 0xeac6,   0xeace,   0xeb28,   0xeb3e,   0xeb71,   
 # 0xeb89,   0xeb90,   0xec3f,   0xec80,   0xec98,   
 # 0xeca1,   0xeca3,   0xecb0,   0xece8,   0xecf8,   
 # 0xed6e,   0xed78,   0xed7d,   0xed9a,   0xedd0,   
 # 0xedf8,   0xee30,   0xee39,   0xee50,   0xee55,   
 # 0xee5f,   0xee66,   0xee7f,   0xee83,   0xeea1,   
 # 0xeed8,   0xeee7,   0xef00,   0xef11,   0xef4c,   
 # 0xef50,   0xef86,   0xef95,   0xefb2,   0xefd0,   
 # 0xefda,   0xf048,   0xf051,   0xf068,   0xf075,   
 # 0xf085,   0xf0b0,   0xf0b9,   0xf0d0,   0xf0e6,   
 # 0xf0ef,   0xf130,   0xf139,   0xf150,   0xf15d,   
 # 0xf16d,   0xf1ba,   0xf1c3,   0xf210,   0xf239,   
 # 0xf280,   0xf283,   0xf29d,   0xf2a8,   0xf2ab,   
 # 0xf2e0,   0xf2e9,   0xf300,   0xf307,   0xf330,   
 # 0xf335,   0xf346,   0xf350,   0xf358,   0xf364,   
 # 0xf370,   0xf38f,   0xf395,   0xf3a0,   0xf3a8,   
 # 0xf3bd,   0xf3c2,   0xf3f7,   0xf3ff,   0xf409,   
 # 0xf420,   0xf428,   0xf438,   0xf443,   0xf460,   
 # 0xf47d,   0xf5a4,   0xf5c0,   0xf5f0,   0xf5fa,   
 # 0xf618,   0xf61b,   0xf629,   0xf645,   0xf650,   
 # 0xf66b,   0xf6b0,   0xf6b9,   0xf6d0,   0xf6d3,   
 # 0xf6ef,   0xf6f3,   0xf700,   0xf710,   0xf721,   
 # 0xf72c,   0xf740,   0xf751,   0xf87c,   0xf8a0,   
 # 0xf8b0,   0xf8b8,   0xf8ef,   0xf94e,   0xf970,   
 # 0xf993,   0xf9aa,   0xf9ce,   0xf9f0,   0xfa1a,   
 # 0xfa41,   0xfa69,   0xfa7b,   0xfa9a,   0xfaa7,   
 # 0xfab8,   0xfad8,   0xfaf0,   0xfb10,   0xfb30,   
 # 0xfb40,   0xfb4e,   0xfb80,   0xfb94,   0xfbd3,   
 # 0xfbf0,   0xfbf4,   0xfc43,   0xfc68,   0xfc94,   
 # 0xfc9d,   0xfcc9,   0xfcdf,   0xfd00,   0xfd12,   
 # 0xfd30,   0xfd41,   0xfd50,   0xfd7a,   0xfda0,   
 # 0xfdc0,   0xfde0,   0xfdf7,   0xfe5e,   0xfe68,   
 # 0xfe90,   0xfe98,   0xfec0,   0xff14,   0xff28,   
 # 0xff38,   0xff40,   0xff58,   0xff5a,   0xff60,   
 # 0xff90,   0x10095,   0x100a7,   0x100d2,   0x100df,   
 # 0x100f0,   0x100f4,   0x10110,   0x10114,   0x10147,   
 # 0x10191,   0x101b5,   0x101f8,   0x10244,   0x10253,   
 # 0x10266,   0x10276,   0x10286,   0x102a0,   0x102b0,   
 # 0x102eb,   0x10350,   0x1035e,   0x1038c,   0x103b2,   
 # 0x103c0,   0x103d7,   0x10412,   0x10429,   0x10434,   
 # 0x10444,   0x10457,   0x10490,   0x104b0,   0x104d0,   
 # 0x104e0,   0x104f0,   0x10508,   0x10510,   0x10525,   
 # 0x10560,   0x10578,   0x10598,   0x105ab,   0x105b8,   
 # 0x105d0,   0x105d2,   0x105e0,   0x10600,   0x10611,   
 # 0x10621,   0x10634,   0x1063c,   0x1064f,   0x1067e,   
 # 0x10690,   0x106e8,   0x10700,   0x10730,   0x10740,   
 # 0x1074d,   0x10764,   0x10778,   0x1078c,   0x107a0,   
 # 0x107c8,   0x107d8,   0x107e9,   0x1081e,   0x10820,   
 # 0x10832,   0x10840,   0x10858,   0x10865,   0x10877,   
 # 0x1087e,   0x108bc,   0x108d3,   0x108e8,   0x10938,   
 # 0x10970,   0x10986,   0x10990,   0x109a5,   0x109aa,   
 # 0x109bf,   0x109c7,   0x10a10,   0x10a22,   0x10a5c,   
 # 0x10a80,   0x10ab0,   0x10ac0,   0x10ad3,   0x10ad7,   
 # 0x10ae8,   0x10af4,   0x10b30,   0x10b90,   0x10ba6,   
 # 0x10bbb,   0x10be0,   0x10be9,   0x10bed,   0x10bf9,   
 # 0x10c00,   0x10c2b,   0x10c80,   0x10c89,   0x10c9f,   
 # 0x10cb0,   0x10cc8,   0x10cd1,   0x10cf8,   0x10d50,   
 # 0x10d90,   0x10d99,   0x10d9d,   0x10da9,   0x10db0,   
 # 0x10ddb,   0x10e30,   0x10e39,   0x10e4f,   0x10e60,   
 # 0x10e78,   0x10e81,   0x10ea8,   0x10f00,   0x10f40,   
 # 0x10f70,   0x10f80,   0x10fe0,   0x1105c,   0x11065,   
 # 0x1107b,   0x1108f,   0x110a3,   0x110b2,   0x110e0,   
 # 0x110e5,   0x110f8,   0x11130,   0x11135,   0x11148,   
 # 0x1114b,   0x1114e,   0x11170,   0x11173,   0x11199,   
 # 0x111a8,   0x111e5,   0x11200,   0x11278,   0x112a0,   
 # 0x112ed,   0x11330,   0x1133c,   0x1134b,   0x11370,   
 # 0x11393,   0x1139d,   0x113a8,   0x113c0,   0x113df,   
 # 0x113e9,   0x11430,   0x11475,   0x11490,   0x1149d,   
 # 0x114b0,   0x11508,   0x1152c,   0x11540,   0x11553,   
 # 0x11566,   0x115d8,   0x115e3,   0x115eb,   0x115f8,   
 # 0x11620,   0x11630,   0x11650,   0x11669,   0x11676,   
 # 0x11680,   0x11690,   0x116a0,   0x116b8,   0x116c3,   
 # 0x11700,   0x11726,   0x11738,   0x11768,   0x117a7,   
 # 0x117c0,   0x117d0,   0x117f8,   0x11820,   0x11880,   
 # 0x11890,   0x118b3,   0x118d0,   0x11908,   0x11916,   
 # 0x11970,   0x11989,   0x119c0,   0x119d9,   0x11a5c,   
 # 0x11a7b,   0x11a9d,   0x11aa4,   0x11ab7,   0x11ad0,   
 # 0x11ad3,   0x11b00,   0x11b18,   0x11b28,   0x11b50,   
 # 0x11b60,   0x11b70,   0x11b88,   0x11b8e,   0x11b9b,   
 # 0x11baf,   0x11bb8,   0x11bbd,   0x11bd0,   0x11bd7,   
 # 0x11c0d,   0x11c71,   0x11c9c,   0x11c9f,   0x11cb0,   
 # 0x11cc0,   0x11cd0,   0x11cee,   0x11cfb,   0x11d08,   
 # 0x11d0e,   0x11d30,   0x11d48,   0x11d4b,   0x11d6c,   
 # 0x11e3b,   0x11e74,   0x11e77,   0x11f2a,   0x11f72,   
 # 0x11fe0,   0x11fee,   0x12003,   0x12013,   0x120b0,   
 # 0x120b7,   0x120b9,   0x120e0,   0x120e9,   0x12110,   
 # 0x1211c,   0x12130,   0x12165,   0x12183,   0x12226,   
 # 0x12234,   0x12266,   0x12280,   0x122e9,   0x12314,   
 # 0x123be,   0x123c7,   0x124d0,   0x1252f,   0x12552,   
 # 0x125cf,   0x126da,   0x126fc,   0x126ff,   0x127c6,   
 # 0x1287c,   0x128b3,   0x128e0,   0x12983,   0x129da,   
 # 0x12ada,   0x12afe,   0x12b06,   0x12b37,   0x12ba2,   
 # 0x12bcd,   0x12c11,   0x12c30,   0x12c45,   0x12ccc,   
 # 0x12cd4,   0x12cf8,   0x12d0c,   0x12d20,   0x12d34,   
 # 0x12d48,   0x12d6d,   0x12e01,   0x12e0f,   0x12e21,   
 # 0x12e69,   0x12e7b,   0x12e9d,   0x12eae,   0x12ed3,   
 # 0x12f08,   0x12f0f,   0x12f39,   0x12f44,   0x12fb4,   
 # 0x12fc2,   0x12fdc,   0x12fe6,   0x1300a,   0x13053,   
 # 0x13095,   0x130b0,   0x130cd,   0x130d5,   0x130fd,   
 # 0x13124,   0x13149,   0x13153,   0x1315d,   0x13167,   
 # 0x13181,   0x1318d,   0x1319d,   0x131b2,   0x131e3,   
 # 0x131f8,   0x13219,   0x1323e,   0x13256,   0x1325b,   
 # 0x13267,   0x1326f,   0x132c5,   0x1333b,   0x13350,   
 # 0x13363,   0x133f8,   0x13415,   0x13438,   0x1355d,   
 # 0x1359c,   0x135a7,   0x135f0,   0x135f8,   0x13612,   
 # 0x13688,   0x13710,   0x13720,   0x1373e,   0x13747,   
 # 0x1375b,   0x1376f,   0x1377f,   0x1378f,   0x13796,   
 # 0x137a0,   0x137a8,   0x137b1,   0x137d5,   0x137d8,   
 # 0x137f8,   0x13801,   0x13810,   0x13813,   0x13871,   
 # 0x1388c,   0x138af,   0x13900,   0x13937,   0x13959,   
 # 0x13a9c,   0x13aab,   0x13ab4,   0x13ac7,   0x13ad0,   
 # 0x13ade,   0x13b18,   0x13b80,   0x13bb8,   0x13bcf,   
 # 0x13be0,   0x13beb,   0x13c05,   0x13c20,   0x13c40,   
 # 0x13c5e,   0x13c8b,   0x13c9b,   0x13cab,   0x13cf0,   
 # 0x13d48,   0x13d60,   0x13d72,   0x13d82,   0x13db8,   
 # 0x13e40,   0x13e71,   0x13e89,   0x13e98,   0x13eb1,   
 # 0x13ef6,   0x13f10,   0x13f32,   0x13f58,   0x13f78,   
 # 0x13fc4,   0x14010,   0x14066,   0x140a3,   0x140e8,   
 # 0x140f2,   0x14110,   0x14135,   0x14145,   0x14155,   
 # 0x1415c,   0x14166,   0x1417d,   0x14197,   0x141b0,   
 # 0x141b9,   0x141c1,   0x141e0,   0x141e4,   0x14203,   
 # 0x14213,   0x14220,   0x1423d,   0x1424a,   0x14280,   
 # 0x14290,   0x1429b,   0x142a3,   0x142d8,   0x142f6,   
 # 0x14300,   0x14310,   0x14331,   0x1433e,   0x14349,   
 # 0x14352,   0x1435d,   0x14365,   0x14383,   0x14393,   
 # 0x1439d,   0x143ac,   0x143ca,   0x143e0,   0x143e9,   
 # 0x143fb,   0x1443d,   0x14476,   0x14486,   0x14496,   
 # 0x144a6,   0x144b7,   0x14500,   0x1450d,   0x14513,   
 # 0x14516,   0x14523,   0x14563,   0x14565,   0x1457d,   
 # 0x14586,   0x14593,   0x145a6,   0x145cc,   0x145f2,   
 # 0x14600,   0x1460d,   0x1464f,   0x1465c,   0x14661,   
 # 0x14677,   0x1467e,   0x146c0,   0x14739,   0x14761,   
 # 0x147d8,   0x14818,   0x14838,   0x14859,   0x14a00,   
 # 0x14ad7,   0x14b30,   0x14b41,   0x14b69,   0x14b84,   
 # 0x14c10,   0x14c9c,   0x14cb0,   0x14d38,   0x14d70,   
 # 0x14e08,   0x14ef2,   0x14f00,   0x14f93,   0x15060,   
 # 0x150b6,   0x150eb,   0x1510d,   0x15140,   0x15160,   
 # 0x15182,   0x15190,   0x151dc,   0x151f0,   0x15230,   
 # 0x15250,   0x15290,   0x15300,   0x1536d,   0x15400,   
 # 0x15519,   0x155bb,   0x15644,   0x156b0,   0x156bb,   
 # 0x156e8,   0x15701,   0x1570b,   0x15730,   0x1574a,   
 # 0x157c0,   0x157d6,   0x157e0,   0x15800,   0x1581e,   
 # 0x158c0,   0x158d7,   0x158d9,   0x158ff,   0x15920,   
 # 0x15932,   0x15944,   0x15950,   0x15959,   0x1597f,   
 # 0x159c1,   0x159d0,   0x159d5,   0x159eb,   0x159f8,   
 # 0x15a49,   0x15a58,   0x15a70,   0x15a72,   0x15acd,   
 # 0x15ae0,   0x15bc4,   0x15bdf,   0x15c1a,   0x15c40,   
 # 0x15c60,   0x15c6b,   0x15cb7,   0x15cc0,   0x15d10,   
 # 0x15d47,   0x15d70,   0x15d79,   0x15d90,   0x15d9c,   
 # 0x15e20,   0x15e29,   0x15e5c,   0x15e6e,   0x15e71,   
 # 0x15ea0,   0x15eab,   0x15eb8,   0x15ee0,   0x15efc,   
 # 0x15f06,   0x15f80,   0x15f9f,   0x15fb0,   0x15fd0,   
 # 0x15fe0,   0x15fef,   0x15ff4,   0x16006,   0x16010,   
 # 0x1601f,   0x16030,   0x16040,   0x1604f,   0x16060,   
 # 0x16070,   0x1607f,   0x16093,   0x1609f,   0x160b0,   
 # 0x160d3,   0x160f6,   0x16105,   0x16110,   0x1611f,   
 # 0x16133,   0x16136,   0x16147,   0x161d9,   0x161e8,   
 # 0x16207,   0x1620c,   0x1621b,   0x16229,   0x16238,   
 # 0x16247,   0x16256,   0x162b2,   0x162b9,   0x162c8,   
 # 0x162f8,   0x1630f,   0x16329,   0x16332,   0x163b0,   
 # 0x163b9,   0x163ee,   0x16400,   0x16403,   0x16430,   
 # 0x1643b,   0x16448,   0x16470,   0x1648c,   0x16496,   
 # 0x16510,   0x1652f,   0x16540,   0x16560,   0x16570,   
 # 0x1657f,   0x16584,   0x16596,   0x165a0,   0x165af,   
 # 0x165c0,   0x165d0,   0x165df,   0x165f0,   0x16600,   
 # 0x1660f,   0x16623,   0x1662f,   0x16640,   0x16663,   
 # 0x16686,   0x16695,   0x166a0,   0x166af,   0x166c3,   
 # 0x166c6,   0x166d7,   0x16769,   0x16778,   0x16797,   
 # 0x1679c,   0x167ab,   0x167b9,   0x167c8,   0x167d7,   
 # 0x167e6,   0x16800,   0x1680c,   0x16810,   0x16858,   
 # 0x16919,   0x16940,   0x1695a,   0x169c0,   0x169e0,   
 # 0x169f0,   0x16a03,   0x16a60,   0x16a6d,   0x16b75,   
 # 0x16b90,   0x16ba5,   0x16bc0,   0x16bca,   0x16be0,   
 # 0x16be6,   0x16c10,   0x16c13,   0x16c20,   0x16c35,   
 # 0x16c48,   0x16c70,   0x16c82,   0x16cb0,   0x16cc0,   
 # 0x16cd0,   0x16ce8,   0x16d14,   0x16d23,   0x16d40,   
 # 0x16db3,   0x16dc0,   0x16e24,   0x16e30,   0x16e3f,   
 # 0x16e53,   0x16e88,   0x16e91,   0x16ea0,   0x16eb0,   
 # 0x16ec8,   0x16f08,   0x16f20,   0x16f3e,   0x16f71,   
 # 0x16f8d,   0x16fae,   0x16fb3,   0x16fc0,   0x16fe0,   
 # 0x16ff8,   0x17020,   0x1707f,   0x17090,   0x1709e,   
 # 0x170b0,   0x170c0,   0x17130,   0x17148,   0x1715e,   
 # 0x17163,   0x17188,   0x171bb,   0x17200,   0x17210,   
 # 0x1721c,   0x17250,   0x17260,   0x17262,   0x172ae,   
 # 0x172b8,   0x172ce,   0x172f7,   0x17310,   0x17330,   
 # 0x17370,   0x173a0,   0x173c4,   0x173d0,   0x173ec,   
 # 0x173ef,   0x17400,   0x1742f,   0x17440,   0x17476,   
 # 0x17488,   0x174c8,   0x174ce,   0x17520,   0x17536,   
 # 
#----------------
# dataAddr 
#----------------
# 0x18020,   0x18144,   0x18158,   0x185c0,   0x185f8,   
 # 0x18624,   0x18660,   0x18688,   0x18693,   0x1869a,   
 # 0x186a0,   0x186d0,   0x186f0,   0x18710,   0x18730,   
 # 0x18740,   0x18750,   0x18760,   0x197a4,   0x197ad,   
 # 0x197b4,   0x197bd,   0x197d7,   0x197d8,   0x197dc,   
 # 0x197e2,   0x197e4,   0x197f8,   0x197fe,   0x197ff,   
 # 0x19807,   0x1980a,   0x1980f,   0x19814,   0x19819,   
 # 0x19831,   0x19842,   0x1985f,   0x19869,   0x19882,   
 # 0x19897,   0x198ac,   0x198b2,   0x198b3,   0x198b7,   
 # 0x198c7,   0x198d1,   0x198dd,   0x198e7,   0x198f6,   
 # 0x19900,   0x1990a,   0x19914,   0x1992b,   0x1992f,   
 # 0x19936,   0x19939,   0x1993d,   0x19946,   0x19949,   
 # 0x19954,   0x1995b,   0x19969,   0x19971,   0x19979,   
 # 0x1998c,   0x19993,   0x19994,   0x19997,   0x199a8,   
 # 0x199af,   0x199b6,   0x199bf,   0x199c7,   0x199d3,   
 # 0x199e5,   0x199f5,   0x19a05,   0x19a19,   0x19a1c,   
 # 0x19a27,   0x19a2d,   0x19a38,   0x19a55,   0x19a60,   
 # 0x19a73,   0x19a76,   0x19a86,   0x19a9e,   0x19aa1,   
 # 0x19aa7,   0x19aad,   0x19ab7,   0x19ac1,   0x19ac6,   
 # 0x19acb,   0x19ad1,   0x19ae9,   0x19af0,   0x19af3,   
 # 0x19af5,   0x19afb,   0x19b03,   0x19b05,   0x19cf3,   
 # 0x19d80,   0x19da8,   0x19dd8,   0x19e00,   0x19e28,   
 # 0x19eb8,   0x19f08,   0x1a018,   0x1a0b8,   0x1a228,   
 # 0x1a398,   0x1a540,   0x1a580,   0x1a678,   0x1a6c8,   
 # 0x1a760,   0x1a908,   0x1a9a0,   0x1ab08,   0x1aba0,   
 # 0x1ad08,   0x1ae38,   0x1b088,   0x1b150,   0x1b358,   
 # 0x1b3a8,   0x1b438,   0x1b5b0,   0x1b720,   0x1b750,   
 # 0x1b788,   0x1b828,   0x1b9a0,   0x1bac0,   0x1bb58,   
 # 0x1bb80,   0x1bbc8,   0x1bbe8,   0x1bc20,   0x1bc68,   
 # 0x1bca8,   0x1bce8,   0x1bd18,   0x1bd50,   0x1bd88,   
 # 0x1bdb0,   0x1bde0,   0x1be45,   0x1be60,   0x1be7d,   
 # 0x1be92,   0x1be9a,   0x1be9c,   0x1be9f,   0x1beab,   
 # 0x1bec3,   0x1bedc,   0x1bee2,   0x1befa,   0x1bf12,   
 # 0x1bf30,   0x1bf60,   0x1bf74,   0x1bf78,   0x1bf7c,   
 # 0x1bf80,   0x1bf84,   0x1bf88,   0x1bf8c,   0x1bf90,   
 # 0x1bf98,   0x1bf9e,   0x1bfa4,   0x1bfae,   0x1bfbe,   
 # 0x1bfd0,   0x1bfd8,   0x1bfe4,   0x1bff0,   0x1c000,   
 # 0x1c009,   0x1c012,   0x1c01c,   0x1c208,   0x1c240,   
 # 0x1c248,   0x1c24a,   0x1c24e,   0x1c252,   0x1c255,   
 # 0x1c259,   0x1c2a0,   0x1c2cc,   0x1c4c8,   0x1c6c4,   
 # 0x1c8c0,   0x1c940,   0x1c968,   0x1c970,   0x1c974,   
 # 0x1c97b,   0x1c97f,   0x1c98f,   0x1c9a6,   0x1c9c2,   
 # 0x1c9d7,   0x1c9ed,   0x1ca08,   0x1cad8,   0x1caf8,   
 # 0x1cb20,   0x1cb48,   0x1cb78,   0x1cba8,   0x1cbe0,   
 # 0x1cc20,   0x1cc64,   0x1cca0,   0x1cccf,   0x1cce0,   
 # 0x1ccf0,   0x1cd18,   0x1cdd8,   0x1ceb0,   0x1cf70,   
 # 0x1cf80,   0x1cfa5,   0x1cfc2,   0x1cfdb,   0x1cfdd,   
 # 0x1cfe0,   0x1d0a0,   0x1d178,   0x1d238,   0x1d243,   
 # 0x2000e,   0x22010,   0x22018,   0x22020,   0x221e0,   
 # 0x22240,   0x22280,   0x222c0,   0x22300,   0x22880,   
 # 0x22960,   0x229a0,   0x229d0,   0x22a00,   0x22c60,   
 # 0x22c68,   0x22c70,   0x22c78,   0x22c80,   0x22c88,   
 # 0x22c90,   0x22c98,   0x22ca0,   0x22ca8,   0x22cb0,   
 # 0x22cb8,   0x22cc0,   0x22cc8,   0x22cd0,   0x22cd8,   
 # 0x22ce0,   0x22ce8,   0x22cf0,   0x22cf8,   0x22d00,   
 # 0x22d08,   0x22d10,   0x22d18,   0x22d20,   0x22d28,   
 # 0x22d30,   0x22d38,   0x22d40,   0x22d48,   0x22d50,   
 # 0x22d58,   0x22d60,   0x22d68,   0x22d70,   0x22d78,   
 # 0x22d80,   0x22d88,   0x22d90,   0x22d98,   0x22da0,   
 # 0x22da8,   0x22db0,   0x22db8,   0x22dc0,   0x22dc8,   
 # 0x22dd0,   0x22dd8,   0x22de0,   0x22de8,   0x22df0,   
 # 0x22df8,   0x22e00,   0x22e08,   0x22e10,   0x22e18,   
 # 0x22e20,   0x22e28,   0x22e30,   0x22e38,   0x22e40,   
 # 0x22e48,   0x22e50,   0x22e58,   0x22e60,   0x22e68,   
 # 0x22e70,   0x22e78,   0x22e80,   0x22e88,   0x22e90,   
 # 0x22e98,   0x22ea0,   0x22ea8,   0x22eb0,   0x22eb8,   
 # 0x22ec0,   0x22ec8,   0x22ed0,   0x22ed8,   0x22ee0,   
 # 0x22ee8,   0x22ef0,   0x22ef8,   0x22f00,   0x22f08,   
 # 0x22f10,   0x22f18,   0x22f20,   0x22f28,   0x22f30,   
 # 0x22f38,   0x22f40,   0x22f48,   0x22f50,   0x22f58,   
 # 0x22f60,   0x22f68,   0x22f70,   0x22f78,   0x22f80,   
 # 0x22f88,   0x22f90,   0x22f98,   0x22fa0,   0x22fa8,   
 # 0x22fb0,   0x22fb8,   0x22fc0,   0x22fc8,   0x22fd0,   
 # 0x22fd8,   0x22fe0,   0x22fe8,   0x22ff0,   0x23008,   
 # 0x23010,   0x23014,   0x23018,   0x23020,   0x23021,   
 # 0x23022,   0x23040,   0x23048,   0x23060,   0x23068,   
 # 0x23070,   0x23078,   0x23088,   0x23098,   0x230a8,   
 # 0x230d0,   0x230d8,   0x231d8,   0x231e0,   0x231e8,   
 # 0x231f0,   0x231f8,   0x23200,   0x23238,   0x23240,   
 # 0x23250,   0x23258,   0x23260,   0x23280,   0x23288,   
 # 0x23290,   0x23298,   0x232a0,   0x232c0,   0x232c8,   
 # 0x232e0,   0x232e8,   0x232f0,   0x232f8,   0x23300,   
 # 0x233c8,   0x233e0,   0x23fe0,   0x240e0,   0x240f0,   
 # 0x240f8,   0x24100,   0x24140,   0x241a0,   0x241f8,   
 # 0x24200,   0x24208,   0x24210,   0x24214,   0x24218,   
 # 0x24220,   0x24230,   0x24240,   0x24250,   0x24260,   
 # 0x24270,   0x24280,   0x24290,   0x242a0,   0x242a1,   
 # 0x242a8,   0x242b0,   0x242b8,   0x242c0,   0x242c8,   
 # 0x242d0,   0x242d8,   0x242e0,   0x242e8,   0x242f0,   
 # 0x242f4,   0x242f5,   0x242f6,   0x242f8,   0x242fc,   
 # 0x242fd,   0x24300,   0x24308,   0x24310,   0x24311,   
 # 0x24312,   0x24314,   0x24318,   0x2431c,   0x24320,   
 # 0x24328,   0x2432c,   0x2432d,   0x2432e,   0x2432f,   
 # 0x24330,   0x24334,   0x24338,   0x2433c,   0x24340,   
 # 0x24344,   0x24348,   0x2434c,   0x24350,   0x24354,   
 # 0x24358,   0x2435c,   0x24360,   0x24364,   0x24365,   
 # 0x24370,   0x24378,   0x24380,   0x24388,   0x24390,   
 # 0x24398,   0x243a0,   0x243a8,   0x243a9,   0x243b0,   
 # 0x243b8,   0x243c0,   0x243c8,   0x243d0,   0x243d8,   
 # 0x243e0,   0x243e8,   0x243f0,   0x243f8,   0x24400,   
 # 0x24420,   0x24520,   0x24530,   0x24540,   0x24550,   
 # 
#----------------
# jumpTables 
#----------------
# 
#----------------
# exceptFuncs 
#----------------
# 0x4020,   0x46d0,   0x4700,   0x4da0,   0x4da5,   
 # 0x4daa,   0x4daf,   0x4db4,   0x4db9,   0x4dbe,   
 # 0x4dc3,   0x4dc8,   0x4dcd,   0x4dd2,   0x4dd7,   
 # 0x4ddc,   0x4de1,   0x4de6,   0x4deb,   0x4df0,   
 # 0x67d0,   0x68c0,   0x68d0,   0x68f0,   0x6910,   
 # 0x6b30,   0x6b40,   0x6bb0,   0x6c30,   0x6e80,   
 # 0x6ef0,   0x6f00,   0x6f20,   0x6f70,   0x7020,   
 # 0x70a0,   0x7180,   0x7310,   0x7340,   0x7350,   
 # 0x7360,   0x7380,   0x7390,   0x7520,   0x75f0,   
 # 0x76c0,   0x7780,   0x77d0,   0x77f0,   0x7860,   
 # 0x78a0,   0x7900,   0x7960,   0x79d0,   0x7a40,   
 # 0x7b30,   0x7b80,   0x7c00,   0x7c70,   0x7cd0,   
 # 0x7dc0,   0x7f90,   0x7ff0,   0x8060,   0x8090,   
 # 0x8170,   0x81e0,   0x8650,   0x8a60,   0x8eb0,   
 # 0x9050,   0x9ab0,   0x9b50,   0x9d00,   0x9fe0,   
 # 0xa1a0,   0xa530,   0xa5b0,   0xa5f0,   0xa670,   
 # 0xa6f0,   0xa770,   0xa7b0,   0xa7f0,   0xa880,   
 # 0xa900,   0xa9d0,   0xb8c0,   0xbfc0,   0xc010,   
 # 0xc060,   0xc0b0,   0xc0f0,   0xc140,   0xc180,   
 # 0xc210,   0xc290,   0xc320,   0xc3b0,   0xc450,   
 # 0xc4d0,   0xc510,   0xc560,   0xc5b0,   0xc600,   
 # 0xc640,   0xc690,   0xc720,   0xc7b0,   0xc850,   
 # 0xc8c0,   0xc930,   0xc9f0,   0xcab0,   0xcb30,   
 # 0xcbb0,   0xcca0,   0xd3e0,   0xd4d0,   0xd4e0,   
 # 0xd5f0,   0xd680,   0xd7b0,   0xd830,   0xd890,   
 # 0xd900,   0xdfc0,   0xdfd0,   0xdfe0,   0xe090,   
 # 0xe0d0,   0xe140,   0xe1a0,   0xe1d0,   0xe290,   
 # 0xe320,   0xe380,   0xe500,   0xe510,   0xe530,   
 # 0xe630,   0xe6e0,   0xeae0,   0xeb50,   0xeba0,   
 # 0xebc0,   0xebd0,   0xec00,   0xed00,   0xed80,   
 # 0xeeb0,   0xf000,   0xf010,   0xf020,   0xf030,   
 # 0xf090,   0xf100,   0xf260,   0xf2c0,   0xf310,   
 # 0xf380,   0xf3d0,   0xf450,   0xf490,   0xf4c0,   
 # 0xf5d0,   0xf680,   0xf770,   0xf900,   0xfba0,   
 # 0xfc00,   0xfe00,   0xfe30,   0xfe50,   0xfe80,   
 # 0xfec0,   0xfee0,   0xffa0,   0x109e0,   0x10bc0,   
 # 0x10c60,   0x10d70,   0x10e10,   0x10f20,   0x10fc0,   
 # 0x11020,   0x11400,   0x114b0,   0x116d0,   0x11700,   
 # 0x11940,   0x11950,   0x119a0,   0x119f0,   0x13280,   
 # 0x132d0,   0x13390,   0x13470,   0x146c0,   0x14860,   
 # 0x148a0,   0x148c0,   0x148e0,   0x14920,   0x14940,   
 # 0x14980,   0x14a00,   0x14af0,   0x14b00,   0x14ba0,   
 # 0x14bc0,   0x14bd0,   0x14bf0,   0x14c10,   0x14cb0,   
 # 0x14d40,   0x14d50,   0x14d70,   0x14e10,   0x14e30,   
 # 0x14e50,   0x14e60,   0x14f00,   0x14fa0,   0x14fb0,   
 # 0x14fd0,   0x14ff0,   0x15000,   0x15020,   0x15040,   
 # 0x15060,   0x15190,   0x15230,   0x15250,   0x156a0,   
 # 0x156c0,   0x15750,   0x15830,   0x158c0,   0x158e0,   
 # 0x15910,   0x15920,   0x15960,   0x15990,   0x15a20,   
 # 0x15a80,   0x15aa0,   0x15ae0,   0x15b10,   0x15b30,   
 # 0x15b70,   0x15c70,   0x15ca0,   0x15cd0,   0x15db0,   
 # 0x16270,   0x16340,   0x16800,   0x16870,   0x16890,   
 # 0x168b0,   0x168d0,   0x16960,   0x169b0,   0x169d0,   
 # 0x169f0,   0x16a80,   0x16aa0,   0x16ac0,   0x16bb0,   
 # 0x16bf0,   0x16c60,   0x16c90,   0x16cc0,   0x16cf0,   
 # 0x16d50,   0x16df0,   0x16f50,   0x17010,   0x17030,   
 # 0x170e0,   0x17230,   0x17270,   0x172e0,   0x17300,   
 # 0x17340,   0x17380,   0x17410,   0x17460,   0x174e0,   
 # 0x17550,   0x17560,   
# jumpTables details

#Code ranges
#   0x00004000 --> 0x0000401a
#   0x00004020 --> 0x00017571
#   0x00017574 --> 0x00017580
